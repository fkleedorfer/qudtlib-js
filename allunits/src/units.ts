import { Decimal } from "decimal.js";
import { config, QudtlibConfig, Unit, QuantityKind, Prefix, LangString, FactorUnit, Qudt } from "@qudtlib/core";

export * from "@qudtlib/core";
// Units
function addUnit0(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/1000000I", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("1000000I", undefined));
    config.units.set("http://qudt.org/vocab/unit/1000000I", unit);
}
function addUnit1(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/1000I", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("1000I", undefined));
    config.units.set("http://qudt.org/vocab/unit/1000I", unit);
}
function addUnit2(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "A", undefined);
    unit.addLabel(new LangString("Ampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DisplacementCurrent");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentPhasor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagnetomotiveForce");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalCurrent");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurrentLinkage");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticTension");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/A", unit);
}
function addUnit3(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, "A h", undefined);
    unit.addLabel(new LangString("Ampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/A-HR", unit);
}
function addUnit4(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Square Metre", "en"));
    unit.addLabel(new LangString("Ampere Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/A-M2", unit);
}
function addUnit5(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-M2-PER-J-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Square Metre Per Joule Second", "en"));
    unit.addLabel(new LangString("Ampere Square Meter Per Joule Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GyromagneticRatio");
    config.units.set("http://qudt.org/vocab/unit/A-M2-PER-J-SEC", unit);
}
function addUnit6(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Per Centimeter", "en-us"));
    unit.addLabel(new LangString("Ampere Per Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A-PER-CentiM", unit);
}
function addUnit7(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("10000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Ampere Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A-PER-CentiM2", unit);
}
function addUnit8(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H-1T0D0", new Decimal("57.2957795"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere per Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitTemperature");
    config.units.set("http://qudt.org/vocab/unit/A-PER-DEG_C", unit);
}
function addUnit9(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-J", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere per Joule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitEnergy");
    config.units.set("http://qudt.org/vocab/unit/A-PER-J", unit);
}
function addUnit10(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere per Metre", "en"));
    unit.addLabel(new LangString("Ampere per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Coercivity");
    config.units.set("http://qudt.org/vocab/unit/A-PER-M", unit);
}
function addUnit11(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere per Square Meter", "en-us"));
    unit.addLabel(new LangString("Ampere per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DisplacementCurrentDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalCurrentDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A-PER-M2", unit);
}
function addUnit12(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-M2-K2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H-2T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere per Square Meter Square Kelvin", "en-us"));
    unit.addLabel(new LangString("Ampere per Square Metre Square Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RichardsonConstant");
    config.units.set("http://qudt.org/vocab/unit/A-PER-M2-K2", unit);
}
function addUnit13(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Per Millimetre", "en"));
    unit.addLabel(new LangString("Ampere Per Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A-PER-MilliM", unit);
}
function addUnit14(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-MilliM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Per Square Millimetre", "en"));
    unit.addLabel(new LangString("Ampere Per Square Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A-PER-MilliM2", unit);
}
function addUnit15(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-PER-RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere per Radian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentPerAngle");
    config.units.set("http://qudt.org/vocab/unit/A-PER-RAD", unit);
}
function addUnit16(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/A-SEC", unit);
}
function addUnit17(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("4046.8564224"), undefined, undefined, undefined, undefined, "acre", undefined);
    unit.addLabel(new LangString("Acre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/AC", unit);
}
function addUnit18(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AC-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1233.4818375475202"), undefined, undefined, undefined, undefined, "ac-ft", undefined);
    unit.addLabel(new LangString("Acre Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/AC-FT", unit);
}
function addUnit19(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AFN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Afghani", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/AFN", unit);
}
function addUnit20(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AMD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Armenian Dram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/AMD", unit);
}
function addUnit21(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AMU", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.66053878283E-27"), undefined, undefined, undefined, undefined, "μ", undefined);
    unit.addLabel(new LangString("Atomic mass unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/AMU", unit);
}
function addUnit22(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ANGSTROM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1E-10"), undefined, undefined, undefined, undefined, "Å", undefined);
    unit.addLabel(new LangString("Angstrom", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/ANGSTROM", unit);
}
function addUnit23(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ANGSTROM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0", new Decimal("1E-40"), undefined, undefined, undefined, undefined, "Ã…^3", undefined);
    unit.addLabel(new LangString("Angstrom^3", "en-us"));
    unit.addLabel(new LangString("Angstrom^3", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Polarizability");
    config.units.set("http://qudt.org/vocab/unit/ANGSTROM3", unit);
}
function addUnit24(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ARCMIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000290888209"), undefined, undefined, undefined, undefined, "'", undefined);
    unit.addLabel(new LangString("ArcMinute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/ARCMIN", unit);
}
function addUnit25(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ARCSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.00000484813681"), undefined, undefined, undefined, undefined, "\"", undefined);
    unit.addLabel(new LangString("ArcSecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/ARCSEC", unit);
}
function addUnit26(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ARE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("100.0"), undefined, undefined, undefined, undefined, "a", undefined);
    unit.addLabel(new LangString("are", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/ARE", unit);
}
function addUnit27(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ARS", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Argentine Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ARS", unit);
}
function addUnit28(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AT", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "At", undefined);
    unit.addLabel(new LangString("Ampere Turn", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagnetomotiveForce");
    config.units.set("http://qudt.org/vocab/unit/AT", unit);
}
function addUnit29(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AT-PER-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("39.3700787"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Turn per Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    config.units.set("http://qudt.org/vocab/unit/AT-PER-IN", unit);
}
function addUnit30(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AT-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ampere Turn per Metre", "en"));
    unit.addLabel(new LangString("Ampere Turn per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    config.units.set("http://qudt.org/vocab/unit/AT-PER-M", unit);
}
function addUnit31(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ATM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("101325.0"), undefined, undefined, undefined, undefined, "atm", undefined);
    unit.addLabel(new LangString("Standard Atmosphere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/ATM", unit);
}
function addUnit32(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ATM-M3-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", new Decimal("101325.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Atmosphere Cubic Meter per Mole", "en"));
    unit.addLabel(new LangString("Atmosphere Cubic Meter per Mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HenrysLawVolatilityConstant");
    config.units.set("http://qudt.org/vocab/unit/ATM-M3-PER-MOL", unit);
}
function addUnit33(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ATM_T", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("98066.5"), undefined, undefined, undefined, undefined, "at", undefined);
    unit.addLabel(new LangString("Technical Atmosphere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/ATM_T", unit);
}
function addUnit34(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AU", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("149597870691.6"), undefined, undefined, undefined, undefined, "AU", undefined);
    unit.addLabel(new LangString("astronomical-unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/AU", unit);
}
function addUnit35(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AUD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Australian Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/AUD", unit);
}
function addUnit36(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AWG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Aruban Guilder", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/AWG", unit);
}
function addUnit37(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AZN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Azerbaijanian Manat", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/AZN", unit);
}
function addUnit38(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("10.0"), undefined, undefined, "http://qudt.org/vocab/unit/A", undefined, "abA", undefined);
    unit.addLabel(new LangString("Abampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/A_Ab", unit);
}
function addUnit39(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A_Ab-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Abampere Square centimetre", "en"));
    unit.addLabel(new LangString("Abampere Square centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/A_Ab-CentiM2", unit);
}
function addUnit40(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A_Ab-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("100000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Abampere per Square Centimetre", "en"));
    unit.addLabel(new LangString("Abampere per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A_Ab-PER-CentiM2", unit);
}
function addUnit41(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A_Reactive", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("A_Reactive", undefined));
    config.units.set("http://qudt.org/vocab/unit/A_Reactive", unit);
}
function addUnit42(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("3.335641E-10"), undefined, undefined, undefined, undefined, "statA", undefined);
    unit.addLabel(new LangString("Statampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/A_Stat", unit);
}
function addUnit43(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/A_Stat-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("0.000003335641"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Statampere per Square Centimetre", "en"));
    unit.addLabel(new LangString("Statampere per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/A_Stat-PER-CentiM2", unit);
}
function addUnit44(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AttoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1E-18"), undefined, "http://qudt.org/vocab/prefix/Atto", "http://qudt.org/vocab/unit/C", undefined, "aC", undefined);
    unit.addLabel(new LangString("AttoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/AttoC", unit);
}
function addUnit45(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AttoFARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("1E-18"), undefined, "http://qudt.org/vocab/prefix/Atto", "http://qudt.org/vocab/unit/FARAD", undefined, undefined, undefined);
    unit.addLabel(new LangString("Attofarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/AttoFARAD", unit);
}
function addUnit46(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AttoJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1E-18"), undefined, "http://qudt.org/vocab/prefix/Atto", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Attojoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/AttoJ", unit);
}
function addUnit47(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/AttoJ-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1E-18"), undefined, undefined, "http://qudt.org/vocab/unit/J-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Attojoule Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Action");
    config.units.set("http://qudt.org/vocab/unit/AttoJ-SEC", unit);
}
function addUnit48(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/B", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "B", undefined);
    unit.addLabel(new LangString("Bel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundExposureLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundPowerLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundPressureLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundReductionIndex");
    config.units.set("http://qudt.org/vocab/unit/B", unit);
}
function addUnit49(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BAN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("2.30258509"), undefined, undefined, undefined, undefined, "ban", undefined);
    unit.addLabel(new LangString("Ban", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/BAN", unit);
}
function addUnit50(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("100000.0"), undefined, undefined, undefined, undefined, "bar", undefined);
    unit.addLabel(new LangString("Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/BAR", unit);
}
function addUnit51(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BAR-L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("100.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bar Liter Per Second", "en-us"));
    unit.addLabel(new LangString("Bar Litre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/BAR-L-PER-SEC", unit);
}
function addUnit52(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BAR-M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("100.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bar Cubic Meter Per Second", "en-us"));
    unit.addLabel(new LangString("Bar Cubic Metre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/BAR-M3-PER-SEC", unit);
}
function addUnit53(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BAR-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bar Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/BAR-PER-BAR", unit);
}
function addUnit54(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BAR-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("100000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bar Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureCoefficient");
    config.units.set("http://qudt.org/vocab/unit/BAR-PER-K", unit);
}
function addUnit55(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/BARAD", unit);
}
function addUnit56(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BARN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.018"), undefined, undefined, undefined, undefined, "b", undefined);
    unit.addLabel(new LangString("Barn", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/BARN", unit);
}
function addUnit57(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BARYE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, "ρ", undefined);
    unit.addLabel(new LangString("Barye", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/BARYE", unit);
}
function addUnit58(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barbados Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BBD", unit);
}
function addUnit59(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, "bbl", undefined);
    unit.addLabel(new LangString("Barrel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/BBL", unit);
}
function addUnit60(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_UK_PET", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.1591132"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (UK Petroleum)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET", unit);
}
function addUnit61(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000001841587"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (UK Petroleum) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-DAY", unit);
}
function addUnit62(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0000441981"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (UK Petroleum) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-HR", unit);
}
function addUnit63(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.002651886"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (UK Petroleum) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-MIN", unit);
}
function addUnit64(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.1591132"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (UK Petroleum) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-SEC", unit);
}
function addUnit65(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.1589873"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/BBL_US", unit);
}
function addUnit66(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00000184"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (US) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_US-PER-DAY", unit);
}
function addUnit67(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0026498"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (US) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_US-PER-MIN", unit);
}
function addUnit68(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US_DRY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.1156281989625"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dry Barrel (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/BBL_US_DRY", unit);
}
function addUnit69(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US_PET", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BBL_US_PET", undefined));
    config.units.set("http://qudt.org/vocab/unit/BBL_US_PET", unit);
}
function addUnit70(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US_PET-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000044163"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (US Petroleum) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_US_PET-PER-HR", unit);
}
function addUnit71(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BBL_US_PET-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.1589873"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Barrel (US Petroleum) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BBL_US_PET-PER-SEC", unit);
}
function addUnit72(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BDT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bangladeshi Taka", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BDT", unit);
}
function addUnit73(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BEAT", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BEAT", undefined));
    config.units.set("http://qudt.org/vocab/unit/BEAT", unit);
}
function addUnit74(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BEAT-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, "beats-per-min", undefined);
    unit.addLabel(new LangString("Heart Beats per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeartRate");
    config.units.set("http://qudt.org/vocab/unit/BEAT-PER-MIN", unit);
}
function addUnit75(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BFT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Beaufort", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    config.units.set("http://qudt.org/vocab/unit/BFT", unit);
}
function addUnit76(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BHD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bahraini Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BHD", unit);
}
function addUnit77(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BIOT", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("10.0"), undefined, undefined, undefined, undefined, "Bi", undefined);
    unit.addLabel(new LangString("Biot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/BIOT", unit);
}
function addUnit78(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BIT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.69314718055994530941723212145818"), undefined, undefined, undefined, undefined, "bit", undefined);
    unit.addLabel(new LangString("Bit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/BIT", unit);
}
function addUnit79(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BIT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.69314718055994530941723212145818"), undefined, undefined, undefined, undefined, "bit/s", undefined);
    unit.addLabel(new LangString("Bit per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
    config.units.set("http://qudt.org/vocab/unit/BIT-PER-SEC", unit);
}
function addUnit80(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Bq", undefined);
    unit.addLabel(new LangString("Becquerel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/BQ", unit);
}
function addUnit81(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BQ-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Becquerel per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificActivity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassicActivity");
    config.units.set("http://qudt.org/vocab/unit/BQ-PER-KiloGM", unit);
}
function addUnit82(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BQ-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Becquerels per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivityConcentration");
    config.units.set("http://qudt.org/vocab/unit/BQ-PER-L", unit);
}
function addUnit83(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BQ-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Becquerel per Square Meter", "en-us"));
    unit.addLabel(new LangString("Becquerel per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceActivityDensity");
    config.units.set("http://qudt.org/vocab/unit/BQ-PER-M2", unit);
}
function addUnit84(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BQ-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Becquerel per Cubic Metre", "en"));
    unit.addLabel(new LangString("Becquerel per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivityConcentration");
    config.units.set("http://qudt.org/vocab/unit/BQ-PER-M3", unit);
}
function addUnit85(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BQ-SEC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Becquerels second per cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsoluteActivity");
    config.units.set("http://qudt.org/vocab/unit/BQ-SEC-PER-M3", unit);
}
function addUnit86(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BREATH", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BREATH", undefined));
    config.units.set("http://qudt.org/vocab/unit/BREATH", unit);
}
function addUnit87(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BREATH-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Breath per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RespiratoryRate");
    config.units.set("http://qudt.org/vocab/unit/BREATH-PER-MIN", unit);
}
function addUnit88(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BSD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bahamian Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BSD", unit);
}
function addUnit89(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1055.05585262"), undefined, undefined, undefined, undefined, "Btu_{it}", undefined);
    unit.addLabel(new LangString("British Thermal Unit (International Definition)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT", unit);
}
function addUnit90(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0", new Decimal("321.581024"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergyLength");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-FT", unit);
}
function addUnit91(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-FT-PER-FT2-HR-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("1.730734666"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU (IT) Foot per Square Foot Hour Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-FT-PER-FT2-HR-DEG_F", unit);
}
function addUnit92(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0", new Decimal("26.7984187"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergyLength");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-IN", unit);
}
function addUnit93(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-HR-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("0.144227889"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Inch Per Hour Square Foot Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-HR-DEG_F", unit);
}
function addUnit94(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-SEC-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("519.220399911"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU (IT) Inch per Square Foot Second Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-SEC-DEG_F", unit);
}
function addUnit95(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-HR-FT2-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("0.1442279"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Inch Per Hour Square Foot degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-IN-PER-HR-FT2-DEG_F", unit);
}
function addUnit96(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-SEC-FT2-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("519.2204"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Inch Per Second Square Foot degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-IN-PER-SEC-FT2-DEG_F", unit);
}
function addUnit97(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", new Decimal("1899.100535"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU (IT) per Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_F", unit);
}
function addUnit98(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", new Decimal("1899.100535"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_R", unit);
}
function addUnit99(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("11356.5267"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT2", unit);
}
function addUnit100(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-HR-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Square Foot Hour Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-HR-DEG_F", unit);
}
function addUnit101(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-SEC-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Square Foot Second Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-SEC-DEG_F", unit);
}
function addUnit102(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-FT3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("37258.94579"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (IT) Per Cubic Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT3", unit);
}
function addUnit103(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.29307107"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-HR", unit);
}
function addUnit104(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("3.15459075"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Hour Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2", unit);
}
function addUnit105(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", new Decimal("0.555556"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Hour Square Foot degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2-DEG_R", unit);
}
function addUnit106(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("2326.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU-IT-PER-lb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB", unit);
}
function addUnit107(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Pound Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_F", unit);
}
function addUnit108(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Pound Degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_R", unit);
}
function addUnit109(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Pound Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerMassAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB-MOL", unit);
}
function addUnit110(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("237.18597062376833"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Pound of Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F", unit);
}
function addUnit111(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("4186.8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Pound Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_F", unit);
}
function addUnit112(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("426.9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Pound Degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_R", unit);
}
function addUnit113(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("17.58"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-MIN", unit);
}
function addUnit114(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-MOL-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Pound Mole Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-MOL-DEG_F", unit);
}
function addUnit115(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1055.05585262"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC", unit);
}
function addUnit116(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("178.66"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Second Foot Degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT-DEG_R", unit);
}
function addUnit117(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("11356.5267"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU per Second Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2", unit);
}
function addUnit118(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", new Decimal("14.89"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (international Table) Per Second Square Foot degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2-DEG_R", unit);
}
function addUnit119(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_MEAN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1055.05585262"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (mean)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/BTU_MEAN", unit);
}
function addUnit120(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1054.3502645"), undefined, undefined, undefined, undefined, "Btu_{th}", undefined);
    unit.addLabel(new LangString("British Thermal Unit (Thermochemical Definition)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH", unit);
}
function addUnit121(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-FT-PER-FT2-HR-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("1.729577206"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU (TH) Foot per Square Foot Hour Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-FT-PER-FT2-HR-DEG_F", unit);
}
function addUnit122(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-FT-PER-HR-FT2-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("1.73"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (thermochemical) Foot Per Hour Square Foot degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-FT-PER-HR-FT2-DEG_F", unit);
}
function addUnit123(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-HR-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("0.144131434"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU (TH) Inch per Square Foot Hour Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-HR-DEG_F", unit);
}
function addUnit124(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-SEC-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("518.8732"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BTU (TH) Inch per Square Foot Second Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-SEC-DEG_F", unit);
}
function addUnit125(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-PER-FT3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("37234.03"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (TH) Per Cubic Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-FT3", unit);
}
function addUnit126(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.2929"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (thermochemical) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-HR", unit);
}
function addUnit127(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-PER-LB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("2324.443861"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (TH) Per Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-LB", unit);
}
function addUnit128(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-PER-LB-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("426.654"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (thermochemical) Per Pound Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-LB-DEG_F", unit);
}
function addUnit129(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("17.573"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (thermochemical) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-MIN", unit);
}
function addUnit130(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BTU_TH-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1054.35"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("British Thermal Unit (thermochemical) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-SEC", unit);
}
function addUnit131(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.03636872"), undefined, undefined, undefined, undefined, "bui", undefined);
    unit.addLabel(new LangString("bushel (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/BU_UK", unit);
}
function addUnit132(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("4.209343E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (UK) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-DAY", unit);
}
function addUnit133(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001010242"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (UK) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-HR", unit);
}
function addUnit134(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0006061453"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (UK) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-MIN", unit);
}
function addUnit135(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.03636872"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (UK) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-SEC", unit);
}
function addUnit136(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.03523907"), undefined, undefined, undefined, undefined, "bua", undefined);
    unit.addLabel(new LangString("bushel (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/BU_US", unit);
}
function addUnit137(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_US_DRY", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("BU_US_DRY", undefined));
    config.units.set("http://qudt.org/vocab/unit/BU_US_DRY", unit);
}
function addUnit138(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_US_DRY-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("4.0786E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (US Dry) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-DAY", unit);
}
function addUnit139(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_US_DRY-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000009789"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (US Dry) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-HR", unit);
}
function addUnit140(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_US_DRY-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00058732"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (US Dry) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-MIN", unit);
}
function addUnit141(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BU_US_DRY-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.03523907"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bushel (US Dry) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-SEC", unit);
}
function addUnit142(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BYR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Belarussian Ruble", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BYR", unit);
}
function addUnit143(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5.5451774444795624753378569716654"), undefined, undefined, "http://qudt.org/vocab/unit/BIT", undefined, "B", undefined);
    unit.addLabel(new LangString("Byte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/BYTE", unit);
}
function addUnit144(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BelizeDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Belize Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BelizeDollar", unit);
}
function addUnit145(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BermudaDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bermuda Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BermudaDollar", unit);
}
function addUnit146(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BolivianMvdol", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bolivian Mvdol (Funds code)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BolivianMvdol", unit);
}
function addUnit147(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Boliviano", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Boliviano", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Boliviano", unit);
}
function addUnit148(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BrazilianReal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Brazilian Real", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BrazilianReal", unit);
}
function addUnit149(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BruneiDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Brunei Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BruneiDollar", unit);
}
function addUnit150(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BulgarianLev", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Bulgarian Lev", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BulgarianLev", unit);
}
function addUnit151(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/BurundianFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Burundian Franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/BurundianFranc", unit);
}
function addUnit152(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "C", undefined);
    unit.addLabel(new LangString("Coulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElementaryCharge");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/C", unit);
}
function addUnit153(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L1I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "C m", undefined);
    unit.addLabel(new LangString("Coulomb Metre", "en"));
    unit.addLabel(new LangString("Coulomb Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/C-M", unit);
}
function addUnit154(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Square Metre", "en"));
    unit.addLabel(new LangString("Coulomb Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricQuadrupoleMoment");
    config.units.set("http://qudt.org/vocab/unit/C-M2", unit);
}
function addUnit155(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-M2-PER-V", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Square Metre Per Volt", "en"));
    unit.addLabel(new LangString("Coulomb Square Meter Per Volt", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Polarizability");
    config.units.set("http://qudt.org/vocab/unit/C-M2-PER-V", unit);
}
function addUnit156(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("10000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Per Square Centimeter", "en-us"));
    unit.addLabel(new LangString("Coulomb Per Square Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/C-PER-CentiM2", unit);
}
function addUnit157(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Per Cubic Centimetre", "en"));
    unit.addLabel(new LangString("Coulomb Per Cubic Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity");
    config.units.set("http://qudt.org/vocab/unit/C-PER-CentiM3", unit);
}
function addUnit158(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/C-PER-KiloGM", unit);
}
function addUnit159(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-KiloGM-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Per Kilogram Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExposureRate");
    config.units.set("http://qudt.org/vocab/unit/C-PER-KiloGM-SEC", unit);
}
function addUnit160(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb per Metre", "en"));
    unit.addLabel(new LangString("Coulomb per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeLineDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeLinearDensity");
    config.units.set("http://qudt.org/vocab/unit/C-PER-M", unit);
}
function addUnit161(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb per Square Metre", "en"));
    unit.addLabel(new LangString("Coulomb per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeSurfaceDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricPolarization");
    config.units.set("http://qudt.org/vocab/unit/C-PER-M2", unit);
}
function addUnit162(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb per Cubic Metre", "en"));
    unit.addLabel(new LangString("Coulomb per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeDensity");
    config.units.set("http://qudt.org/vocab/unit/C-PER-M3", unit);
}
function addUnit163(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E1L0I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/C-PER-MOL", unit);
}
function addUnit164(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-MilliM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Per Square Millimeter", "en-us"));
    unit.addLabel(new LangString("Coulomb Per Square Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/C-PER-MilliM2", unit);
}
function addUnit165(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C-PER-MilliM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Coulomb Per Cubic Millimeter", "en-us"));
    unit.addLabel(new LangString("Coulomb Per Cubic Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity");
    config.units.set("http://qudt.org/vocab/unit/C-PER-MilliM3", unit);
}
function addUnit166(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C2-M-PER-J", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Coulomb Meter per Joule", "en-us"));
    unit.addLabel(new LangString("Square Coulomb Metre per Joule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Polarizability");
    config.units.set("http://qudt.org/vocab/unit/C2-M-PER-J", unit);
}
function addUnit167(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C3-M-PER-J2", undefined, "http://qudt.org/vocab/dimensionvector/A0E3L-1I0M-2H0T7D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Coulomb Metre per Square Joule", "en"));
    unit.addLabel(new LangString("Cubic Coulomb Meter per Square Joule", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CubicElectricDipoleMomentPerSquareEnergy");
    config.units.set("http://qudt.org/vocab/unit/C3-M-PER-J2", unit);
}
function addUnit168(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C4-M4-PER-J3", undefined, "http://qudt.org/vocab/dimensionvector/A0E4L-2I0M-3H0T10D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quartic Coulomb Metre per Cubic Energy", "en"));
    unit.addLabel(new LangString("Quartic Coulomb Meter per Cubic Energy", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/QuarticElectricDipoleMomentPerCubicEnergy");
    config.units.set("http://qudt.org/vocab/unit/C4-M4-PER-J3", unit);
}
function addUnit169(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Canadian Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CAD", unit);
}
function addUnit170(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_15_DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4.1855"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (15 Degrees C)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_15_DEG_C", unit);
}
function addUnit171(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4.1868"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("International Table calorie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_IT", unit);
}
function addUnit172(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_IT-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("4186.8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (international Table) Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-GM", unit);
}
function addUnit173(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_IT-PER-GM-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("4186.8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (international Table) Per Gram Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-GM-DEG_C", unit);
}
function addUnit174(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_IT-PER-GM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("4186.8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (international Table) Per Gram Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-GM-K", unit);
}
function addUnit175(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("418.68"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (international Table) Per Second Centimetre Kelvin", "en"));
    unit.addLabel(new LangString("Calorie (international Table) Per Second Centimeter Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM-K", unit);
}
function addUnit176(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM2-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", new Decimal("41868.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (international Table) Per Second Square Centimetre kelvin", "en"));
    unit.addLabel(new LangString("Calorie (international Table) Per Second Square Centimeter kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM2-K", unit);
}
function addUnit177(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_MEAN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4.19"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (mean)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_MEAN", unit);
}
function addUnit178(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4.184"), undefined, undefined, undefined, undefined, "cal_{th}", undefined);
    unit.addLabel(new LangString("Thermochemical Calorie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH", unit);
}
function addUnit179(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-CentiM-SEC-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("418.4"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Centimetre Second Degree Celsius", "en"));
    unit.addLabel(new LangString("Calorie (thermochemical) Per Centimeter Second Degree Celsius", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-CentiM-SEC-DEG_C", unit);
}
function addUnit180(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-G", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("4184.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("calorie (thermochemical) per gram (calTH/g)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-G", unit);
}
function addUnit181(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("4184.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-GM", unit);
}
function addUnit182(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-GM-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("4184.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Gram Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-GM-DEG_C", unit);
}
function addUnit183(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-GM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("4184.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Gram Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-GM-K", unit);
}
function addUnit184(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.06973"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-MIN", unit);
}
function addUnit185(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("4.184"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-SEC", unit);
}
function addUnit186(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("418.4"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Second Centimetre Kelvin", "en"));
    unit.addLabel(new LangString("Calorie (thermochemical) Per Second Centimeter Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM-K", unit);
}
function addUnit187(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM2-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", new Decimal("41840.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie (thermochemical) Per Second Square Centimeter kelvin", "en-us"));
    unit.addLabel(new LangString("Calorie (thermochemical) Per Second Square Centimetre kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM2-K", unit);
}
function addUnit188(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CARAT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.0002"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Carat", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/CARAT", unit);
}
function addUnit189(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CASES", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("CASES", undefined));
    config.units.set("http://qudt.org/vocab/unit/CASES", unit);
}
function addUnit190(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CASES-PER-1000I-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cases per 1000 individuals per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Incidence");
    config.units.set("http://qudt.org/vocab/unit/CASES-PER-1000I-YR", unit);
}
function addUnit191(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "cd", undefined);
    unit.addLabel(new LangString("Candela", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousIntensity");
    config.units.set("http://qudt.org/vocab/unit/CD", unit);
}
function addUnit192(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CD-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("1550.0031000062002"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Candela per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
    config.units.set("http://qudt.org/vocab/unit/CD-PER-IN2", unit);
}
function addUnit193(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CD-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("candela per square metre", "en"));
    unit.addLabel(new LangString("candela per square meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
    config.units.set("http://qudt.org/vocab/unit/CD-PER-M2", unit);
}
function addUnit194(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CFU", undefined, undefined, undefined, undefined, undefined, undefined, undefined, "CFU", undefined);
    unit.addLabel(new LangString("Colony Forming Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MicrobialFormation");
    config.units.set("http://qudt.org/vocab/unit/CFU", unit);
}
function addUnit195(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("20.1168"), undefined, undefined, undefined, undefined, "ch", undefined);
    unit.addLabel(new LangString("chain", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/CH", unit);
}
function addUnit196(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CLO", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", new Decimal("0.155"), undefined, undefined, undefined, undefined, "clo", undefined);
    unit.addLabel(new LangString("Clo", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalInsulance");
    config.units.set("http://qudt.org/vocab/unit/CLO", unit);
}
function addUnit197(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CM_H2O", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, "cmH2O", undefined);
    unit.addLabel(new LangString("Centimetre of Water", "en"));
    unit.addLabel(new LangString("Centimeter of Water", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/CM_H2O", unit);
}
function addUnit198(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CORD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("3.62"), undefined, undefined, undefined, undefined, "C", undefined);
    unit.addLabel(new LangString("Cord", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/CORD", unit);
}
function addUnit199(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "cd", undefined);
    unit.addLabel(new LangString("Candlepower", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousIntensity");
    config.units.set("http://qudt.org/vocab/unit/CP", unit);
}
function addUnit200(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CUP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00023658825"), undefined, undefined, undefined, undefined, "cup", undefined);
    unit.addLabel(new LangString("US Liquid Cup", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/CUP", unit);
}
function addUnit201(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CUP_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0002365882"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cup (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/CUP_US", unit);
}
function addUnit202(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CWT_LONG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("50.80235"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Long Hundred Weight", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/CWT_LONG", unit);
}
function addUnit203(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CWT_SHORT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("45.359237"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hundred Weight - Short", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/CWT_SHORT", unit);
}
function addUnit204(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("10.0"), undefined, undefined, undefined, undefined, "abC", undefined);
    unit.addLabel(new LangString("Abcoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/C_Ab", unit);
}
function addUnit205(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C_Ab-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("100000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Abcoulomb per Square Centimetre", "en"));
    unit.addLabel(new LangString("Abcoulomb per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/C_Ab-PER-CentiM2", unit);
}
function addUnit206(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("3.3356409519815204957557671447492E-10"), undefined, undefined, undefined, undefined, "statC", undefined);
    unit.addLabel(new LangString("Statcoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/C_Stat", unit);
}
function addUnit207(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C_Stat-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("0.00000333564"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Statcoulomb per Square Centimetre", "en"));
    unit.addLabel(new LangString("Statcoulomb per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/C_Stat-PER-CentiM2", unit);
}
function addUnit208(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/C_Stat-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E1L0I0M0H0T1D0", new Decimal("3.33564E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Statcoulomb per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/C_Stat-PER-MOL", unit);
}
function addUnit209(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CapeVerdeEscudo", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cape Verde Escudo", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CapeVerdeEscudo", unit);
}
function addUnit210(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CaymanIslandsDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cayman Islands Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CaymanIslandsDollar", unit);
}
function addUnit211(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Cedi", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cedi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Cedi", unit);
}
function addUnit212(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/BAR", undefined, "cbar", undefined);
    unit.addLabel(new LangString("Centibar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/CentiBAR", unit);
}
function addUnit213(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("0.01"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/C", undefined, "cC", undefined);
    unit.addLabel(new LangString("CentiCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/CentiC", unit);
}
function addUnit214(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.00001"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centigram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/CentiGM", unit);
}
function addUnit215(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00001"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centilitre", "en-us"));
    unit.addLabel(new LangString("Centilitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/CentiL", unit);
}
function addUnit216(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.01"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/M", undefined, "cm", undefined);
    unit.addLabel(new LangString("Centimeter", "en-us"));
    unit.addLabel(new LangString("Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/CentiM", unit);
}
function addUnit217(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.000002777778"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimetre Per Hour", "en"));
    unit.addLabel(new LangString("Centimeter Per Hour", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/CentiM-PER-HR", unit);
}
function addUnit218(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimeter Per Kelvin", "en-us"));
    unit.addLabel(new LangString("Centimetre Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/CentiM-PER-K", unit);
}
function addUnit219(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM-PER-KiloYR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("3.16880878140289E-13"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-YR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimetres per thousand years", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/CentiM-PER-KiloYR", unit);
}
function addUnit220(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("centimeter per second", "en-us"));
    unit.addLabel(new LangString("centimetre per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/CentiM-PER-SEC", unit);
}
function addUnit221(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimeter per Square Second", "en-us"));
    unit.addLabel(new LangString("Centimetre per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/CentiM-PER-SEC2", unit);
}
function addUnit222(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM-SEC-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimetre Second Degree Celsius", "en"));
    unit.addLabel(new LangString("Centimeter Second Degree Celsius", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthTemperatureTime");
    config.units.set("http://qudt.org/vocab/unit/CentiM-SEC-DEG_C", unit);
}
function addUnit223(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.0001"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Centimeter", "en-us"));
    unit.addLabel(new LangString("Square Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/CentiM2", unit);
}
function addUnit224(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM2-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("0.006"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Centimetre Minute", "en"));
    unit.addLabel(new LangString("Square Centimeter Minute", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
    config.units.set("http://qudt.org/vocab/unit/CentiM2-MIN", unit);
}
function addUnit225(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM2-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("100.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square centimetres per cubic centimetre", "en"));
    config.units.set("http://qudt.org/vocab/unit/CentiM2-PER-CentiM3", unit);
}
function addUnit226(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.0001"), undefined, undefined, "http://qudt.org/vocab/unit/M2-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square centimetres per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    config.units.set("http://qudt.org/vocab/unit/CentiM2-PER-SEC", unit);
}
function addUnit227(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Centimetre Second", "en"));
    unit.addLabel(new LangString("Square Centimeter Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
    config.units.set("http://qudt.org/vocab/unit/CentiM2-SEC", unit);
}
function addUnit228(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("cubic centimetre", "en"));
    unit.addLabel(new LangString("cubic centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/CentiM3", unit);
}
function addUnit229(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimetre Per Cubic Centimetre", "en"));
    unit.addLabel(new LangString("Cubic Centimeter Per Cubic Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-CentiM3", unit);
}
function addUnit230(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.157407E-11"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimeter Per Day", "en-us"));
    unit.addLabel(new LangString("Cubic Centimetre Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-DAY", unit);
}
function addUnit231(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("2.777778E-10"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimeter Per Hour", "en-us"));
    unit.addLabel(new LangString("Cubic Centimetre Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-HR", unit);
}
function addUnit232(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimeter Per Kelvin", "en-us"));
    unit.addLabel(new LangString("Cubic Centimetre Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-K", unit);
}
function addUnit233(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimetre Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Cubic Centimeter Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-M3", unit);
}
function addUnit234(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.666667E-8"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimeter Per Minute", "en-us"));
    unit.addLabel(new LangString("Cubic Centimetre Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-MIN", unit);
}
function addUnit235(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimetre Per Mole", "en"));
    unit.addLabel(new LangString("Cubic Centimeter Per Mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarRefractivity");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-MOL", unit);
}
function addUnit236(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimeter per Mole Second", "en-us"));
    unit.addLabel(new LangString("Cubic Centimeter per Mole Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AtmosphericHydroxylationRate");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC", unit);
}
function addUnit237(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Centimeter Per Second", "en-us"));
    unit.addLabel(new LangString("Cubic Centimetre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-SEC", unit);
}
function addUnit238(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("0.010"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("CentiMOL", undefined));
    config.units.set("http://qudt.org/vocab/unit/CentiMOL", unit);
}
function addUnit239(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("0.01"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimole per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolalityOfSolute");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM", unit);
}
function addUnit240(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM_H2O", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("98.0665"), undefined, undefined, undefined, undefined, "cmH2O", undefined);
    unit.addLabel(new LangString("Centimetre of Water", "en"));
    unit.addLabel(new LangString("Centimeter of Water", "en-us"));
    unit.addLabel(new LangString("Conventional Centimetre Of Water", "en"));
    unit.addLabel(new LangString("Conventional Centimeter Of Water", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/CentiM_H2O", unit);
}
function addUnit241(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiM_HG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1333.224"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Centimetre Of Mercury", "en"));
    unit.addLabel(new LangString("Centimeter Of Mercury", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/CentiM_HG", unit);
}
function addUnit242(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.010"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/N", undefined, undefined, undefined);
    unit.addLabel(new LangString("CentiN", undefined));
    config.units.set("http://qudt.org/vocab/unit/CentiN", unit);
}
function addUnit243(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiN-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centinewton Meter", "en-us"));
    unit.addLabel(new LangString("Centinewton Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/CentiN-M", unit);
}
function addUnit244(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiPOISE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/POISE", undefined, "cP", undefined);
    unit.addLabel(new LangString("Centipoise", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/CentiPOISE", unit);
}
function addUnit245(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiPOISE-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1E-8"), undefined, undefined, "http://qudt.org/vocab/unit/POISE-PER-BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Centipoise Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/CentiPOISE-PER-BAR", unit);
}
function addUnit246(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CentiST", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Centi", "http://qudt.org/vocab/unit/ST", undefined, "cSt", undefined);
    unit.addLabel(new LangString("Centistokes", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/KinematicViscosity");
    config.units.set("http://qudt.org/vocab/unit/CentiST", unit);
}
function addUnit247(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ChileanPeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Chilean Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ChileanPeso", unit);
}
function addUnit248(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Ci", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("37000000000.0"), undefined, undefined, undefined, undefined, "Ci", undefined);
    unit.addLabel(new LangString("Curie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/Ci", unit);
}
function addUnit249(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ColombianPeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Colombian Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ColombianPeso", unit);
}
function addUnit250(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ComoroFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Comoro Franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ComoroFranc", unit);
}
function addUnit251(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ConvertibleMark", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Convertible Marks", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ConvertibleMark", unit);
}
function addUnit252(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CordobaOro", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cordoba Oro", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CordobaOro", unit);
}
function addUnit253(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CostaRicanColon", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Costa Rican Colon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CostaRicanColon", unit);
}
function addUnit254(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CroatianKuna", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Croatian Kuna", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CroatianKuna", unit);
}
function addUnit255(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CubanPeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cuban Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CubanPeso", unit);
}
function addUnit256(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CyprusPound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cyprus Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CyprusPound", unit);
}
function addUnit257(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/CzechKoruna", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Czech Koruna", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/CzechKoruna", unit);
}
function addUnit258(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("86400.0"), undefined, undefined, undefined, undefined, "d", undefined);
    unit.addLabel(new LangString("Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BiodegredationHalfLife");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FishBiotransformationHalfLife");
    config.units.set("http://qudt.org/vocab/unit/DAY", unit);
}
function addUnit259(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DAY_Sidereal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined, undefined, undefined, undefined, "d", undefined);
    unit.addLabel(new LangString("Sidereal Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/DAY_Sidereal", unit);
}
function addUnit260(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEATHS", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("DEATHS", undefined));
    config.units.set("http://qudt.org/vocab/unit/DEATHS", unit);
}
function addUnit261(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEATHS-PER-1000000I-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Deaths per Million individuals per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MortalityRate");
    config.units.set("http://qudt.org/vocab/unit/DEATHS-PER-1000000I-YR", unit);
}
function addUnit262(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEATHS-PER-1000I-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Deaths per 1000 individuals per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MortalityRate");
    config.units.set("http://qudt.org/vocab/unit/DEATHS-PER-1000I-YR", unit);
}
function addUnit263(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DECADE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "oct", undefined);
    unit.addLabel(new LangString("Dec", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/DECADE", unit);
}
function addUnit264(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.0174532925"), undefined, undefined, undefined, undefined, "°", undefined);
    unit.addLabel(new LangString("Degree", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/DEG", unit);
}
function addUnit265(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.00000484813681"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/DEG-PER-HR", unit);
}
function addUnit266(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("0.0174532925199433"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degrees per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/DEG-PER-M", unit);
}
function addUnit267(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.000290888209"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/DEG-PER-MIN", unit);
}
function addUnit268(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.0174532925"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/DEG-PER-SEC", unit);
}
function addUnit269(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", new Decimal("0.0174532925"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularAcceleration");
    config.units.set("http://qudt.org/vocab/unit/DEG-PER-SEC2", unit);
}
function addUnit270(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.00030461742"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square degree", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SolidAngle");
    config.units.set("http://qudt.org/vocab/unit/DEG2", unit);
}
function addUnit271(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_API", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree API", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Gravity_API");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_API", unit);
}
function addUnit272(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_BALLING", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Balling", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_BALLING", unit);
}
function addUnit273(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_BAUME", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Baume (origin Scale)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_BAUME", unit);
}
function addUnit274(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_BAUME_US_HEAVY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Baume (US Heavy)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_BAUME_US_HEAVY", unit);
}
function addUnit275(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_BAUME_US_LIGHT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Baume (US Light)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_BAUME_US_LIGHT", unit);
}
function addUnit276(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_BRIX", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Brix", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_BRIX", unit);
}
function addUnit277(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_OECHSLE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Oechsle", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_OECHSLE", unit);
}
function addUnit278(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_PLATO", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Plato", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_PLATO", unit);
}
function addUnit279(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEGREE_TWADDELL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Twaddell", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/DEGREE_TWADDELL", unit);
}
function addUnit280(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", new Decimal("1.0"), new Decimal("273.15"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
    config.units.set("http://qudt.org/vocab/unit/DEG_C", unit);
}
function addUnit281(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius Centimetre", "en"));
    unit.addLabel(new LangString("Degree Celsius Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthTemperature");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-CentiM", unit);
}
function addUnit282(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-KiloGM-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degrees Celsius kilogram per square metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/DEG_C-KiloGM-PER-M2", unit);
}
function addUnit283(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-HR", unit);
}
function addUnit284(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperatureRatio");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-K", unit);
}
function addUnit285(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degrees Celsius per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-M", unit);
}
function addUnit286(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-MIN", unit);
}
function addUnit287(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-SEC", unit);
}
function addUnit288(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", new Decimal("3.16880878140289E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degrees Celsius per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-YR", unit);
}
function addUnit289(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C-WK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0", new Decimal("604800.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Celsius week", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/DEG_C-WK", unit);
}
function addUnit290(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H2T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Degrees Celsius per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/DEG_C2-PER-SEC", unit);
}
function addUnit291(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("DEG_C_GROWING_CEREAL", undefined));
    config.units.set("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL", unit);
}
function addUnit292(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0", new Decimal("8.64E+4"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Growing Degree Days (Cereals)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GrowingDegreeDay_Cereal");
    config.units.set("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL-DAY", unit);
}
function addUnit293(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", new Decimal("0.5555555555555556"), new Decimal("459.669607"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
    config.units.set("http://qudt.org/vocab/unit/DEG_F", unit);
}
function addUnit294(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalResistivity");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-HR", unit);
}
function addUnit295(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", new Decimal("1.89563"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit Hour Square Foot per British Thermal Unit (international Table)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalInsulance");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_IT", unit);
}
function addUnit296(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_TH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", new Decimal("1.8969"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit Hour Square Foot per British Thermal Unit (thermochemical)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalInsulance");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_TH", unit);
}
function addUnit297(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-HR-PER-BTU_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H1T3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit Hour per BTU", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalResistance");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-HR-PER-BTU_IT", unit);
}
function addUnit298(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-HR", unit);
}
function addUnit299(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.5555556"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperatureRatio");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-K", unit);
}
function addUnit300(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-MIN", unit);
}
function addUnit301(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-SEC", unit);
}
function addUnit302(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_F-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Fahrenheit per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-SEC2", unit);
}
function addUnit303(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", new Decimal("0.5555555555555556"), undefined, undefined, undefined, undefined, "°R", undefined);
    unit.addLabel(new LangString("Degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermodynamicTemperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
    config.units.set("http://qudt.org/vocab/unit/DEG_R", unit);
}
function addUnit304(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_R-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, "http://qudt.org/vocab/unit/DEG_R-PER-MIN", undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Rankine per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_R-PER-HR", unit);
}
function addUnit305(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_R-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, "http://qudt.org/vocab/unit/DEG_R-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Rankine per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_R-PER-MIN", unit);
}
function addUnit306(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DEG_R-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degree Rankine per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/DEG_R-PER-SEC", unit);
}
function addUnit307(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DIOPTER", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "D", undefined);
    unit.addLabel(new LangString("Diopter", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Curvature");
    config.units.set("http://qudt.org/vocab/unit/DIOPTER", unit);
}
function addUnit308(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DPI", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("39.37008"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dots Per Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    config.units.set("http://qudt.org/vocab/unit/DPI", unit);
}
function addUnit309(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DRAM_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.0017718451953125"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dram (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DRAM_UK", unit);
}
function addUnit310(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DRAM_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.0038879346"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dram (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DRAM_US", unit);
}
function addUnit311(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DWT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.00155517384"), undefined, undefined, undefined, undefined, "dwt", undefined);
    unit.addLabel(new LangString("Penny Weight", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DWT", unit);
}
function addUnit312(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DYN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.00001"), undefined, undefined, undefined, undefined, "dyn", undefined);
    unit.addLabel(new LangString("Dyne", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/DYN", unit);
}
function addUnit313(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DYN-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dyne Centimeter", "en-us"));
    unit.addLabel(new LangString("Dyne Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/DYN-CentiM", unit);
}
function addUnit314(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DYN-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dyne Per Centimetre", "en"));
    unit.addLabel(new LangString("Dyne Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/DYN-PER-CentiM", unit);
}
function addUnit315(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DYN-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dyne per Square Centimetre", "en"));
    unit.addLabel(new LangString("Dyne per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/DYN-PER-CentiM2", unit);
}
function addUnit316(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dyne Second Per Centimetre", "en"));
    unit.addLabel(new LangString("Dyne Second Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM", unit);
}
function addUnit317(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("10.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dyne Second Per Cubic Centimetre", "en"));
    unit.addLabel(new LangString("Dyne Second Per Cubic Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM3", unit);
}
function addUnit318(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DZD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Algerian Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/DZD", unit);
}
function addUnit319(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Da", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.66053878283E-27"), undefined, undefined, undefined, undefined, "Da", undefined);
    unit.addLabel(new LangString("Dalton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolecularMass");
    config.units.set("http://qudt.org/vocab/unit/Da", unit);
}
function addUnit320(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Dalasi", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dalasi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Dalasi", unit);
}
function addUnit321(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DanishKrone", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Danish Krone", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/DanishKrone", unit);
}
function addUnit322(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Debye", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L1I0M0H0T1D0", new Decimal("3.33564E-30"), undefined, undefined, undefined, undefined, "D", undefined);
    unit.addLabel(new LangString("Debye", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/Debye", unit);
}
function addUnit323(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaARE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/ARE", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/DecaARE", unit);
}
function addUnit324(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("10.0"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/C", undefined, "daC", undefined);
    unit.addLabel(new LangString("DecaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/DecaC", unit);
}
function addUnit325(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.01"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decagram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DecaGM", unit);
}
function addUnit326(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.01"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decalitre", "en"));
    unit.addLabel(new LangString("Decalitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/DecaL", unit);
}
function addUnit327(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("10.0"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decametre", "en"));
    unit.addLabel(new LangString("Decameter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/DecaM", unit);
}
function addUnit328(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decameter", "en-us"));
    unit.addLabel(new LangString("Cubic Decametre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/DecaM3", unit);
}
function addUnit329(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DecaPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("10.0"), undefined, "http://qudt.org/vocab/prefix/Deca", "http://qudt.org/vocab/unit/PA", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decapascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/DecaPA", unit);
}
function addUnit330(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/B", undefined, "dB", undefined);
    unit.addLabel(new LangString("Decibel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundExposureLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundPowerLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundPressureLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundReductionIndex");
    config.units.set("http://qudt.org/vocab/unit/DeciB", unit);
}
function addUnit331(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("10000.0"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/BAR", undefined, "dbar", undefined);
    unit.addLabel(new LangString("Decibar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/DeciBAR", unit);
}
function addUnit332(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciBAR-PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("0.18"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Decibars per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/DeciBAR-PER-YR", unit);
}
function addUnit333(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciB_C", undefined, undefined, undefined, undefined, undefined, undefined, undefined, "dBc", undefined);
    unit.addLabel(new LangString("Decibel Carrier Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SignalDetectionThreshold");
    config.units.set("http://qudt.org/vocab/unit/DeciB_C", unit);
}
function addUnit334(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciB_M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "dBm", undefined);
    unit.addLabel(new LangString("Decibel Referred to 1mw", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/DeciB_M", unit);
}
function addUnit335(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("0.1"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/C", undefined, "dC", undefined);
    unit.addLabel(new LangString("DeciCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/DeciC", unit);
}
function addUnit336(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.0001"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decigram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DeciGM", unit);
}
function addUnit337(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0001"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decilitre", "en"));
    unit.addLabel(new LangString("Decilitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/DeciL", unit);
}
function addUnit338(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciL-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Decilitre Per Gram", "en-us"));
    unit.addLabel(new LangString("Decilitre Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
    config.units.set("http://qudt.org/vocab/unit/DeciL-PER-GM", unit);
}
function addUnit339(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.1"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decimetre", "en"));
    unit.addLabel(new LangString("Decimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/DeciM", unit);
}
function addUnit340(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.01"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Decimetre", "en"));
    unit.addLabel(new LangString("Square Decimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/DeciM2", unit);
}
function addUnit341(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimetre", "en"));
    unit.addLabel(new LangString("Cubic Decimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/DeciM3", unit);
}
function addUnit342(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.157407407E-8"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimetre Per Day", "en"));
    unit.addLabel(new LangString("Cubic Decimeter Per Day", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-DAY", unit);
}
function addUnit343(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("2.777778E-7"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimetre Per Hour", "en"));
    unit.addLabel(new LangString("Cubic Decimeter Per Hour", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-HR", unit);
}
function addUnit344(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimetre Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Cubic Decimeter Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-M3", unit);
}
function addUnit345(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001666667"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimetre Per Minute", "en"));
    unit.addLabel(new LangString("Cubic Decimeter Per Minute", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-MIN", unit);
}
function addUnit346(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimeter Per Mole", "en-us"));
    unit.addLabel(new LangString("Cubic Decimetre Per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarRefractivity");
    config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-MOL", unit);
}
function addUnit347(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciM3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Decimeter Per Second", "en-us"));
    unit.addLabel(new LangString("Cubic Decimetre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-SEC", unit);
}
function addUnit348(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.10"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/N", undefined, undefined, undefined);
    unit.addLabel(new LangString("DeciN", undefined));
    config.units.set("http://qudt.org/vocab/unit/DeciN", unit);
}
function addUnit349(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciN-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.1"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Decinewton Metre", "en"));
    unit.addLabel(new LangString("Decinewton Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/DeciN-M", unit);
}
function addUnit350(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.10"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("DeciS", undefined));
    config.units.set("http://qudt.org/vocab/unit/DeciS", unit);
}
function addUnit351(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.1"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, "ds/m", undefined);
    unit.addLabel(new LangString("decisiemens per metre", "en"));
    unit.addLabel(new LangString("decisiemens per meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/DeciS-PER-M", unit);
}
function addUnit352(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciTONNE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.0E+2"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/TONNE", undefined, undefined, undefined);
    unit.addLabel(new LangString("DeciTonne", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DeciTONNE", unit);
}
function addUnit353(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DeciTON_Metric", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.02"), undefined, "http://qudt.org/vocab/prefix/Deci", "http://qudt.org/vocab/unit/TON_Metric", undefined, undefined, undefined);
    unit.addLabel(new LangString("Metric DeciTON", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/DeciTON_Metric", unit);
}
function addUnit354(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Denar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Denar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Denar", unit);
}
function addUnit355(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Denier", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("1.1E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Denier", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/Denier", unit);
}
function addUnit356(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DjiboutiFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Djibouti Franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/DjiboutiFranc", unit);
}
function addUnit357(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Dobra", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dobra", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Dobra", unit);
}
function addUnit358(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/DominicanPeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Dominican Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/DominicanPeso", unit);
}
function addUnit359(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/E", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("16.02176565"), undefined, undefined, undefined, undefined, "e", undefined);
    unit.addLabel(new LangString("Elementary Charge", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/E", unit);
}
function addUnit360(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1E-7"), undefined, undefined, undefined, undefined, "erg", undefined);
    unit.addLabel(new LangString("Erg", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForceMagnitude");
    config.units.set("http://qudt.org/vocab/unit/ERG", unit);
}
function addUnit361(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.00001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg Per Centimeter", "en-us"));
    unit.addLabel(new LangString("Erg Per Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-CentiM", unit);
}
function addUnit362(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg per Square Centimetre Second", "en"));
    unit.addLabel(new LangString("Erg per Square Centimeter Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC", unit);
}
function addUnit363(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg per Cubic Centimetre", "en"));
    unit.addLabel(new LangString("Erg per Cubic Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-CentiM3", unit);
}
function addUnit364(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-G", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-G", unit);
}
function addUnit365(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-GM", unit);
}
function addUnit366(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-GM-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg Per Gram Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDoseRate");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-GM-SEC", unit);
}
function addUnit367(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Erg per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/ERG-PER-SEC", unit);
}
function addUnit368(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERG-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1E-7"), undefined, undefined, undefined, undefined, "erg s", undefined);
    unit.addLabel(new LangString("Erg Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/ERG-SEC", unit);
}
function addUnit369(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ERLANG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, "E", undefined);
    unit.addLabel(new LangString("Erlang", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/ERLANG", unit);
}
function addUnit370(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.6021765314E-19"), undefined, undefined, undefined, undefined, "eV", undefined);
    unit.addLabel(new LangString("Electron Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/EV", unit);
}
function addUnit371(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EV-PER-ANGSTROM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.602176E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Electronvolt Per Angstrom", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower");
    config.units.set("http://qudt.org/vocab/unit/EV-PER-ANGSTROM", unit);
}
function addUnit372(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EV-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", new Decimal("1.6021765314E-19"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Electron Volt per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/EV-PER-K", unit);
}
function addUnit373(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EV-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.602176E-19"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Electronvolt Per Meter", "en-us"));
    unit.addLabel(new LangString("Electronvolt Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower");
    config.units.set("http://qudt.org/vocab/unit/EV-PER-M", unit);
}
function addUnit374(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EV-PER-T", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", new Decimal("1.6021765314E-19"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Electron Volt per Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/EV-PER-T", unit);
}
function addUnit375(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EV-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1.6021765314E-19"), undefined, undefined, undefined, undefined, "eV s", undefined);
    unit.addLabel(new LangString("Electron Volt Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/EV-SEC", unit);
}
function addUnit376(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/E_h", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4.35974394E-18"), undefined, undefined, undefined, undefined, "E_h", undefined);
    unit.addLabel(new LangString("Hartree", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/E_h", unit);
}
function addUnit377(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EarthMass", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Earth mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/EarthMass", unit);
}
function addUnit378(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EastCaribbeanDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("East Caribbean Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EastCaribbeanDollar", unit);
}
function addUnit379(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EgyptianPound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Egyptian Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EgyptianPound", unit);
}
function addUnit380(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ElementaryCharge", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("16.02176565"), undefined, undefined, undefined, undefined, "e", undefined);
    unit.addLabel(new LangString("Elementary Charge", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/ElementaryCharge", unit);
}
function addUnit381(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EthiopianBirr", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ethiopian Birr", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EthiopianBirr", unit);
}
function addUnit382(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Euro", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Euro", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Euro", unit);
}
function addUnit383(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EuropeanCompositeUnit", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("European Composite Unit (EURCO) (Bonds market unit)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EuropeanCompositeUnit", unit);
}
function addUnit384(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EuropeanMonetaryUnit", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("European Monetary Unit (E.M.U.-6) (Bonds market unit)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EuropeanMonetaryUnit", unit);
}
function addUnit385(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EuropeanUnitOfAccount17", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("European Unit of Account 17 (E.U.A.-17) (Bonds market unit)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EuropeanUnitOfAccount17", unit);
}
function addUnit386(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/EuropeanUnitOfAccount9", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("European Unit of Account 9 (E.U.A.-9) (Bonds market unit)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/EuropeanUnitOfAccount9", unit);
}
function addUnit387(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ExaBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5545177444479562475.3378569716654"), undefined, "http://qudt.org/vocab/prefix/Exa", "http://qudt.org/vocab/unit/BYTE", undefined, "EB", undefined);
    unit.addLabel(new LangString("ExaByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/ExaBYTE", unit);
}
function addUnit388(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ExaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Exa", "http://qudt.org/vocab/unit/C", undefined, "EC", undefined);
    unit.addLabel(new LangString("ExaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/ExaC", unit);
}
function addUnit389(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ExaJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000000000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Exa", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Exajoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/ExaJ", unit);
}
function addUnit390(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ExbiBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("6393154322601327829.8943153498712"), undefined, "http://qudt.org/vocab/prefix/Exbi", "http://qudt.org/vocab/unit/BYTE", undefined, "EiB", undefined);
    unit.addLabel(new LangString("ExbiByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/ExbiBYTE", unit);
}
function addUnit391(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/F", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("96485.3399"), undefined, undefined, undefined, undefined, "F", undefined);
    unit.addLabel(new LangString("Faraday", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/F", unit);
}
function addUnit392(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("12.5663706"), undefined, undefined, undefined, undefined, "fa", undefined);
    unit.addLabel(new LangString("Fractional area", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SolidAngle");
    config.units.set("http://qudt.org/vocab/unit/FA", unit);
}
function addUnit393(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "F", undefined);
    unit.addLabel(new LangString("Farad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/FARAD", unit);
}
function addUnit394(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FARAD-PER-KiloM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/FARAD-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Farad Per Kilometre", "en"));
    unit.addLabel(new LangString("Farad Per Kilometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/FARAD-PER-KiloM", unit);
}
function addUnit395(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FARAD-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Farad per Meter", "en-us"));
    unit.addLabel(new LangString("Farad per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/FARAD-PER-M", unit);
}
function addUnit396(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FARAD_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, "abF", undefined);
    unit.addLabel(new LangString("Abfarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/FARAD_Ab", unit);
}
function addUnit397(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FARAD_Ab-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("100000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Abfarad per Centimeter", "en-us"));
    unit.addLabel(new LangString("Abfarad per Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/FARAD_Ab-PER-CentiM", unit);
}
function addUnit398(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FARAD_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("1.112650056053618432174089964848E-12"), undefined, undefined, undefined, undefined, "statF", undefined);
    unit.addLabel(new LangString("Statfarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/FARAD_Stat", unit);
}
function addUnit399(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FATH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1.8288"), undefined, undefined, undefined, undefined, "fath", undefined);
    unit.addLabel(new LangString("Fathom", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FATH", unit);
}
function addUnit400(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FBM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00236"), undefined, undefined, undefined, undefined, "Bf", undefined);
    unit.addLabel(new LangString("Board Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/FBM", unit);
}
function addUnit401(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", undefined, undefined, undefined, undefined, undefined, "fc", undefined);
    unit.addLabel(new LangString("Foot Candle", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousFluxPerArea");
    config.units.set("http://qudt.org/vocab/unit/FC", unit);
}
function addUnit402(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FLIGHT", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("FLIGHT", undefined));
    config.units.set("http://qudt.org/vocab/unit/FLIGHT", unit);
}
function addUnit403(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1E-15"), undefined, undefined, undefined, undefined, "fm", undefined);
    unit.addLabel(new LangString("fermi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FM", unit);
}
function addUnit404(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FR", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", undefined, undefined, undefined, undefined, undefined, "Fr", undefined);
    unit.addLabel(new LangString("Franklin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/FR", unit);
}
function addUnit405(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FRACTION", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Fraction", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/FRACTION", unit);
}
function addUnit406(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FRAME", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("FRAME", undefined));
    config.units.set("http://qudt.org/vocab/unit/FRAME", unit);
}
function addUnit407(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FRAME-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, "fps", undefined);
    unit.addLabel(new LangString("Frame per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VideoFrameRate");
    config.units.set("http://qudt.org/vocab/unit/FRAME-PER-SEC", unit);
}
function addUnit408(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.3048"), undefined, undefined, undefined, undefined, "ft", undefined);
    unit.addLabel(new LangString("Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FT", unit);
}
function addUnit409(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("3.4262591"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Lambert", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
    config.units.set("http://qudt.org/vocab/unit/FT-LA", unit);
}
function addUnit410(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.35581807"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F", unit);
}
function addUnit411(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("14.5939042"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2", unit);
}
function addUnit412(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("14.5939042"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force per Square Foot Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC", unit);
}
function addUnit413(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.00376616129"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-HR", unit);
}
function addUnit414(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force per Square Metre", "en"));
    unit.addLabel(new LangString("Foot Pound Force per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-M2", unit);
}
function addUnit415(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.0225969678"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-MIN", unit);
}
function addUnit416(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.35581807"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-SEC", unit);
}
function addUnit417(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-LB_F-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Pound Force Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/FT-LB_F-SEC", unit);
}
function addUnit418(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PDL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.0421401100938048"), undefined, undefined, undefined, undefined, "ft-pdl", undefined);
    unit.addLabel(new LangString("Foot Poundal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/FT-PDL", unit);
}
function addUnit419(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.00000352777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/FT-PER-DAY", unit);
}
function addUnit420(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PER-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("0.54864"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Per Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/FT-PER-DEG_F", unit);
}
function addUnit421(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.00008466666666666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/FT-PER-HR", unit);
}
function addUnit422(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.00508"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/FT-PER-MIN", unit);
}
function addUnit423(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.3048"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/FT-PER-SEC", unit);
}
function addUnit424(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.3048"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/FT-PER-SEC2", unit);
}
function addUnit425(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.09290304"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/FT2", unit);
}
function addUnit426(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTemperature");
    config.units.set("http://qudt.org/vocab/unit/FT2-DEG_F", unit);
}
function addUnit427(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-HR-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot Hour Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/FT2-HR-DEG_F", unit);
}
function addUnit428(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-HR-DEG_F-PER-BTU_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot Hour Degree Fahrenheit per BTU", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalInsulance");
    config.units.set("http://qudt.org/vocab/unit/FT2-HR-DEG_F-PER-BTU_IT", unit);
}
function addUnit429(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-PER-BTU_IT-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0", new Decimal("0.00346673589"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot per BTU Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalResistivity");
    config.units.set("http://qudt.org/vocab/unit/FT2-PER-BTU_IT-IN", unit);
}
function addUnit430(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.0000258064"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    config.units.set("http://qudt.org/vocab/unit/FT2-PER-HR", unit);
}
function addUnit431(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.09290304"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    config.units.set("http://qudt.org/vocab/unit/FT2-PER-SEC", unit);
}
function addUnit432(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT2-SEC-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Foot Second Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/FT2-SEC-DEG_F", unit);
}
function addUnit433(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.028316846592"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/FT3", unit);
}
function addUnit434(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("3.277413E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/FT3-PER-DAY", unit);
}
function addUnit435(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3-PER-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", new Decimal("0.05097033"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot Per Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/FT3-PER-DEG_F", unit);
}
function addUnit436(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000007865792"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/FT3-PER-HR", unit);
}
function addUnit437(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0004719474432000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/FT3-PER-MIN", unit);
}
function addUnit438(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3-PER-MIN-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.00508"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot Per Minute Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    config.units.set("http://qudt.org/vocab/unit/FT3-PER-MIN-FT2", unit);
}
function addUnit439(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.028316846592000004"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Foot per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/FT3-PER-SEC", unit);
}
function addUnit440(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT_H2O", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, "ftH2O", undefined);
    unit.addLabel(new LangString("Foot of Water", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/FT_H2O", unit);
}
function addUnit441(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT_HG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("40636.66"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Foot Of Mercury", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/FT_HG", unit);
}
function addUnit442(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FT_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.3048006"), undefined, undefined, undefined, undefined, "ft_us", undefined);
    unit.addLabel(new LangString("US Survey Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FT_US", unit);
}
function addUnit443(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FUR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("201.168"), undefined, undefined, undefined, undefined, "fur", undefined);
    unit.addLabel(new LangString("Furlong", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FUR", unit);
}
function addUnit444(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FUR_Long", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Long Furlong", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FUR_Long", unit);
}
function addUnit445(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FalklandIslandsPound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Falkland Islands Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/FalklandIslandsPound", unit);
}
function addUnit446(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1E-15"), undefined, "http://qudt.org/vocab/prefix/Femto", "http://qudt.org/vocab/unit/C", undefined, "fC", undefined);
    unit.addLabel(new LangString("FemtoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/FemtoC", unit);
}
function addUnit447(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.0E-18"), undefined, "http://qudt.org/vocab/prefix/Femto", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("FemtoGM", undefined));
    config.units.set("http://qudt.org/vocab/unit/FemtoGM", unit);
}
function addUnit448(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.18"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Femtograms per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM", unit);
}
function addUnit449(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoGM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.15"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Femtograms per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/FemtoGM-PER-L", unit);
}
function addUnit450(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1E-15"), undefined, "http://qudt.org/vocab/prefix/Femto", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Femtojoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/FemtoJ", unit);
}
function addUnit451(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1E-18"), undefined, "http://qudt.org/vocab/prefix/Femto", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Femtolitre", "en"));
    unit.addLabel(new LangString("Femtolitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/FemtoL", unit);
}
function addUnit452(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1E-15"), undefined, "http://qudt.org/vocab/prefix/Femto", "http://qudt.org/vocab/unit/M", undefined, "fm", undefined);
    unit.addLabel(new LangString("Femtometre", "en"));
    unit.addLabel(new LangString("Femtometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/FemtoM", unit);
}
function addUnit453(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("1.0E-15"), undefined, "http://qudt.org/vocab/prefix/Femto", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("FemtoMOL", undefined));
    config.units.set("http://qudt.org/vocab/unit/FemtoMOL", unit);
}
function addUnit454(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("0.15"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Femtomoles per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/FemtoMOL-PER-KiloGM", unit);
}
function addUnit455(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FemtoMOL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Femtomoles per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/FemtoMOL-PER-L", unit);
}
function addUnit456(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FijiDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Fiji Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/FijiDollar", unit);
}
function addUnit457(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Flight", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "flight", undefined);
    unit.addLabel(new LangString("Flight", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Flight", unit);
}
function addUnit458(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Forint", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Forint", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Forint", unit);
}
function addUnit459(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/FrancCongolais", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Franc Congolais", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/FrancCongolais", unit);
}
function addUnit460(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/G", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, "G", undefined);
    unit.addLabel(new LangString("Gravity", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/G", unit);
}
function addUnit461(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("GAL", undefined));
    config.units.set("http://qudt.org/vocab/unit/GAL", unit);
}
function addUnit462(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GALILEO", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.01"), undefined, undefined, undefined, undefined, "Gal", undefined);
    unit.addLabel(new LangString("Galileo", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/GALILEO", unit);
}
function addUnit463(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_IMP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00454609"), undefined, undefined, undefined, undefined, "gal", undefined);
    unit.addLabel(new LangString("Imperial Gallon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/GAL_IMP", unit);
}
function addUnit464(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00454609"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/GAL_UK", unit);
}
function addUnit465(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("5.261678E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (UK) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-DAY", unit);
}
function addUnit466(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000001262803"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (UK) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-HR", unit);
}
function addUnit467(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00007576817"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (UK) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-MIN", unit);
}
function addUnit468(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00454609"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (UK) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-SEC", unit);
}
function addUnit469(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.003785412"), undefined, undefined, undefined, undefined, "gal", undefined);
    unit.addLabel(new LangString("US Gallon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/GAL_US", unit);
}
function addUnit470(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("4.38126389E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("US Gallon per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-DAY", unit);
}
function addUnit471(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_US-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000001051503"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (US) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-HR", unit);
}
function addUnit472(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_US-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0000630902"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("US Gallon per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-MIN", unit);
}
function addUnit473(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_US-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.003785412"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gallon (US Liquid) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-SEC", unit);
}
function addUnit474(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAL_US_DRY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00440488377"), undefined, undefined, undefined, undefined, "dry_gal", undefined);
    unit.addLabel(new LangString("Dry Gallon US", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/GAL_US_DRY", unit);
}
function addUnit475(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAUGE_FR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.0003333333"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("French Gauge", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/GAUGE_FR", unit);
}
function addUnit476(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GAUSS", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gauss", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/GAUSS", unit);
}
function addUnit477(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("0.795774715"), undefined, undefined, undefined, undefined, "Gb", undefined);
    unit.addLabel(new LangString("Gilbert", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagnetomotiveForce");
    config.units.set("http://qudt.org/vocab/unit/GI", unit);
}
function addUnit478(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0001420653"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/GI_UK", unit);
}
function addUnit479(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.644274E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (UK) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-DAY", unit);
}
function addUnit480(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("3.946258E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (UK) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-HR", unit);
}
function addUnit481(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000002367755"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (UK) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-MIN", unit);
}
function addUnit482(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0001420653"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (UK) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-SEC", unit);
}
function addUnit483(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.000118294125"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/GI_US", unit);
}
function addUnit484(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.369145E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (US) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_US-PER-DAY", unit);
}
function addUnit485(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_US-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("3.285947E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (US) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_US-PER-HR", unit);
}
function addUnit486(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_US-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000001971568"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (US) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_US-PER-MIN", unit);
}
function addUnit487(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GI_US-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0001182941"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gill (US) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GI_US-PER-SEC", unit);
}
function addUnit488(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, "g", undefined);
    unit.addLabel(new LangString("Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/GM", unit);
}
function addUnit489(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Millimeter", "en-us"));
    unit.addLabel(new LangString("Gram Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
    config.units.set("http://qudt.org/vocab/unit/GM-MilliM", unit);
}
function addUnit490(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("10.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Gram Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-CentiM2", unit);
}
function addUnit491(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-CentiM2-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("3.16880878140289E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Grams per square centimetre per year", "en"));
    config.units.set("http://qudt.org/vocab/unit/GM-PER-CentiM2-YR", unit);
}
function addUnit492(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Cubic Centimeter", "en-us"));
    unit.addLabel(new LangString("Gram Per Cubic Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-CentiM3", unit);
}
function addUnit493(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1.157407E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-DAY", unit);
}
function addUnit494(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-DEG_C", unit);
}
function addUnit495(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-DeciM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Cubic Decimetre", "en"));
    unit.addLabel(new LangString("Gram Per Cubic Decimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-DeciM3", unit);
}
function addUnit496(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-GM", unit);
}
function addUnit497(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("2.777778E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-HR", unit);
}
function addUnit498(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-KiloGM", unit);
}
function addUnit499(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-KiloM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Kilometre", "en"));
    unit.addLabel(new LangString("Gram Per Kilometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-KiloM", unit);
}
function addUnit500(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Litre", "en"));
    unit.addLabel(new LangString("Gram Per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-L", unit);
}
function addUnit501(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Meter", "en-us"));
    unit.addLabel(new LangString("Gram Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-M", unit);
}
function addUnit502(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Square Meter", "en-us"));
    unit.addLabel(new LangString("Gram Per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-M2", unit);
}
function addUnit503(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.1574073E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("grams per square meter per day", "en-us"));
    unit.addLabel(new LangString("grams per square metre per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-M2-DAY", unit);
}
function addUnit504(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Gram Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-M3", unit);
}
function addUnit505(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.00001666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-MIN", unit);
}
function addUnit506(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarMass");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-MOL", unit);
}
function addUnit507(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Millilitre", "en"));
    unit.addLabel(new LangString("Gram Per Millilitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-MilliL", unit);
}
function addUnit508(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Millimetre", "en"));
    unit.addLabel(new LangString("Gram Per Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-MilliM", unit);
}
function addUnit509(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/GM-PER-SEC", unit);
}
function addUnit510(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_Carbon", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("GM_Carbon", undefined));
    config.units.set("http://qudt.org/vocab/unit/GM_Carbon", unit);
}
function addUnit511(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_Carbon-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.1574073E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("grams Carbon per square meter per day", "en-us"));
    unit.addLabel(new LangString("grams Carbon per square metre per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/GM_Carbon-PER-M2-DAY", unit);
}
function addUnit512(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_DRY", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("GM_DRY", undefined));
    config.units.set("http://qudt.org/vocab/unit/GM_DRY", unit);
}
function addUnit513(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_F", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("GM_F", undefined));
    config.units.set("http://qudt.org/vocab/unit/GM_F", unit);
}
function addUnit514(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_F-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("98.0665"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gram Force Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Gram Force Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/GM_F-PER-CentiM2", unit);
}
function addUnit515(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_Nitrogen", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("GM_Nitrogen", undefined));
    config.units.set("http://qudt.org/vocab/unit/GM_Nitrogen", unit);
}
function addUnit516(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GM_Nitrogen-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.1574073E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("grams Nitrogen per square meter per day", "en-us"));
    unit.addLabel(new LangString("grams Nitrogen per square metre per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/GM_Nitrogen-PER-M2-DAY", unit);
}
function addUnit517(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GON", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.015707963267949"), undefined, undefined, undefined, undefined, "gon", undefined);
    unit.addLabel(new LangString("Gon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/GON", unit);
}
function addUnit518(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "gr", undefined);
    unit.addLabel(new LangString("Grade", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/GR", unit);
}
function addUnit519(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GRAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.0157079633"), undefined, undefined, undefined, undefined, "grad", undefined);
    unit.addLabel(new LangString("Grad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/GRAD", unit);
}
function addUnit520(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GRAIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.00006479891"), undefined, undefined, undefined, undefined, "gr", undefined);
    unit.addLabel(new LangString("Grain", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/GRAIN", unit);
}
function addUnit521(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GRAIN-PER-GAL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.017118061"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Grain per Gallon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/GRAIN-PER-GAL", unit);
}
function addUnit522(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GRAIN-PER-GAL_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.01711806"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Grain Per Gallon (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/GRAIN-PER-GAL_US", unit);
}
function addUnit523(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GRAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Gy", undefined);
    unit.addLabel(new LangString("Gray", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Kerma");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
    config.units.set("http://qudt.org/vocab/unit/GRAY", unit);
}
function addUnit524(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GRAY-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gray per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDoseRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/KermaRate");
    config.units.set("http://qudt.org/vocab/unit/GRAY-PER-SEC", unit);
}
function addUnit525(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gross Tonnage", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/GT", unit);
}
function addUnit526(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Gamma", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, "γ", undefined);
    unit.addLabel(new LangString("Gamma", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticField");
    config.units.set("http://qudt.org/vocab/unit/Gamma", unit);
}
function addUnit527(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GibiBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5954088943.6391441429912255610071"), undefined, "http://qudt.org/vocab/prefix/Gibi", "http://qudt.org/vocab/unit/BYTE", undefined, "GiB", undefined);
    unit.addLabel(new LangString("GibiByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/GibiBYTE", unit);
}
function addUnit528(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GibraltarPound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gibraltar pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/GibraltarPound", unit);
}
function addUnit529(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaBIT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("693147180.5599453"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/BIT", undefined, undefined, undefined);
    unit.addLabel(new LangString("GigaBIT", undefined));
    config.units.set("http://qudt.org/vocab/unit/GigaBIT", unit);
}
function addUnit530(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaBIT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/BIT-PER-SEC", undefined, "Gbps", undefined);
    unit.addLabel(new LangString("Gigabit per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
    config.units.set("http://qudt.org/vocab/unit/GigaBIT-PER-SEC", unit);
}
function addUnit531(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaBQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/BQ", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigabecquerel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/GigaBQ", unit);
}
function addUnit532(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5954088943.6391441429912255610071"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/BYTE", undefined, "GB", undefined);
    unit.addLabel(new LangString("GigaByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/GigaBYTE", unit);
}
function addUnit533(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaBasePair", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, "Gbp", undefined);
    unit.addLabel(new LangString("Gigabase Pair", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/GigaBasePair", unit);
}
function addUnit534(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/C", undefined, "GC", undefined);
    unit.addLabel(new LangString("GigaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/GigaC", unit);
}
function addUnit535(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigacoulomb Per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Gigacoulomb Per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    config.units.set("http://qudt.org/vocab/unit/GigaC-PER-M3", unit);
}
function addUnit536(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaEV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.6021765314E-10"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/EV", undefined, "GeV", undefined);
    unit.addLabel(new LangString("Giga Electron Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/GigaEV", unit);
}
function addUnit537(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaHZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/HZ", undefined, "GHz", undefined);
    unit.addLabel(new LangString("Gigahertz", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/GigaHZ", unit);
}
function addUnit538(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaHZ-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/HZ-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigahertz Metre", "en"));
    unit.addLabel(new LangString("Gigahertz Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ConductionSpeed");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundParticleVelocity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GroupSpeedOfSound");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/GigaHZ-M", unit);
}
function addUnit539(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigajoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/GigaJ", unit);
}
function addUnit540(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigaohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/GigaOHM", unit);
}
function addUnit541(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/PA", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigapascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/GigaPA", unit);
}
function addUnit542(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000000000.0"), undefined, "http://qudt.org/vocab/prefix/Giga", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigawatt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/GigaW", unit);
}
function addUnit543(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GigaW-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Gigawatt Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/GigaW-HR", unit);
}
function addUnit544(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Gold-OunceTroy", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gold (one Troy ounce)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Gold-OunceTroy", unit);
}
function addUnit545(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GoldFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Gold franc (special settlement currency)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/GoldFranc", unit);
}
function addUnit546(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Gs", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, "Gs", undefined);
    unit.addLabel(new LangString("Gs", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/Gs", unit);
}
function addUnit547(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Guarani", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Guarani", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Guarani", unit);
}
function addUnit548(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GuineaFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Guinea Franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/GuineaFranc", unit);
}
function addUnit549(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/GuyanaDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Guyana Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/GuyanaDollar", unit);
}
function addUnit550(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "H", undefined);
    unit.addLabel(new LangString("Henry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    config.units.set("http://qudt.org/vocab/unit/H", unit);
}
function addUnit551(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H-PER-KiloOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Henry Per Kiloohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/H-PER-KiloOHM", unit);
}
function addUnit552(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Henry per Meter", "en-us"));
    unit.addLabel(new LangString("Henry per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectromagneticPermeability");
    config.units.set("http://qudt.org/vocab/unit/H-PER-M", unit);
}
function addUnit553(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H-PER-OHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Henry Per Ohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/H-PER-OHM", unit);
}
function addUnit554(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("10000.0"), undefined, undefined, undefined, undefined, "ha", undefined);
    unit.addLabel(new LangString("Hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/HA", unit);
}
function addUnit555(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HART", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("2.3025850929940456840179914546844"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hartley", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/HART", unit);
}
function addUnit556(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HART-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hartley per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationFlowRate");
    config.units.set("http://qudt.org/vocab/unit/HART-PER-SEC", unit);
}
function addUnit557(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("745.6999"), undefined, undefined, undefined, undefined, "HP", undefined);
    unit.addLabel(new LangString("Horsepower", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP", unit);
}
function addUnit558(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Horsepower Metric", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP-PER-M", unit);
}
function addUnit559(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP-PER-V", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Horsepower Electric", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP-PER-V", unit);
}
function addUnit560(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP_Boiler", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("9809.5"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Boiler Horsepower", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP_Boiler", unit);
}
function addUnit561(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP_Brake", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("9809.5"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Horsepower (brake)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP_Brake", unit);
}
function addUnit562(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP_Electric", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("746.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Horsepower (electric)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP_Electric", unit);
}
function addUnit563(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HP_Metric", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("735.4988"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Horsepower (metric)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/HP_Metric", unit);
}
function addUnit564(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, "h", undefined);
    unit.addLabel(new LangString("Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/HR", unit);
}
function addUnit565(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HR-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("334.450944"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hour Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
    config.units.set("http://qudt.org/vocab/unit/HR-FT2", unit);
}
function addUnit566(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HR_Sidereal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined, undefined, "http://qudt.org/vocab/unit/DAY_Sidereal", undefined, "hr", undefined);
    unit.addLabel(new LangString("Sidereal Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/HR_Sidereal", unit);
}
function addUnit567(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Hz", undefined);
    unit.addLabel(new LangString("Hertz", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/HZ", unit);
}
function addUnit568(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HZ-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hertz Meter", "en-us"));
    unit.addLabel(new LangString("Hertz Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    config.units.set("http://qudt.org/vocab/unit/HZ-M", unit);
}
function addUnit569(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HZ-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hertz per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseTimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/HZ-PER-K", unit);
}
function addUnit570(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HZ-PER-T", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hertz per Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/HZ-PER-T", unit);
}
function addUnit571(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HZ-PER-V", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hertz per Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseMagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/HZ-PER-V", unit);
}
function addUnit572(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("1E-9"), undefined, undefined, undefined, undefined, "abH", undefined);
    unit.addLabel(new LangString("Abhenry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    config.units.set("http://qudt.org/vocab/unit/H_Ab", unit);
}
function addUnit573(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("898760000000.0"), undefined, undefined, undefined, undefined, "statH", undefined);
    unit.addLabel(new LangString("Stathenry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    config.units.set("http://qudt.org/vocab/unit/H_Stat", unit);
}
function addUnit574(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/H_Stat-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0", new Decimal("89876000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Stathenry per Centimeter", "en-us"));
    unit.addLabel(new LangString("Stathenry per Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectromagneticPermeability");
    config.units.set("http://qudt.org/vocab/unit/H_Stat-PER-CentiM", unit);
}
function addUnit575(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HaitiGourde", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Haiti Gourde", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/HaitiGourde", unit);
}
function addUnit576(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HeartBeat", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Heart Beat", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/HeartBeat", unit);
}
function addUnit577(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("10000000.0"), undefined, "http://qudt.org/vocab/prefix/Hecto", "http://qudt.org/vocab/unit/BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectobar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/HectoBAR", unit);
}
function addUnit578(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("100.0"), undefined, "http://qudt.org/vocab/prefix/Hecto", "http://qudt.org/vocab/unit/C", undefined, "hC", undefined);
    unit.addLabel(new LangString("HectoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/HectoC", unit);
}
function addUnit579(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.1"), undefined, "http://qudt.org/vocab/prefix/Hecto", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/HectoGM", unit);
}
function addUnit580(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.1"), undefined, "http://qudt.org/vocab/prefix/Hecto", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectolitre", "en-us"));
    unit.addLabel(new LangString("Hectolitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/HectoL", unit);
}
function addUnit581(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("100.0"), undefined, "http://qudt.org/vocab/prefix/Hecto", "http://qudt.org/vocab/unit/M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectometre", "en"));
    unit.addLabel(new LangString("Hectometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/HectoM", unit);
}
function addUnit582(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("100.0"), undefined, "http://qudt.org/vocab/prefix/Hecto", "http://qudt.org/vocab/unit/PA", undefined, "hPa", undefined);
    unit.addLabel(new LangString("Hectopascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/HectoPA", unit);
}
function addUnit583(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoPA-L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0", new Decimal("0.1"), undefined, undefined, "http://qudt.org/vocab/unit/PA-L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectopascal Liter Per Second", "en-us"));
    unit.addLabel(new LangString("Hectopascal Litre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerArea");
    config.units.set("http://qudt.org/vocab/unit/HectoPA-L-PER-SEC", unit);
}
function addUnit584(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoPA-M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectopascal Cubic Metre Per Second", "en"));
    unit.addLabel(new LangString("Hectopascal Cubic Meter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerArea");
    config.units.set("http://qudt.org/vocab/unit/HectoPA-M3-PER-SEC", unit);
}
function addUnit585(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoPA-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectopascal Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/HectoPA-PER-BAR", unit);
}
function addUnit586(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoPA-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("0.0277777777777778"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectopascals per hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/HectoPA-PER-HR", unit);
}
function addUnit587(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HectoPA-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Hectopascal Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureCoefficient");
    config.units.set("http://qudt.org/vocab/unit/HectoPA-PER-K", unit);
}
function addUnit588(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/HongKongDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hong Kong Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/HongKongDollar", unit);
}
function addUnit589(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Hryvnia", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hryvnia", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Hryvnia", unit);
}
function addUnit590(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Hundredweight_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("50.80235"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hundredweight (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/Hundredweight_UK", unit);
}
function addUnit591(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Hundredweight_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("45.35924"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Hundredweight (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/Hundredweight_US", unit);
}
function addUnit592(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.0254"), undefined, undefined, undefined, undefined, "in", undefined);
    unit.addLabel(new LangString("Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/IN", unit);
}
function addUnit593(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN-PER-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("0.04572"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Inch Per Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/IN-PER-DEG_F", unit);
}
function addUnit594(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.0254"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Inch per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropellantBurnRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/IN-PER-SEC", unit);
}
function addUnit595(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.0254"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Inch per Square second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/IN-PER-SEC2", unit);
}
function addUnit596(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.00064516"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/IN2", unit);
}
function addUnit597(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.00064516"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Inch Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    config.units.set("http://qudt.org/vocab/unit/IN2-PER-SEC", unit);
}
function addUnit598(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.000016387064"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/IN3", unit);
}
function addUnit599(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN3-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("4.551961E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Inch Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/IN3-PER-HR", unit);
}
function addUnit600(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN3-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("2.7311773333333333E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Inch per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/IN3-PER-MIN", unit);
}
function addUnit601(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001638706"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Inch Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/IN3-PER-SEC", unit);
}
function addUnit602(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN4", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0", new Decimal("4.162314E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quartic Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea");
    config.units.set("http://qudt.org/vocab/unit/IN4", unit);
}
function addUnit603(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN_H2O", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("249.080024"), undefined, undefined, undefined, undefined, "inAq", undefined);
    unit.addLabel(new LangString("Inch of Water", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/IN_H2O", unit);
}
function addUnit604(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IN_HG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("3386.389"), undefined, undefined, undefined, undefined, "inHg", undefined);
    unit.addLabel(new LangString("Inch of Mercury", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/IN_HG", unit);
}
function addUnit605(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IU", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, "IU", undefined);
    unit.addLabel(new LangString("International Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/IU", unit);
}
function addUnit606(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IU-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("International Unit per Litre", "en"));
    unit.addLabel(new LangString("International Unit per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SerumOrPlasmaLevel");
    config.units.set("http://qudt.org/vocab/unit/IU-PER-L", unit);
}
function addUnit607(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IU-PER-MilliGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("0.0000010"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("International Unit per milligram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/IU-PER-MilliGM", unit);
}
function addUnit608(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IcelandKrona", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Iceland Krona", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/IcelandKrona", unit);
}
function addUnit609(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IndianRupee", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Indian Rupee", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/IndianRupee", unit);
}
function addUnit610(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IranianRial", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Iranian Rial", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/IranianRial", unit);
}
function addUnit611(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/IraqiDinar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Iraqi Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/IraqiDinar", unit);
}
function addUnit612(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "J", undefined);
    unit.addLabel(new LangString("Joule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LagrangeFunction");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExchangeIntegral");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LevelWidth");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForceMagnitude");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HamiltonFunction");
    config.units.set("http://qudt.org/vocab/unit/J", unit);
}
function addUnit613(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-M-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Meter per Mole", "en-us"));
    unit.addLabel(new LangString("Joule Metre per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMolarEnergy");
    config.units.set("http://qudt.org/vocab/unit/J-M-PER-MOL", unit);
}
function addUnit614(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Jm^2", undefined);
    unit.addLabel(new LangString("Joule Square Meter", "en-us"));
    unit.addLabel(new LangString("Joule Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalAtomicStoppingPower");
    config.units.set("http://qudt.org/vocab/unit/J-M2", unit);
}
function addUnit615(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-M2-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Square Metre per Kilogram", "en"));
    unit.addLabel(new LangString("Joule Square Meter per Kilogram", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalMassStoppingPower");
    config.units.set("http://qudt.org/vocab/unit/J-M2-PER-KiloGM", unit);
}
function addUnit616(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("10000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Per Square Centimeter", "en-us"));
    unit.addLabel(new LangString("Joule Per Square Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/J-PER-CentiM2", unit);
}
function addUnit617(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-CentiM2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("0.115740740740741"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joules per square centimetre per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Radiosity");
    config.units.set("http://qudt.org/vocab/unit/J-PER-CentiM2-DAY", unit);
}
function addUnit618(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/J-PER-GM", unit);
}
function addUnit619(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/J-PER-HR", unit);
}
function addUnit620(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Entropy");
    config.units.set("http://qudt.org/vocab/unit/J-PER-K", unit);
}
function addUnit621(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnthalpy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificInternalEnergy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHelmholtzEnergy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassieuFunction");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificGibbsEnergy");
    config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM", unit);
}
function addUnit622(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-KiloGM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joules per kilogram per Kelvin", "en"));
    unit.addLabel(new LangString("Joule per Kilogram Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtSaturation");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEntropy");
    config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM-K", unit);
}
function addUnit623(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Kilogram Kelvin Cubic Metre", "en"));
    unit.addLabel(new LangString("Joule per Kilogram Kelvin Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatVolume");
    config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3", unit);
}
function addUnit624(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Kilogram Kelvin per Pascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatPressure");
    config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA", unit);
}
function addUnit625(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Per Metre", "en"));
    unit.addLabel(new LangString("Joule Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearEnergyTransfer");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower");
    config.units.set("http://qudt.org/vocab/unit/J-PER-M", unit);
}
function addUnit626(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Square Metre", "en"));
    unit.addLabel(new LangString("Joule per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RadiantFluence");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyFluence");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/J-PER-M2", unit);
}
function addUnit627(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Joule per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RadiantEnergyDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumicElectromagneticEnergy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectromagneticEnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/J-PER-M3", unit);
}
function addUnit628(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-M3-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Cubic Meter Kelvin", "en-us"));
    unit.addLabel(new LangString("Joule per Cubic Metre Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/J-PER-M3-K", unit);
}
function addUnit629(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-M4", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Quartic Metre", "en"));
    unit.addLabel(new LangString("Joule per Quartic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/J-PER-M4", unit);
}
function addUnit630(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEnergy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ChemicalAffinity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricPolarizability");
    config.units.set("http://qudt.org/vocab/unit/J-PER-MOL", unit);
}
function addUnit631(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-MOL-K", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Mole Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEntropy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/J-PER-MOL-K", unit);
}
function addUnit632(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/J-PER-SEC", unit);
}
function addUnit633(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-T", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/J-PER-T", unit);
}
function addUnit634(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-PER-T2", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L2I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule per Square Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerSquareMagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/J-PER-T2", unit);
}
function addUnit635(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "J s", undefined);
    unit.addLabel(new LangString("Joule Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Action");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/J-SEC", unit);
}
function addUnit636(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/J-SEC-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Joule Second per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarAngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/J-SEC-PER-MOL", unit);
}
function addUnit637(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/JamaicanDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Jamaican Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/JamaicanDollar", unit);
}
function addUnit638(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/JapaneseYen", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Japanese yen", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/JapaneseYen", unit);
}
function addUnit639(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/JordanianDinar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Jordanian Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/JordanianDinar", unit);
}
function addUnit640(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "K", undefined);
    unit.addLabel(new LangString("Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermodynamicTemperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CorrelatedColorTemperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
    config.units.set("http://qudt.org/vocab/unit/K", unit);
}
function addUnit641(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0", new Decimal("86400.0"), undefined, undefined, undefined, undefined, "K d", undefined);
    unit.addLabel(new LangString("Kelvin day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/K-DAY", unit);
}
function addUnit642(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin metres", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthTemperature");
    config.units.set("http://qudt.org/vocab/unit/K-M", unit);
}
function addUnit643(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-M-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin metres per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/K-M-PER-SEC", unit);
}
function addUnit644(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-M-PER-W", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin Meter Per Watt", "en-us"));
    unit.addLabel(new LangString("Kelvin Metre Per Watt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalResistivity");
    config.units.set("http://qudt.org/vocab/unit/K-M-PER-W", unit);
}
function addUnit645(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-M2-PER-KiloGM-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H1T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin square metres per kilogram per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/K-M2-PER-KiloGM-SEC", unit);
}
function addUnit646(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PA-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H1T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin Pascals per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/K-PA-PER-SEC", unit);
}
function addUnit647(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/K-PER-HR", unit);
}
function addUnit648(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperatureRatio");
    config.units.set("http://qudt.org/vocab/unit/K-PER-K", unit);
}
function addUnit649(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Degrees Kelvin per metre", "en"));
    unit.addLabel(new LangString("Kelvins per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/K-PER-M", unit);
}
function addUnit650(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", new Decimal("60.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/K-PER-MIN", unit);
}
function addUnit651(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerTime");
    config.units.set("http://qudt.org/vocab/unit/K-PER-SEC", unit);
}
function addUnit652(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-T", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H1T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin per Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperaturePerMagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/K-PER-T", unit);
}
function addUnit653(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-PER-W", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H1T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin per Watt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalResistance");
    config.units.set("http://qudt.org/vocab/unit/K-PER-W", unit);
}
function addUnit654(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kelvin second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/K-SEC", unit);
}
function addUnit655(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/K2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H2T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Kelvin", "en"));
    config.units.set("http://qudt.org/vocab/unit/K2", unit);
}
function addUnit656(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KAT", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "kat", undefined);
    unit.addLabel(new LangString("Katal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CatalyticActivity");
    config.units.set("http://qudt.org/vocab/unit/KAT", unit);
}
function addUnit657(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KIP_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("4448.222"), undefined, undefined, undefined, undefined, "kip", undefined);
    unit.addLabel(new LangString("Kip", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/KIP_F", unit);
}
function addUnit658(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KIP_F-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("6894757.89"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kip per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KIP_F-PER-IN2", unit);
}
function addUnit659(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.5144444444444445"), undefined, undefined, undefined, undefined, "kn", undefined);
    unit.addLabel(new LangString("Knot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/KN", unit);
}
function addUnit660(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KN-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.5144444444444445"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Knot per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/KN-PER-SEC", unit);
}
function addUnit661(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("100.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kayser", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    config.units.set("http://qudt.org/vocab/unit/KY", unit);
}
function addUnit662(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KenyanShilling", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kenyan Shilling", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/KenyanShilling", unit);
}
function addUnit663(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KibiBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5678.2617031470719747459655389854"), undefined, "http://qudt.org/vocab/prefix/Kibi", "http://qudt.org/vocab/unit/BYTE", undefined, "KiB", undefined);
    unit.addLabel(new LangString("KibiByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/KibiBYTE", unit);
}
function addUnit664(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloA", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/A", undefined, "kA", undefined);
    unit.addLabel(new LangString("kiloampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/KiloA", unit);
}
function addUnit665(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloA-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kiloampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/KiloA-HR", unit);
}
function addUnit666(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloA-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kiloampere Per Metre", "en"));
    unit.addLabel(new LangString("Kiloampere Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloA-PER-M", unit);
}
function addUnit667(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloA-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kiloampere Per Square Metre", "en"));
    unit.addLabel(new LangString("Kiloampere Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloA-PER-M2", unit);
}
function addUnit668(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("100000000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/BAR", undefined, "kbar", undefined);
    unit.addLabel(new LangString("Kilobar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloBAR", unit);
}
function addUnit669(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloBIT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("693.1471805599452"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/BIT", undefined, undefined, undefined);
    unit.addLabel(new LangString("KiloBIT", undefined));
    config.units.set("http://qudt.org/vocab/unit/KiloBIT", unit);
}
function addUnit670(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloBIT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/BIT-PER-SEC", undefined, "kbps", undefined);
    unit.addLabel(new LangString("Kilobit per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
    config.units.set("http://qudt.org/vocab/unit/KiloBIT-PER-SEC", unit);
}
function addUnit671(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloBQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/BQ", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilobecquerel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/KiloBQ", unit);
}
function addUnit672(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5678.2617031470719747459655389854"), undefined, "http://qudt.org/vocab/prefix/Kibi", "http://qudt.org/vocab/unit/BYTE", undefined, "kB", undefined);
    unit.addLabel(new LangString("Kilo Byte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/KiloBYTE", unit);
}
function addUnit673(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloBYTE-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5678.2617031470719747459655389854"), undefined, undefined, "http://qudt.org/vocab/unit/BIT-PER-SEC", undefined, "kbps", undefined);
    unit.addLabel(new LangString("Kilobyte per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/KiloBYTE-PER-SEC", unit);
}
function addUnit674(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/C", undefined, "kC", undefined);
    unit.addLabel(new LangString("KiloCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/KiloC", unit);
}
function addUnit675(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloC-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocoulomb Per Square Meter", "en-us"));
    unit.addLabel(new LangString("Kilocoulomb Per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricPolarization");
    config.units.set("http://qudt.org/vocab/unit/KiloC-PER-M2", unit);
}
function addUnit676(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocoulomb Per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Kilocoulomb Per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloC-PER-M3", unit);
}
function addUnit677(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4184.0"), undefined, undefined, undefined, undefined, "kcal", undefined);
    unit.addLabel(new LangString("Kilocalorie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL", unit);
}
function addUnit678(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM-SEC-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Centimeter Second Degree Celsius", "en-us"));
    unit.addLabel(new LangString("Kilocalorie per Centimetre Second Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM-SEC-DEG_C", unit);
}
function addUnit679(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("4.184E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Square Centimeter", "en-us"));
    unit.addLabel(new LangString("Kilocalorie per Square Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2", unit);
}
function addUnit680(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("0.0000697333333"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Square Centimetre Minute", "en"));
    unit.addLabel(new LangString("Kilocalorie per Square Centimeter Minute", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN", unit);
}
function addUnit681(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("4.184E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Square Centimetre Second", "en"));
    unit.addLabel(new LangString("Kilocalorie per Square Centimeter Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC", unit);
}
function addUnit682(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("4184000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-GM", unit);
}
function addUnit683(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-GM-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Calorie per Gram Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-GM-DEG_C", unit);
}
function addUnit684(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("69.7333333"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-MIN", unit);
}
function addUnit685(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-MOL", unit);
}
function addUnit686(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-MOL-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie per Mole Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-MOL-DEG_C", unit);
}
function addUnit687(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("4184.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-SEC", unit);
}
function addUnit688(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4186.8"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/CAL_IT", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (international Table)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_IT", unit);
}
function addUnit689(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_IT-PER-HR-M-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("1.163"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (international Table) Per Hour Metre Degree Celsius", "en"));
    unit.addLabel(new LangString("Kilocalorie (international Table) Per Hour Meter Degree Celsius", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_IT-PER-HR-M-DEG_C", unit);
}
function addUnit690(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_Mean", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4190.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (mean)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_Mean", unit);
}
function addUnit691(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_TH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4184.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/CAL_TH", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (thermochemical)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH", unit);
}
function addUnit692(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_TH-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.162230555555556"), undefined, undefined, "http://qudt.org/vocab/unit/CAL_TH-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (thermochemical) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH-PER-HR", unit);
}
function addUnit693(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_TH-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("69.73383333333334"), undefined, undefined, "http://qudt.org/vocab/unit/CAL_TH-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (thermochemical) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH-PER-MIN", unit);
}
function addUnit694(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCAL_TH-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("4184.0"), undefined, undefined, "http://qudt.org/vocab/unit/CAL_TH-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocalorie (thermochemical) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH-PER-SEC", unit);
}
function addUnit695(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloCi", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("37000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/Ci", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilocurie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DecayConstant");
    config.units.set("http://qudt.org/vocab/unit/KiloCi", unit);
}
function addUnit696(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloEV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.6021765314E-16"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/EV", undefined, "keV", undefined);
    unit.addLabel(new LangString("Kilo Electron Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/KiloEV", unit);
}
function addUnit697(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloEV-PER-MicroM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.60217653E-10"), undefined, undefined, "http://qudt.org/vocab/unit/EV-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilo Electron Volt per Micrometre", "en"));
    unit.addLabel(new LangString("Kilo Electron Volt per Micrometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearEnergyTransfer");
    config.units.set("http://qudt.org/vocab/unit/KiloEV-PER-MicroM", unit);
}
function addUnit698(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGAUSS", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("0.1"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/GAUSS", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogauss", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGAUSS", unit);
}
function addUnit699(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/GM", undefined, "kg", undefined);
    unit.addLabel(new LangString("Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/KiloGM", unit);
}
function addUnit700(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Square Centimetre", "en"));
    unit.addLabel(new LangString("Kilogram Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-CentiM2", unit);
}
function addUnit701(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-K", unit);
}
function addUnit702(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-M-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Metre Per Second", "en"));
    unit.addLabel(new LangString("Kilogram Meter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-M-PER-SEC", unit);
}
function addUnit703(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Square Meter", "en-us"));
    unit.addLabel(new LangString("Kilogram Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-M2", unit);
}
function addUnit704(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Square Meter Per Second", "en-us"));
    unit.addLabel(new LangString("Kilogram Square Metre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularImpulse");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC", unit);
}
function addUnit705(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-MilliM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Square Millimetre", "en"));
    unit.addLabel(new LangString("Kilogram Square Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-MilliM2", unit);
}
function addUnit706(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("10000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Kilogram Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-CentiM2", unit);
}
function addUnit707(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Cubic Centimeter", "en-us"));
    unit.addLabel(new LangString("Kilogram Per Cubic Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-CentiM3", unit);
}
function addUnit708(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.00001157407"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-DAY", unit);
}
function addUnit709(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-DeciM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Cubic Decimetre", "en"));
    unit.addLabel(new LangString("Kilogram Per Cubic Decimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-DeciM3", unit);
}
function addUnit710(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-HA", unit);
}
function addUnit711(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.000277777778"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-HR", unit);
}
function addUnit712(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-KiloGM", unit);
}
function addUnit713(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-KiloM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilograms per square kilometre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-KiloM2", unit);
}
function addUnit714(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-KiloMOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Kilomol", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarMass");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-KiloMOL", unit);
}
function addUnit715(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Litre", "en"));
    unit.addLabel(new LangString("Kilogram Per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-L", unit);
}
function addUnit716(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Meter", "en-us"));
    unit.addLabel(new LangString("Kilogram per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M", unit);
}
function addUnit717(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("0.000277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilograms per metre per hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M-HR", unit);
}
function addUnit718(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilograms per metre per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC", unit);
}
function addUnit719(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilograms per metre per square second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2", unit);
}
function addUnit720(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Square Metre", "en"));
    unit.addLabel(new LangString("Kilogram per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeanMassRange");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BodyMassIndex");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M2", unit);
}
function addUnit721(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilograms per square metre per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CharacteristicAcousticImpedance");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC", unit);
}
function addUnit722(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("kilogram per cubic meter", "en-us"));
    unit.addLabel(new LangString("Kilogram per Cubic Metre", "en"));
    unit.addLabel(new LangString("kilogram per cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentrationOfWaterVapour");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentration");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentrationOfWater");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M3", unit);
}
function addUnit723(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-M3-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilograms per cubic metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M3-SEC", unit);
}
function addUnit724(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.01666667"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-MIN", unit);
}
function addUnit725(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Mol", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarMass");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-MOL", unit);
}
function addUnit726(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Millimeter", "en-us"));
    unit.addLabel(new LangString("Kilogram Per Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-MilliM", unit);
}
function addUnit727(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-SEC", unit);
}
function addUnit728(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-SEC-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Per Second Per Square Metre", "en"));
    unit.addLabel(new LangString("Kilogram Per Second Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-SEC-M2", unit);
}
function addUnit729(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-SEC2", unit);
}
function addUnit730(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/KiloGM-SEC2", unit);
}
function addUnit731(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM2-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M2H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Kilograms per square second", "en"));
    config.units.set("http://qudt.org/vocab/unit/KiloGM2-PER-SEC2", unit);
}
function addUnit732(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, "kgf", undefined);
    unit.addLabel(new LangString("Kilogram Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F", unit);
}
function addUnit733(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram?force Metre", "en"));
    unit.addLabel(new LangString("Kilogram?force Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F-M", unit);
}
function addUnit734(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F-M-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("98066.5"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram?force Metre Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Kilogram?force Meter Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F-M-PER-CentiM2", unit);
}
function addUnit735(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F-M-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram?force Metre Per Second", "en"));
    unit.addLabel(new LangString("Kilogram?force Meter Per Second", "en-us"));
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F-M-PER-SEC", unit);
}
function addUnit736(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("98066.5"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Force per Square Centimetre", "en"));
    unit.addLabel(new LangString("Kilogram Force per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2", unit);
}
function addUnit737(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Force Per Square Meter", "en-us"));
    unit.addLabel(new LangString("Kilogram Force Per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F-PER-M2", unit);
}
function addUnit738(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("9806650.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilogram Force Per Square Millimetre", "en"));
    unit.addLabel(new LangString("Kilogram Force Per Square Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2", unit);
}
function addUnit739(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloHZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/HZ", undefined, "kHz", undefined);
    unit.addLabel(new LangString("Kilohertz", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/KiloHZ", unit);
}
function addUnit740(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloHZ-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/HZ-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilohertz Metre", "en"));
    unit.addLabel(new LangString("Kilohertz Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ConductionSpeed");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundParticleVelocity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GroupSpeedOfSound");
    config.units.set("http://qudt.org/vocab/unit/KiloHZ-M", unit);
}
function addUnit741(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilojoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloJ", unit);
}
function addUnit742(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloJ-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilojoule Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerTemperature");
    config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-K", unit);
}
function addUnit743(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilojoule Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM", unit);
}
function addUnit744(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilojoule Per Kilogram Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEntropy");
    config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM-K", unit);
}
function addUnit745(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloJ-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilojoule Per Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-MOL", unit);
}
function addUnit746(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilolitre", "en"));
    unit.addLabel(new LangString("Kilolitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/KiloL", unit);
}
function addUnit747(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloL-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00277777777778"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilolitre Per Hour", "en"));
    unit.addLabel(new LangString("Kilolitre Per Hour", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloL-PER-HR", unit);
}
function addUnit748(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloLB_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("4448.222000000001"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/LB_F", undefined, undefined, undefined);
    unit.addLabel(new LangString("KiloLB_F", undefined));
    config.units.set("http://qudt.org/vocab/unit/KiloLB_F", unit);
}
function addUnit749(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("2728.302797866667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Foot Per Ampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-A", unit);
}
function addUnit750(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("2989.067"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Foot Per Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB", unit);
}
function addUnit751(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloLB_F-PER-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("14593.904199475066"), undefined, undefined, "http://qudt.org/vocab/unit/LB_F-PER-FT", undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Per Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/KiloLB_F-PER-FT", unit);
}
function addUnit752(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloLB_F-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("6894757.89"), undefined, undefined, "http://qudt.org/vocab/unit/LB_F-PER-IN2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilopound Force Per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloLB_F-PER-IN2", unit);
}
function addUnit753(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/M", undefined, "km", undefined);
    unit.addLabel(new LangString("Kilometre", "en"));
    unit.addLabel(new LangString("Kilometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/KiloM", unit);
}
function addUnit754(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloM-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.0115740740740741"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilometres per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/KiloM-PER-DAY", unit);
}
function addUnit755(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.2777777777777778"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilometer per Hour", "en-us"));
    unit.addLabel(new LangString("Kilometre per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/KiloM-PER-HR", unit);
}
function addUnit756(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilometre per Second", "en"));
    unit.addLabel(new LangString("Kilometer per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/KiloM-PER-SEC", unit);
}
function addUnit757(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloM3-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-2D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-SEC2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Kilometer per Square Second", "en-us"));
    unit.addLabel(new LangString("Cubic Kilometre per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StandardGravitationalParameter");
    config.units.set("http://qudt.org/vocab/unit/KiloM3-PER-SEC2", unit);
}
function addUnit758(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilomole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/KiloMOL", unit);
}
function addUnit759(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloMOL-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("0.277777777777778"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilomole Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CatalyticActivity");
    config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-HR", unit);
}
function addUnit760(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilomol per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolalityOfSolute");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM", unit);
}
function addUnit761(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloMOL-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilomole Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Kilomole Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-M3", unit);
}
function addUnit762(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloMOL-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("16.94444"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilomole Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-MIN", unit);
}
function addUnit763(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloMOL-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilomole Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
    config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-SEC", unit);
}
function addUnit764(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/N", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilonewton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/KiloN", unit);
}
function addUnit765(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloN-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilonewton Meter", "en-us"));
    unit.addLabel(new LangString("Kilonewton Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/KiloN-M", unit);
}
function addUnit766(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kiloohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/KiloOHM", unit);
}
function addUnit767(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, "kp", undefined);
    unit.addLabel(new LangString("Kilopond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/KiloP", unit);
}
function addUnit768(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/PA", undefined, "kPa", undefined);
    unit.addLabel(new LangString("Kilopascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloPA", unit);
}
function addUnit769(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPA-M2-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("1000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilopascal Square Metre per Gram", "en"));
    unit.addLabel(new LangString("Kilopascal Square Meter per Gram", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/KiloPA-M2-PER-GM", unit);
}
function addUnit770(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPA-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("100000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilopascal Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/KiloPA-PER-BAR", unit);
}
function addUnit771(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPA-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilopascal Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureCoefficient");
    config.units.set("http://qudt.org/vocab/unit/KiloPA-PER-K", unit);
}
function addUnit772(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPA-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0", new Decimal("100000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilopascal Per Millimetre", "en"));
    unit.addLabel(new LangString("Kilopascal Per Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/KiloPA-PER-MilliM", unit);
}
function addUnit773(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPA_A", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "KPaA", undefined);
    unit.addLabel(new LangString("Kilopascal Absolute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloPA_A", unit);
}
function addUnit774(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloPOND", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilopond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/KiloPOND", unit);
}
function addUnit775(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloR", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("0.258"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/R", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kiloroentgen", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/KiloR", unit);
}
function addUnit776(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilosiemens", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductance");
    config.units.set("http://qudt.org/vocab/unit/KiloS", unit);
}
function addUnit777(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilosiemens Per Metre", "en"));
    unit.addLabel(new LangString("Kilosiemens Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/KiloS-PER-M", unit);
}
function addUnit778(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/SEC", undefined, "ks", undefined);
    unit.addLabel(new LangString("kilosecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/KiloSEC", unit);
}
function addUnit779(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloTONNE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.0E+6"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/TONNE", undefined, undefined, undefined);
    unit.addLabel(new LangString("KiloTonne", "en"));
    config.units.set("http://qudt.org/vocab/unit/KiloTONNE", unit);
}
function addUnit780(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloTON_Metric", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("907184.7"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/TON_Metric", undefined, undefined, undefined);
    unit.addLabel(new LangString("Metric KiloTON", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/KiloTON_Metric", unit);
}
function addUnit781(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloV", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/V", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilovolt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/KiloV", unit);
}
function addUnit782(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloV-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-A", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilovolt Ampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ComplexPower");
    config.units.set("http://qudt.org/vocab/unit/KiloV-A", unit);
}
function addUnit783(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloV-A-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilovolt Ampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/KiloV-A-HR", unit);
}
function addUnit784(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloV-A_Reactive", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-A_Reactive", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilovolt Ampere Reactive", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReactivePower");
    config.units.set("http://qudt.org/vocab/unit/KiloV-A_Reactive", unit);
}
function addUnit785(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloV-A_Reactive-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilovolt Ampere Reactive Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/KiloV-A_Reactive-HR", unit);
}
function addUnit786(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloV-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilovolt Per Metre", "en"));
    unit.addLabel(new LangString("Kilovolt Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/KiloV-PER-M", unit);
}
function addUnit787(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/W", undefined, "kW", undefined);
    unit.addLabel(new LangString("Kilowatt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/KiloW", unit);
}
function addUnit788(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloW-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilowatthour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/KiloW-HR", unit);
}
function addUnit789(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloW-HR-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("3.6E+6"), new Decimal("0.0"), undefined, "http://qudt.org/vocab/unit/W-SEC-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kilowatt hour per square metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/KiloW-HR-PER-M2", unit);
}
function addUnit790(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloWB", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("1.0E+3"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/WB", undefined, undefined, undefined);
    unit.addLabel(new LangString("KiloWB", undefined));
    config.units.set("http://qudt.org/vocab/unit/KiloWB", unit);
}
function addUnit791(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloWB-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/WB-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Kiloweber Per Meter", "en-us"));
    unit.addLabel(new LangString("Kiloweber Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticVectorPotential");
    config.units.set("http://qudt.org/vocab/unit/KiloWB-PER-M", unit);
}
function addUnit792(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KiloYR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("3.15576E+10"), undefined, "http://qudt.org/vocab/prefix/Kilo", "http://qudt.org/vocab/unit/YR", undefined, undefined, undefined);
    unit.addLabel(new LangString("KiloYR", undefined));
    config.units.set("http://qudt.org/vocab/unit/KiloYR", unit);
}
function addUnit793(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Kina", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kina", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Kina", unit);
}
function addUnit794(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Kroon", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kroon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Kroon", unit);
}
function addUnit795(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/KuwaitiDinar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kuwaiti Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/KuwaitiDinar", unit);
}
function addUnit796(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Kwanza", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kwanza", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Kwanza", unit);
}
function addUnit797(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Kyat", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Kyat", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Kyat", unit);
}
function addUnit798(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, "L", undefined);
    unit.addLabel(new LangString("Litre", "en"));
    unit.addLabel(new LangString("Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/L", unit);
}
function addUnit799(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.157407E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Liter Per Day", "en-us"));
    unit.addLabel(new LangString("Litre Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/L-PER-DAY", unit);
}
function addUnit800(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("2.777778E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Hour", "en"));
    unit.addLabel(new LangString("Liter Per Hour", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/L-PER-HR", unit);
}
function addUnit801(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Kelvin", "en"));
    unit.addLabel(new LangString("Liter Per Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/L-PER-K", unit);
}
function addUnit802(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Kilogram", "en"));
    unit.addLabel(new LangString("Liter Per Kilogram", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoilAdsorptionCoefficient");
    config.units.set("http://qudt.org/vocab/unit/L-PER-KiloGM", unit);
}
function addUnit803(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Litre", "en"));
    unit.addLabel(new LangString("Liter Per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/L-PER-L", unit);
}
function addUnit804(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Liter Per Minute", "en-us"));
    unit.addLabel(new LangString("Litre Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/L-PER-MIN", unit);
}
function addUnit805(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Mole", "en"));
    unit.addLabel(new LangString("Liter Per Mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarRefractivity");
    config.units.set("http://qudt.org/vocab/unit/L-PER-MOL", unit);
}
function addUnit806(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-MicroMOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Litres per micromole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarRefractivity");
    config.units.set("http://qudt.org/vocab/unit/L-PER-MicroMOL", unit);
}
function addUnit807(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Second", "en"));
    unit.addLabel(new LangString("Liter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/L-PER-SEC", unit);
}
function addUnit808(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/L-PER-SEC-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Litre Per Second Per Square Metre", "en"));
    unit.addLabel(new LangString("Liter Per Second Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VentilationRatePerFloorArea");
    config.units.set("http://qudt.org/vocab/unit/L-PER-SEC-M2", unit);
}
function addUnit809(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("3183.09886"), undefined, undefined, undefined, undefined, "L", undefined);
    unit.addLabel(new LangString("Lambert", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
    config.units.set("http://qudt.org/vocab/unit/LA", unit);
}
function addUnit810(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.45359237"), undefined, undefined, undefined, undefined, "lbm", undefined);
    unit.addLabel(new LangString("Pound Mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/LB", unit);
}
function addUnit811(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
    config.units.set("http://qudt.org/vocab/unit/LB-DEG_F", unit);
}
function addUnit812(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-DEG_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Degree Rankine", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
    config.units.set("http://qudt.org/vocab/unit/LB-DEG_R", unit);
}
function addUnit813(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", new Decimal("0.04214011"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Mass (avoirdupois) Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
    config.units.set("http://qudt.org/vocab/unit/LB-FT2", unit);
}
function addUnit814(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0", new Decimal("0.011521246198"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Mass (avoirdupois) Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
    config.units.set("http://qudt.org/vocab/unit/LB-IN", unit);
}
function addUnit815(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", new Decimal("0.0002926397"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Mass (avoirdupois) Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
    config.units.set("http://qudt.org/vocab/unit/LB-IN2", unit);
}
function addUnit816(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("0.45359237"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/LB-MOL", unit);
}
function addUnit817(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-MOL-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Mole Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassAmountOfSubstanceTemperature");
    config.units.set("http://qudt.org/vocab/unit/LB-MOL-DEG_F", unit);
}
function addUnit818(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.000005249912"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound (avoirdupois) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-DAY", unit);
}
function addUnit819(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("1.4881639435695537"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-FT", unit);
}
function addUnit820(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-FT-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("0.0004133788732137649"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Foot Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-FT-HR", unit);
}
function addUnit821(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-FT-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("1.4881639435695537"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Foot Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-FT-SEC", unit);
}
function addUnit822(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("4.882428"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Mass (avoirdupois) Per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-FT2", unit);
}
function addUnit823(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-FT3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("16.018463373960138"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Cubic Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-FT3", unit);
}
function addUnit824(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-GAL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("99.7763727"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Gallon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-GAL", unit);
}
function addUnit825(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-GAL_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("99.77637"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound (avoirdupois) Per Gallon (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-GAL_UK", unit);
}
function addUnit826(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-GAL_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound (avoirdupois) Per Gallon (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-GAL_US", unit);
}
function addUnit827(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.00012599788055555556"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-HR", unit);
}
function addUnit828(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("17.857967322834646"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-IN", unit);
}
function addUnit829(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound (avoirdupois) Per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeanMassRange");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceDensity");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-IN2", unit);
}
function addUnit830(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-IN3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("27679.904710203125"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Cubic Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-IN3", unit);
}
function addUnit831(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.45359237"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Pound per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-M3", unit);
}
function addUnit832(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.007559872833333333"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-MIN", unit);
}
function addUnit833(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.4535924"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound (avoirdupois) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-SEC", unit);
}
function addUnit834(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB-PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.5932764212577829"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound per Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/LB-PER-YD3", unit);
}
function addUnit835(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("4.448222"), undefined, undefined, undefined, undefined, "lbf", undefined);
    unit.addLabel(new LangString("Pound Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/LB_F", unit);
}
function addUnit836(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.35581807"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/LB_F-FT", unit);
}
function addUnit837(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.112984839"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/LB_F-IN", unit);
}
function addUnit838(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("14.5939042"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force per Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-FT", unit);
}
function addUnit839(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("47.8802631"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-FT2", unit);
}
function addUnit840(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("175.12685"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force per Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN", unit);
}
function addUnit841(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("6894.75789"), undefined, undefined, undefined, undefined, "psia", undefined);
    unit.addLabel(new LangString("Pound Force per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN2", unit);
}
function addUnit842(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-IN2-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("12410.56"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Per Square Inch Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN2-DEG_F", unit);
}
function addUnit843(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-IN2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("6894.75789"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force per Square Inch Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN2-SEC", unit);
}
function addUnit844(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-PER-LB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("9.80665085"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force per Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThrustToMassRatio");
    config.units.set("http://qudt.org/vocab/unit/LB_F-PER-LB", unit);
}
function addUnit845(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-SEC-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("47.8802631"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Second per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/LB_F-SEC-PER-FT2", unit);
}
function addUnit846(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_F-SEC-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("6894.75789"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Force Second per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/LB_F-SEC-PER-IN2", unit);
}
function addUnit847(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LB_T", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.3732417216"), undefined, undefined, undefined, undefined, "lbt", undefined);
    unit.addLabel(new LangString("Pound Troy", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/LB_T", unit);
}
function addUnit848(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LM", undefined, undefined, new Decimal("1.0"), undefined, undefined, undefined, undefined, "lm", undefined);
    unit.addLabel(new LangString("lumen", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousFlux");
    config.units.set("http://qudt.org/vocab/unit/LM", unit);
}
function addUnit849(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LM-PER-W", undefined, undefined, new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lumen per Watt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpectralLuminousEfficiency");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousEfficacy");
    config.units.set("http://qudt.org/vocab/unit/LM-PER-W", unit);
}
function addUnit850(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LM-SEC", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("lumen second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousEnergy");
    config.units.set("http://qudt.org/vocab/unit/LM-SEC", unit);
}
function addUnit851(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LUX", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "lx", undefined);
    unit.addLabel(new LangString("Lux", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousFluxPerArea");
    config.units.set("http://qudt.org/vocab/unit/LUX", unit);
}
function addUnit852(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LUX-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T1D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lux Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousExposure");
    config.units.set("http://qudt.org/vocab/unit/LUX-HR", unit);
}
function addUnit853(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("9460730472580800.0"), undefined, undefined, undefined, undefined, "ly", undefined);
    unit.addLabel(new LangString("Light Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/LY", unit);
}
function addUnit854(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LaoKip", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, " ₭", undefined);
    unit.addLabel(new LangString("Lao kip", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/LaoKip", unit);
}
function addUnit855(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Lari", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lari", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Lari", unit);
}
function addUnit856(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LatvianLats", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Latvian Lats", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/LatvianLats", unit);
}
function addUnit857(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LebanesePound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lebanese Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/LebanesePound", unit);
}
function addUnit858(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Lek", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lek", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Lek", unit);
}
function addUnit859(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Lempira", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lempira", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Lempira", unit);
}
function addUnit860(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Leone", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Leone", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Leone", unit);
}
function addUnit861(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LiberianDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Liberian Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/LiberianDollar", unit);
}
function addUnit862(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LibyanDinar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Libyan Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/LibyanDinar", unit);
}
function addUnit863(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Lilangeni", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lilangeni", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Lilangeni", unit);
}
function addUnit864(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LithuanianLitas", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lithuanian Litas", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/LithuanianLitas", unit);
}
function addUnit865(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Loti", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Loti", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Loti", unit);
}
function addUnit866(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/LunarMass", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Lunar mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/LunarMass", unit);
}
function addUnit867(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "m", undefined);
    unit.addLabel(new LangString("Metre", "en"));
    unit.addLabel(new LangString("Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/M", unit);
}
function addUnit868(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "m K", undefined);
    unit.addLabel(new LangString("Metre Kelvin", "en"));
    unit.addLabel(new LangString("Meter Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthTemperature");
    config.units.set("http://qudt.org/vocab/unit/M-K", unit);
}
function addUnit869(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-K-PER-W", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Meter Kelvin per Watt", "en-us"));
    unit.addLabel(new LangString("Metre Kelvin per Watt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalResistivity");
    config.units.set("http://qudt.org/vocab/unit/M-K-PER-W", unit);
}
function addUnit870(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Meter Kilogram", "en-us"));
    unit.addLabel(new LangString("Metre Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
    config.units.set("http://qudt.org/vocab/unit/M-KiloGM", unit);
}
function addUnit871(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-FARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Meter per Farad", "en-us"));
    unit.addLabel(new LangString("Metre per Farad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePermittivity");
    config.units.set("http://qudt.org/vocab/unit/M-PER-FARAD", unit);
}
function addUnit872(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.000277777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metre per Hour", "en"));
    unit.addLabel(new LangString("Meter per Hour", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/M-PER-HR", unit);
}
function addUnit873(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metre per Kelvin", "en"));
    unit.addLabel(new LangString("Meter per Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/M-PER-K", unit);
}
function addUnit874(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.0166666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metre per Minute", "en"));
    unit.addLabel(new LangString("Meter per Minute", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/M-PER-MIN", unit);
}
function addUnit875(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metre per Second", "en"));
    unit.addLabel(new LangString("Meter per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectromagneticWavePhaseSpeed");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/M-PER-SEC", unit);
}
function addUnit876(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metre per Square Second", "en"));
    unit.addLabel(new LangString("Meter per Square Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/M-PER-SEC2", unit);
}
function addUnit877(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M-PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("3.16880878140289E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metres per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/M-PER-YR", unit);
}
function addUnit878(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre", "en"));
    unit.addLabel(new LangString("Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/M2", unit);
}
function addUnit879(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-HR-DEG_C-PER-KiloCAL_IT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", new Decimal("0.859845"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter Hour Degree Celsius Per Kilocalorie (international Table)", "en-us"));
    unit.addLabel(new LangString("Square Metre Hour Degree Celsius Per Kilocalorie (international Table)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalInsulance");
    config.units.set("http://qudt.org/vocab/unit/M2-HR-DEG_C-PER-KiloCAL_IT", unit);
}
function addUnit880(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-HZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres Hertz", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    config.units.set("http://qudt.org/vocab/unit/M2-HZ", unit);
}
function addUnit881(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-HZ2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metres square Hertz", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-HZ2", unit);
}
function addUnit882(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-HZ3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres cubic Hertz", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-HZ3", unit);
}
function addUnit883(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-HZ4", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres Hertz^4", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-HZ4", unit);
}
function addUnit884(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter Kelvin", "en-us"));
    unit.addLabel(new LangString("Square Metre Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTemperature");
    config.units.set("http://qudt.org/vocab/unit/M2-K", unit);
}
function addUnit885(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-K-PER-W", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter Kelvin per Watt", "en-us"));
    unit.addLabel(new LangString("Square Metre Kelvin per Watt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalInsulance");
    config.units.set("http://qudt.org/vocab/unit/M2-K-PER-W", unit);
}
function addUnit886(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres per gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-GM", unit);
}
function addUnit887(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-GM_DRY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres per gram of dry sediment", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-GM_DRY", unit);
}
function addUnit888(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.0001"), undefined, undefined, undefined, undefined, "m^2/ha", undefined);
    unit.addLabel(new LangString("square meters per hectare", "en-us"));
    unit.addLabel(new LangString("square metres per hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaRatio");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-HA", unit);
}
function addUnit889(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-HZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres per Hertz", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-PER-HZ", unit);
}
function addUnit890(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-HZ-DEG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("57.2957795130823"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres per Hertz per degree", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-PER-HZ-DEG", unit);
}
function addUnit891(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-HZ2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres per square Hertz", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-PER-HZ2", unit);
}
function addUnit892(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-J", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre per Joule", "en"));
    unit.addLabel(new LangString("Square Meter per Joule", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpectralCrossSection");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-J", unit);
}
function addUnit893(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter per Kelvin", "en-us"));
    unit.addLabel(new LangString("Square Metre per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-K", unit);
}
function addUnit894(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/M2-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter per Kilogram", "en-us"));
    unit.addLabel(new LangString("Square Metre per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassEnergyTransferCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassAbsorptionCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-KiloGM", unit);
}
function addUnit895(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, "m^2/m^2", undefined);
    unit.addLabel(new LangString("square metre per square metre", "en"));
    unit.addLabel(new LangString("square meter per square meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaRatio");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-M2", unit);
}
function addUnit896(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre per Mole", "en"));
    unit.addLabel(new LangString("Square Meter per Mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarAttenuationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-MOL", unit);
}
function addUnit897(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-N", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter Per Newton", "en-us"));
    unit.addLabel(new LangString("Square Metre Per Newton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-N", unit);
}
function addUnit898(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre per Second", "en"));
    unit.addLabel(new LangString("Square Meter per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DiffusionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NeutronDiffusionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalDiffusionRatioCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-SEC", unit);
}
function addUnit899(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metres per square second", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-PER-SEC2", unit);
}
function addUnit900(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre per Steradian", "en"));
    unit.addLabel(new LangString("Square Meter per Steradian", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularCrossSection");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-SR", unit);
}
function addUnit901(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-SR-J", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre per Steradian Joule", "en"));
    unit.addLabel(new LangString("Square Meter per Steradian Joule", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpectralAngularCrossSection");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-SR-J", unit);
}
function addUnit902(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-PER-V-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Meter per Volt Second", "en-us"));
    unit.addLabel(new LangString("Square Metre per Volt Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mobility");
    config.units.set("http://qudt.org/vocab/unit/M2-PER-V-SEC", unit);
}
function addUnit903(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-SEC-PER-RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square metre seconds per radian", "en"));
    config.units.set("http://qudt.org/vocab/unit/M2-SEC-PER-RAD", unit);
}
function addUnit904(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M2-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Metre Steradian", "en"));
    unit.addLabel(new LangString("Square Meter Steradian", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaAngle");
    config.units.set("http://qudt.org/vocab/unit/M2-SR", unit);
}
function addUnit905(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre", "en"));
    unit.addLabel(new LangString("Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SectionModulus");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/M3", unit);
}
function addUnit906(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-C", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre per Coulomb", "en"));
    unit.addLabel(new LangString("Cubic Meter per Coulomb", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HallCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-C", unit);
}
function addUnit907(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001157407"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre Per Day", "en"));
    unit.addLabel(new LangString("Cubic Meter Per Day", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-DAY", unit);
}
function addUnit908(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0002777777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Meter per Hour", "en-us"));
    unit.addLabel(new LangString("Cubic Metre per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-HR", unit);
}
function addUnit909(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre per Kelvin", "en"));
    unit.addLabel(new LangString("Cubic Meter per Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-K", unit);
}
function addUnit910(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre per Kilogram", "en"));
    unit.addLabel(new LangString("Cubic Meter per Kilogram", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-KiloGM", unit);
}
function addUnit911(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-KiloGM-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Meter per Kilogram Square Second", "en-us"));
    unit.addLabel(new LangString("Cubic Metre per Kilogram Square Second", "en"));
    config.units.set("http://qudt.org/vocab/unit/M3-PER-KiloGM-SEC2", unit);
}
function addUnit912(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Meter Per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Cubic Metre Per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-M3", unit);
}
function addUnit913(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.01666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Meter Per Minute", "en-us"));
    unit.addLabel(new LangString("Cubic Metre Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-MIN", unit);
}
function addUnit914(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre per Mole", "en"));
    unit.addLabel(new LangString("Cubic Meter per Mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarRefractivity");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-MOL", unit);
}
function addUnit915(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Metre per Second", "en"));
    unit.addLabel(new LangString("Cubic Meter per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundVolumeVelocity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RecombinationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-SEC", unit);
}
function addUnit916(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M3-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Meter per Square Second", "en-us"));
    unit.addLabel(new LangString("Cubic Metre per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StandardGravitationalParameter");
    config.units.set("http://qudt.org/vocab/unit/M3-PER-SEC2", unit);
}
function addUnit917(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M4", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quartic Meter", "en-us"));
    unit.addLabel(new LangString("Quartic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea");
    config.units.set("http://qudt.org/vocab/unit/M4", unit);
}
function addUnit918(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/M4-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metres to the power four per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/M4-PER-SEC", unit);
}
function addUnit919(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MACH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mach", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MachNumber");
    config.units.set("http://qudt.org/vocab/unit/MACH", unit);
}
function addUnit920(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MDOLLAR", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("MDOLLAR", undefined));
    config.units.set("http://qudt.org/vocab/unit/MDOLLAR", unit);
}
function addUnit921(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MDOLLAR-PER-FLIGHT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Million US Dollars per Flight", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MDOLLAR-PER-FLIGHT", unit);
}
function addUnit922(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MESH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mesh", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    config.units.set("http://qudt.org/vocab/unit/MESH", unit);
}
function addUnit923(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MHO", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "℧", undefined);
    unit.addLabel(new LangString("Mho", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/MHO", unit);
}
function addUnit924(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MHO_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.1126E-12"), undefined, undefined, undefined, undefined, "stat℧", undefined);
    unit.addLabel(new LangString("Statmho", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/MHO_Stat", unit);
}
function addUnit925(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1609.344"), undefined, undefined, undefined, undefined, "mi", undefined);
    unit.addLabel(new LangString("International Mile", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MI", unit);
}
function addUnit926(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.44704"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mile per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MI-PER-HR", unit);
}
function addUnit927(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("26.8224"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mile per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MI-PER-MIN", unit);
}
function addUnit928(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("2589988.11"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Mile", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/MI2", unit);
}
function addUnit929(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("4168181830.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Mile", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/MI3", unit);
}
function addUnit930(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MIL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000490873852"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mil Angle (NATO)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/MIL", unit);
}
function addUnit931(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MILLE", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("MILLE", undefined));
    config.units.set("http://qudt.org/vocab/unit/MILLE", unit);
}
function addUnit932(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MIL_Circ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, "cmil", undefined);
    unit.addLabel(new LangString("Circular Mil", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/MIL_Circ", unit);
}
function addUnit933(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("60.0"), undefined, undefined, undefined, undefined, "min", undefined);
    unit.addLabel(new LangString("Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MIN", unit);
}
function addUnit934(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MIN_Angle", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.0002908882"), undefined, undefined, undefined, undefined, "'", undefined);
    unit.addLabel(new LangString("Minute Angle", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/MIN_Angle", unit);
}
function addUnit935(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MIN_Sidereal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined, undefined, "http://qudt.org/vocab/unit/HR_Sidereal", undefined, "min", undefined);
    unit.addLabel(new LangString("Sidereal Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MIN_Sidereal", unit);
}
function addUnit936(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI_N", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1852.0"), undefined, undefined, undefined, undefined, "n mile", undefined);
    unit.addLabel(new LangString("Nautical Mile", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MI_N", unit);
}
function addUnit937(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI_N-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nautical Mile per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MI_N-PER-HR", unit);
}
function addUnit938(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI_N-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nautical Mile per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MI_N-PER-MIN", unit);
}
function addUnit939(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MI_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1609.347"), undefined, undefined, undefined, undefined, "mi", undefined);
    unit.addLabel(new LangString("Mile US Statute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MI_US", unit);
}
function addUnit940(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MO", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("2551442.976"), undefined, undefined, undefined, undefined, "mo", undefined);
    unit.addLabel(new LangString("Month", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MO", unit);
}
function addUnit941(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOHM", undefined, undefined, new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MechanicalMobility");
    config.units.set("http://qudt.org/vocab/unit/MOHM", unit);
}
function addUnit942(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "mol", undefined);
    unit.addLabel(new LangString("Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExtentOfReaction");
    config.units.set("http://qudt.org/vocab/unit/MOL", unit);
}
function addUnit943(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-DEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole Degree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/MOL-DEG_C", unit);
}
function addUnit944(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-K", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "mol-K", undefined);
    unit.addLabel(new LangString("Mole Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/MOL-K", unit);
}
function addUnit945(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-DeciM3", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole Per Cubic Decimeter", "en-us"));
    unit.addLabel(new LangString("Mole Per Cubic Decimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-DeciM3", unit);
}
function addUnit946(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-GM-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0", new Decimal("0.277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per gram per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-GM-HR", unit);
}
function addUnit947(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("0.000277778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-HR", unit);
}
function addUnit948(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mol per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolalityOfSolute");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-KiloGM", unit);
}
function addUnit949(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-KiloGM-PA", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L1I0M-2H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole per Kilogram Pascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMassPressure");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-KiloGM-PA", unit);
}
function addUnit950(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole Per Litre", "en"));
    unit.addLabel(new LangString("Mole Per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-L", unit);
}
function addUnit951(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per square metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2", unit);
}
function addUnit952(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("0.0000115740740740741"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per square metre per day", undefined));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-DAY", unit);
}
function addUnit953(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per square metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC", unit);
}
function addUnit954(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per square metre per second per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M", unit);
}
function addUnit955(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M-SR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per square metre per second per metre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M-SR", unit);
}
function addUnit956(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-SR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per square metre per second per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-SR", unit);
}
function addUnit957(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole per Cubic Metre", "en"));
    unit.addLabel(new LangString("Mole per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstanceConcentrationOfB");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M3", unit);
}
function addUnit958(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-M3-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per cubic metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-M3-SEC", unit);
}
function addUnit959(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("0.016666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-MIN", unit);
}
function addUnit960(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moles per mole", "en"));
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-MOL", unit);
}
function addUnit961(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MOL-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mole Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MOL-PER-SEC", unit);
}
function addUnit962(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MO_MeanGREGORIAN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mean Gregorian Month", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MO_MeanGREGORIAN", unit);
}
function addUnit963(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MO_MeanJulian", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mean Julian Month", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MO_MeanJulian", unit);
}
function addUnit964(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MO_Synodic", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Synodic month", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MO_Synodic", unit);
}
function addUnit965(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MX", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("1E-8"), undefined, undefined, undefined, undefined, "Mx", undefined);
    unit.addLabel(new LangString("Maxwell", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/MX", unit);
}
function addUnit966(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MalagasyAriary", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Malagasy Ariary", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MalagasyAriary", unit);
}
function addUnit967(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MalawiKwacha", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Malawi Kwacha", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MalawiKwacha", unit);
}
function addUnit968(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MalaysianRinggit", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Malaysian Ringgit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MalaysianRinggit", unit);
}
function addUnit969(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MalteseLira", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Maltese Lira", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MalteseLira", unit);
}
function addUnit970(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Manat", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Manat", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Manat", unit);
}
function addUnit971(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MauritiusRupee", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mauritius Rupee", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MauritiusRupee", unit);
}
function addUnit972(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MebiBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5814539.984022601702139868711921"), undefined, "http://qudt.org/vocab/prefix/Mebi", "http://qudt.org/vocab/unit/BYTE", undefined, "MiB", undefined);
    unit.addLabel(new LangString("Mebibyte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/MebiBYTE", unit);
}
function addUnit973(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaA", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/A", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megaampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/MegaA", unit);
}
function addUnit974(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaA-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megaampere Per Square Metre", "en"));
    unit.addLabel(new LangString("Megaampere Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/MegaA-PER-M2", unit);
}
function addUnit975(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("100000000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/BAR", undefined, "Mbar", undefined);
    unit.addLabel(new LangString("Megabar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MegaBAR", unit);
}
function addUnit976(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaBIT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("693147.1805599453"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/BIT", undefined, undefined, undefined);
    unit.addLabel(new LangString("MegaBIT", undefined));
    config.units.set("http://qudt.org/vocab/unit/MegaBIT", unit);
}
function addUnit977(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaBIT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, "http://qudt.org/vocab/unit/BIT-PER-SEC", undefined, "mbps", undefined);
    unit.addLabel(new LangString("Megabit per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
    config.units.set("http://qudt.org/vocab/unit/MegaBIT-PER-SEC", unit);
}
function addUnit978(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaBQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/BQ", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megabecquerel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/MegaBQ", unit);
}
function addUnit979(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5814539.984022601702139868711921"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/BYTE", undefined, "MB", undefined);
    unit.addLabel(new LangString("Mega byte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/MegaBYTE", unit);
}
function addUnit980(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/C", undefined, "MC", undefined);
    unit.addLabel(new LangString("MegaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MegaC", unit);
}
function addUnit981(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaC-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megacoulomb Per Square Metre", "en"));
    unit.addLabel(new LangString("Megacoulomb Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/MegaC-PER-M2", unit);
}
function addUnit982(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megacoulomb Per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Megacoulomb Per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeDensity");
    config.units.set("http://qudt.org/vocab/unit/MegaC-PER-M3", unit);
}
function addUnit983(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaEV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.6021765314E-13"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/EV", undefined, "MeV", undefined);
    unit.addLabel(new LangString("Mega Electron Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MegaEV", unit);
}
function addUnit984(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaEV-FemtoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0", new Decimal("1.60217653E-28"), undefined, "http://qudt.org/vocab/prefix/Mega", undefined, undefined, "MeV fm", undefined);
    unit.addLabel(new LangString("Mega Electron Volt Femtometer", "en-us"));
    unit.addLabel(new LangString("Mega Electron Volt Femtometre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthEnergy");
    config.units.set("http://qudt.org/vocab/unit/MegaEV-FemtoM", unit);
}
function addUnit985(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaEV-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.6021765314E-11"), undefined, undefined, "http://qudt.org/vocab/unit/EV-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Mega Electron Volt per Centimetre", "en"));
    unit.addLabel(new LangString("Mega Electron Volt per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearEnergyTransfer");
    config.units.set("http://qudt.org/vocab/unit/MegaEV-PER-CentiM", unit);
}
function addUnit986(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaEV-PER-SpeedOfLight", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mega Electron Volt per Speed of Light", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
    config.units.set("http://qudt.org/vocab/unit/MegaEV-PER-SpeedOfLight", unit);
}
function addUnit987(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megagram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/MegaGM", unit);
}
function addUnit988(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaGM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megagram Per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Megagram Per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MegaGM-PER-M3", unit);
}
function addUnit989(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaHZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/HZ", undefined, "MHz", undefined);
    unit.addLabel(new LangString("Megahertz", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/MegaHZ", unit);
}
function addUnit990(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaHZ-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/HZ-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megahertz Metre", "en"));
    unit.addLabel(new LangString("Megahertz Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
    config.units.set("http://qudt.org/vocab/unit/MegaHZ-M", unit);
}
function addUnit991(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaHZ-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T-1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/HZ-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Mega Hertz per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseTimeTemperature");
    config.units.set("http://qudt.org/vocab/unit/MegaHZ-PER-K", unit);
}
function addUnit992(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaHZ-PER-T", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/HZ-PER-T", undefined, undefined, undefined);
    unit.addLabel(new LangString("Mega Hertz per Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/MegaHZ-PER-T", unit);
}
function addUnit993(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megajoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/MegaJ", unit);
}
function addUnit994(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaJ-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("MegaJoule per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-K", unit);
}
function addUnit995(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaJ-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megajoule Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-KiloGM", unit);
}
function addUnit996(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaJ-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megajoule Per Square Metre", "en"));
    unit.addLabel(new LangString("Megajoule Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-M2", unit);
}
function addUnit997(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaJ-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megajoule Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Megajoule Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-M3", unit);
}
function addUnit998(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaJ-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/J-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megajoule Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-SEC", unit);
}
function addUnit999(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megalitre", "en"));
    unit.addLabel(new LangString("Megalitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/MegaL", unit);
}
function addUnit1000(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaLB_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("4448.222"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/LB_F", undefined, "Mlbf", undefined);
    unit.addLabel(new LangString("Mega Pound Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/MegaLB_F", unit);
}
function addUnit1001(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/N", undefined, undefined, undefined);
    unit.addLabel(new LangString("Meganewton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/MegaN", unit);
}
function addUnit1002(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaN-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Meganewton Meter", "en-us"));
    unit.addLabel(new LangString("Meganewton Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/MegaN-M", unit);
}
function addUnit1003(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megaohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/MegaOHM", unit);
}
function addUnit1004(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/PA", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megapascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MegaPA", unit);
}
function addUnit1005(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaPA-L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megapascal Litre Per Second", "en"));
    unit.addLabel(new LangString("Megapascal Liter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MegaPA-L-PER-SEC", unit);
}
function addUnit1006(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megapascal Cubic Metre Per Second", "en"));
    unit.addLabel(new LangString("Megapascal Cubic Meter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC", unit);
}
function addUnit1007(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaPA-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("10.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megapascal Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/MegaPA-PER-BAR", unit);
}
function addUnit1008(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaPA-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megapascal Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureCoefficient");
    config.units.set("http://qudt.org/vocab/unit/MegaPA-PER-K", unit);
}
function addUnit1009(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.0E+6"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("MegaS", undefined));
    config.units.set("http://qudt.org/vocab/unit/MegaS", unit);
}
function addUnit1010(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megasiemens Per Meter", "en-us"));
    unit.addLabel(new LangString("Megasiemens Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/MegaS-PER-M", unit);
}
function addUnit1011(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaTOE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("41868000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/TOE", undefined, "megatoe", undefined);
    unit.addLabel(new LangString("Megaton of Oil Equivalent", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MegaTOE", unit);
}
function addUnit1012(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaV", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("1000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/V", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megavolt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MegaV", unit);
}
function addUnit1013(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaV-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-A", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megavolt Ampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ComplexPower");
    config.units.set("http://qudt.org/vocab/unit/MegaV-A", unit);
}
function addUnit1014(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaV-A-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Megavolt Ampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MegaV-A-HR", unit);
}
function addUnit1015(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaV-A_Reactive", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-A_Reactive", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megavolt Ampere Reactive", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReactivePower");
    config.units.set("http://qudt.org/vocab/unit/MegaV-A_Reactive", unit);
}
function addUnit1016(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaV-A_Reactive-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Megavolt Ampere Reactive Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MegaV-A_Reactive-HR", unit);
}
function addUnit1017(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaV-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megavolt Per Metre", "en"));
    unit.addLabel(new LangString("Megavolt Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/MegaV-PER-M", unit);
}
function addUnit1018(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("MegaW", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MegaW", unit);
}
function addUnit1019(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaW-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Megawatt Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MegaW-HR", unit);
}
function addUnit1020(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MegaYR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("31557600000000.0"), undefined, "http://qudt.org/vocab/prefix/Mega", "http://qudt.org/vocab/unit/YR", undefined, "Myr", undefined);
    unit.addLabel(new LangString("Million Years", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MegaYR", unit);
}
function addUnit1021(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Metical", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Metical", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Metical", unit);
}
function addUnit1022(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MexicanPeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mexican Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MexicanPeso", unit);
}
function addUnit1023(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MexicanUnidadDeInversion", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mexican Unidad de Inversion (UDI) (Funds code)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MexicanUnidadDeInversion", unit);
}
function addUnit1024(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroA", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/A", undefined, "µA", undefined);
    unit.addLabel(new LangString("microampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/MicroA", unit);
}
function addUnit1025(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroATM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.101325"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/ATM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microatmospheres", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroATM", unit);
}
function addUnit1026(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.1"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microbar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroBAR", unit);
}
function addUnit1027(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroBQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/BQ", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microbecquerel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/MicroBQ", unit);
}
function addUnit1028(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroBQ-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Microbecquerels per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificActivity");
    config.units.set("http://qudt.org/vocab/unit/MicroBQ-PER-KiloGM", unit);
}
function addUnit1029(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroBQ-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/BQ-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microbecquerels per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivityConcentration");
    config.units.set("http://qudt.org/vocab/unit/MicroBQ-PER-L", unit);
}
function addUnit1030(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/C", undefined, "μC", undefined);
    unit.addLabel(new LangString("MicroCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MicroC", unit);
}
function addUnit1031(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroC-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microcoulomb Per Square Meter", "en-us"));
    unit.addLabel(new LangString("Microcoulomb Per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroC-PER-M2", unit);
}
function addUnit1032(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microcoulomb Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Microcoulomb Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeDensity");
    config.units.set("http://qudt.org/vocab/unit/MicroC-PER-M3", unit);
}
function addUnit1033(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroCi", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("37000.0"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/Ci", undefined, "μCi", undefined);
    unit.addLabel(new LangString("MicroCurie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/MicroCi", unit);
}
function addUnit1034(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroFARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/FARAD", undefined, "μF", undefined);
    unit.addLabel(new LangString("microfarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/MicroFARAD", unit);
}
function addUnit1035(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroFARAD-PER-KiloM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/FARAD-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microfarad Per Kilometre", "en"));
    unit.addLabel(new LangString("Microfarad Per Kilometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/MicroFARAD-PER-KiloM", unit);
}
function addUnit1036(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroFARAD-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/FARAD-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microfarad Per Meter", "en-us"));
    unit.addLabel(new LangString("Microfarad Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/MicroFARAD-PER-M", unit);
}
function addUnit1037(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.00000980665"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/G", undefined, "µG", undefined);
    unit.addLabel(new LangString("Microgravity", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/MicroG", unit);
}
function addUnit1038(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroG-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.010"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Microgram per square centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroG-PER-CentiM2", unit);
}
function addUnit1039(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGAL", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("MicroGAL", undefined));
    config.units.set("http://qudt.org/vocab/unit/MicroGAL", unit);
}
function addUnit1040(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGAL-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", new Decimal("1E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("MicroGals per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroGAL-PER-M", unit);
}
function addUnit1041(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microgram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/MicroGM", unit);
}
function addUnit1042(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micrograms per gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-GM", unit);
}
function addUnit1043(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microgram Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-KiloGM", unit);
}
function addUnit1044(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microgram Per Liter", "en-us"));
    unit.addLabel(new LangString("Microgram Per Litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-L", unit);
}
function addUnit1045(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-L-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("2.77777777777778E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micrograms per litre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-L-HR", unit);
}
function addUnit1046(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.15740740740741E-14"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micrograms per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-M2-DAY", unit);
}
function addUnit1047(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microgram Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Microgram Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-M3", unit);
}
function addUnit1048(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-M3-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("2.77777777777778E-13"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micrograms per cubic metre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-M3-HR", unit);
}
function addUnit1049(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGM-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micrograms per millilitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentration");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-MilliL", unit);
}
function addUnit1050(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroGRAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/GRAY", undefined, "µGy", undefined);
    unit.addLabel(new LangString("MicroGray", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
    config.units.set("http://qudt.org/vocab/unit/MicroGRAY", unit);
}
function addUnit1051(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroH", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/H", undefined, "μH", undefined);
    unit.addLabel(new LangString("Microhenry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    config.units.set("http://qudt.org/vocab/unit/MicroH", unit);
}
function addUnit1052(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroH-PER-KiloOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microhenry Per Kiloohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MicroH-PER-KiloOHM", unit);
}
function addUnit1053(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroH-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microhenry Per Metre", "en"));
    unit.addLabel(new LangString("Microhenry Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
    config.units.set("http://qudt.org/vocab/unit/MicroH-PER-M", unit);
}
function addUnit1054(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroH-PER-OHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microhenry Per Ohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MicroH-PER-OHM", unit);
}
function addUnit1055(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("2.54E-8"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/IN", undefined, "µin", undefined);
    unit.addLabel(new LangString("Microinch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MicroIN", unit);
}
function addUnit1056(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.000001"), new Decimal("0.0"), "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micro Joule", "en"));
    unit.addLabel(new LangString("Mikrojoule ", "de"));
    unit.addLabel(new LangString("Micro Joule", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MicroJ", unit);
}
function addUnit1057(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microlitre", "en"));
    unit.addLabel(new LangString("Microlitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/MicroL", unit);
}
function addUnit1058(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microlitre Per Litre", "en"));
    unit.addLabel(new LangString("Microlitre Per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/MicroL-PER-L", unit);
}
function addUnit1059(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/M", undefined, "μm", undefined);
    unit.addLabel(new LangString("Micrometre", "en"));
    unit.addLabel(new LangString("Micrometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MicroM", unit);
}
function addUnit1060(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micrometre Per Kelvin", "en"));
    unit.addLabel(new LangString("Micrometer Per Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/MicroM-PER-K", unit);
}
function addUnit1061(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM-PER-L-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", new Decimal("1.15740740740741E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per litre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroM-PER-L-DAY", unit);
}
function addUnit1062(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square microns per millilitre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroM-PER-MilliL", unit);
}
function addUnit1063(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM-PER-N", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0", new Decimal("0.000001"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Mikrometer pro Newton", "de"));
    unit.addLabel(new LangString("Micro meter per Newton", "en-us"));
    unit.addLabel(new LangString("Micro metre per Newton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearCompressibility");
    config.units.set("http://qudt.org/vocab/unit/MicroM-PER-N", unit);
}
function addUnit1064(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Micrometre", "en"));
    unit.addLabel(new LangString("Square Micrometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/MicroM2", unit);
}
function addUnit1065(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1E-18"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic micrometres (microns)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/MicroM3", unit);
}
function addUnit1066(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM3-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-18"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic microns per cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/MicroM3-PER-M3", unit);
}
function addUnit1067(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroM3-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-12"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic microns per millilitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/MicroM3-PER-MilliL", unit);
}
function addUnit1068(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMHO", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/MHO", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromho", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/MicroMHO", unit);
}
function addUnit1069(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/MicroMOL", unit);
}
function addUnit1070(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-KiloGM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolalityOfSolute");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-GM", unit);
}
function addUnit1071(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-GM-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0", new Decimal("2.77777777777778E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per gram per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-GM-HR", unit);
}
function addUnit1072(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-GM-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per gram per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-GM-SEC", unit);
}
function addUnit1073(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-KiloGM", unit);
}
function addUnit1074(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-L", unit);
}
function addUnit1075(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-L-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("2.77777777777778E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per litre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-L-HR", unit);
}
function addUnit1076(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per square metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2", unit);
}
function addUnit1077(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("1.15740740740741E-11"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2-DAY", unit);
}
function addUnit1078(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-M2-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("2.77777777777778E-10"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per square metre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2-HR", unit);
}
function addUnit1079(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-M2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per square metre per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2-SEC", unit);
}
function addUnit1080(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per mole", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-MOL", unit);
}
function addUnit1081(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-MicroMOL-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.0000115740740740741"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromole per micromole of biomass per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-MicroMOL-DAY", unit);
}
function addUnit1082(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroMOL-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micromoles per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFlux");
    config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-SEC", unit);
}
function addUnit1083(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/N", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micronewton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/MicroN", unit);
}
function addUnit1084(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroN-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micronewton Meter", "en-us"));
    unit.addLabel(new LangString("Micronewton Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/MicroN-M", unit);
}
function addUnit1085(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/MicroOHM", unit);
}
function addUnit1086(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/PA", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micropascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroPA", unit);
}
function addUnit1087(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroPOISE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("1E-7"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/POISE", undefined, undefined, undefined);
    unit.addLabel(new LangString("Micropoise", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/MicroPOISE", unit);
}
function addUnit1088(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroRAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/RAD", undefined, "μrad", undefined);
    unit.addLabel(new LangString("microradian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/MicroRAD", unit);
}
function addUnit1089(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microsiemens", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/MicroS", unit);
}
function addUnit1090(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroS-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.0001"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microsiemens Per Centimetre", "en"));
    unit.addLabel(new LangString("Microsiemens Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/MicroS-PER-CentiM", unit);
}
function addUnit1091(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microsiemens Per Metre", "en"));
    unit.addLabel(new LangString("Microsiemens Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/MicroS-PER-M", unit);
}
function addUnit1092(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/SEC", undefined, "μs", undefined);
    unit.addLabel(new LangString("microsecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MicroSEC", unit);
}
function addUnit1093(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroSV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/SV", undefined, "µSv", undefined);
    unit.addLabel(new LangString("MicroSievert", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
    config.units.set("http://qudt.org/vocab/unit/MicroSV", unit);
}
function addUnit1094(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroSV-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("2.77778E-10"), undefined, undefined, undefined, undefined, "µSv/hr", undefined);
    unit.addLabel(new LangString("MicroSievert per hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
    config.units.set("http://qudt.org/vocab/unit/MicroSV-PER-HR", unit);
}
function addUnit1095(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroT", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/T", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microtesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/MicroT", unit);
}
function addUnit1096(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroTORR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.000133322"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/TORR", undefined, "μTorr", undefined);
    unit.addLabel(new LangString("MicroTorr", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroTORR", unit);
}
function addUnit1097(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroV", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/V", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microvolt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MicroV", unit);
}
function addUnit1098(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroV-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microvolt Per Metre", "en"));
    unit.addLabel(new LangString("Microvolt Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/MicroV-PER-M", unit);
}
function addUnit1099(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microwatt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MicroW", unit);
}
function addUnit1100(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MicroW-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Microwatt Per Square Metre", "en"));
    unit.addLabel(new LangString("Microwatt Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/MicroW-PER-M2", unit);
}
function addUnit1101(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilLength", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, "mil", undefined);
    unit.addLabel(new LangString("Mil Length", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MilLength", unit);
}
function addUnit1102(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliA", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Micro", "http://qudt.org/vocab/unit/A", undefined, "mA", undefined);
    unit.addLabel(new LangString("MilliAmpere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/MilliA", unit);
}
function addUnit1103(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliA-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("3.6"), undefined, undefined, "http://qudt.org/vocab/unit/A-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MilliA-HR", unit);
}
function addUnit1104(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliA-PER-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("0.03937008"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliampere Per Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliA-PER-IN", unit);
}
function addUnit1105(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliA-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/A-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliampere Per Millimeter", "en-us"));
    unit.addLabel(new LangString("Milliampere Per Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliA-PER-MilliM", unit);
}
function addUnit1106(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliARCSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("4.84813681E-9"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/ARCSEC", undefined, "mas", undefined);
    unit.addLabel(new LangString("Milli ArcSecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/MilliARCSEC", unit);
}
function addUnit1107(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("100.0"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/BAR", undefined, "mbar", undefined);
    unit.addLabel(new LangString("Millibar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliBAR", unit);
}
function addUnit1108(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.1"), undefined, undefined, "http://qudt.org/vocab/unit/BAR-L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibar Litre Per Second", "en"));
    unit.addLabel(new LangString("Millibar Liter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC", unit);
}
function addUnit1109(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/BAR-M3-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibar Cubic Metre Per Second", "en"));
    unit.addLabel(new LangString("Millibar Cubic Meter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC", unit);
}
function addUnit1110(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBAR-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/BAR-PER-BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibar Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/MilliBAR-PER-BAR", unit);
}
function addUnit1111(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBAR-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/BAR-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibar Per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity");
    config.units.set("http://qudt.org/vocab/unit/MilliBAR-PER-K", unit);
}
function addUnit1112(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.0010"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/BQ", undefined, undefined, undefined);
    unit.addLabel(new LangString("MilliBQ", undefined));
    config.units.set("http://qudt.org/vocab/unit/MilliBQ", unit);
}
function addUnit1113(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBQ-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibecquerels per gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificActivity");
    config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-GM", unit);
}
function addUnit1114(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBQ-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibecquerels per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificActivity");
    config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-KiloGM", unit);
}
function addUnit1115(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBQ-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/BQ-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibecquerels per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivityConcentration");
    config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-L", unit);
}
function addUnit1116(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliBQ-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-2D0", new Decimal("1.15740740740741E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millibecquerels per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-M2-DAY", unit);
}
function addUnit1117(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/C", undefined, "mC", undefined);
    unit.addLabel(new LangString("MilliCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MilliC", unit);
}
function addUnit1118(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliC-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millicoulomb Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/MilliC-PER-KiloGM", unit);
}
function addUnit1119(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliC-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millicoulomb Per Square Metre", "en"));
    unit.addLabel(new LangString("Millicoulomb Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliC-PER-M2", unit);
}
function addUnit1120(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/C-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millicoulomb Per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Millicoulomb Per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliC-PER-M3", unit);
}
function addUnit1121(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliCi", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("37000000.0"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/Ci", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millicurie", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
    config.units.set("http://qudt.org/vocab/unit/MilliCi", unit);
}
function addUnit1122(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliDEG_C", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", new Decimal("0.001"), new Decimal("273.15"), "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/DEG_C", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millidegree Celsius", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
    config.units.set("http://qudt.org/vocab/unit/MilliDEG_C", unit);
}
function addUnit1123(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliFARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/FARAD", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millifarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/MilliFARAD", unit);
}
function addUnit1124(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.00980665"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/G", undefined, "mG", undefined);
    unit.addLabel(new LangString("Milligravity", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/MilliG", unit);
}
function addUnit1125(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGAL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("0.00001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
    config.units.set("http://qudt.org/vocab/unit/MilliGAL", unit);
}
function addUnit1126(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGAL-PER-MO", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-3D0", new Decimal("3.80257053768347E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("MilliGals per month", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliGAL-PER-MO", unit);
}
function addUnit1127(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/MilliGM", unit);
}
function addUnit1128(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Milligram Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-CentiM2", unit);
}
function addUnit1129(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1.157407E-11"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-DAY", unit);
}
function addUnit1130(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-DeciL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("milligrams per decilitre", "en"));
    unit.addLabel(new LangString("milligrams per decilitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BloodGlucoseLevel_Mass");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-DeciL", unit);
}
function addUnit1131(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-GM", unit);
}
function addUnit1132(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("1E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-HA", unit);
}
function addUnit1133(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("2.777778E-10"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-HR", unit);
}
function addUnit1134(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-KiloGM", unit);
}
function addUnit1135(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Liter", "en-us"));
    unit.addLabel(new LangString("Milligram Per Litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-L", unit);
}
function addUnit1136(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Metre", "en"));
    unit.addLabel(new LangString("Milligram Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M", unit);
}
function addUnit1137(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Square Meter", "en-us"));
    unit.addLabel(new LangString("Milligram Per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2", unit);
}
function addUnit1138(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.15740740740741E-11"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligrams per square metre per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2-DAY", unit);
}
function addUnit1139(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M2-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("2.77777777777778E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligrams per square metre per hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2-HR", unit);
}
function addUnit1140(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligrams per square metre per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2-SEC", unit);
}
function addUnit1141(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Milligram Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3", unit);
}
function addUnit1142(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M3-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("1.15740740740741E-11"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligrams per cubic metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3-DAY", unit);
}
function addUnit1143(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M3-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("2.77777777777778E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligrams per cubic metre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3-HR", unit);
}
function addUnit1144(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-M3-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligrams per cubic metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3-SEC", unit);
}
function addUnit1145(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1.666667E-8"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-MIN", unit);
}
function addUnit1146(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Millilitre", "en"));
    unit.addLabel(new LangString("Milligram Per Milliliter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentration");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-MilliL", unit);
}
function addUnit1147(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligram Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-SEC", unit);
}
function addUnit1148(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliGRAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/GRAY", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milligray", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
    config.units.set("http://qudt.org/vocab/unit/MilliGRAY", unit);
}
function addUnit1149(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliH", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/H", undefined, "mH", undefined);
    unit.addLabel(new LangString("Millihenry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    config.units.set("http://qudt.org/vocab/unit/MilliH", unit);
}
function addUnit1150(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliH-PER-KiloOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millihenry Per Kiloohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MilliH-PER-KiloOHM", unit);
}
function addUnit1151(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliH-PER-OHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millihenry Per Ohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MilliH-PER-OHM", unit);
}
function addUnit1152(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.0000254"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/IN", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milli-inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MilliIN", unit);
}
function addUnit1153(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millijoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/MilliJ", unit);
}
function addUnit1154(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre", "en"));
    unit.addLabel(new LangString("Millilitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/MilliL", unit);
}
function addUnit1155(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.00016666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Square Centimeter Minute", "en-us"));
    unit.addLabel(new LangString("Millilitre Per Square Centimetre Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricFlux");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-MIN", unit);
}
function addUnit1156(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.01"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Square Centimetre Second", "en"));
    unit.addLabel(new LangString("Millilitre Per Square Centimeter Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricFlux");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-SEC", unit);
}
function addUnit1157(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.157407E-11"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Day", "en"));
    unit.addLabel(new LangString("Millilitre Per Day", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-DAY", unit);
}
function addUnit1158(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("2.777778E-10"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Hour", "en-us"));
    unit.addLabel(new LangString("Millilitre Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-HR", unit);
}
function addUnit1159(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Kelvin", "en"));
    unit.addLabel(new LangString("Millilitre Per Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-K", unit);
}
function addUnit1160(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Kilogram", "en-us"));
    unit.addLabel(new LangString("Millilitre Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-KiloGM", unit);
}
function addUnit1161(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Litre", "en"));
    unit.addLabel(new LangString("Millilitre Per Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-L", unit);
}
function addUnit1162(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1.15740740740741E-11"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitres per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-M2-DAY", unit);
}
function addUnit1163(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Millilitre Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-M3", unit);
}
function addUnit1164(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.666667E-8"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Minute", "en-us"));
    unit.addLabel(new LangString("Millilitre Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-MIN", unit);
}
function addUnit1165(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliL-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/L-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millilitre Per Second", "en-us"));
    unit.addLabel(new LangString("Millilitre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/MilliL-PER-SEC", unit);
}
function addUnit1166(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimetre", "en"));
    unit.addLabel(new LangString("Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/MilliM", unit);
}
function addUnit1167(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1.15741E-8"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, "mm/d", undefined);
    unit.addLabel(new LangString("millimetres per day", "en"));
    unit.addLabel(new LangString("millimeters per day", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MilliM-PER-DAY", unit);
}
function addUnit1168(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("2.777778E-7"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimeter Per Hour", "en-us"));
    unit.addLabel(new LangString("Millimetre Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MilliM-PER-HR", unit);
}
function addUnit1169(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-K", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimetre Per Kelvin", "en"));
    unit.addLabel(new LangString("Millimeter Per Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/MilliM-PER-K", unit);
}
function addUnit1170(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.00001666667"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimeter Per Minute", "en-us"));
    unit.addLabel(new LangString("Millimetre Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MilliM-PER-MIN", unit);
}
function addUnit1171(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimetre Per Second", "en"));
    unit.addLabel(new LangString("Millimeter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MilliM-PER-SEC", unit);
}
function addUnit1172(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM-PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", new Decimal("1.71E-12"), undefined, undefined, "http://qudt.org/vocab/unit/M-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimetre Per Year", "en"));
    unit.addLabel(new LangString("Millimeter Per Year", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
    config.units.set("http://qudt.org/vocab/unit/MilliM-PER-YR", unit);
}
function addUnit1173(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.000001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Millimetre", "en"));
    unit.addLabel(new LangString("Square Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/MilliM2", unit);
}
function addUnit1174(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM2-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/M2-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Millimeter Per Second", "en-us"));
    unit.addLabel(new LangString("Square Millimetre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
    config.units.set("http://qudt.org/vocab/unit/MilliM2-PER-SEC", unit);
}
function addUnit1175(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Millimeter", "en-us"));
    unit.addLabel(new LangString("Cubic Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/MilliM3", unit);
}
function addUnit1176(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM3-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/M3-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Millimetre Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Cubic Millimeter Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
    config.units.set("http://qudt.org/vocab/unit/MilliM3-PER-M3", unit);
}
function addUnit1177(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM4", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/M4", undefined, undefined, undefined);
    unit.addLabel(new LangString("Quartic Millimetre", "en"));
    unit.addLabel(new LangString("Quartic Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea");
    config.units.set("http://qudt.org/vocab/unit/MilliM4", unit);
}
function addUnit1178(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/MilliMOL", unit);
}
function addUnit1179(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimole Per Gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-GM", unit);
}
function addUnit1180(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimole Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM", unit);
}
function addUnit1181(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("millimoles per litre", "en-us"));
    unit.addLabel(new LangString("millimoles per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BloodGlucoseLevel");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-L", unit);
}
function addUnit1182(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimoles per square metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M2", unit);
}
function addUnit1183(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("1.15740740740741E-8"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimoles per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M2-DAY", unit);
}
function addUnit1184(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-M2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimoles per square metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M2-SEC", unit);
}
function addUnit1185(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimoles per cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M3", unit);
}
function addUnit1186(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-M3-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1.15740740740741E-8"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimoles per cubic metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M3-DAY", unit);
}
function addUnit1187(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliMOL-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millimoles per mole", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-MOL", unit);
}
function addUnit1188(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM_H2O", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("9.80665"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Conventional Millimetre Of Water", "en"));
    unit.addLabel(new LangString("Conventional Millimeter Of Water", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliM_H2O", unit);
}
function addUnit1189(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM_HG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("133.322387415"), undefined, undefined, undefined, undefined, "mm Hg", undefined);
    unit.addLabel(new LangString("Millimetre of Mercury", "en"));
    unit.addLabel(new LangString("Millimeter of Mercury", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliM_HG", unit);
}
function addUnit1190(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliM_HGA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, "mmHgA", undefined);
    unit.addLabel(new LangString("Millimetre of Mercury - Absolute", "en"));
    unit.addLabel(new LangString("Millimeter of Mercury - Absolute", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliM_HGA", unit);
}
function addUnit1191(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/N", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millinewton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/MilliN", unit);
}
function addUnit1192(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliN-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millinewton Meter", "en-us"));
    unit.addLabel(new LangString("Millinewton Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/MilliN-M", unit);
}
function addUnit1193(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliN-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/N-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millinewton Per Meter", "en-us"));
    unit.addLabel(new LangString("Millinewton Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/MilliN-PER-M", unit);
}
function addUnit1194(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/MilliOHM", unit);
}
function addUnit1195(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/PA", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millipascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliPA", unit);
}
function addUnit1196(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliPA-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/PA-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millipascal Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/MilliPA-SEC", unit);
}
function addUnit1197(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1E-8"), undefined, undefined, "http://qudt.org/vocab/unit/PA-SEC-PER-BAR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millipascal Second Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR", unit);
}
function addUnit1198(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliR", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("2.58E-7"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/R", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliroentgen", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/MilliR", unit);
}
function addUnit1199(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliRAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/RAD", undefined, "mrad", undefined);
    unit.addLabel(new LangString("milliradian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/MilliRAD", unit);
}
function addUnit1200(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliRAD_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.000010"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/RAD_R", undefined, undefined, undefined);
    unit.addLabel(new LangString("MilliRAD_R", undefined));
    config.units.set("http://qudt.org/vocab/unit/MilliRAD_R", unit);
}
function addUnit1201(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliRAD_R-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", new Decimal("2.77777777777778E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Millirads per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliRAD_R-PER-HR", unit);
}
function addUnit1202(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliR_man", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("2.58E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliroentgen Equivalent Man", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
    config.units.set("http://qudt.org/vocab/unit/MilliR_man", unit);
}
function addUnit1203(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millisiemens", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductance");
    config.units.set("http://qudt.org/vocab/unit/MilliS", unit);
}
function addUnit1204(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliS-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.1"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millisiemens Per Centimetre", "en"));
    unit.addLabel(new LangString("Millisiemens Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/MilliS-PER-CentiM", unit);
}
function addUnit1205(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("MilliSiemens per metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/MilliS-PER-M", unit);
}
function addUnit1206(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/SEC", undefined, "ms", undefined);
    unit.addLabel(new LangString("millisecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/MilliSEC", unit);
}
function addUnit1207(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliSV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/SV", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millisievert", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
    config.units.set("http://qudt.org/vocab/unit/MilliSV", unit);
}
function addUnit1208(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliT", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/T", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millitesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/MilliT", unit);
}
function addUnit1209(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliTORR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("0.133322"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/TORR", undefined, "mTorr", undefined);
    unit.addLabel(new LangString("MilliTorr", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliTORR", unit);
}
function addUnit1210(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliV", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/V", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millivolt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MilliV", unit);
}
function addUnit1211(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliV-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millivolt Per Meter", "en-us"));
    unit.addLabel(new LangString("Millivolt Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/MilliV-PER-M", unit);
}
function addUnit1212(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliV-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0", new Decimal("0.00001666667"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Millivolt Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/MilliV-PER-MIN", unit);
}
function addUnit1213(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("MilliW", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/MilliW", unit);
}
function addUnit1214(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliW-PER-CentiM2-MicroM-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("10000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2-M-SR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliwatts per square centimetre per micrometre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliW-PER-CentiM2-MicroM-SR", unit);
}
function addUnit1215(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliW-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliwatt Per Square Metre", "en"));
    unit.addLabel(new LangString("Milliwatt Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/MilliW-PER-M2", unit);
}
function addUnit1216(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliwatts per square metre per nanometre", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM", unit);
}
function addUnit1217(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2-M-SR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliwatts per square metre per nanometre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM-SR", unit);
}
function addUnit1218(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MilliWB", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("0.001"), undefined, "http://qudt.org/vocab/prefix/Milli", "http://qudt.org/vocab/unit/WB", undefined, undefined, undefined);
    unit.addLabel(new LangString("Milliweber", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/MilliWB", unit);
}
function addUnit1219(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MillionUSD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Million US Dollars", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MillionUSD", unit);
}
function addUnit1220(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MillionUSD-PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Million US Dollars per Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MillionUSD-PER-YR", unit);
}
function addUnit1221(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MoldovanLeu", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moldovan Leu", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MoldovanLeu", unit);
}
function addUnit1222(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/MoroccanDirham", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Moroccan Dirham", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/MoroccanDirham", unit);
}
function addUnit1223(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "N", undefined);
    unit.addLabel(new LangString("Newton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/N", unit);
}
function addUnit1224(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.01"), undefined, undefined, "http://qudt.org/vocab/unit/N-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Centimeter", "en-us"));
    unit.addLabel(new LangString("Newton Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/N-CentiM", unit);
}
function addUnit1225(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "N m", undefined);
    unit.addLabel(new LangString("Newton Metre", "en"));
    unit.addLabel(new LangString("Newton Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfForce");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/N-M", unit);
}
function addUnit1226(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-PER-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Metre Per Ampere", "en"));
    unit.addLabel(new LangString("Newton Meter Per Ampere", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/N-M-PER-A", unit);
}
function addUnit1227(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Meter Per Kilogram", "en-us"));
    unit.addLabel(new LangString("Newton Metre Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
    config.units.set("http://qudt.org/vocab/unit/N-M-PER-KiloGM", unit);
}
function addUnit1228(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton metre per metre", "en"));
    unit.addLabel(new LangString("Newtonmeter pro Meter", "de"));
    unit.addLabel(new LangString("Newton meter per meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TorquePerLength");
    config.units.set("http://qudt.org/vocab/unit/N-M-PER-M", unit);
}
function addUnit1229(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Metre Per Square Metre", "en"));
    unit.addLabel(new LangString("Newton Meter Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/N-M-PER-M2", unit);
}
function addUnit1230(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-PER-RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newtonmeter pro Radian", "de"));
    unit.addLabel(new LangString("Newton metre per radian", "en"));
    unit.addLabel(new LangString("Newton meter per radian", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TorquePerAngle");
    config.units.set("http://qudt.org/vocab/unit/N-M-PER-RAD", unit);
}
function addUnit1231(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "N-m-sec", undefined);
    unit.addLabel(new LangString("Newton Metre Second", "en"));
    unit.addLabel(new LangString("Newton Meter Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularImpulse");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
    config.units.set("http://qudt.org/vocab/unit/N-M-SEC", unit);
}
function addUnit1232(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-SEC-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newtonmetersekunden pro Meter", "de"));
    unit.addLabel(new LangString("Newton metre seconds per metre", "en"));
    unit.addLabel(new LangString("Newton meter seconds per meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
    config.units.set("http://qudt.org/vocab/unit/N-M-SEC-PER-M", unit);
}
function addUnit1233(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M-SEC-PER-RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newtonmetersekunden pro Radian", "de"));
    unit.addLabel(new LangString("Newton metre seconds per radian", "en"));
    unit.addLabel(new LangString("Newton meter seconds per radian", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentumPerAngle");
    config.units.set("http://qudt.org/vocab/unit/N-M-SEC-PER-RAD", unit);
}
function addUnit1234(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M2-PER-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Metre Squared per Ampere", "en"));
    unit.addLabel(new LangString("Newton Meter Squared per Ampere", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/N-M2-PER-A", unit);
}
function addUnit1235(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-M2-PER-KiloGM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Square Metre Per Square Kilogram", "en"));
    unit.addLabel(new LangString("Newton Square Meter Per Square Kilogram", "en-us"));
    config.units.set("http://qudt.org/vocab/unit/N-M2-PER-KiloGM2", unit);
}
function addUnit1236(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Per Ampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength");
    config.units.set("http://qudt.org/vocab/unit/N-PER-A", unit);
}
function addUnit1237(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-C", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton per Coulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/N-PER-C", unit);
}
function addUnit1238(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/N-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Per Centimeter", "en-us"));
    unit.addLabel(new LangString("Newton Per Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/N-PER-CentiM", unit);
}
function addUnit1239(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("10000.0"), undefined, undefined, "http://qudt.org/vocab/unit/N-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Per Square Centimetre", "en"));
    unit.addLabel(new LangString("Newton Per Square Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/N-PER-CentiM2", unit);
}
function addUnit1240(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThrustToMassRatio");
    config.units.set("http://qudt.org/vocab/unit/N-PER-KiloGM", unit);
}
function addUnit1241(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton per Meter", "en-us"));
    unit.addLabel(new LangString("Newton per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/N-PER-M", unit);
}
function addUnit1242(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Pa", undefined);
    unit.addLabel(new LangString("N-PER-M2", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/N-PER-M2", unit);
}
function addUnit1243(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newtons per cubic metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/N-PER-M3", unit);
}
function addUnit1244(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/N-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Per Millimetre", "en"));
    unit.addLabel(new LangString("Newton Per Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    config.units.set("http://qudt.org/vocab/unit/N-PER-MilliM", unit);
}
function addUnit1245(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-MilliM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/N-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Per Square Millimeter", "en-us"));
    unit.addLabel(new LangString("Newton Per Square Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/N-PER-MilliM2", unit);
}
function addUnit1246(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-PER-RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton per radian", "en-us"));
    unit.addLabel(new LangString("Newton pro Radian", "de"));
    unit.addLabel(new LangString("Newton per radian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAngle");
    config.units.set("http://qudt.org/vocab/unit/N-PER-RAD", unit);
}
function addUnit1247(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
    config.units.set("http://qudt.org/vocab/unit/N-SEC", unit);
}
function addUnit1248(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-SEC-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton Second per Meter", "en-us"));
    unit.addLabel(new LangString("Newton Second per Metre", "en"));
    unit.addLabel(new LangString("Newtonsekunden pro Meter", "de"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/N-SEC-PER-M", unit);
}
function addUnit1249(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-SEC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton second per Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Newton second per Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance");
    config.units.set("http://qudt.org/vocab/unit/N-SEC-PER-M3", unit);
}
function addUnit1250(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/N-SEC-PER-RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", new Decimal("1.0"), new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Newton seconds per radian", "en-us"));
    unit.addLabel(new LangString("Newton seconds per radian", "en"));
    unit.addLabel(new LangString("Newtonsekunden pro Radian", "de"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentumPerAngle");
    config.units.set("http://qudt.org/vocab/unit/N-SEC-PER-RAD", unit);
}
function addUnit1251(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NAT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, "nat", undefined);
    unit.addLabel(new LangString("Nat", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/NAT", unit);
}
function addUnit1252(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NAT-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nat per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/NAT-PER-SEC", unit);
}
function addUnit1253(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "Np", undefined);
    unit.addLabel(new LangString("Neper", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/NP", unit);
}
function addUnit1254(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NTU", undefined, undefined, undefined, undefined, undefined, undefined, undefined, "NTU", undefined);
    unit.addLabel(new LangString("Nephelometry Turbidity Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Turbidity");
    config.units.set("http://qudt.org/vocab/unit/NTU", unit);
}
function addUnit1255(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "#", undefined);
    unit.addLabel(new LangString("Number", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/QuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReynoldsNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FrictionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NucleonNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Population");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpinQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ChargeNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StoichiometricNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HyperfineStructureQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NeutronNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NuclearSpinQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalAngularMomentumQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PrincipalQuantumNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonTransportNumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Landau-GinzburgNumber");
    config.units.set("http://qudt.org/vocab/unit/NUM", unit);
}
function addUnit1256(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-CentiM-KiloYR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T-1D0", new Decimal("3.16880878140289E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per square centimetre per thousand years", "en"));
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-CentiM-KiloYR", unit);
}
function addUnit1257(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per gram", "en"));
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-GM", unit);
}
function addUnit1258(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("1000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-HA", unit);
}
function addUnit1259(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.000277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per individual per hour", "en"));
    unit.addLabel(new LangString("Number per hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-HR", unit);
}
function addUnit1260(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-HectoGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0", new Decimal("10.0"), undefined, undefined, "http://qudt.org/vocab/unit/NUM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per 100 grams", "en"));
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-HectoGM", unit);
}
function addUnit1261(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-KiloM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/NUM-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per square kilometre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-KiloM2", unit);
}
function addUnit1262(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-L", unit);
}
function addUnit1263(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-M", unit);
}
function addUnit1264(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per square metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-M2", unit);
}
function addUnit1265(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", new Decimal("0.0000115740740740741"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per square metre per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Flux");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-M2-DAY", unit);
}
function addUnit1266(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-M3", unit);
}
function addUnit1267(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-MicroL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/NUM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per microlitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-MicroL", unit);
}
function addUnit1268(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-MilliGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/NUM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per milligram", "en"));
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-MilliGM", unit);
}
function addUnit1269(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-NanoL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("2147483647.0"), undefined, undefined, "http://qudt.org/vocab/unit/NUM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per nanolitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-NanoL", unit);
}
function addUnit1270(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Counts per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-SEC", unit);
}
function addUnit1271(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NUM-PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Number per Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/NUM-PER-YR", unit);
}
function addUnit1272(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Naira", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Naira", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Naira", unit);
}
function addUnit1273(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Nakfa", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nakfa", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Nakfa", unit);
}
function addUnit1274(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NamibianDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Namibian Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NamibianDollar", unit);
}
function addUnit1275(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoA", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/A", undefined, "nA", undefined);
    unit.addLabel(new LangString("nanoampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/NanoA", unit);
}
function addUnit1276(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoBQ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/BQ", undefined, undefined, undefined);
    unit.addLabel(new LangString("NanoBQ", undefined));
    config.units.set("http://qudt.org/vocab/unit/NanoBQ", unit);
}
function addUnit1277(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoBQ-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/BQ-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanobecquerels per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivityConcentration");
    config.units.set("http://qudt.org/vocab/unit/NanoBQ-PER-L", unit);
}
function addUnit1278(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/C", undefined, "nC", undefined);
    unit.addLabel(new LangString("NanoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/NanoC", unit);
}
function addUnit1279(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoFARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/FARAD", undefined, "nF", undefined);
    unit.addLabel(new LangString("Nanofarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/NanoFARAD", unit);
}
function addUnit1280(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoFARAD-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/FARAD-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanofarad Per Meter", "en-us"));
    unit.addLabel(new LangString("Nanofarad Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/NanoFARAD-PER-M", unit);
}
function addUnit1281(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanograms", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/NanoGM", unit);
}
function addUnit1282(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1.15740740740741E-17"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanograms per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-DAY", unit);
}
function addUnit1283(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanogram Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-KiloGM", unit);
}
function addUnit1284(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanograms per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-L", unit);
}
function addUnit1285(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanogram Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Nanogram Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-M3", unit);
}
function addUnit1286(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM-PER-MicroL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanograms per microlitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-MicroL", unit);
}
function addUnit1287(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoGM-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanograms per millilitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentration");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-MilliL", unit);
}
function addUnit1288(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoH", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/H", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanohenry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeance");
    config.units.set("http://qudt.org/vocab/unit/NanoH", unit);
}
function addUnit1289(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoH-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/H-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanohenry Per Meter", "en-us"));
    unit.addLabel(new LangString("Nanohenry Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
    config.units.set("http://qudt.org/vocab/unit/NanoH-PER-M", unit);
}
function addUnit1290(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanolitre", "en-us"));
    unit.addLabel(new LangString("Nanolitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/NanoL", unit);
}
function addUnit1291(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanometer", "en-us"));
    unit.addLabel(new LangString("Nanometre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/NanoM", unit);
}
function addUnit1292(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("1E-18"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Nanometer", "en-us"));
    unit.addLabel(new LangString("Square Nanometre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/NanoM2", unit);
}
function addUnit1293(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("1.0E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("NanoMOL", undefined));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL", unit);
}
function addUnit1294(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-CentiM3-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("2.77777777777778E-7"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per cubic centimetre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-CentiM3-HR", unit);
}
function addUnit1295(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-GM-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per gram per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-GM-SEC", unit);
}
function addUnit1296(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("1E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-KiloGM", unit);
}
function addUnit1297(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("0.000001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-L", unit);
}
function addUnit1298(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-L-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1.15740740740741E-11"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per litre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-L-DAY", unit);
}
function addUnit1299(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-L-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("2.77777777777778E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per litre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-L-HR", unit);
}
function addUnit1300(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", new Decimal("1.15740740740741E-14"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-M2-DAY", unit);
}
function addUnit1301(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-MicroGM-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0", new Decimal("0.000277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per microgram per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-MicroGM-HR", unit);
}
function addUnit1302(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per micromole", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL", unit);
}
function addUnit1303(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D1", new Decimal("1.15740740740741E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanomoles per micromole per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL-DAY", unit);
}
function addUnit1304(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.0E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("NanoS", undefined));
    config.units.set("http://qudt.org/vocab/unit/NanoS", unit);
}
function addUnit1305(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoS-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1E-7"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanosiemens Per Centimetre", "en"));
    unit.addLabel(new LangString("Nanosiemens Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/NanoS-PER-CentiM", unit);
}
function addUnit1306(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanosiemens Per Metre", "en"));
    unit.addLabel(new LangString("Nanosiemens Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/NanoS-PER-M", unit);
}
function addUnit1307(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/SEC", undefined, "ns", undefined);
    unit.addLabel(new LangString("nanosecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/NanoSEC", unit);
}
function addUnit1308(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoT", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/T", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanotesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    config.units.set("http://qudt.org/vocab/unit/NanoT", unit);
}
function addUnit1309(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NanoW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1E-9"), undefined, "http://qudt.org/vocab/prefix/Nano", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("Nanowatt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/NanoW", unit);
}
function addUnit1310(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NepaleseRupee", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nepalese Rupee", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NepaleseRupee", unit);
}
function addUnit1311(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NetherlandsAntillianGuilder", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Netherlands Antillian Guilder", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NetherlandsAntillianGuilder", unit);
}
function addUnit1312(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NewIsraeliShekel", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("New Israeli Shekel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NewIsraeliShekel", unit);
}
function addUnit1313(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NewTaiwanDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("New Taiwan Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NewTaiwanDollar", unit);
}
function addUnit1314(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NewTurkishLira", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("New Turkish Lira", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NewTurkishLira", unit);
}
function addUnit1315(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NewZealandDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("New Zealand Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NewZealandDollar", unit);
}
function addUnit1316(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Ngultrum", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ngultrum", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Ngultrum", unit);
}
function addUnit1317(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NorthKoreanWon", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("North Korean Won", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NorthKoreanWon", unit);
}
function addUnit1318(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NorwegianKrone", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Norwegian Krone", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NorwegianKrone", unit);
}
function addUnit1319(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/NuevoSol", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Nuevo Sol", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/NuevoSol", unit);
}
function addUnit1320(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OCT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "oct", undefined);
    unit.addLabel(new LangString("Oct", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/OCT", unit);
}
function addUnit1321(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OERSTED", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", new Decimal("79.5774715"), undefined, undefined, undefined, undefined, "Oe", undefined);
    unit.addLabel(new LangString("Oersted", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H");
    config.units.set("http://qudt.org/vocab/unit/OERSTED", unit);
}
function addUnit1322(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OERSTED-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("0.795774715"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Oersted Centimetre", "en"));
    unit.addLabel(new LangString("Oersted Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagnetomotiveForce");
    config.units.set("http://qudt.org/vocab/unit/OERSTED-CentiM", unit);
}
function addUnit1323(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Ω", undefined);
    unit.addLabel(new LangString("Ohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Reactance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ModulusOfImpedance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Impedance");
    config.units.set("http://qudt.org/vocab/unit/OHM", unit);
}
function addUnit1324(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OHM-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ohm Meter", "en-us"));
    unit.addLabel(new LangString("Ohm Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ResidualResistivity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistivity");
    config.units.set("http://qudt.org/vocab/unit/OHM-M", unit);
}
function addUnit1325(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OHM-M2-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Ohm-m2/m", undefined);
    unit.addLabel(new LangString("Ohm Square Meter per Meter", "en-us"));
    unit.addLabel(new LangString("Ohm Square Metre per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistivity");
    config.units.set("http://qudt.org/vocab/unit/OHM-M2-PER-M", unit);
}
function addUnit1326(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OHM_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("1E-9"), undefined, undefined, undefined, undefined, "abΩ", undefined);
    unit.addLabel(new LangString("Abohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/OHM_Ab", unit);
}
function addUnit1327(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OHM_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("898760000000.0"), undefined, undefined, undefined, undefined, "stat Ω ", undefined);
    unit.addLabel(new LangString("Statohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/OHM_Stat", unit);
}
function addUnit1328(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.028349523125"), undefined, undefined, undefined, undefined, "ozm", undefined);
    unit.addLabel(new LangString("Ounce Mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/OZ", unit);
}
function addUnit1329(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0", new Decimal("0.0086409"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
    config.units.set("http://qudt.org/vocab/unit/OZ-FT", unit);
}
function addUnit1330(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0", new Decimal("0.000694563"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
    config.units.set("http://qudt.org/vocab/unit/OZ-IN", unit);
}
function addUnit1331(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("3.2812E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-DAY", unit);
}
function addUnit1332(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.305151727"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Imperial Mass Ounce per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-FT2", unit);
}
function addUnit1333(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-GAL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("6.23602329"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Imperial Mass Ounce per Gallon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-GAL", unit);
}
function addUnit1334(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-GAL_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("6.236"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Gallon (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-GAL_UK", unit);
}
function addUnit1335(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-GAL_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("7.8125"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Gallon (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-GAL_US", unit);
}
function addUnit1336(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.00000787487"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-HR", unit);
}
function addUnit1337(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-IN3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1729.99404"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Imperial Mass Ounce per Cubic Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-IN3", unit);
}
function addUnit1338(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.000472492"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-MIN", unit);
}
function addUnit1339(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.02834952"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-SEC", unit);
}
function addUnit1340(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-YD2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.0339057474748823"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Imperial Mass Ounce per Square Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-YD2", unit);
}
function addUnit1341(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ-PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("0.0370798"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (avoirdupois) Per Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/OZ-PER-YD3", unit);
}
function addUnit1342(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.278013875"), undefined, undefined, undefined, undefined, "ozf", undefined);
    unit.addLabel(new LangString("Imperial Ounce Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/OZ_F", unit);
}
function addUnit1343(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_F-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("0.0706155243"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Imperial Ounce Force Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
    config.units.set("http://qudt.org/vocab/unit/OZ_F-IN", unit);
}
function addUnit1344(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_TROY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.0311034768"), undefined, undefined, undefined, undefined, "oz", undefined);
    unit.addLabel(new LangString("Ounce Troy", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/OZ_TROY", unit);
}
function addUnit1345(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0000284130625"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Fluid Ounce (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK", unit);
}
function addUnit1346(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00000787487"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (UK Fluid) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-DAY", unit);
}
function addUnit1347(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00000787487"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (UK Fluid) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-HR", unit);
}
function addUnit1348(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00472492"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (UK Fluid) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-MIN", unit);
}
function addUnit1349(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0000284"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (UK Fluid) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-SEC", unit);
}
function addUnit1350(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0000295735296"), undefined, undefined, undefined, undefined, "oz", undefined);
    unit.addLabel(new LangString("US Liquid Ounce", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US", unit);
}
function addUnit1351(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("3.42286E-10"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (US Fluid) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-DAY", unit);
}
function addUnit1352(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("8.214869E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (US Fluid) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-HR", unit);
}
function addUnit1353(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("4.92892E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (US Fluid) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-MIN", unit);
}
function addUnit1354(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0000295735296"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ounce (US Fluid) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-SEC", unit);
}
function addUnit1355(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/OmaniRial", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Rial Omani", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/OmaniRial", unit);
}
function addUnit1356(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Ouguiya", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ouguiya", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Ouguiya", unit);
}
function addUnit1357(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Pa", undefined);
    unit.addLabel(new LangString("Pascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Fugacity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ModulusOfElasticity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BulkModulus");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ShearModulus");
    config.units.set("http://qudt.org/vocab/unit/PA", unit);
}
function addUnit1358(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Litre Per Second", "en"));
    unit.addLabel(new LangString("Pascal Liter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PA-L-PER-SEC", unit);
}
function addUnit1359(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal metres", "en"));
    config.units.set("http://qudt.org/vocab/unit/PA-M", unit);
}
function addUnit1360(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-M-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal metres per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PA-M-PER-SEC", unit);
}
function addUnit1361(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-M-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal metres per square second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PA-M-PER-SEC2", unit);
}
function addUnit1362(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Cubic Metre Per Second", "en"));
    unit.addLabel(new LangString("Pascal Cubic Meter Per Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PA-M3-PER-SEC", unit);
}
function addUnit1363(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.00001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/PA-PER-BAR", unit);
}
function addUnit1364(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("0.000277777778"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-MIN", undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/PA-PER-HR", unit);
}
function addUnit1365(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PA-PER-K", unit);
}
function addUnit1366(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Per Metre", "en"));
    unit.addLabel(new LangString("Pascal Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/PA-PER-M", unit);
}
function addUnit1367(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("0.0166666667"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/PA-PER-MIN", unit);
}
function addUnit1368(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/PA-PER-SEC", unit);
}
function addUnit1369(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/PA-SEC", unit);
}
function addUnit1370(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-SEC-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.00001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Second Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/PA-SEC-PER-BAR", unit);
}
function addUnit1371(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-SEC-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Second Per Metre", "en"));
    unit.addLabel(new LangString("Pascal Second Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AcousticImpedance");
    config.units.set("http://qudt.org/vocab/unit/PA-SEC-PER-M", unit);
}
function addUnit1372(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA-SEC-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-4I0M1H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pascal Second Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Pascal Second Per Cubic Meter", "en-us"));
    config.units.set("http://qudt.org/vocab/unit/PA-SEC-PER-M3", unit);
}
function addUnit1373(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA2-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M2H0T-6D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square pascal per square second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PA2-PER-SEC2", unit);
}
function addUnit1374(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PA2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M2H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Pascal Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundExposure");
    config.units.set("http://qudt.org/vocab/unit/PA2-SEC", unit);
}
function addUnit1375(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PAB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Balboa", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/PAB", unit);
}
function addUnit1376(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PARSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("30856780000000000.0"), undefined, undefined, undefined, undefined, "pc", undefined);
    unit.addLabel(new LangString("Parsec", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/PARSEC", unit);
}
function addUnit1377(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PCA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, "PCA", undefined);
    unit.addLabel(new LangString("Pica", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/PCA", unit);
}
function addUnit1378(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PDL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("0.138254954376"), undefined, undefined, undefined, undefined, "pdl", undefined);
    unit.addLabel(new LangString("Poundal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/PDL", unit);
}
function addUnit1379(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PDL-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.48816443"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Poundal per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/PDL-PER-FT2", unit);
}
function addUnit1380(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-ANGSTROM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Ã¥ngstrÃ¶m", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    config.units.set("http://qudt.org/vocab/unit/PER-ANGSTROM", unit);
}
function addUnit1381(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", new Decimal("0.00001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
    config.units.set("http://qudt.org/vocab/unit/PER-BAR", unit);
}
function addUnit1382(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Centimeter", "en-us"));
    unit.addLabel(new LangString("Reciprocal Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    config.units.set("http://qudt.org/vocab/unit/PER-CentiM", unit);
}
function addUnit1383(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-CentiM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Centimetre", "en"));
    unit.addLabel(new LangString("Reciprocal Cubic Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    config.units.set("http://qudt.org/vocab/unit/PER-CentiM3", unit);
}
function addUnit1384(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.00001157407"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-DAY", unit);
}
function addUnit1385(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-FT3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("35.31466"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    config.units.set("http://qudt.org/vocab/unit/PER-FT3", unit);
}
function addUnit1386(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal gram", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-GM", unit);
}
function addUnit1387(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-GigaEV2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-4I0M-2H0T4D0", new Decimal("38956440500000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Square Giga Electron Volt Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseSquareEnergy");
    config.units.set("http://qudt.org/vocab/unit/PER-GigaEV2", unit);
}
function addUnit1388(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-H", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Henry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/PER-H", unit);
}
function addUnit1389(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("360.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-HR", unit);
}
function addUnit1390(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-IN3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("61023.76"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    config.units.set("http://qudt.org/vocab/unit/PER-IN3", unit);
}
function addUnit1391(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-J-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Joule Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Reciprocal Joule Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensityOfStates");
    config.units.set("http://qudt.org/vocab/unit/PER-J-M3", unit);
}
function addUnit1392(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearExpansionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseTemperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativePressureCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CubicExpansionCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-K", unit);
}
function addUnit1393(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-KiloM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Kilometre", "en"));
    unit.addLabel(new LangString("Reciprocal Kilometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurvatureFromRadius");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropagationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-KiloM", unit);
}
function addUnit1394(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-KiloV-A-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H0T2D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Kilovolt Ampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseEnergy");
    config.units.set("http://qudt.org/vocab/unit/PER-KiloV-A-HR", unit);
}
function addUnit1395(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Litre", "en"));
    unit.addLabel(new LangString("Reciprocal Liter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    config.units.set("http://qudt.org/vocab/unit/PER-L", unit);
}
function addUnit1396(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Metre", "en"));
    unit.addLabel(new LangString("Reciprocal Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurvatureFromRadius");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropagationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-M", unit);
}
function addUnit1397(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H-1T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Metre Kelvin", "en"));
    unit.addLabel(new LangString("Reciprocal Meter Kelvin", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLengthTemperature");
    config.units.set("http://qudt.org/vocab/unit/PER-M-K", unit);
}
function addUnit1398(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M-NanoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal metre per nanometre", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-M-NanoM", unit);
}
function addUnit1399(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M-NanoM-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal metre per nanometre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-M-NanoM-SR", unit);
}
function addUnit1400(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-M-SEC", unit);
}
function addUnit1401(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal metre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-M-SR", unit);
}
function addUnit1402(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "m^{-2}", undefined);
    unit.addLabel(new LangString("Reciprocal Square Meter", "en-us"));
    unit.addLabel(new LangString("Reciprocal Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
    config.units.set("http://qudt.org/vocab/unit/PER-M2", unit);
}
function addUnit1403(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M2-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal square metre per second", "en"));
    unit.addLabel(new LangString("Reciprocal Square Metre Second", "en"));
    unit.addLabel(new LangString("Reciprocal Square Meter Second", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Flux");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluenceRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleCurrent");
    config.units.set("http://qudt.org/vocab/unit/PER-M2-SEC", unit);
}
function addUnit1404(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Reciprocal Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
    config.units.set("http://qudt.org/vocab/unit/PER-M3", unit);
}
function addUnit1405(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-M3-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Meter Second", "en-us"));
    unit.addLabel(new LangString("Reciprocal Cubic Metre Second", "en"));
    unit.addLabel(new LangString("Reciprocal cubic metre per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Slowing-DownDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleSourceDensity");
    config.units.set("http://qudt.org/vocab/unit/PER-M3-SEC", unit);
}
function addUnit1406(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MILLE-PER-PSI", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", new Decimal("1.450377E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Mille Per Psi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IsothermalCompressibility");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
    config.units.set("http://qudt.org/vocab/unit/PER-MILLE-PER-PSI", unit);
}
function addUnit1407(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("60.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-MIN", unit);
}
function addUnit1408(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MO", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("3.91935077E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Month", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-MO", unit);
}
function addUnit1409(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Mole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseAmountOfSubstance");
    config.units.set("http://qudt.org/vocab/unit/PER-MOL", unit);
}
function addUnit1410(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MicroM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Micrometre", "en"));
    unit.addLabel(new LangString("Reciprocal Micrometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurvatureFromRadius");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropagationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-MicroM", unit);
}
function addUnit1411(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MicroMOL-L", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L-3I0M0H0T0D0", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal micromole per litre", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-MicroMOL-L", unit);
}
function addUnit1412(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Millimetre", "en"));
    unit.addLabel(new LangString("Reciprocal Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurvatureFromRadius");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropagationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-MilliM", unit);
}
function addUnit1413(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MilliM3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Millimeter", "en-us"));
    unit.addLabel(new LangString("Reciprocal Cubic Millimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    config.units.set("http://qudt.org/vocab/unit/PER-MilliM3", unit);
}
function addUnit1414(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-MilliSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal millisecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-MilliSEC", unit);
}
function addUnit1415(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-NanoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Nanometre", "en"));
    unit.addLabel(new LangString("Reciprocal Nanometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurvatureFromRadius");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropagationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-NanoM", unit);
}
function addUnit1416(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-PA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Pascal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IsentropicCompressibility");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IsothermalCompressibility");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
    config.units.set("http://qudt.org/vocab/unit/PER-PA", unit);
}
function addUnit1417(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-PA-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Pascal per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-PA-SEC", unit);
}
function addUnit1418(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-PSI", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", new Decimal("0.0001450377"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Psi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
    config.units.set("http://qudt.org/vocab/unit/PER-PSI", unit);
}
function addUnit1419(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-PicoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1000000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Picometre", "en"));
    unit.addLabel(new LangString("Reciprocal Picometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurvatureFromRadius");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhaseCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PropagationCoefficient");
    config.units.set("http://qudt.org/vocab/unit/PER-PicoM", unit);
}
function addUnit1420(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-PlanckMass2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-2H0T0D0", new Decimal("2111089000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Inverse Square Planck Mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseSquareMass");
    config.units.set("http://qudt.org/vocab/unit/PER-PlanckMass2", unit);
}
function addUnit1421(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-SEC", unit);
}
function addUnit1422(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-SEC-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Second Square Meter", "en-us"));
    unit.addLabel(new LangString("Reciprocal Second Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Flux");
    config.units.set("http://qudt.org/vocab/unit/PER-SEC-M2", unit);
}
function addUnit1423(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-SEC-M2-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Second Square Metre Steradian", "en"));
    unit.addLabel(new LangString("Reciprocal Second Square Meter Steradian", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhotonRadiance");
    config.units.set("http://qudt.org/vocab/unit/PER-SEC-M2-SR", unit);
}
function addUnit1424(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-SEC-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Second Steradian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhotonIntensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TemporalSummationFunction");
    config.units.set("http://qudt.org/vocab/unit/PER-SEC-SR", unit);
}
function addUnit1425(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal square second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-SEC2", unit);
}
function addUnit1426(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/PER-SR", unit);
}
function addUnit1427(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-T-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M-1H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Tesla Metre", "en"));
    unit.addLabel(new LangString("Reciprocal Tesla Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticReluctivity");
    config.units.set("http://qudt.org/vocab/unit/PER-T-M", unit);
}
function addUnit1428(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-T-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Tesla Second Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/PER-T-SEC", unit);
}
function addUnit1429(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-WB", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Weber", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseMagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/PER-WB", unit);
}
function addUnit1430(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-WK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.000001653439"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Week", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-WK", unit);
}
function addUnit1431(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", new Decimal("1.307951"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
    config.units.set("http://qudt.org/vocab/unit/PER-YD3", unit);
}
function addUnit1432(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PER-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("3.1709792E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Reciprocal Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PER-YR", unit);
}
function addUnit1433(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERCENT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "%", undefined);
    unit.addLabel(new LangString("Percent", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthPercentage");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeHumidity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VoltagePercentage");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ResistancePercentage");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeLuminousFlux");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressurePercentage");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Prevalence");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativePartialPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimePercentage");
    config.units.set("http://qudt.org/vocab/unit/PERCENT", unit);
}
function addUnit1434(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERCENT-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.0000115740740740741"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Percent per day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-DAY", unit);
}
function addUnit1435(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERCENT-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.000277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Percent per hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-HR", unit);
}
function addUnit1436(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERCENT-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Percent per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-M", unit);
}
function addUnit1437(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERCENT-PER-WK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.00000165343915343915"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Percent per week", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-WK", unit);
}
function addUnit1438(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERCENT_RH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.01"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Percent Relative Humidity", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeHumidity");
    config.units.set("http://qudt.org/vocab/unit/PERCENT_RH", unit);
}
function addUnit1439(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERMEABILITY_EM_REL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Relative Electromagnetic Permeability", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectromagneticPermeabilityRatio");
    config.units.set("http://qudt.org/vocab/unit/PERMEABILITY_EM_REL", unit);
}
function addUnit1440(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERMEABILITY_REL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.00000125663706"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Relative Permeability", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PermeabilityRatio");
    config.units.set("http://qudt.org/vocab/unit/PERMEABILITY_REL", unit);
}
function addUnit1441(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PERMITTIVITY_REL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("8.854187817E-12"), undefined, undefined, undefined, undefined, "εᵣ", undefined);
    unit.addLabel(new LangString("Relative Permittivity", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/PERMITTIVITY_REL", unit);
}
function addUnit1442(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Acidity", "en"));
    config.units.set("http://qudt.org/vocab/unit/PH", unit);
}
function addUnit1443(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PHOT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("10000.0"), undefined, undefined, undefined, undefined, "ph", undefined);
    unit.addLabel(new LangString("Phot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousFluxPerArea");
    config.units.set("http://qudt.org/vocab/unit/PHOT", unit);
}
function addUnit1444(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00056826125"), undefined, undefined, undefined, undefined, "pi", undefined);
    unit.addLabel(new LangString("Imperial Pint", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/PINT", unit);
}
function addUnit1445(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0005682613"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/PINT_UK", unit);
}
function addUnit1446(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("6.577098E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (UK) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-DAY", unit);
}
function addUnit1447(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.578504E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (UK) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-HR", unit);
}
function addUnit1448(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000009471022"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (UK) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-MIN", unit);
}
function addUnit1449(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0005682613"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (UK) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-SEC", unit);
}
function addUnit1450(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0004731765"), undefined, undefined, undefined, undefined, "pt", undefined);
    unit.addLabel(new LangString("US Liquid Pint", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/PINT_US", unit);
}
function addUnit1451(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("5.47658E-9"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (US Liquid) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-DAY", unit);
}
function addUnit1452(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_US-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.314379E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (US Liquid) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-HR", unit);
}
function addUnit1453(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_US-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000007886275"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (US Liquid) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-MIN", unit);
}
function addUnit1454(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_US-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0004731765"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pint (US Liquid) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-SEC", unit);
}
function addUnit1455(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PINT_US_DRY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.000550610471"), undefined, undefined, undefined, undefined, "dry_pt", undefined);
    unit.addLabel(new LangString("US Dry Pint", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/PINT_US_DRY", unit);
}
function addUnit1456(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.009092181"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/PK_UK", unit);
}
function addUnit1457(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.05233576E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (UK) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-DAY", unit);
}
function addUnit1458(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000002525605833"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (UK) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-HR", unit);
}
function addUnit1459(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00015153635"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (UK) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-MIN", unit);
}
function addUnit1460(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.009092181"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (UK) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-SEC", unit);
}
function addUnit1461(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_US_DRY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00880976754"), undefined, undefined, undefined, undefined, "pk", undefined);
    unit.addLabel(new LangString("US Peck", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/PK_US_DRY", unit);
}
function addUnit1462(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_US_DRY-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.01964902E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (US Dry) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-DAY", unit);
}
function addUnit1463(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_US_DRY-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000002447157651"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (US Dry) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-HR", unit);
}
function addUnit1464(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_US_DRY-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000146829459067"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (US Dry) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-MIN", unit);
}
function addUnit1465(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PK_US_DRY-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00880976754"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peck (US Dry) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-SEC", unit);
}
function addUnit1466(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/POISE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, "P", undefined);
    unit.addLabel(new LangString("Poise", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/POISE", unit);
}
function addUnit1467(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/POISE-PER-BAR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Poise Per Bar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/POISE-PER-BAR", unit);
}
function addUnit1468(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PPB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-9"), undefined, undefined, undefined, undefined, "ppb", undefined);
    unit.addLabel(new LangString("Parts per billion", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/PPB", unit);
}
function addUnit1469(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PPM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.000001"), undefined, undefined, undefined, undefined, "ppm", undefined);
    unit.addLabel(new LangString("Parts per million", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/PPM", unit);
}
function addUnit1470(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PPTH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.001"), undefined, undefined, undefined, undefined, "‰", undefined);
    unit.addLabel(new LangString("Parts per thousand", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/PPTH", unit);
}
function addUnit1471(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PPTH-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("2.77777777777778E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Parts per thousand per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/PPTH-PER-HR", unit);
}
function addUnit1472(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PPTR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-12"), undefined, undefined, undefined, undefined, "pptr", undefined);
    unit.addLabel(new LangString("Parts per trillion", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    config.units.set("http://qudt.org/vocab/unit/PPTR", unit);
}
function addUnit1473(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PPTR_VOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-12"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Parts per trillion by volume", "en"));
    config.units.set("http://qudt.org/vocab/unit/PPTR_VOL", unit);
}
function addUnit1474(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSI", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("6894.75789"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("PSI", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/PSI", unit);
}
function addUnit1475(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSI-IN3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("0.1129848"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Psi Cubic Inch Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PSI-IN3-PER-SEC", unit);
}
function addUnit1476(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSI-L-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("6.894757"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Psi Liter Per Second", "en-us"));
    unit.addLabel(new LangString("Psi Litre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/PSI-L-PER-SEC", unit);
}
function addUnit1477(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSI-M3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("6894.757"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("PSI Cubic Meter Per Second", "en-us"));
    unit.addLabel(new LangString("PSI Cubic Metre Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PSI-M3-PER-SEC", unit);
}
function addUnit1478(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSI-PER-PSI", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Psi Per Psi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
    config.units.set("http://qudt.org/vocab/unit/PSI-PER-PSI", unit);
}
function addUnit1479(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSI-YD3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("5271.42"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Psi Cubic Yard Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PSI-YD3-PER-SEC", unit);
}
function addUnit1480(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PSU", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Practical salinity unit", undefined));
    config.units.set("http://qudt.org/vocab/unit/PSU", unit);
}
function addUnit1481(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.0000254"), undefined, undefined, undefined, undefined, "pt", undefined);
    unit.addLabel(new LangString("Point", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/PT", unit);
}
function addUnit1482(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Paanga", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pa'anga", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Paanga", unit);
}
function addUnit1483(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PakistanRupee", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pakistan Rupee", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/PakistanRupee", unit);
}
function addUnit1484(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Palladium-OunceTroy", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Palladium (one Troy ounce)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Palladium-OunceTroy", unit);
}
function addUnit1485(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Pataca", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pataca", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Pataca", unit);
}
function addUnit1486(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PebiBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("6243314768165359.2088811673338586"), undefined, "http://qudt.org/vocab/prefix/Pebi", "http://qudt.org/vocab/unit/BYTE", undefined, "PiB", undefined);
    unit.addLabel(new LangString("PebiByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/PebiBYTE", unit);
}
function addUnit1487(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Pennyweight", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.001555174"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pennyweight", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/Pennyweight", unit);
}
function addUnit1488(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PetaBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5545177444479562.4753378569716654"), undefined, "http://qudt.org/vocab/prefix/Peta", "http://qudt.org/vocab/unit/BYTE", undefined, "PB", undefined);
    unit.addLabel(new LangString("PetaByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/PetaBYTE", unit);
}
function addUnit1489(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PetaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Peta", "http://qudt.org/vocab/unit/C", undefined, "PC", undefined);
    unit.addLabel(new LangString("PetaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/PetaC", unit);
}
function addUnit1490(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PetaJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Peta", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Petajoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/PetaJ", unit);
}
function addUnit1491(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PhilippinePeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Philippine Peso", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/PhilippinePeso", unit);
}
function addUnit1492(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoA", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/A", undefined, "pA", undefined);
    unit.addLabel(new LangString("picoampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/PicoA", unit);
}
function addUnit1493(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoA-PER-MicroMOL-L", undefined, "http://qudt.org/vocab/dimensionvector/A-1E1L-3I0M0H0T0D0", new Decimal("0.001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Picoamps per micromole per litre", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoA-PER-MicroMOL-L", unit);
}
function addUnit1494(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/C", undefined, "pC", undefined);
    unit.addLabel(new LangString("PicoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/PicoC", unit);
}
function addUnit1495(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoFARAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/FARAD", undefined, "pF", undefined);
    unit.addLabel(new LangString("Picofarad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
    config.units.set("http://qudt.org/vocab/unit/PicoFARAD", unit);
}
function addUnit1496(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoFARAD-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/FARAD-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picofarad Per Metre", "en"));
    unit.addLabel(new LangString("Picofarad Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
    config.units.set("http://qudt.org/vocab/unit/PicoFARAD-PER-M", unit);
}
function addUnit1497(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1E-15"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picograms", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/PicoGM", unit);
}
function addUnit1498(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoGM-PER-GM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picograms per gram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-GM", unit);
}
function addUnit1499(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoGM-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("0.15"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-GM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picograms per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
    config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-KiloGM", unit);
}
function addUnit1500(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoGM-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picofarad Per Metre", "en"));
    unit.addLabel(new LangString("Picofarad Per Meter", "en-us"));
    unit.addLabel(new LangString("Picograms per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-L", unit);
}
function addUnit1501(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoGM-PER-MilliL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/GM-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picograms per millilitre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassConcentration");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-MilliL", unit);
}
function addUnit1502(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoH", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/H", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picohenry", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
    config.units.set("http://qudt.org/vocab/unit/PicoH", unit);
}
function addUnit1503(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1E-15"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picolitre", "en"));
    unit.addLabel(new LangString("Picolitre", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/PicoL", unit);
}
function addUnit1504(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picometre", "en"));
    unit.addLabel(new LangString("Picometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/PicoM", unit);
}
function addUnit1505(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", new Decimal("1.0E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/MOL", undefined, undefined, undefined);
    unit.addLabel(new LangString("PicoMOL", undefined));
    config.units.set("http://qudt.org/vocab/unit/PicoMOL", unit);
}
function addUnit1506(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", new Decimal("1E-12"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass");
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-KiloGM", unit);
}
function addUnit1507(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-L", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1E-9"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-L", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per litre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-L", unit);
}
function addUnit1508(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-L-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0", new Decimal("1.15740740740741E-14"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per litre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-L-DAY", unit);
}
function addUnit1509(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-L-HR", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("2.77777777777778E-13"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per litre per hour", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-L-HR", unit);
}
function addUnit1510(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-M-W-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M-1H0T2D0", new Decimal("1E-12"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per metre per watt per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M-W-SEC", unit);
}
function addUnit1511(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-M2-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1.15740740740741E-17"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M2-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per square metre per day", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M2-DAY", unit);
}
function addUnit1512(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Solubility_Water");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume");
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M3", unit);
}
function addUnit1513(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoMOL-PER-M3-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/MOL-PER-M3-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picomoles per cubic metre per second", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M3-SEC", unit);
}
function addUnit1514(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoPA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("1.0E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/PA", undefined, undefined, undefined);
    unit.addLabel(new LangString("PicoPA", undefined));
    config.units.set("http://qudt.org/vocab/unit/PicoPA", unit);
}
function addUnit1515(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoPA-PER-KiloM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1E-15"), undefined, undefined, "http://qudt.org/vocab/unit/PA-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picopascal Per Kilometre", "en"));
    unit.addLabel(new LangString("Picopascal Per Kilometer", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/PicoPA-PER-KiloM", unit);
}
function addUnit1516(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoS", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.0E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/S", undefined, undefined, undefined);
    unit.addLabel(new LangString("PicoS", undefined));
    config.units.set("http://qudt.org/vocab/unit/PicoS", unit);
}
function addUnit1517(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoS-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picosiemens Per Metre", "en"));
    unit.addLabel(new LangString("Picosiemens Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/PicoS-PER-M", unit);
}
function addUnit1518(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picosecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/PicoSEC", unit);
}
function addUnit1519(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1E-12"), undefined, "http://qudt.org/vocab/prefix/Pico", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picowatt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PicoW", unit);
}
function addUnit1520(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoW-PER-CentiM2-L", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-3D0", new Decimal("0.00001"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Picowatts per square centimetre per litre", "en"));
    config.units.set("http://qudt.org/vocab/unit/PicoW-PER-CentiM2-L", unit);
}
function addUnit1521(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PicoW-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("1E-12"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Picowatt Per Square Metre", "en"));
    unit.addLabel(new LangString("Picowatt Per Square Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/PicoW-PER-M2", unit);
}
function addUnit1522(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckArea", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("2.61223E-70"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Area", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/PlanckArea", unit);
}
function addUnit1523(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckCharge", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1.87554587E-18"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Charge", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/PlanckCharge", unit);
}
function addUnit1524(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckCurrent", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", new Decimal("34789000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Current", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
    config.units.set("http://qudt.org/vocab/unit/PlanckCurrent", unit);
}
function addUnit1525(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckCurrentDensity", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", new Decimal("133177400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Current Density", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity");
    config.units.set("http://qudt.org/vocab/unit/PlanckCurrentDensity", unit);
}
function addUnit1526(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckDensity", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("5155000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Density", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/PlanckDensity", unit);
}
function addUnit1527(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckEnergy", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1956100000.0"), undefined, undefined, undefined, undefined, "Eᵨ", undefined);
    unit.addLabel(new LangString("Planck Energy", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/PlanckEnergy", unit);
}
function addUnit1528(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckForce", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("121027000000000000000000000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Force", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/PlanckForce", unit);
}
function addUnit1529(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckFrequency", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("18548700000000000000000000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Frequency", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/PlanckFrequency", unit);
}
function addUnit1530(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckFrequency_Ang", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Angular Frequency", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/PlanckFrequency_Ang", unit);
}
function addUnit1531(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckImpedance", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("29.9792458"), undefined, undefined, undefined, undefined, "ZP", undefined);
    unit.addLabel(new LangString("Planck Impedance", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/PlanckImpedance", unit);
}
function addUnit1532(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckLength", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("1.616252E-35"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Length", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/PlanckLength", unit);
}
function addUnit1533(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckMass", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("2.17644E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/PlanckMass", unit);
}
function addUnit1534(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckMomentum", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", new Decimal("6.52485"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Momentum", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
    config.units.set("http://qudt.org/vocab/unit/PlanckMomentum", unit);
}
function addUnit1535(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckPower", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("36283100000000000000000000000000000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Power", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/PlanckPower", unit);
}
function addUnit1536(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckPressure", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("463309000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Pressure", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/PlanckPressure", unit);
}
function addUnit1537(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckTemperature", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("PlanckTemperature", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermodynamicTemperature");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
    config.units.set("http://qudt.org/vocab/unit/PlanckTemperature", unit);
}
function addUnit1538(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckTime", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("5.39124E-44"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Time", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/PlanckTime", unit);
}
function addUnit1539(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckVolt", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("1042950000000000000000000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/PlanckVolt", unit);
}
function addUnit1540(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PlanckVolume", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("4.22419E-105"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Planck Volume", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/PlanckVolume", unit);
}
function addUnit1541(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Platinum-OunceTroy", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Platinum (one Troy ounce)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Platinum-OunceTroy", unit);
}
function addUnit1542(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/PoundSterling", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pound Sterling", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/PoundSterling", unit);
}
function addUnit1543(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Pula", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Pula", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Pula", unit);
}
function addUnit1544(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0011365225"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/QT_UK", unit);
}
function addUnit1545(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.31542E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (UK Liquid) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-DAY", unit);
}
function addUnit1546(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_UK-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("3.157007E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (UK Liquid) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-HR", unit);
}
function addUnit1547(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_UK-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001894205"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (UK Liquid) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-MIN", unit);
}
function addUnit1548(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_UK-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0011365225"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (UK Liquid) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-SEC", unit);
}
function addUnit1549(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.000946353"), undefined, undefined, undefined, undefined, "qt", undefined);
    unit.addLabel(new LangString("US Liquid Quart", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
    config.units.set("http://qudt.org/vocab/unit/QT_US", unit);
}
function addUnit1550(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("1.095316E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (US Liquid) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_US-PER-DAY", unit);
}
function addUnit1551(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_US-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("2.62875833E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (US Liquid) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_US-PER-HR", unit);
}
function addUnit1552(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_US-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00001577255"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (US Liquid) Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_US-PER-MIN", unit);
}
function addUnit1553(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_US-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.000946353"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quart (US Liquid) Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/QT_US-PER-SEC", unit);
}
function addUnit1554(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QT_US_DRY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.001101220942715"), undefined, undefined, undefined, undefined, "dry_qt", undefined);
    unit.addLabel(new LangString("US Dry Quart", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
    config.units.set("http://qudt.org/vocab/unit/QT_US_DRY", unit);
}
function addUnit1555(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QUAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1055000000000000000.0"), undefined, undefined, undefined, undefined, "quad", undefined);
    unit.addLabel(new LangString("Quad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/QUAD", unit);
}
function addUnit1556(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/QatariRial", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Qatari Rial", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/QatariRial", unit);
}
function addUnit1557(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Quarter_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("12.70058636"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quarter (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/Quarter_UK", unit);
}
function addUnit1558(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Quetzal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Quetzal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Quetzal", unit);
}
function addUnit1559(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/R", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", new Decimal("0.000258"), undefined, undefined, undefined, undefined, "R", undefined);
    unit.addLabel(new LangString("Roentgen", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricChargePerMass");
    config.units.set("http://qudt.org/vocab/unit/R", unit);
}
function addUnit1560(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, "rad", undefined);
    unit.addLabel(new LangString("Radian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/RAD", unit);
}
function addUnit1561(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-M2-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Radian Square Meter per Kilogram", "en-us"));
    unit.addLabel(new LangString("Radian Square Metre per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificOpticalRotatoryPower");
    config.units.set("http://qudt.org/vocab/unit/RAD-M2-PER-KiloGM", unit);
}
function addUnit1562(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-M2-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M0H0T0D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Radian Square Metre per Mole", "en"));
    unit.addLabel(new LangString("Radian Square Meter per Mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarOpticalRotatoryPower");
    config.units.set("http://qudt.org/vocab/unit/RAD-M2-PER-MOL", unit);
}
function addUnit1563(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Radian per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/RAD-PER-HR", unit);
}
function addUnit1564(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Radian per Metre", "en"));
    unit.addLabel(new LangString("Radian per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DebyeAngularWavenumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularWavenumber");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FermiAngularWavenumber");
    config.units.set("http://qudt.org/vocab/unit/RAD-PER-M", unit);
}
function addUnit1565(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("60.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Radian per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/RAD-PER-MIN", unit);
}
function addUnit1566(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("radian per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/RAD-PER-SEC", unit);
}
function addUnit1567(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Radian per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularAcceleration");
    config.units.set("http://qudt.org/vocab/unit/RAD-PER-SEC2", unit);
}
function addUnit1568(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAD_R", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.01"), undefined, undefined, undefined, undefined, "rad", undefined);
    unit.addLabel(new LangString("Rad", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
    config.units.set("http://qudt.org/vocab/unit/RAD_R", unit);
}
function addUnit1569(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RAYL", undefined, undefined, new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Rayl", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance");
    config.units.set("http://qudt.org/vocab/unit/RAYL", unit);
}
function addUnit1570(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/REM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("0.01"), undefined, undefined, undefined, undefined, "rem", undefined);
    unit.addLabel(new LangString("Rem", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
    config.units.set("http://qudt.org/vocab/unit/REM", unit);
}
function addUnit1571(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/REV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("6.28318531"), undefined, undefined, undefined, undefined, "rev", undefined);
    unit.addLabel(new LangString("Revolution", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
    config.units.set("http://qudt.org/vocab/unit/REV", unit);
}
function addUnit1572(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/REV-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.00174532925"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Revolution per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/REV-PER-HR", unit);
}
function addUnit1573(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/REV-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.104719755"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Revolution per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/REV-PER-MIN", unit);
}
function addUnit1574(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/REV-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("6.28318531"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Revolution per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
    config.units.set("http://qudt.org/vocab/unit/REV-PER-SEC", unit);
}
function addUnit1575(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/REV-PER-SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", new Decimal("6.28318531"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Revolution per Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularAcceleration");
    config.units.set("http://qudt.org/vocab/unit/REV-PER-SEC2", unit);
}
function addUnit1576(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ROD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("5.02921"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Rod", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/ROD", unit);
}
function addUnit1577(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("2.8316846592"), undefined, undefined, undefined, undefined, "RT", undefined);
    unit.addLabel(new LangString("Register Ton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/RT", unit);
}
function addUnit1578(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Riel", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Riel", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Riel", unit);
}
function addUnit1579(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RomanianNeLeu", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Romanian New Leu", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/RomanianNeLeu", unit);
}
function addUnit1580(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Rufiyaa", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Rufiyaa", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Rufiyaa", unit);
}
function addUnit1581(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Rupiah", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Rupiah", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Rupiah", unit);
}
function addUnit1582(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RussianRuble", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Russian Ruble", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/RussianRuble", unit);
}
function addUnit1583(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/RwandaFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Rwanda Franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/RwandaFranc", unit);
}
function addUnit1584(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/S", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "S", undefined);
    unit.addLabel(new LangString("Siemens", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Admittance");
    config.units.set("http://qudt.org/vocab/unit/S", unit);
}
function addUnit1585(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/S-M2-PER-MOL", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Siemens Square metre per mole", "en"));
    unit.addLabel(new LangString("Siemens Square meter per mole", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarConductivity");
    config.units.set("http://qudt.org/vocab/unit/S-M2-PER-MOL", unit);
}
function addUnit1586(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/S-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/S-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Siemens Per Centimetre", "en"));
    unit.addLabel(new LangString("Siemens Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    config.units.set("http://qudt.org/vocab/unit/S-PER-CentiM", unit);
}
function addUnit1587(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/S-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Siemens Per Meter", "en-us"));
    unit.addLabel(new LangString("Siemens Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectrolyticConductivity");
    config.units.set("http://qudt.org/vocab/unit/S-PER-M", unit);
}
function addUnit1588(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SAMPLE", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("SAMPLE", undefined));
    config.units.set("http://qudt.org/vocab/unit/SAMPLE", unit);
}
function addUnit1589(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SAMPLE-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Sample per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/SAMPLE-PER-SEC", unit);
}
function addUnit1590(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "s", undefined);
    unit.addLabel(new LangString("Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Period");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/SEC", unit);
}
function addUnit1591(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SEC-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", new Decimal("0.09290304"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Second Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
    config.units.set("http://qudt.org/vocab/unit/SEC-FT2", unit);
}
function addUnit1592(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SEC-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Seconds per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/SEC-PER-M", unit);
}
function addUnit1593(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SEC-PER-RAD-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Second per Radian Cubic Meter", "en-us"));
    unit.addLabel(new LangString("Second per Radian Cubic Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DensityOfStates");
    config.units.set("http://qudt.org/vocab/unit/SEC-PER-RAD-M3", unit);
}
function addUnit1594(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SEC2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeSquared");
    config.units.set("http://qudt.org/vocab/unit/SEC2", unit);
}
function addUnit1595(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SH", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("1E-8"), undefined, undefined, undefined, undefined, "Sh", undefined);
    unit.addLabel(new LangString("Shake", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/SH", unit);
}
function addUnit1596(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SHANNON", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Shannon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationEntropy");
    config.units.set("http://qudt.org/vocab/unit/SHANNON", unit);
}
function addUnit1597(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SHANNON-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Shannon per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InformationFlowRate");
    config.units.set("http://qudt.org/vocab/unit/SHANNON-PER-SEC", unit);
}
function addUnit1598(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("14.593903"), undefined, undefined, undefined, undefined, "slug", undefined);
    unit.addLabel(new LangString("Slug", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/SLUG", unit);
}
function addUnit1599(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.00016891087963"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-DAY", unit);
}
function addUnit1600(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-FT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("47.8802591863517"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug per Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT", unit);
}
function addUnit1601(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-FT-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", new Decimal("47.8802591863517"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug per Foot Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DynamicViscosity");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT-SEC", unit);
}
function addUnit1602(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("157.08746452215124"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT2", unit);
}
function addUnit1603(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-FT3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("515.3788206107324"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug per Cubic Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT3", unit);
}
function addUnit1604(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.004053861111111"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-HR", unit);
}
function addUnit1605(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.243231666666667"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-MIN", unit);
}
function addUnit1606(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SLUG-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("14.593903"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slug per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/SLUG-PER-SEC", unit);
}
function addUnit1607(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, "sr", undefined);
    unit.addLabel(new LangString("Steradian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SolidAngle");
    config.units.set("http://qudt.org/vocab/unit/SR", unit);
}
function addUnit1608(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ST", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, "St", undefined);
    unit.addLabel(new LangString("Stokes", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/KinematicViscosity");
    config.units.set("http://qudt.org/vocab/unit/ST", unit);
}
function addUnit1609(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/STILB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", new Decimal("10000.0"), undefined, undefined, undefined, undefined, "sb", undefined);
    unit.addLabel(new LangString("Stilb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
    config.units.set("http://qudt.org/vocab/unit/STILB", unit);
}
function addUnit1610(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/STR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "st", undefined);
    unit.addLabel(new LangString("Stere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/STR", unit);
}
function addUnit1611(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SUSCEPTIBILITY_ELEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Electric Susceptibility Unit", undefined));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/SUSCEPTIBILITY_ELEC", unit);
}
function addUnit1612(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SUSCEPTIBILITY_MAG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Magnetic Susceptibility Unit", undefined));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/SUSCEPTIBILITY_MAG", unit);
}
function addUnit1613(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SV", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Sv", undefined);
    unit.addLabel(new LangString("Sievert", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
    config.units.set("http://qudt.org/vocab/unit/SV", unit);
}
function addUnit1614(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/S_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1000000000.0"), undefined, undefined, undefined, undefined, "aS", undefined);
    unit.addLabel(new LangString("Absiemen", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/S_Ab", unit);
}
function addUnit1615(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/S_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", new Decimal("1.1126500561E-12"), undefined, undefined, undefined, undefined, "statS", undefined);
    unit.addLabel(new LangString("Statsiemens", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricConductivity");
    config.units.set("http://qudt.org/vocab/unit/S_Stat", unit);
}
function addUnit1616(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SaintHelenaPound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Saint Helena Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SaintHelenaPound", unit);
}
function addUnit1617(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SameDay", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("SameDay", undefined));
    config.units.set("http://qudt.org/vocab/unit/SameDay", unit);
}
function addUnit1618(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SamoanTala", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Samoan Tala", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SamoanTala", unit);
}
function addUnit1619(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SaudiRiyal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Saudi Riyal", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SaudiRiyal", unit);
}
function addUnit1620(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SerbianDinar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Serbian Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SerbianDinar", unit);
}
function addUnit1621(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SeychellesRupee", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Seychelles Rupee", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SeychellesRupee", unit);
}
function addUnit1622(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Silver-OunceTroy", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Silver (one Troy ounce)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Silver-OunceTroy", unit);
}
function addUnit1623(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SingaporeDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Singapore Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SingaporeDollar", unit);
}
function addUnit1624(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SlovakKoruna", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Slovak Koruna", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SlovakKoruna", unit);
}
function addUnit1625(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SolarMass", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined, undefined, undefined, undefined, "S", undefined);
    unit.addLabel(new LangString("Solar mass", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/SolarMass", unit);
}
function addUnit1626(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SolomonIslandsDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Solomon Islands Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SolomonIslandsDollar", unit);
}
function addUnit1627(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Som", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Som", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Som", unit);
}
function addUnit1628(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SomaliShilling", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Somali Shilling", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SomaliShilling", unit);
}
function addUnit1629(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Somoni", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Somoni", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Somoni", unit);
}
function addUnit1630(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SouthAfricanRand", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("South African Rand", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SouthAfricanRand", unit);
}
function addUnit1631(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SouthKoreanWon", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("South Korean Won", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SouthKoreanWon", unit);
}
function addUnit1632(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SpecialDrawingRights", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Special Drawing Rights", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SpecialDrawingRights", unit);
}
function addUnit1633(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SpeedOfLight", undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("SpeedOfLight", undefined));
    config.units.set("http://qudt.org/vocab/unit/SpeedOfLight", unit);
}
function addUnit1634(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SriLankaRupee", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Sri Lanka Rupee", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SriLankaRupee", unit);
}
function addUnit1635(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Standard", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("4.672"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Standard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/Standard", unit);
}
function addUnit1636(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Stone_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("6.35029318"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Stone (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/Stone_UK", unit);
}
function addUnit1637(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SudanesePound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Sudanese Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SudanesePound", unit);
}
function addUnit1638(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SurinamDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Surinam Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SurinamDollar", unit);
}
function addUnit1639(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SwedishKrona", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Swedish Krona", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SwedishKrona", unit);
}
function addUnit1640(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SwissFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Swiss Franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SwissFranc", unit);
}
function addUnit1641(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/SyrianPound", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Syrian Pound", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/SyrianPound", unit);
}
function addUnit1642(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/T", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "T", undefined);
    unit.addLabel(new LangString("Tesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticField");
    config.units.set("http://qudt.org/vocab/unit/T", unit);
}
function addUnit1643(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/T-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("T-M", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength");
    config.units.set("http://qudt.org/vocab/unit/T-M", unit);
}
function addUnit1644(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/T-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-1D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("T-SEC", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/T-SEC", unit);
}
function addUnit1645(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TBSP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.0000147867656"), undefined, undefined, undefined, undefined, "tbsp", undefined);
    unit.addLabel(new LangString("Tablespoon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/TBSP", unit);
}
function addUnit1646(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TEX", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, "tex", undefined);
    unit.addLabel(new LangString("Tex", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
    config.units.set("http://qudt.org/vocab/unit/TEX", unit);
}
function addUnit1647(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/THB", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Baht", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/THB", unit);
}
function addUnit1648(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/THM_EEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("THM_EEC", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/THM_EEC", unit);
}
function addUnit1649(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/THM_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("105480400.0"), undefined, undefined, undefined, undefined, "thm", undefined);
    unit.addLabel(new LangString("Therm US", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
    config.units.set("http://qudt.org/vocab/unit/THM_US", unit);
}
function addUnit1650(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TOE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("41868000000.0"), undefined, undefined, undefined, undefined, "toe", undefined);
    unit.addLabel(new LangString("Ton of Oil Equivalent", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/TOE", unit);
}
function addUnit1651(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TONNE", unit);
}
function addUnit1652(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.011574074074074"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-DAY", unit);
}
function addUnit1653(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, "t/ha", undefined);
    unit.addLabel(new LangString("tonne per hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-HA", unit);
}
function addUnit1654(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-HA-YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", new Decimal("3.17E-9"), undefined, undefined, undefined, undefined, "t/ha/year", undefined);
    unit.addLabel(new LangString("tonne per hectare per year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-HA-YR", unit);
}
function addUnit1655(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-HR", unit);
}
function addUnit1656(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Tonne Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-M3", unit);
}
function addUnit1657(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("16.666666666666668"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-MIN", unit);
}
function addUnit1658(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TONNE-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TONNE-PER-SEC", unit);
}
function addUnit1659(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Assay", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("0.02916667"), undefined, undefined, undefined, undefined, "AT", undefined);
    unit.addLabel(new LangString("Assay Ton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TON_Assay", unit);
}
function addUnit1660(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_FG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("3516.853"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton of Refrigeration", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_FG", unit);
}
function addUnit1661(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_F_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", new Decimal("8896.443230521"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton Force (US Short)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
    config.units.set("http://qudt.org/vocab/unit/TON_F_US", unit);
}
function addUnit1662(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_LONG", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1016.0469088"), undefined, undefined, undefined, undefined, "ton", undefined);
    unit.addLabel(new LangString("Long Ton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TON_LONG", unit);
}
function addUnit1663(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_LONG-PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1328.9391836174336"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Long Ton per Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/TON_LONG-PER-YD3", unit);
}
function addUnit1664(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, "mT", undefined);
    unit.addLabel(new LangString("Metric Ton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric", unit);
}
function addUnit1665(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.011574074074074"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-DAY", unit);
}
function addUnit1666(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric-PER-HA", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", new Decimal("0.1"), undefined, undefined, undefined, undefined, "t/ha", undefined);
    unit.addLabel(new LangString("metric tonne per hectare", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-HA", unit);
}
function addUnit1667(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.277777777777778"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-HR", unit);
}
function addUnit1668(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Tonne Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-M3", unit);
}
function addUnit1669(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("16.666666666666668"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-MIN", unit);
}
function addUnit1670(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_Metric-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("1000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tonne Per Second (metric Ton)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-SEC", unit);
}
function addUnit1671(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_SHIPPING_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("1.1326"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton (US Shipping)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/TON_SHIPPING_US", unit);
}
function addUnit1672(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_SHORT", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("907.18474"), undefined, undefined, undefined, undefined, "ton", undefined);
    unit.addLabel(new LangString("Short Ton", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TON_SHORT", unit);
}
function addUnit1673(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_SHORT-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.251995761"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Short Ton per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
    config.units.set("http://qudt.org/vocab/unit/TON_SHORT-PER-HR", unit);
}
function addUnit1674(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_SHORT-PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1186.552842515566"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Short Ton per Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
    config.units.set("http://qudt.org/vocab/unit/TON_SHORT-PER-YD3", unit);
}
function addUnit1675(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_UK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1016.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton (UK)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TON_UK", unit);
}
function addUnit1676(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_UK-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.011759259259259"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Long Ton (uk) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_UK-PER-DAY", unit);
}
function addUnit1677(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_UK-PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1328.8778292234224"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Long Ton (UK) Per Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/TON_UK-PER-YD3", unit);
}
function addUnit1678(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_US", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("907.1847"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton (US)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/TON_US", unit);
}
function addUnit1679(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_US-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.010497685185185"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Short Ton (us) Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_US-PER-DAY", unit);
}
function addUnit1680(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_US-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", new Decimal("0.251944444444444"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton (US) Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
    config.units.set("http://qudt.org/vocab/unit/TON_US-PER-HR", unit);
}
function addUnit1681(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TON_US-PER-YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", new Decimal("1186.3112117181538"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Short Ton (US) Per Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
    config.units.set("http://qudt.org/vocab/unit/TON_US-PER-YD3", unit);
}
function addUnit1682(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TORR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("133.322"), undefined, undefined, undefined, undefined, "Torr", undefined);
    unit.addLabel(new LangString("Torr", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
    config.units.set("http://qudt.org/vocab/unit/TORR", unit);
}
function addUnit1683(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TSP", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.00000492892187"), undefined, undefined, undefined, undefined, "tsp", undefined);
    unit.addLabel(new LangString("Teaspoon", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/TSP", unit);
}
function addUnit1684(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/T_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", new Decimal("0.0001"), undefined, undefined, undefined, undefined, "abT", undefined);
    unit.addLabel(new LangString("Abtesla", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticField");
    config.units.set("http://qudt.org/vocab/unit/T_Ab", unit);
}
function addUnit1685(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TanzanianShilling", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tanzanian Shilling", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/TanzanianShilling", unit);
}
function addUnit1686(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TebiBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("6096987078286.4836024230149744713"), undefined, "http://qudt.org/vocab/prefix/Tebi", "http://qudt.org/vocab/unit/BYTE", undefined, "TiB", undefined);
    unit.addLabel(new LangString("TebiByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/TebiBYTE", unit);
}
function addUnit1687(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Tenge", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tenge", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Tenge", unit);
}
function addUnit1688(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraBYTE", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("5545177444479.5624753378569716654"), undefined, "http://qudt.org/vocab/prefix/Tera", "http://qudt.org/vocab/unit/BYTE", undefined, "TB", undefined);
    unit.addLabel(new LangString("TeraByte", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    config.units.set("http://qudt.org/vocab/unit/TeraBYTE", unit);
}
function addUnit1689(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Tera", "http://qudt.org/vocab/unit/C", undefined, "TC", undefined);
    unit.addLabel(new LangString("TeraCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/TeraC", unit);
}
function addUnit1690(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraHZ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("1000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Tera", "http://qudt.org/vocab/unit/HZ", undefined, undefined, undefined);
    unit.addLabel(new LangString("Terahertz", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/TeraHZ", unit);
}
function addUnit1691(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraJ", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Tera", "http://qudt.org/vocab/unit/J", undefined, undefined, undefined);
    unit.addLabel(new LangString("Terajoule", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/TeraJ", unit);
}
function addUnit1692(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraOHM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", new Decimal("1000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Tera", "http://qudt.org/vocab/unit/OHM", undefined, undefined, undefined);
    unit.addLabel(new LangString("Teraohm", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
    config.units.set("http://qudt.org/vocab/unit/TeraOHM", unit);
}
function addUnit1693(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraW", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Tera", "http://qudt.org/vocab/unit/W", undefined, undefined, undefined);
    unit.addLabel(new LangString("Terawatt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/TeraW", unit);
}
function addUnit1694(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TeraW-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600000000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Terawatt Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/TeraW-HR", unit);
}
function addUnit1695(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TonEnergy", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("4184000000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Ton Energy", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/TonEnergy", unit);
}
function addUnit1696(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TrinidadAndTobagoDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Trinidad and Tobago Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/TrinidadAndTobagoDollar", unit);
}
function addUnit1697(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Tugrik", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tugrik", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Tugrik", unit);
}
function addUnit1698(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/TunisianDinar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Tunisian Dinar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/TunisianDinar", unit);
}
function addUnit1699(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/U", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", new Decimal("1.66053878283E-27"), undefined, undefined, undefined, undefined, "u", undefined);
    unit.addLabel(new LangString("Unified Atomic Mass Unit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
    config.units.set("http://qudt.org/vocab/unit/U", unit);
}
function addUnit1700(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UAEDirham", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("United Arab Emirates dirham", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UAEDirham", unit);
}
function addUnit1701(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UICFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("UIC franc (special settlement currency)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UICFranc", unit);
}
function addUnit1702(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UNITLESS", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", new Decimal("1.0"), undefined, undefined, undefined, undefined, "U", undefined);
    unit.addLabel(new LangString("Unitless", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MultiplicationFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StatisticalWeight");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NeutronYieldPerFission");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InternalConversionFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LogarithmicFrequencyInterval");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RadianceFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalDiffusionRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NeutronYieldPerAbsorption");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Reactivity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LandeGFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalentQualityFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalDiffusionFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FastFissionFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeMassConcentrationOfVapour");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GeneralizedVelocity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFraction");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricSusceptibility");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LeakageFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PoissonRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GeneralizedCoordinate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Refectance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeMassExcess");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatioOfWaterToDryMatter");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EquilibriumConstant");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/QualityFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Debye-WallerFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GeneralizedMomentum");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TransmittanceDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalIonization");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GeneralizedForce");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RatioOfSpecificHeatCapacities");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GruneisenParameter");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DegreeOfDissociation");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFractionOfWater");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberOfParticles");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AmountOfSubstanceFractionOfB");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/OrderOfReflection");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReflectanceFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AtomScatteringFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BioconcentrationFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Reflectance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Short-RangeOrderParameter");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticSusceptability");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BindingFraction");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LogOctanolAirPartitionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ResonanceEscapeProbability");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Transmittance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalUtilizationFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Emissivity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IsentropicExponent");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFractionOfDryMatter");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/OsmoticCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeMassDensity");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AverageLogarithmicEnergyDecrement");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Turns");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CouplingFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NapierianAbsorbance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Long-RangeOrderParameter");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dissipance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RelativeMassRatioOfVapour");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivityCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PermittivityRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LogOctanolWaterPartitionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EinsteinTransitionProbability");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PackingFraction");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MobilityRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RefractiveIndex");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FrictionCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LossFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Non-LeakageProbability");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StructureFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerFactor");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DimensionlessRatio");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MadelungConstant");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/GFactorOfNucleus");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Absorptance");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatioOfWaterVapourToDryGas");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Lethargy");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StandardAbsoluteActivity");
    config.units.set("http://qudt.org/vocab/unit/UNITLESS", unit);
}
function addUnit1703(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/USDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "US$", undefined);
    unit.addLabel(new LangString("US Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/USDollar", unit);
}
function addUnit1704(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/USDollar-NextDay", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("United States Dollar (next day) (funds code)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/USDollar-NextDay", unit);
}
function addUnit1705(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/USDollar-SameDay", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("United States Dollar (same day) (funds code)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/USDollar-SameDay", unit);
}
function addUnit1706(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UgandaShilling", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Uganda Shilling", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UgandaShilling", unit);
}
function addUnit1707(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UnidadDeValorReal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Unidad de Valor Real", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UnidadDeValorReal", unit);
}
function addUnit1708(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UnidadesDeFormento", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Unidades de formento (Funds code)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UnidadesDeFormento", unit);
}
function addUnit1709(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UnitPole", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("1.256637E-7"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Unit Pole", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/UnitPole", unit);
}
function addUnit1710(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UruguayPeso", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Peso Uruguayo", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UruguayPeso", unit);
}
function addUnit1711(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/UzbekistanSom", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Uzbekistan Som", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/UzbekistanSom", unit);
}
function addUnit1712(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "V", undefined);
    unit.addLabel(new LangString("Volt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/V", unit);
}
function addUnit1713(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-A", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Ampere", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NonActivePower");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ComplexPower");
    config.units.set("http://qudt.org/vocab/unit/V-A", unit);
}
function addUnit1714(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-A-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Ampere Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/V-A-HR", unit);
}
function addUnit1715(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-A_Reactive", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Ampere Reactive", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReactivePower");
    config.units.set("http://qudt.org/vocab/unit/V-A_Reactive", unit);
}
function addUnit1716(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-A_Reactive-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Ampere Reactive Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/V-A_Reactive-HR", unit);
}
function addUnit1717(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("V-M", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFlux");
    config.units.set("http://qudt.org/vocab/unit/V-M", unit);
}
function addUnit1718(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("100.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Per Centimetre", "en"));
    unit.addLabel(new LangString("Volt Per Centimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/V-PER-CentiM", unit);
}
function addUnit1719(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-IN", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("39.37007874015748"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Per Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/V-PER-IN", unit);
}
function addUnit1720(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H-1T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SeebeckCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThomsonCoefficient");
    config.units.set("http://qudt.org/vocab/unit/V-PER-K", unit);
}
function addUnit1721(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt per Metre", "en"));
    unit.addLabel(new LangString("Volt per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricField");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/V-PER-M", unit);
}
function addUnit1722(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt per Square Meter", "en-us"));
    unit.addLabel(new LangString("Volt per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerAreaElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/V-PER-M2", unit);
}
function addUnit1723(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-MicroSEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0", new Decimal("1000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-SEC", undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Per Microsecond", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/V-PER-MicroSEC", unit);
}
function addUnit1724(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/V-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Per Millimetre", "en"));
    unit.addLabel(new LangString("Volt Per Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/V-PER-MilliM", unit);
}
function addUnit1725(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt per second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/V-PER-SEC", unit);
}
function addUnit1726(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V-SEC-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Volt Second Per Meter", "en-us"));
    unit.addLabel(new LangString("Volt Second Per Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticVectorPotential");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ScalarMagneticPotential");
    config.units.set("http://qudt.org/vocab/unit/V-SEC-PER-M", unit);
}
function addUnit1727(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V2-PER-K2", undefined, "http://qudt.org/vocab/dimensionvector/A0E-2L4I0M2H-2T-6D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Volt per Square Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LorenzCoefficient");
    config.units.set("http://qudt.org/vocab/unit/V2-PER-K2", unit);
}
function addUnit1728(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V_Ab", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("1E-8"), undefined, undefined, undefined, undefined, "abV", undefined);
    unit.addLabel(new LangString("Abvolt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/V_Ab", unit);
}
function addUnit1729(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V_Ab-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("0.000001"), undefined, undefined, undefined, undefined, "abV/cm", undefined);
    unit.addLabel(new LangString("Abvolt per centimeter", "en-us"));
    unit.addLabel(new LangString("Abvolt per centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricField");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/V_Ab-PER-CentiM", unit);
}
function addUnit1730(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V_Ab-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("1E-8"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Abvolt Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/V_Ab-SEC", unit);
}
function addUnit1731(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V_Stat", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", new Decimal("299.792458"), undefined, undefined, undefined, undefined, "statV", undefined);
    unit.addLabel(new LangString("Statvolt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/V_Stat", unit);
}
function addUnit1732(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V_Stat-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("V_Stat-CentiM", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFlux");
    config.units.set("http://qudt.org/vocab/unit/V_Stat-CentiM", unit);
}
function addUnit1733(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/V_Stat-PER-CentiM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", new Decimal("29979.2458"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Statvolt per Centimeter", "en-us"));
    unit.addLabel(new LangString("Statvolt per Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricField");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFieldStrength");
    config.units.set("http://qudt.org/vocab/unit/V_Stat-PER-CentiM", unit);
}
function addUnit1734(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Vatu", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Vatu", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Vatu", unit);
}
function addUnit1735(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/VenezuelanBolvar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Venezuelan bolvar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/VenezuelanBolvar", unit);
}
function addUnit1736(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/VietnameseDong", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Vietnamese ??ng", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/VietnameseDong", unit);
}
function addUnit1737(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "W", undefined);
    unit.addLabel(new LangString("Watt", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
    config.units.set("http://qudt.org/vocab/unit/W", unit);
}
function addUnit1738(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, "W-hr", undefined);
    unit.addLabel(new LangString("Watthour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/W-HR", unit);
}
function addUnit1739(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-HR-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", new Decimal("3600.0"), undefined, undefined, undefined, undefined, "W-hr/m3", undefined);
    unit.addLabel(new LangString("Watthour per Cubic meter", "en-us"));
    unit.addLabel(new LangString("Watthour per Cubic metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
    config.units.set("http://qudt.org/vocab/unit/W-HR-PER-M3", unit);
}
function addUnit1740(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-M-PER-M2-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watts per square metre per inverse metre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/W-M-PER-M2-SR", unit);
}
function addUnit1741(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("W-M2", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerArea");
    config.units.set("http://qudt.org/vocab/unit/W-M2", unit);
}
function addUnit1742(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-M2-PER-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("W-M2-PER-SR", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle");
    config.units.set("http://qudt.org/vocab/unit/W-M2-PER-SR", unit);
}
function addUnit1743(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-CentiM2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("10000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2", undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Centimeter", "en-us"));
    unit.addLabel(new LangString("Watt per Square Centimetre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/W-PER-CentiM2", unit);
}
function addUnit1744(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-FT2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("10.7639104"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Foot", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/W-PER-FT2", unit);
}
function addUnit1745(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-IN2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("1550.0031"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Inch", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    config.units.set("http://qudt.org/vocab/unit/W-PER-IN2", unit);
}
function addUnit1746(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductance");
    config.units.set("http://qudt.org/vocab/unit/W-PER-K", unit);
}
function addUnit1747(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-KiloGM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt Per Kilogram", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDoseRate");
    config.units.set("http://qudt.org/vocab/unit/W-PER-KiloGM", unit);
}
function addUnit1748(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watts per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/W-PER-M", unit);
}
function addUnit1749(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Meter Kelvin", "en-us"));
    unit.addLabel(new LangString("Watt per Metre Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalConductivity");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M-K", unit);
}
function addUnit1750(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Meter", "en-us"));
    unit.addLabel(new LangString("Watt per Square Metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PoyntingVector");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2", unit);
}
function addUnit1751(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-K", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Meter Kelvin", "en-us"));
    unit.addLabel(new LangString("Watt per Square Metre Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceCoefficientOfHeatTransfer");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CombinedNonEvaporativeHeatTransferCoefficient");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-K", unit);
}
function addUnit1752(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-K4", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-4T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Meter Quartic Kelvin", "en-us"));
    unit.addLabel(new LangString("Watt per Square Metre Quartic Kelvin", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerAreaQuarticTemperature");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-K4", unit);
}
function addUnit1753(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watts per square metre per metre", "en"));
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-M", unit);
}
function addUnit1754(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-M-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watts per square metre per metre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-M-SR", unit);
}
function addUnit1755(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-NanoM", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Watts per square metre per nanometre", "en"));
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-NanoM", unit);
}
function addUnit1756(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-NanoM-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1000000000.0"), undefined, undefined, "http://qudt.org/vocab/unit/W-PER-M2-M-SR", undefined, undefined, undefined);
    unit.addLabel(new LangString("Watts per square metre per nanometre per steradian", "en"));
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-NanoM-SR", unit);
}
function addUnit1757(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-PA", undefined, undefined, new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Metre Pascal", "en"));
    unit.addLabel(new LangString("Watt per Square Meter Pascal", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EvaporativeHeatTransferCoefficient");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-PA", unit);
}
function addUnit1758(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M2-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Square Metre Steradian", "en"));
    unit.addLabel(new LangString("Watt per Square Meter Steradian", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Radiance");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M2-SR", unit);
}
function addUnit1759(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-M3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt Per Cubic Metre", "en"));
    unit.addLabel(new LangString("Watt Per Cubic Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAreaTime");
    config.units.set("http://qudt.org/vocab/unit/W-PER-M3", unit);
}
function addUnit1760(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-PER-SR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt per Steradian", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RadiantIntensity");
    config.units.set("http://qudt.org/vocab/unit/W-PER-SR", unit);
}
function addUnit1761(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
    config.units.set("http://qudt.org/vocab/unit/W-SEC", unit);
}
function addUnit1762(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/W-SEC-PER-M2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Watt seconds per square metre", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
    config.units.set("http://qudt.org/vocab/unit/W-SEC-PER-M2", unit);
}
function addUnit1763(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WB", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, "Wb", undefined);
    unit.addLabel(new LangString("Weber", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
    config.units.set("http://qudt.org/vocab/unit/WB", unit);
}
function addUnit1764(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WB-M", undefined, undefined, new Decimal("1.0"), undefined, undefined, undefined, undefined, "WbM", undefined);
    unit.addLabel(new LangString("Weber Metre", "en"));
    unit.addLabel(new LangString("Weber Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment");
    config.units.set("http://qudt.org/vocab/unit/WB-M", unit);
}
function addUnit1765(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WB-PER-M", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", new Decimal("1.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Weber Per Metre", "en"));
    unit.addLabel(new LangString("Weber Per Meter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticVectorPotential");
    config.units.set("http://qudt.org/vocab/unit/WB-PER-M", unit);
}
function addUnit1766(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WB-PER-MilliM", undefined, "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", new Decimal("1000.0"), undefined, undefined, "http://qudt.org/vocab/unit/WB-PER-M", undefined, undefined, undefined);
    unit.addLabel(new LangString("Weber Per Millimetre", "en"));
    unit.addLabel(new LangString("Weber Per Millimeter", "en-us"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticVectorPotential");
    config.units.set("http://qudt.org/vocab/unit/WB-PER-MilliM", unit);
}
function addUnit1767(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WIREuro", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("WIR Euro (complementary currency)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/WIREuro", unit);
}
function addUnit1768(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WIRFranc", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("WIR Franc (complementary currency)", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/WIRFranc", unit);
}
function addUnit1769(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/WK", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("604800.0"), undefined, undefined, undefined, undefined, "wk", undefined);
    unit.addLabel(new LangString("Week", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/WK", unit);
}
function addUnit1770(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/XAF", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("CFA Franc BEAC", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/XAF", unit);
}
function addUnit1771(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/XOF", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("CFA Franc BCEAO", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/XOF", unit);
}
function addUnit1772(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/XPF", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("CFP franc", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/XPF", unit);
}
function addUnit1773(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", new Decimal("0.9144"), undefined, undefined, undefined, undefined, "yd", undefined);
    unit.addLabel(new LangString("Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
    config.units.set("http://qudt.org/vocab/unit/YD", unit);
}
function addUnit1774(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD-PER-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", new Decimal("1.6459200164592"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Yard Per Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/YD-PER-DEG_F", unit);
}
function addUnit1775(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD2", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", new Decimal("0.83612736"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Square Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
    config.units.set("http://qudt.org/vocab/unit/YD2", unit);
}
function addUnit1776(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD3", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", new Decimal("0.764554857984"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Yard", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
    config.units.set("http://qudt.org/vocab/unit/YD3", unit);
}
function addUnit1777(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD3-PER-DAY", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00000884901456"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Yard Per Day", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/YD3-PER-DAY", unit);
}
function addUnit1778(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD3-PER-DEG_F", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", new Decimal("1.376198881991088"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Yard Per Degree Fahrenheit", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion");
    config.units.set("http://qudt.org/vocab/unit/YD3-PER-DEG_F", unit);
}
function addUnit1779(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD3-PER-HR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.00021237634944"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Yard Per Hour", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/YD3-PER-HR", unit);
}
function addUnit1780(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD3-PER-MIN", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.0127425809664"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Yard per Minute", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerUnitTime");
    config.units.set("http://qudt.org/vocab/unit/YD3-PER-MIN", unit);
}
function addUnit1781(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YD3-PER-SEC", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", new Decimal("0.764554857984"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Cubic Yard Per Second", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
    config.units.set("http://qudt.org/vocab/unit/YD3-PER-SEC", unit);
}
function addUnit1782(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YR", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("31557600.0"), undefined, undefined, undefined, undefined, "a", undefined);
    unit.addLabel(new LangString("Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/YR", unit);
}
function addUnit1783(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YR_Common", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("31536000.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Common Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/YR_Common", unit);
}
function addUnit1784(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YR_Sidereal", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("31558149.7632"), undefined, undefined, undefined, undefined, "yr", undefined);
    unit.addLabel(new LangString("Sidereal Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/YR_Sidereal", unit);
}
function addUnit1785(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YR_TROPICAL", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", new Decimal("31556925.216"), undefined, undefined, undefined, undefined, "a_{t}", undefined);
    unit.addLabel(new LangString("Tropical Year", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
    config.units.set("http://qudt.org/vocab/unit/YR_TROPICAL", unit);
}
function addUnit1786(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YemeniRial", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Yemeni Rial", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/YemeniRial", unit);
}
function addUnit1787(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YoctoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1E-24"), undefined, "http://qudt.org/vocab/prefix/Yocto", "http://qudt.org/vocab/unit/C", undefined, "yC", undefined);
    unit.addLabel(new LangString("YoctoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/YoctoC", unit);
}
function addUnit1788(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YottaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000000000000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Yotta", "http://qudt.org/vocab/unit/C", undefined, "YC", undefined);
    unit.addLabel(new LangString("YottaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/YottaC", unit);
}
function addUnit1789(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/YuanRenminbi", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Yuan Renminbi", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/YuanRenminbi", unit);
}
function addUnit1790(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Z", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, "Z", undefined);
    unit.addLabel(new LangString("atomic-number", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AtomicNumber");
    config.units.set("http://qudt.org/vocab/unit/Z", unit);
}
function addUnit1791(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ZambianKwacha", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Zambian Kwacha", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ZambianKwacha", unit);
}
function addUnit1792(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ZeptoC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1E-21"), undefined, "http://qudt.org/vocab/prefix/Zepto", "http://qudt.org/vocab/unit/C", undefined, "zC", undefined);
    unit.addLabel(new LangString("ZeptoCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/ZeptoC", unit);
}
function addUnit1793(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ZettaC", undefined, "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", new Decimal("1000000000000000000000.0"), undefined, "http://qudt.org/vocab/prefix/Zetta", "http://qudt.org/vocab/unit/C", undefined, "ZC", undefined);
    unit.addLabel(new LangString("ZettaCoulomb", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
    config.units.set("http://qudt.org/vocab/unit/ZettaC", unit);
}
function addUnit1794(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/ZimbabweDollar", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Zimbabwe Dollar", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/ZimbabweDollar", unit);
}
function addUnit1795(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/Zloty", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Zloty", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
    config.units.set("http://qudt.org/vocab/unit/Zloty", unit);
}
function addUnit1796(config: QudtlibConfig) {
    let unit: Unit;
    unit = new Unit("http://qudt.org/vocab/unit/failures-in-time", undefined, "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", new Decimal("0.0"), undefined, undefined, undefined, undefined, undefined, undefined);
    unit.addLabel(new LangString("Failures In Time", "en"));
    unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
    config.units.set("http://qudt.org/vocab/unit/failures-in-time", unit);
}

addUnit0(config);
addUnit1(config);
addUnit2(config);
addUnit3(config);
addUnit4(config);
addUnit5(config);
addUnit6(config);
addUnit7(config);
addUnit8(config);
addUnit9(config);
addUnit10(config);
addUnit11(config);
addUnit12(config);
addUnit13(config);
addUnit14(config);
addUnit15(config);
addUnit16(config);
addUnit17(config);
addUnit18(config);
addUnit19(config);
addUnit20(config);
addUnit21(config);
addUnit22(config);
addUnit23(config);
addUnit24(config);
addUnit25(config);
addUnit26(config);
addUnit27(config);
addUnit28(config);
addUnit29(config);
addUnit30(config);
addUnit31(config);
addUnit32(config);
addUnit33(config);
addUnit34(config);
addUnit35(config);
addUnit36(config);
addUnit37(config);
addUnit38(config);
addUnit39(config);
addUnit40(config);
addUnit41(config);
addUnit42(config);
addUnit43(config);
addUnit44(config);
addUnit45(config);
addUnit46(config);
addUnit47(config);
addUnit48(config);
addUnit49(config);
addUnit50(config);
addUnit51(config);
addUnit52(config);
addUnit53(config);
addUnit54(config);
addUnit55(config);
addUnit56(config);
addUnit57(config);
addUnit58(config);
addUnit59(config);
addUnit60(config);
addUnit61(config);
addUnit62(config);
addUnit63(config);
addUnit64(config);
addUnit65(config);
addUnit66(config);
addUnit67(config);
addUnit68(config);
addUnit69(config);
addUnit70(config);
addUnit71(config);
addUnit72(config);
addUnit73(config);
addUnit74(config);
addUnit75(config);
addUnit76(config);
addUnit77(config);
addUnit78(config);
addUnit79(config);
addUnit80(config);
addUnit81(config);
addUnit82(config);
addUnit83(config);
addUnit84(config);
addUnit85(config);
addUnit86(config);
addUnit87(config);
addUnit88(config);
addUnit89(config);
addUnit90(config);
addUnit91(config);
addUnit92(config);
addUnit93(config);
addUnit94(config);
addUnit95(config);
addUnit96(config);
addUnit97(config);
addUnit98(config);
addUnit99(config);
addUnit100(config);
addUnit101(config);
addUnit102(config);
addUnit103(config);
addUnit104(config);
addUnit105(config);
addUnit106(config);
addUnit107(config);
addUnit108(config);
addUnit109(config);
addUnit110(config);
addUnit111(config);
addUnit112(config);
addUnit113(config);
addUnit114(config);
addUnit115(config);
addUnit116(config);
addUnit117(config);
addUnit118(config);
addUnit119(config);
addUnit120(config);
addUnit121(config);
addUnit122(config);
addUnit123(config);
addUnit124(config);
addUnit125(config);
addUnit126(config);
addUnit127(config);
addUnit128(config);
addUnit129(config);
addUnit130(config);
addUnit131(config);
addUnit132(config);
addUnit133(config);
addUnit134(config);
addUnit135(config);
addUnit136(config);
addUnit137(config);
addUnit138(config);
addUnit139(config);
addUnit140(config);
addUnit141(config);
addUnit142(config);
addUnit143(config);
addUnit144(config);
addUnit145(config);
addUnit146(config);
addUnit147(config);
addUnit148(config);
addUnit149(config);
addUnit150(config);
addUnit151(config);
addUnit152(config);
addUnit153(config);
addUnit154(config);
addUnit155(config);
addUnit156(config);
addUnit157(config);
addUnit158(config);
addUnit159(config);
addUnit160(config);
addUnit161(config);
addUnit162(config);
addUnit163(config);
addUnit164(config);
addUnit165(config);
addUnit166(config);
addUnit167(config);
addUnit168(config);
addUnit169(config);
addUnit170(config);
addUnit171(config);
addUnit172(config);
addUnit173(config);
addUnit174(config);
addUnit175(config);
addUnit176(config);
addUnit177(config);
addUnit178(config);
addUnit179(config);
addUnit180(config);
addUnit181(config);
addUnit182(config);
addUnit183(config);
addUnit184(config);
addUnit185(config);
addUnit186(config);
addUnit187(config);
addUnit188(config);
addUnit189(config);
addUnit190(config);
addUnit191(config);
addUnit192(config);
addUnit193(config);
addUnit194(config);
addUnit195(config);
addUnit196(config);
addUnit197(config);
addUnit198(config);
addUnit199(config);
addUnit200(config);
addUnit201(config);
addUnit202(config);
addUnit203(config);
addUnit204(config);
addUnit205(config);
addUnit206(config);
addUnit207(config);
addUnit208(config);
addUnit209(config);
addUnit210(config);
addUnit211(config);
addUnit212(config);
addUnit213(config);
addUnit214(config);
addUnit215(config);
addUnit216(config);
addUnit217(config);
addUnit218(config);
addUnit219(config);
addUnit220(config);
addUnit221(config);
addUnit222(config);
addUnit223(config);
addUnit224(config);
addUnit225(config);
addUnit226(config);
addUnit227(config);
addUnit228(config);
addUnit229(config);
addUnit230(config);
addUnit231(config);
addUnit232(config);
addUnit233(config);
addUnit234(config);
addUnit235(config);
addUnit236(config);
addUnit237(config);
addUnit238(config);
addUnit239(config);
addUnit240(config);
addUnit241(config);
addUnit242(config);
addUnit243(config);
addUnit244(config);
addUnit245(config);
addUnit246(config);
addUnit247(config);
addUnit248(config);
addUnit249(config);
addUnit250(config);
addUnit251(config);
addUnit252(config);
addUnit253(config);
addUnit254(config);
addUnit255(config);
addUnit256(config);
addUnit257(config);
addUnit258(config);
addUnit259(config);
addUnit260(config);
addUnit261(config);
addUnit262(config);
addUnit263(config);
addUnit264(config);
addUnit265(config);
addUnit266(config);
addUnit267(config);
addUnit268(config);
addUnit269(config);
addUnit270(config);
addUnit271(config);
addUnit272(config);
addUnit273(config);
addUnit274(config);
addUnit275(config);
addUnit276(config);
addUnit277(config);
addUnit278(config);
addUnit279(config);
addUnit280(config);
addUnit281(config);
addUnit282(config);
addUnit283(config);
addUnit284(config);
addUnit285(config);
addUnit286(config);
addUnit287(config);
addUnit288(config);
addUnit289(config);
addUnit290(config);
addUnit291(config);
addUnit292(config);
addUnit293(config);
addUnit294(config);
addUnit295(config);
addUnit296(config);
addUnit297(config);
addUnit298(config);
addUnit299(config);
addUnit300(config);
addUnit301(config);
addUnit302(config);
addUnit303(config);
addUnit304(config);
addUnit305(config);
addUnit306(config);
addUnit307(config);
addUnit308(config);
addUnit309(config);
addUnit310(config);
addUnit311(config);
addUnit312(config);
addUnit313(config);
addUnit314(config);
addUnit315(config);
addUnit316(config);
addUnit317(config);
addUnit318(config);
addUnit319(config);
addUnit320(config);
addUnit321(config);
addUnit322(config);
addUnit323(config);
addUnit324(config);
addUnit325(config);
addUnit326(config);
addUnit327(config);
addUnit328(config);
addUnit329(config);
addUnit330(config);
addUnit331(config);
addUnit332(config);
addUnit333(config);
addUnit334(config);
addUnit335(config);
addUnit336(config);
addUnit337(config);
addUnit338(config);
addUnit339(config);
addUnit340(config);
addUnit341(config);
addUnit342(config);
addUnit343(config);
addUnit344(config);
addUnit345(config);
addUnit346(config);
addUnit347(config);
addUnit348(config);
addUnit349(config);
addUnit350(config);
addUnit351(config);
addUnit352(config);
addUnit353(config);
addUnit354(config);
addUnit355(config);
addUnit356(config);
addUnit357(config);
addUnit358(config);
addUnit359(config);
addUnit360(config);
addUnit361(config);
addUnit362(config);
addUnit363(config);
addUnit364(config);
addUnit365(config);
addUnit366(config);
addUnit367(config);
addUnit368(config);
addUnit369(config);
addUnit370(config);
addUnit371(config);
addUnit372(config);
addUnit373(config);
addUnit374(config);
addUnit375(config);
addUnit376(config);
addUnit377(config);
addUnit378(config);
addUnit379(config);
addUnit380(config);
addUnit381(config);
addUnit382(config);
addUnit383(config);
addUnit384(config);
addUnit385(config);
addUnit386(config);
addUnit387(config);
addUnit388(config);
addUnit389(config);
addUnit390(config);
addUnit391(config);
addUnit392(config);
addUnit393(config);
addUnit394(config);
addUnit395(config);
addUnit396(config);
addUnit397(config);
addUnit398(config);
addUnit399(config);
addUnit400(config);
addUnit401(config);
addUnit402(config);
addUnit403(config);
addUnit404(config);
addUnit405(config);
addUnit406(config);
addUnit407(config);
addUnit408(config);
addUnit409(config);
addUnit410(config);
addUnit411(config);
addUnit412(config);
addUnit413(config);
addUnit414(config);
addUnit415(config);
addUnit416(config);
addUnit417(config);
addUnit418(config);
addUnit419(config);
addUnit420(config);
addUnit421(config);
addUnit422(config);
addUnit423(config);
addUnit424(config);
addUnit425(config);
addUnit426(config);
addUnit427(config);
addUnit428(config);
addUnit429(config);
addUnit430(config);
addUnit431(config);
addUnit432(config);
addUnit433(config);
addUnit434(config);
addUnit435(config);
addUnit436(config);
addUnit437(config);
addUnit438(config);
addUnit439(config);
addUnit440(config);
addUnit441(config);
addUnit442(config);
addUnit443(config);
addUnit444(config);
addUnit445(config);
addUnit446(config);
addUnit447(config);
addUnit448(config);
addUnit449(config);
addUnit450(config);
addUnit451(config);
addUnit452(config);
addUnit453(config);
addUnit454(config);
addUnit455(config);
addUnit456(config);
addUnit457(config);
addUnit458(config);
addUnit459(config);
addUnit460(config);
addUnit461(config);
addUnit462(config);
addUnit463(config);
addUnit464(config);
addUnit465(config);
addUnit466(config);
addUnit467(config);
addUnit468(config);
addUnit469(config);
addUnit470(config);
addUnit471(config);
addUnit472(config);
addUnit473(config);
addUnit474(config);
addUnit475(config);
addUnit476(config);
addUnit477(config);
addUnit478(config);
addUnit479(config);
addUnit480(config);
addUnit481(config);
addUnit482(config);
addUnit483(config);
addUnit484(config);
addUnit485(config);
addUnit486(config);
addUnit487(config);
addUnit488(config);
addUnit489(config);
addUnit490(config);
addUnit491(config);
addUnit492(config);
addUnit493(config);
addUnit494(config);
addUnit495(config);
addUnit496(config);
addUnit497(config);
addUnit498(config);
addUnit499(config);
addUnit500(config);
addUnit501(config);
addUnit502(config);
addUnit503(config);
addUnit504(config);
addUnit505(config);
addUnit506(config);
addUnit507(config);
addUnit508(config);
addUnit509(config);
addUnit510(config);
addUnit511(config);
addUnit512(config);
addUnit513(config);
addUnit514(config);
addUnit515(config);
addUnit516(config);
addUnit517(config);
addUnit518(config);
addUnit519(config);
addUnit520(config);
addUnit521(config);
addUnit522(config);
addUnit523(config);
addUnit524(config);
addUnit525(config);
addUnit526(config);
addUnit527(config);
addUnit528(config);
addUnit529(config);
addUnit530(config);
addUnit531(config);
addUnit532(config);
addUnit533(config);
addUnit534(config);
addUnit535(config);
addUnit536(config);
addUnit537(config);
addUnit538(config);
addUnit539(config);
addUnit540(config);
addUnit541(config);
addUnit542(config);
addUnit543(config);
addUnit544(config);
addUnit545(config);
addUnit546(config);
addUnit547(config);
addUnit548(config);
addUnit549(config);
addUnit550(config);
addUnit551(config);
addUnit552(config);
addUnit553(config);
addUnit554(config);
addUnit555(config);
addUnit556(config);
addUnit557(config);
addUnit558(config);
addUnit559(config);
addUnit560(config);
addUnit561(config);
addUnit562(config);
addUnit563(config);
addUnit564(config);
addUnit565(config);
addUnit566(config);
addUnit567(config);
addUnit568(config);
addUnit569(config);
addUnit570(config);
addUnit571(config);
addUnit572(config);
addUnit573(config);
addUnit574(config);
addUnit575(config);
addUnit576(config);
addUnit577(config);
addUnit578(config);
addUnit579(config);
addUnit580(config);
addUnit581(config);
addUnit582(config);
addUnit583(config);
addUnit584(config);
addUnit585(config);
addUnit586(config);
addUnit587(config);
addUnit588(config);
addUnit589(config);
addUnit590(config);
addUnit591(config);
addUnit592(config);
addUnit593(config);
addUnit594(config);
addUnit595(config);
addUnit596(config);
addUnit597(config);
addUnit598(config);
addUnit599(config);
addUnit600(config);
addUnit601(config);
addUnit602(config);
addUnit603(config);
addUnit604(config);
addUnit605(config);
addUnit606(config);
addUnit607(config);
addUnit608(config);
addUnit609(config);
addUnit610(config);
addUnit611(config);
addUnit612(config);
addUnit613(config);
addUnit614(config);
addUnit615(config);
addUnit616(config);
addUnit617(config);
addUnit618(config);
addUnit619(config);
addUnit620(config);
addUnit621(config);
addUnit622(config);
addUnit623(config);
addUnit624(config);
addUnit625(config);
addUnit626(config);
addUnit627(config);
addUnit628(config);
addUnit629(config);
addUnit630(config);
addUnit631(config);
addUnit632(config);
addUnit633(config);
addUnit634(config);
addUnit635(config);
addUnit636(config);
addUnit637(config);
addUnit638(config);
addUnit639(config);
addUnit640(config);
addUnit641(config);
addUnit642(config);
addUnit643(config);
addUnit644(config);
addUnit645(config);
addUnit646(config);
addUnit647(config);
addUnit648(config);
addUnit649(config);
addUnit650(config);
addUnit651(config);
addUnit652(config);
addUnit653(config);
addUnit654(config);
addUnit655(config);
addUnit656(config);
addUnit657(config);
addUnit658(config);
addUnit659(config);
addUnit660(config);
addUnit661(config);
addUnit662(config);
addUnit663(config);
addUnit664(config);
addUnit665(config);
addUnit666(config);
addUnit667(config);
addUnit668(config);
addUnit669(config);
addUnit670(config);
addUnit671(config);
addUnit672(config);
addUnit673(config);
addUnit674(config);
addUnit675(config);
addUnit676(config);
addUnit677(config);
addUnit678(config);
addUnit679(config);
addUnit680(config);
addUnit681(config);
addUnit682(config);
addUnit683(config);
addUnit684(config);
addUnit685(config);
addUnit686(config);
addUnit687(config);
addUnit688(config);
addUnit689(config);
addUnit690(config);
addUnit691(config);
addUnit692(config);
addUnit693(config);
addUnit694(config);
addUnit695(config);
addUnit696(config);
addUnit697(config);
addUnit698(config);
addUnit699(config);
addUnit700(config);
addUnit701(config);
addUnit702(config);
addUnit703(config);
addUnit704(config);
addUnit705(config);
addUnit706(config);
addUnit707(config);
addUnit708(config);
addUnit709(config);
addUnit710(config);
addUnit711(config);
addUnit712(config);
addUnit713(config);
addUnit714(config);
addUnit715(config);
addUnit716(config);
addUnit717(config);
addUnit718(config);
addUnit719(config);
addUnit720(config);
addUnit721(config);
addUnit722(config);
addUnit723(config);
addUnit724(config);
addUnit725(config);
addUnit726(config);
addUnit727(config);
addUnit728(config);
addUnit729(config);
addUnit730(config);
addUnit731(config);
addUnit732(config);
addUnit733(config);
addUnit734(config);
addUnit735(config);
addUnit736(config);
addUnit737(config);
addUnit738(config);
addUnit739(config);
addUnit740(config);
addUnit741(config);
addUnit742(config);
addUnit743(config);
addUnit744(config);
addUnit745(config);
addUnit746(config);
addUnit747(config);
addUnit748(config);
addUnit749(config);
addUnit750(config);
addUnit751(config);
addUnit752(config);
addUnit753(config);
addUnit754(config);
addUnit755(config);
addUnit756(config);
addUnit757(config);
addUnit758(config);
addUnit759(config);
addUnit760(config);
addUnit761(config);
addUnit762(config);
addUnit763(config);
addUnit764(config);
addUnit765(config);
addUnit766(config);
addUnit767(config);
addUnit768(config);
addUnit769(config);
addUnit770(config);
addUnit771(config);
addUnit772(config);
addUnit773(config);
addUnit774(config);
addUnit775(config);
addUnit776(config);
addUnit777(config);
addUnit778(config);
addUnit779(config);
addUnit780(config);
addUnit781(config);
addUnit782(config);
addUnit783(config);
addUnit784(config);
addUnit785(config);
addUnit786(config);
addUnit787(config);
addUnit788(config);
addUnit789(config);
addUnit790(config);
addUnit791(config);
addUnit792(config);
addUnit793(config);
addUnit794(config);
addUnit795(config);
addUnit796(config);
addUnit797(config);
addUnit798(config);
addUnit799(config);
addUnit800(config);
addUnit801(config);
addUnit802(config);
addUnit803(config);
addUnit804(config);
addUnit805(config);
addUnit806(config);
addUnit807(config);
addUnit808(config);
addUnit809(config);
addUnit810(config);
addUnit811(config);
addUnit812(config);
addUnit813(config);
addUnit814(config);
addUnit815(config);
addUnit816(config);
addUnit817(config);
addUnit818(config);
addUnit819(config);
addUnit820(config);
addUnit821(config);
addUnit822(config);
addUnit823(config);
addUnit824(config);
addUnit825(config);
addUnit826(config);
addUnit827(config);
addUnit828(config);
addUnit829(config);
addUnit830(config);
addUnit831(config);
addUnit832(config);
addUnit833(config);
addUnit834(config);
addUnit835(config);
addUnit836(config);
addUnit837(config);
addUnit838(config);
addUnit839(config);
addUnit840(config);
addUnit841(config);
addUnit842(config);
addUnit843(config);
addUnit844(config);
addUnit845(config);
addUnit846(config);
addUnit847(config);
addUnit848(config);
addUnit849(config);
addUnit850(config);
addUnit851(config);
addUnit852(config);
addUnit853(config);
addUnit854(config);
addUnit855(config);
addUnit856(config);
addUnit857(config);
addUnit858(config);
addUnit859(config);
addUnit860(config);
addUnit861(config);
addUnit862(config);
addUnit863(config);
addUnit864(config);
addUnit865(config);
addUnit866(config);
addUnit867(config);
addUnit868(config);
addUnit869(config);
addUnit870(config);
addUnit871(config);
addUnit872(config);
addUnit873(config);
addUnit874(config);
addUnit875(config);
addUnit876(config);
addUnit877(config);
addUnit878(config);
addUnit879(config);
addUnit880(config);
addUnit881(config);
addUnit882(config);
addUnit883(config);
addUnit884(config);
addUnit885(config);
addUnit886(config);
addUnit887(config);
addUnit888(config);
addUnit889(config);
addUnit890(config);
addUnit891(config);
addUnit892(config);
addUnit893(config);
addUnit894(config);
addUnit895(config);
addUnit896(config);
addUnit897(config);
addUnit898(config);
addUnit899(config);
addUnit900(config);
addUnit901(config);
addUnit902(config);
addUnit903(config);
addUnit904(config);
addUnit905(config);
addUnit906(config);
addUnit907(config);
addUnit908(config);
addUnit909(config);
addUnit910(config);
addUnit911(config);
addUnit912(config);
addUnit913(config);
addUnit914(config);
addUnit915(config);
addUnit916(config);
addUnit917(config);
addUnit918(config);
addUnit919(config);
addUnit920(config);
addUnit921(config);
addUnit922(config);
addUnit923(config);
addUnit924(config);
addUnit925(config);
addUnit926(config);
addUnit927(config);
addUnit928(config);
addUnit929(config);
addUnit930(config);
addUnit931(config);
addUnit932(config);
addUnit933(config);
addUnit934(config);
addUnit935(config);
addUnit936(config);
addUnit937(config);
addUnit938(config);
addUnit939(config);
addUnit940(config);
addUnit941(config);
addUnit942(config);
addUnit943(config);
addUnit944(config);
addUnit945(config);
addUnit946(config);
addUnit947(config);
addUnit948(config);
addUnit949(config);
addUnit950(config);
addUnit951(config);
addUnit952(config);
addUnit953(config);
addUnit954(config);
addUnit955(config);
addUnit956(config);
addUnit957(config);
addUnit958(config);
addUnit959(config);
addUnit960(config);
addUnit961(config);
addUnit962(config);
addUnit963(config);
addUnit964(config);
addUnit965(config);
addUnit966(config);
addUnit967(config);
addUnit968(config);
addUnit969(config);
addUnit970(config);
addUnit971(config);
addUnit972(config);
addUnit973(config);
addUnit974(config);
addUnit975(config);
addUnit976(config);
addUnit977(config);
addUnit978(config);
addUnit979(config);
addUnit980(config);
addUnit981(config);
addUnit982(config);
addUnit983(config);
addUnit984(config);
addUnit985(config);
addUnit986(config);
addUnit987(config);
addUnit988(config);
addUnit989(config);
addUnit990(config);
addUnit991(config);
addUnit992(config);
addUnit993(config);
addUnit994(config);
addUnit995(config);
addUnit996(config);
addUnit997(config);
addUnit998(config);
addUnit999(config);
addUnit1000(config);
addUnit1001(config);
addUnit1002(config);
addUnit1003(config);
addUnit1004(config);
addUnit1005(config);
addUnit1006(config);
addUnit1007(config);
addUnit1008(config);
addUnit1009(config);
addUnit1010(config);
addUnit1011(config);
addUnit1012(config);
addUnit1013(config);
addUnit1014(config);
addUnit1015(config);
addUnit1016(config);
addUnit1017(config);
addUnit1018(config);
addUnit1019(config);
addUnit1020(config);
addUnit1021(config);
addUnit1022(config);
addUnit1023(config);
addUnit1024(config);
addUnit1025(config);
addUnit1026(config);
addUnit1027(config);
addUnit1028(config);
addUnit1029(config);
addUnit1030(config);
addUnit1031(config);
addUnit1032(config);
addUnit1033(config);
addUnit1034(config);
addUnit1035(config);
addUnit1036(config);
addUnit1037(config);
addUnit1038(config);
addUnit1039(config);
addUnit1040(config);
addUnit1041(config);
addUnit1042(config);
addUnit1043(config);
addUnit1044(config);
addUnit1045(config);
addUnit1046(config);
addUnit1047(config);
addUnit1048(config);
addUnit1049(config);
addUnit1050(config);
addUnit1051(config);
addUnit1052(config);
addUnit1053(config);
addUnit1054(config);
addUnit1055(config);
addUnit1056(config);
addUnit1057(config);
addUnit1058(config);
addUnit1059(config);
addUnit1060(config);
addUnit1061(config);
addUnit1062(config);
addUnit1063(config);
addUnit1064(config);
addUnit1065(config);
addUnit1066(config);
addUnit1067(config);
addUnit1068(config);
addUnit1069(config);
addUnit1070(config);
addUnit1071(config);
addUnit1072(config);
addUnit1073(config);
addUnit1074(config);
addUnit1075(config);
addUnit1076(config);
addUnit1077(config);
addUnit1078(config);
addUnit1079(config);
addUnit1080(config);
addUnit1081(config);
addUnit1082(config);
addUnit1083(config);
addUnit1084(config);
addUnit1085(config);
addUnit1086(config);
addUnit1087(config);
addUnit1088(config);
addUnit1089(config);
addUnit1090(config);
addUnit1091(config);
addUnit1092(config);
addUnit1093(config);
addUnit1094(config);
addUnit1095(config);
addUnit1096(config);
addUnit1097(config);
addUnit1098(config);
addUnit1099(config);
addUnit1100(config);
addUnit1101(config);
addUnit1102(config);
addUnit1103(config);
addUnit1104(config);
addUnit1105(config);
addUnit1106(config);
addUnit1107(config);
addUnit1108(config);
addUnit1109(config);
addUnit1110(config);
addUnit1111(config);
addUnit1112(config);
addUnit1113(config);
addUnit1114(config);
addUnit1115(config);
addUnit1116(config);
addUnit1117(config);
addUnit1118(config);
addUnit1119(config);
addUnit1120(config);
addUnit1121(config);
addUnit1122(config);
addUnit1123(config);
addUnit1124(config);
addUnit1125(config);
addUnit1126(config);
addUnit1127(config);
addUnit1128(config);
addUnit1129(config);
addUnit1130(config);
addUnit1131(config);
addUnit1132(config);
addUnit1133(config);
addUnit1134(config);
addUnit1135(config);
addUnit1136(config);
addUnit1137(config);
addUnit1138(config);
addUnit1139(config);
addUnit1140(config);
addUnit1141(config);
addUnit1142(config);
addUnit1143(config);
addUnit1144(config);
addUnit1145(config);
addUnit1146(config);
addUnit1147(config);
addUnit1148(config);
addUnit1149(config);
addUnit1150(config);
addUnit1151(config);
addUnit1152(config);
addUnit1153(config);
addUnit1154(config);
addUnit1155(config);
addUnit1156(config);
addUnit1157(config);
addUnit1158(config);
addUnit1159(config);
addUnit1160(config);
addUnit1161(config);
addUnit1162(config);
addUnit1163(config);
addUnit1164(config);
addUnit1165(config);
addUnit1166(config);
addUnit1167(config);
addUnit1168(config);
addUnit1169(config);
addUnit1170(config);
addUnit1171(config);
addUnit1172(config);
addUnit1173(config);
addUnit1174(config);
addUnit1175(config);
addUnit1176(config);
addUnit1177(config);
addUnit1178(config);
addUnit1179(config);
addUnit1180(config);
addUnit1181(config);
addUnit1182(config);
addUnit1183(config);
addUnit1184(config);
addUnit1185(config);
addUnit1186(config);
addUnit1187(config);
addUnit1188(config);
addUnit1189(config);
addUnit1190(config);
addUnit1191(config);
addUnit1192(config);
addUnit1193(config);
addUnit1194(config);
addUnit1195(config);
addUnit1196(config);
addUnit1197(config);
addUnit1198(config);
addUnit1199(config);
addUnit1200(config);
addUnit1201(config);
addUnit1202(config);
addUnit1203(config);
addUnit1204(config);
addUnit1205(config);
addUnit1206(config);
addUnit1207(config);
addUnit1208(config);
addUnit1209(config);
addUnit1210(config);
addUnit1211(config);
addUnit1212(config);
addUnit1213(config);
addUnit1214(config);
addUnit1215(config);
addUnit1216(config);
addUnit1217(config);
addUnit1218(config);
addUnit1219(config);
addUnit1220(config);
addUnit1221(config);
addUnit1222(config);
addUnit1223(config);
addUnit1224(config);
addUnit1225(config);
addUnit1226(config);
addUnit1227(config);
addUnit1228(config);
addUnit1229(config);
addUnit1230(config);
addUnit1231(config);
addUnit1232(config);
addUnit1233(config);
addUnit1234(config);
addUnit1235(config);
addUnit1236(config);
addUnit1237(config);
addUnit1238(config);
addUnit1239(config);
addUnit1240(config);
addUnit1241(config);
addUnit1242(config);
addUnit1243(config);
addUnit1244(config);
addUnit1245(config);
addUnit1246(config);
addUnit1247(config);
addUnit1248(config);
addUnit1249(config);
addUnit1250(config);
addUnit1251(config);
addUnit1252(config);
addUnit1253(config);
addUnit1254(config);
addUnit1255(config);
addUnit1256(config);
addUnit1257(config);
addUnit1258(config);
addUnit1259(config);
addUnit1260(config);
addUnit1261(config);
addUnit1262(config);
addUnit1263(config);
addUnit1264(config);
addUnit1265(config);
addUnit1266(config);
addUnit1267(config);
addUnit1268(config);
addUnit1269(config);
addUnit1270(config);
addUnit1271(config);
addUnit1272(config);
addUnit1273(config);
addUnit1274(config);
addUnit1275(config);
addUnit1276(config);
addUnit1277(config);
addUnit1278(config);
addUnit1279(config);
addUnit1280(config);
addUnit1281(config);
addUnit1282(config);
addUnit1283(config);
addUnit1284(config);
addUnit1285(config);
addUnit1286(config);
addUnit1287(config);
addUnit1288(config);
addUnit1289(config);
addUnit1290(config);
addUnit1291(config);
addUnit1292(config);
addUnit1293(config);
addUnit1294(config);
addUnit1295(config);
addUnit1296(config);
addUnit1297(config);
addUnit1298(config);
addUnit1299(config);
addUnit1300(config);
addUnit1301(config);
addUnit1302(config);
addUnit1303(config);
addUnit1304(config);
addUnit1305(config);
addUnit1306(config);
addUnit1307(config);
addUnit1308(config);
addUnit1309(config);
addUnit1310(config);
addUnit1311(config);
addUnit1312(config);
addUnit1313(config);
addUnit1314(config);
addUnit1315(config);
addUnit1316(config);
addUnit1317(config);
addUnit1318(config);
addUnit1319(config);
addUnit1320(config);
addUnit1321(config);
addUnit1322(config);
addUnit1323(config);
addUnit1324(config);
addUnit1325(config);
addUnit1326(config);
addUnit1327(config);
addUnit1328(config);
addUnit1329(config);
addUnit1330(config);
addUnit1331(config);
addUnit1332(config);
addUnit1333(config);
addUnit1334(config);
addUnit1335(config);
addUnit1336(config);
addUnit1337(config);
addUnit1338(config);
addUnit1339(config);
addUnit1340(config);
addUnit1341(config);
addUnit1342(config);
addUnit1343(config);
addUnit1344(config);
addUnit1345(config);
addUnit1346(config);
addUnit1347(config);
addUnit1348(config);
addUnit1349(config);
addUnit1350(config);
addUnit1351(config);
addUnit1352(config);
addUnit1353(config);
addUnit1354(config);
addUnit1355(config);
addUnit1356(config);
addUnit1357(config);
addUnit1358(config);
addUnit1359(config);
addUnit1360(config);
addUnit1361(config);
addUnit1362(config);
addUnit1363(config);
addUnit1364(config);
addUnit1365(config);
addUnit1366(config);
addUnit1367(config);
addUnit1368(config);
addUnit1369(config);
addUnit1370(config);
addUnit1371(config);
addUnit1372(config);
addUnit1373(config);
addUnit1374(config);
addUnit1375(config);
addUnit1376(config);
addUnit1377(config);
addUnit1378(config);
addUnit1379(config);
addUnit1380(config);
addUnit1381(config);
addUnit1382(config);
addUnit1383(config);
addUnit1384(config);
addUnit1385(config);
addUnit1386(config);
addUnit1387(config);
addUnit1388(config);
addUnit1389(config);
addUnit1390(config);
addUnit1391(config);
addUnit1392(config);
addUnit1393(config);
addUnit1394(config);
addUnit1395(config);
addUnit1396(config);
addUnit1397(config);
addUnit1398(config);
addUnit1399(config);
addUnit1400(config);
addUnit1401(config);
addUnit1402(config);
addUnit1403(config);
addUnit1404(config);
addUnit1405(config);
addUnit1406(config);
addUnit1407(config);
addUnit1408(config);
addUnit1409(config);
addUnit1410(config);
addUnit1411(config);
addUnit1412(config);
addUnit1413(config);
addUnit1414(config);
addUnit1415(config);
addUnit1416(config);
addUnit1417(config);
addUnit1418(config);
addUnit1419(config);
addUnit1420(config);
addUnit1421(config);
addUnit1422(config);
addUnit1423(config);
addUnit1424(config);
addUnit1425(config);
addUnit1426(config);
addUnit1427(config);
addUnit1428(config);
addUnit1429(config);
addUnit1430(config);
addUnit1431(config);
addUnit1432(config);
addUnit1433(config);
addUnit1434(config);
addUnit1435(config);
addUnit1436(config);
addUnit1437(config);
addUnit1438(config);
addUnit1439(config);
addUnit1440(config);
addUnit1441(config);
addUnit1442(config);
addUnit1443(config);
addUnit1444(config);
addUnit1445(config);
addUnit1446(config);
addUnit1447(config);
addUnit1448(config);
addUnit1449(config);
addUnit1450(config);
addUnit1451(config);
addUnit1452(config);
addUnit1453(config);
addUnit1454(config);
addUnit1455(config);
addUnit1456(config);
addUnit1457(config);
addUnit1458(config);
addUnit1459(config);
addUnit1460(config);
addUnit1461(config);
addUnit1462(config);
addUnit1463(config);
addUnit1464(config);
addUnit1465(config);
addUnit1466(config);
addUnit1467(config);
addUnit1468(config);
addUnit1469(config);
addUnit1470(config);
addUnit1471(config);
addUnit1472(config);
addUnit1473(config);
addUnit1474(config);
addUnit1475(config);
addUnit1476(config);
addUnit1477(config);
addUnit1478(config);
addUnit1479(config);
addUnit1480(config);
addUnit1481(config);
addUnit1482(config);
addUnit1483(config);
addUnit1484(config);
addUnit1485(config);
addUnit1486(config);
addUnit1487(config);
addUnit1488(config);
addUnit1489(config);
addUnit1490(config);
addUnit1491(config);
addUnit1492(config);
addUnit1493(config);
addUnit1494(config);
addUnit1495(config);
addUnit1496(config);
addUnit1497(config);
addUnit1498(config);
addUnit1499(config);
addUnit1500(config);
addUnit1501(config);
addUnit1502(config);
addUnit1503(config);
addUnit1504(config);
addUnit1505(config);
addUnit1506(config);
addUnit1507(config);
addUnit1508(config);
addUnit1509(config);
addUnit1510(config);
addUnit1511(config);
addUnit1512(config);
addUnit1513(config);
addUnit1514(config);
addUnit1515(config);
addUnit1516(config);
addUnit1517(config);
addUnit1518(config);
addUnit1519(config);
addUnit1520(config);
addUnit1521(config);
addUnit1522(config);
addUnit1523(config);
addUnit1524(config);
addUnit1525(config);
addUnit1526(config);
addUnit1527(config);
addUnit1528(config);
addUnit1529(config);
addUnit1530(config);
addUnit1531(config);
addUnit1532(config);
addUnit1533(config);
addUnit1534(config);
addUnit1535(config);
addUnit1536(config);
addUnit1537(config);
addUnit1538(config);
addUnit1539(config);
addUnit1540(config);
addUnit1541(config);
addUnit1542(config);
addUnit1543(config);
addUnit1544(config);
addUnit1545(config);
addUnit1546(config);
addUnit1547(config);
addUnit1548(config);
addUnit1549(config);
addUnit1550(config);
addUnit1551(config);
addUnit1552(config);
addUnit1553(config);
addUnit1554(config);
addUnit1555(config);
addUnit1556(config);
addUnit1557(config);
addUnit1558(config);
addUnit1559(config);
addUnit1560(config);
addUnit1561(config);
addUnit1562(config);
addUnit1563(config);
addUnit1564(config);
addUnit1565(config);
addUnit1566(config);
addUnit1567(config);
addUnit1568(config);
addUnit1569(config);
addUnit1570(config);
addUnit1571(config);
addUnit1572(config);
addUnit1573(config);
addUnit1574(config);
addUnit1575(config);
addUnit1576(config);
addUnit1577(config);
addUnit1578(config);
addUnit1579(config);
addUnit1580(config);
addUnit1581(config);
addUnit1582(config);
addUnit1583(config);
addUnit1584(config);
addUnit1585(config);
addUnit1586(config);
addUnit1587(config);
addUnit1588(config);
addUnit1589(config);
addUnit1590(config);
addUnit1591(config);
addUnit1592(config);
addUnit1593(config);
addUnit1594(config);
addUnit1595(config);
addUnit1596(config);
addUnit1597(config);
addUnit1598(config);
addUnit1599(config);
addUnit1600(config);
addUnit1601(config);
addUnit1602(config);
addUnit1603(config);
addUnit1604(config);
addUnit1605(config);
addUnit1606(config);
addUnit1607(config);
addUnit1608(config);
addUnit1609(config);
addUnit1610(config);
addUnit1611(config);
addUnit1612(config);
addUnit1613(config);
addUnit1614(config);
addUnit1615(config);
addUnit1616(config);
addUnit1617(config);
addUnit1618(config);
addUnit1619(config);
addUnit1620(config);
addUnit1621(config);
addUnit1622(config);
addUnit1623(config);
addUnit1624(config);
addUnit1625(config);
addUnit1626(config);
addUnit1627(config);
addUnit1628(config);
addUnit1629(config);
addUnit1630(config);
addUnit1631(config);
addUnit1632(config);
addUnit1633(config);
addUnit1634(config);
addUnit1635(config);
addUnit1636(config);
addUnit1637(config);
addUnit1638(config);
addUnit1639(config);
addUnit1640(config);
addUnit1641(config);
addUnit1642(config);
addUnit1643(config);
addUnit1644(config);
addUnit1645(config);
addUnit1646(config);
addUnit1647(config);
addUnit1648(config);
addUnit1649(config);
addUnit1650(config);
addUnit1651(config);
addUnit1652(config);
addUnit1653(config);
addUnit1654(config);
addUnit1655(config);
addUnit1656(config);
addUnit1657(config);
addUnit1658(config);
addUnit1659(config);
addUnit1660(config);
addUnit1661(config);
addUnit1662(config);
addUnit1663(config);
addUnit1664(config);
addUnit1665(config);
addUnit1666(config);
addUnit1667(config);
addUnit1668(config);
addUnit1669(config);
addUnit1670(config);
addUnit1671(config);
addUnit1672(config);
addUnit1673(config);
addUnit1674(config);
addUnit1675(config);
addUnit1676(config);
addUnit1677(config);
addUnit1678(config);
addUnit1679(config);
addUnit1680(config);
addUnit1681(config);
addUnit1682(config);
addUnit1683(config);
addUnit1684(config);
addUnit1685(config);
addUnit1686(config);
addUnit1687(config);
addUnit1688(config);
addUnit1689(config);
addUnit1690(config);
addUnit1691(config);
addUnit1692(config);
addUnit1693(config);
addUnit1694(config);
addUnit1695(config);
addUnit1696(config);
addUnit1697(config);
addUnit1698(config);
addUnit1699(config);
addUnit1700(config);
addUnit1701(config);
addUnit1702(config);
addUnit1703(config);
addUnit1704(config);
addUnit1705(config);
addUnit1706(config);
addUnit1707(config);
addUnit1708(config);
addUnit1709(config);
addUnit1710(config);
addUnit1711(config);
addUnit1712(config);
addUnit1713(config);
addUnit1714(config);
addUnit1715(config);
addUnit1716(config);
addUnit1717(config);
addUnit1718(config);
addUnit1719(config);
addUnit1720(config);
addUnit1721(config);
addUnit1722(config);
addUnit1723(config);
addUnit1724(config);
addUnit1725(config);
addUnit1726(config);
addUnit1727(config);
addUnit1728(config);
addUnit1729(config);
addUnit1730(config);
addUnit1731(config);
addUnit1732(config);
addUnit1733(config);
addUnit1734(config);
addUnit1735(config);
addUnit1736(config);
addUnit1737(config);
addUnit1738(config);
addUnit1739(config);
addUnit1740(config);
addUnit1741(config);
addUnit1742(config);
addUnit1743(config);
addUnit1744(config);
addUnit1745(config);
addUnit1746(config);
addUnit1747(config);
addUnit1748(config);
addUnit1749(config);
addUnit1750(config);
addUnit1751(config);
addUnit1752(config);
addUnit1753(config);
addUnit1754(config);
addUnit1755(config);
addUnit1756(config);
addUnit1757(config);
addUnit1758(config);
addUnit1759(config);
addUnit1760(config);
addUnit1761(config);
addUnit1762(config);
addUnit1763(config);
addUnit1764(config);
addUnit1765(config);
addUnit1766(config);
addUnit1767(config);
addUnit1768(config);
addUnit1769(config);
addUnit1770(config);
addUnit1771(config);
addUnit1772(config);
addUnit1773(config);
addUnit1774(config);
addUnit1775(config);
addUnit1776(config);
addUnit1777(config);
addUnit1778(config);
addUnit1779(config);
addUnit1780(config);
addUnit1781(config);
addUnit1782(config);
addUnit1783(config);
addUnit1784(config);
addUnit1785(config);
addUnit1786(config);
addUnit1787(config);
addUnit1788(config);
addUnit1789(config);
addUnit1790(config);
addUnit1791(config);
addUnit1792(config);
addUnit1793(config);
addUnit1794(config);
addUnit1795(config);
addUnit1796(config);

export const Units = {
    // Brazilian Real
    BrazilianReal: Qudt.unitFromLocalname("BrazilianReal"),
    // Lao kip
    LaoKip: Qudt.unitFromLocalname("LaoKip"),
    // Shake
    SH: Qudt.unitFromLocalname("SH"),
    // Kilovolt Per Metre
    KiloV__PER__M: Qudt.unitFromLocalname("KiloV-PER-M"),
    // Millihenry Per Ohm
    MilliH__PER__OHM: Qudt.unitFromLocalname("MilliH-PER-OHM"),
    // tonne per hectare
    TONNE__PER__HA: Qudt.unitFromLocalname("TONNE-PER-HA"),
    // Cubic Centimeter Per Kelvin
    CentiM3__PER__K: Qudt.unitFromLocalname("CentiM3-PER-K"),
    // Somali Shilling
    SomaliShilling: Qudt.unitFromLocalname("SomaliShilling"),
    // PetaCoulomb
    PetaC: Qudt.unitFromLocalname("PetaC"),
    // Lambert
    LA: Qudt.unitFromLocalname("LA"),
    // Revolution per Minute
    REV__PER__MIN: Qudt.unitFromLocalname("REV-PER-MIN"),
    // Kilopascal Per Kelvin
    KiloPA__PER__K: Qudt.unitFromLocalname("KiloPA-PER-K"),
    // Number per individual per hour
    NUM__PER__HR: Qudt.unitFromLocalname("NUM-PER-HR"),
    // Bar Liter Per Second
    BAR__L__PER__SEC: Qudt.unitFromLocalname("BAR-L-PER-SEC"),
    // Ampere per Radian
    A__PER__RAD: Qudt.unitFromLocalname("A-PER-RAD"),
    // Venezuelan bolvar
    VenezuelanBolvar: Qudt.unitFromLocalname("VenezuelanBolvar"),
    // Kelvin per Watt
    K__PER__W: Qudt.unitFromLocalname("K-PER-W"),
    // Gram Per Cubic Decimetre
    GM__PER__DeciM3: Qudt.unitFromLocalname("GM-PER-DeciM3"),
    // Danish Krone
    DanishKrone: Qudt.unitFromLocalname("DanishKrone"),
    // Pound per Gallon
    LB__PER__GAL: Qudt.unitFromLocalname("LB-PER-GAL"),
    // Megalitre
    MegaL: Qudt.unitFromLocalname("MegaL"),
    // Centipoise Per Bar
    CentiPOISE__PER__BAR: Qudt.unitFromLocalname("CentiPOISE-PER-BAR"),
    // Hundredweight (US)
    Hundredweight_US: Qudt.unitFromLocalname("Hundredweight_US"),
    // Planck Momentum
    PlanckMomentum: Qudt.unitFromLocalname("PlanckMomentum"),
    // Millinewton Meter
    MilliN__M: Qudt.unitFromLocalname("MilliN-M"),
    // Mile per Minute
    MI__PER__MIN: Qudt.unitFromLocalname("MI-PER-MIN"),
    // Cape Verde Escudo
    CapeVerdeEscudo: Qudt.unitFromLocalname("CapeVerdeEscudo"),
    // Volt Per Millimetre
    V__PER__MilliM: Qudt.unitFromLocalname("V-PER-MilliM"),
    // Watt per Square Meter Quartic Kelvin
    W__PER__M2__K4: Qudt.unitFromLocalname("W-PER-M2-K4"),
    // Cubic Decimetre Per Hour
    DeciM3__PER__HR: Qudt.unitFromLocalname("DeciM3-PER-HR"),
    // Grain per Gallon
    GRAIN__PER__GAL: Qudt.unitFromLocalname("GRAIN-PER-GAL"),
    // Pound Mass
    LB: Qudt.unitFromLocalname("LB"),
    // Calorie (mean)
    CAL_MEAN: Qudt.unitFromLocalname("CAL_MEAN"),
    // Mikrometer pro Newton
    MicroM__PER__N: Qudt.unitFromLocalname("MicroM-PER-N"),
    // Cubic Millimeter
    MilliM3: Qudt.unitFromLocalname("MilliM3"),
    // Nanograms per microlitre
    NanoGM__PER__MicroL: Qudt.unitFromLocalname("NanoGM-PER-MicroL"),
    // Faraday
    F: Qudt.unitFromLocalname("F"),
    // Reciprocal Week
    PER__WK: Qudt.unitFromLocalname("PER-WK"),
    // Foot Pound Force per Second
    FT__LB_F__PER__SEC: Qudt.unitFromLocalname("FT-LB_F-PER-SEC"),
    // Ampere Per Millimetre
    A__PER__MilliM: Qudt.unitFromLocalname("A-PER-MilliM"),
    // British Thermal Unit (International Definition)
    BTU_IT: Qudt.unitFromLocalname("BTU_IT"),
    // Kenyan Shilling
    KenyanShilling: Qudt.unitFromLocalname("KenyanShilling"),
    // Kilopascal Square Metre per Gram
    KiloPA__M2__PER__GM: Qudt.unitFromLocalname("KiloPA-M2-PER-GM"),
    // Foot of Water
    FT_H2O: Qudt.unitFromLocalname("FT_H2O"),
    // Riel
    Riel: Qudt.unitFromLocalname("Riel"),
    // Nanofarad Per Meter
    NanoFARAD__PER__M: Qudt.unitFromLocalname("NanoFARAD-PER-M"),
    // Calorie (international Table) Per Second Centimetre Kelvin
    CAL_IT__PER__SEC__CentiM__K: Qudt.unitFromLocalname("CAL_IT-PER-SEC-CentiM-K"),
    // Gram
    GM: Qudt.unitFromLocalname("GM"),
    // Minute Angle
    MIN_Angle: Qudt.unitFromLocalname("MIN_Angle"),
    // BTU (TH) Foot per Square Foot Hour Degree Fahrenheit
    BTU_TH__FT__PER__FT2__HR__DEG_F: Qudt.unitFromLocalname("BTU_TH-FT-PER-FT2-HR-DEG_F"),
    // Hartley
    HART: Qudt.unitFromLocalname("HART"),
    // Weber
    WB: Qudt.unitFromLocalname("WB"),
    // Palladium (one Troy ounce)
    Palladium__OunceTroy: Qudt.unitFromLocalname("Palladium-OunceTroy"),
    // US Liquid Cup
    CUP: Qudt.unitFromLocalname("CUP"),
    // Uzbekistan Som
    UzbekistanSom: Qudt.unitFromLocalname("UzbekistanSom"),
    // Mole
    MOL: Qudt.unitFromLocalname("MOL"),
    // Micrograms per millilitre
    MicroGM__PER__MilliL: Qudt.unitFromLocalname("MicroGM-PER-MilliL"),
    // Sidereal Year
    YR_Sidereal: Qudt.unitFromLocalname("YR_Sidereal"),
    // Degree per Hour
    DEG__PER__HR: Qudt.unitFromLocalname("DEG-PER-HR"),
    // Standard
    Standard: Qudt.unitFromLocalname("Standard"),
    // Megapascal Cubic Metre Per Second
    MegaPA__M3__PER__SEC: Qudt.unitFromLocalname("MegaPA-M3-PER-SEC"),
    // Pascal per Second
    PA__PER__SEC: Qudt.unitFromLocalname("PA-PER-SEC"),
    // Square Foot
    FT2: Qudt.unitFromLocalname("FT2"),
    // Radian
    RAD: Qudt.unitFromLocalname("RAD"),
    // Siemens
    S: Qudt.unitFromLocalname("S"),
    // Square Micrometre
    MicroM2: Qudt.unitFromLocalname("MicroM2"),
    // Ounce (avoirdupois) Per Gallon (US)
    OZ__PER__GAL_US: Qudt.unitFromLocalname("OZ-PER-GAL_US"),
    // Millibar
    MilliBAR: Qudt.unitFromLocalname("MilliBAR"),
    // Electric Susceptibility Unit
    SUSCEPTIBILITY_ELEC: Qudt.unitFromLocalname("SUSCEPTIBILITY_ELEC"),
    // Watt per Square Centimeter
    W__PER__CentiM2: Qudt.unitFromLocalname("W-PER-CentiM2"),
    // Gram Per Kilogram
    GM__PER__KiloGM: Qudt.unitFromLocalname("GM-PER-KiloGM"),
    // Planck Charge
    PlanckCharge: Qudt.unitFromLocalname("PlanckCharge"),
    // Cyprus Pound
    CyprusPound: Qudt.unitFromLocalname("CyprusPound"),
    // Angstrom^3
    ANGSTROM3: Qudt.unitFromLocalname("ANGSTROM3"),
    // Cubic Centimetre Per Cubic Metre
    CentiM3__PER__M3: Qudt.unitFromLocalname("CentiM3-PER-M3"),
    // Mega Electron Volt Femtometer
    MegaEV__FemtoM: Qudt.unitFromLocalname("MegaEV-FemtoM"),
    // Nanograms per day
    NanoGM__PER__DAY: Qudt.unitFromLocalname("NanoGM-PER-DAY"),
    // Calorie (thermochemical) Per Second
    CAL_TH__PER__SEC: Qudt.unitFromLocalname("CAL_TH-PER-SEC"),
    // Pound Force Foot
    LB_F__FT: Qudt.unitFromLocalname("LB_F-FT"),
    // Square Foot per Hour
    FT2__PER__HR: Qudt.unitFromLocalname("FT2-PER-HR"),
    // Megacoulomb Per Cubic Meter
    MegaC__PER__M3: Qudt.unitFromLocalname("MegaC-PER-M3"),
    // Bermuda Dollar
    BermudaDollar: Qudt.unitFromLocalname("BermudaDollar"),
    // British Thermal Unit (international Table) Per Second Foot Degree Rankine
    BTU_IT__PER__SEC__FT__DEG_R: Qudt.unitFromLocalname("BTU_IT-PER-SEC-FT-DEG_R"),
    // BTU (TH) Inch per Square Foot Second Degree Fahrenheit
    BTU_TH__IN__PER__FT2__SEC__DEG_F: Qudt.unitFromLocalname("BTU_TH-IN-PER-FT2-SEC-DEG_F"),
    // Volt Second Per Meter
    V__SEC__PER__M: Qudt.unitFromLocalname("V-SEC-PER-M"),
    // Slug per Second
    SLUG__PER__SEC: Qudt.unitFromLocalname("SLUG-PER-SEC"),
    // BTU per Square Foot
    BTU_IT__PER__FT2: Qudt.unitFromLocalname("BTU_IT-PER-FT2"),
    // Pound per Cubic Yard
    LB__PER__YD3: Qudt.unitFromLocalname("LB-PER-YD3"),
    // Degree Fahrenheit Hour Square Foot per British Thermal Unit (thermochemical)
    DEG_F__HR__FT2__PER__BTU_TH: Qudt.unitFromLocalname("DEG_F-HR-FT2-PER-BTU_TH"),
    // Millibecquerels per kilogram
    MilliBQ__PER__KiloGM: Qudt.unitFromLocalname("MilliBQ-PER-KiloGM"),
    // Millibecquerels per gram
    MilliBQ__PER__GM: Qudt.unitFromLocalname("MilliBQ-PER-GM"),
    // Week
    WK: Qudt.unitFromLocalname("WK"),
    // Gallon (UK) Per Hour
    GAL_UK__PER__HR: Qudt.unitFromLocalname("GAL_UK-PER-HR"),
    // Microinch
    MicroIN: Qudt.unitFromLocalname("MicroIN"),
    // Planck Power
    PlanckPower: Qudt.unitFromLocalname("PlanckPower"),
    // Ounce (avoirdupois) Per Cubic Yard
    OZ__PER__YD3: Qudt.unitFromLocalname("OZ-PER-YD3"),
    // Watt per Square Metre Steradian
    W__PER__M2__SR: Qudt.unitFromLocalname("W-PER-M2-SR"),
    // Degree Twaddell
    DEGREE_TWADDELL: Qudt.unitFromLocalname("DEGREE_TWADDELL"),
    // Square metre seconds per radian
    M2__SEC__PER__RAD: Qudt.unitFromLocalname("M2-SEC-PER-RAD"),
    // Lumen per Watt
    LM__PER__W: Qudt.unitFromLocalname("LM-PER-W"),
    // Kilogram
    KiloGM: Qudt.unitFromLocalname("KiloGM"),
    // Light Year
    LY: Qudt.unitFromLocalname("LY"),
    // Moles per square metre
    MOL__PER__M2: Qudt.unitFromLocalname("MOL-PER-M2"),
    // Cubic Foot Per Degree Fahrenheit
    FT3__PER__DEG_F: Qudt.unitFromLocalname("FT3-PER-DEG_F"),
    // Candela per Square Inch
    CD__PER__IN2: Qudt.unitFromLocalname("CD-PER-IN2"),
    // Mole Per Second
    MOL__PER__SEC: Qudt.unitFromLocalname("MOL-PER-SEC"),
    // Microatmospheres
    MicroATM: Qudt.unitFromLocalname("MicroATM"),
    // Mil Angle (NATO)
    MIL: Qudt.unitFromLocalname("MIL"),
    // Mole Per Minute
    MOL__PER__MIN: Qudt.unitFromLocalname("MOL-PER-MIN"),
    // Millilitre Per Square Centimetre Second
    MilliL__PER__CentiM2__SEC: Qudt.unitFromLocalname("MilliL-PER-CentiM2-SEC"),
    // Megagram
    MegaGM: Qudt.unitFromLocalname("MegaGM"),
    // Clo
    CLO: Qudt.unitFromLocalname("CLO"),
    // Becquerel per Square Meter
    BQ__PER__M2: Qudt.unitFromLocalname("BQ-PER-M2"),
    // Ton Energy
    TonEnergy: Qudt.unitFromLocalname("TonEnergy"),
    // Slug per Square Foot
    SLUG__PER__FT2: Qudt.unitFromLocalname("SLUG-PER-FT2"),
    // Imperial Mass Ounce per Square Yard
    OZ__PER__YD2: Qudt.unitFromLocalname("OZ-PER-YD2"),
    // Erg per Cubic Centimetre
    ERG__PER__CentiM3: Qudt.unitFromLocalname("ERG-PER-CentiM3"),
    // Millibar Cubic Metre Per Second
    MilliBAR__M3__PER__SEC: Qudt.unitFromLocalname("MilliBAR-M3-PER-SEC"),
    // Poise Per Bar
    POISE__PER__BAR: Qudt.unitFromLocalname("POISE-PER-BAR"),
    // BTU per Hour Square Foot
    BTU_IT__PER__HR__FT2: Qudt.unitFromLocalname("BTU_IT-PER-HR-FT2"),
    // Micromole per micromole of biomass per day
    MicroMOL__PER__MicroMOL__DAY: Qudt.unitFromLocalname("MicroMOL-PER-MicroMOL-DAY"),
    // Armenian Dram
    AMD: Qudt.unitFromLocalname("AMD"),
    // Kilogram per Square Second
    KiloGM__PER__SEC2: Qudt.unitFromLocalname("KiloGM-PER-SEC2"),
    // Watts per metre
    W__PER__M: Qudt.unitFromLocalname("W-PER-M"),
    // DeciN
    DeciN: Qudt.unitFromLocalname("DeciN"),
    // Degree Celsius Centimetre
    DEG_C__CentiM: Qudt.unitFromLocalname("DEG_C-CentiM"),
    // Terajoule
    TeraJ: Qudt.unitFromLocalname("TeraJ"),
    // International Unit per Litre
    IU__PER__L: Qudt.unitFromLocalname("IU-PER-L"),
    // Square Foot Degree Fahrenheit
    FT2__DEG_F: Qudt.unitFromLocalname("FT2-DEG_F"),
    // Statcoulomb per Mole
    C_Stat__PER__MOL: Qudt.unitFromLocalname("C_Stat-PER-MOL"),
    // Yuan Renminbi
    YuanRenminbi: Qudt.unitFromLocalname("YuanRenminbi"),
    // Degree API
    DEGREE_API: Qudt.unitFromLocalname("DEGREE_API"),
    // Pint (US Liquid) Per Day
    PINT_US__PER__DAY: Qudt.unitFromLocalname("PINT_US-PER-DAY"),
    // Cedi
    Cedi: Qudt.unitFromLocalname("Cedi"),
    // Malaysian Ringgit
    MalaysianRinggit: Qudt.unitFromLocalname("MalaysianRinggit"),
    // Milligram Per Second
    MilliGM__PER__SEC: Qudt.unitFromLocalname("MilliGM-PER-SEC"),
    // United States Dollar (next day) (funds code)
    USDollar__NextDay: Qudt.unitFromLocalname("USDollar-NextDay"),
    // Nanogram Per Kilogram
    NanoGM__PER__KiloGM: Qudt.unitFromLocalname("NanoGM-PER-KiloGM"),
    // WIR Euro (complementary currency)
    WIREuro: Qudt.unitFromLocalname("WIREuro"),
    // Kilograms per cubic metre per second
    KiloGM__PER__M3__SEC: Qudt.unitFromLocalname("KiloGM-PER-M3-SEC"),
    // Pound Force Second per Square Foot
    LB_F__SEC__PER__FT2: Qudt.unitFromLocalname("LB_F-SEC-PER-FT2"),
    // FLIGHT
    FLIGHT: Qudt.unitFromLocalname("FLIGHT"),
    // Nanomoles per cubic centimetre per hour
    NanoMOL__PER__CentiM3__HR: Qudt.unitFromLocalname("NanoMOL-PER-CentiM3-HR"),
    // Kilopascal Per Bar
    KiloPA__PER__BAR: Qudt.unitFromLocalname("KiloPA-PER-BAR"),
    // Number per gram
    NUM__PER__GM: Qudt.unitFromLocalname("NUM-PER-GM"),
    // Planck Area
    PlanckArea: Qudt.unitFromLocalname("PlanckArea"),
    // Degree Brix
    DEGREE_BRIX: Qudt.unitFromLocalname("DEGREE_BRIX"),
    // Millijoule
    MilliJ: Qudt.unitFromLocalname("MilliJ"),
    // Horsepower (electric)
    HP_Electric: Qudt.unitFromLocalname("HP_Electric"),
    // Kilogram?force Metre Per Second
    KiloGM_F__M__PER__SEC: Qudt.unitFromLocalname("KiloGM_F-M-PER-SEC"),
    // Belarussian Ruble
    BYR: Qudt.unitFromLocalname("BYR"),
    // Mauritius Rupee
    MauritiusRupee: Qudt.unitFromLocalname("MauritiusRupee"),
    // Watt per Meter Kelvin
    W__PER__M__K: Qudt.unitFromLocalname("W-PER-M-K"),
    // Cubic Inch Per Second
    IN3__PER__SEC: Qudt.unitFromLocalname("IN3-PER-SEC"),
    // Hour Square Foot
    HR__FT2: Qudt.unitFromLocalname("HR-FT2"),
    // Reciprocal Month
    PER__MO: Qudt.unitFromLocalname("PER-MO"),
    // Absiemen
    S_Ab: Qudt.unitFromLocalname("S_Ab"),
    // Milligrams per cubic metre per second
    MilliGM__PER__M3__SEC: Qudt.unitFromLocalname("MilliGM-PER-M3-SEC"),
    // Minute
    MIN: Qudt.unitFromLocalname("MIN"),
    // Newton Metre Second
    N__M__SEC: Qudt.unitFromLocalname("N-M-SEC"),
    // Square Second
    SEC2: Qudt.unitFromLocalname("SEC2"),
    // Weber Per Metre
    WB__PER__M: Qudt.unitFromLocalname("WB-PER-M"),
    // Gallon (UK) Per Second
    GAL_UK__PER__SEC: Qudt.unitFromLocalname("GAL_UK-PER-SEC"),
    // Dyne Centimeter
    DYN__CentiM: Qudt.unitFromLocalname("DYN-CentiM"),
    // Microwatt
    MicroW: Qudt.unitFromLocalname("MicroW"),
    // Femtomoles per litre
    FemtoMOL__PER__L: Qudt.unitFromLocalname("FemtoMOL-PER-L"),
    // Bushel (UK) Per Minute
    BU_UK__PER__MIN: Qudt.unitFromLocalname("BU_UK-PER-MIN"),
    // Gram Per Hour
    GM__PER__HR: Qudt.unitFromLocalname("GM-PER-HR"),
    // Kilogram Per Cubic Centimeter
    KiloGM__PER__CentiM3: Qudt.unitFromLocalname("KiloGM-PER-CentiM3"),
    // MilliGals per month
    MilliGAL__PER__MO: Qudt.unitFromLocalname("MilliGAL-PER-MO"),
    // Argentine Peso
    ARS: Qudt.unitFromLocalname("ARS"),
    // Milligravity
    MilliG: Qudt.unitFromLocalname("MilliG"),
    // Peck (UK) Per Hour
    PK_UK__PER__HR: Qudt.unitFromLocalname("PK_UK-PER-HR"),
    // Percent per day
    PERCENT__PER__DAY: Qudt.unitFromLocalname("PERCENT-PER-DAY"),
    // Million US Dollars per Flight
    MDOLLAR__PER__FLIGHT: Qudt.unitFromLocalname("MDOLLAR-PER-FLIGHT"),
    // Reciprocal millisecond
    PER__MilliSEC: Qudt.unitFromLocalname("PER-MilliSEC"),
    // Terawatt Hour
    TeraW__HR: Qudt.unitFromLocalname("TeraW-HR"),
    // Pound per Cubic Meter
    LB__PER__M3: Qudt.unitFromLocalname("LB-PER-M3"),
    // Volt per Metre
    V__PER__M: Qudt.unitFromLocalname("V-PER-M"),
    // British Thermal Unit (thermochemical) Per Hour
    BTU_TH__PER__HR: Qudt.unitFromLocalname("BTU_TH-PER-HR"),
    // Mega byte
    MegaBYTE: Qudt.unitFromLocalname("MegaBYTE"),
    // Metre per Kelvin
    M__PER__K: Qudt.unitFromLocalname("M-PER-K"),
    // microfarad
    MicroFARAD: Qudt.unitFromLocalname("MicroFARAD"),
    // Milliroentgen Equivalent Man
    MilliR_man: Qudt.unitFromLocalname("MilliR_man"),
    // Calorie (thermochemical) Per Minute
    CAL_TH__PER__MIN: Qudt.unitFromLocalname("CAL_TH-PER-MIN"),
    // Millivolt Per Minute
    MilliV__PER__MIN: Qudt.unitFromLocalname("MilliV-PER-MIN"),
    // Horsepower Metric
    HP__PER__M: Qudt.unitFromLocalname("HP-PER-M"),
    // Liter Per Day
    L__PER__DAY: Qudt.unitFromLocalname("L-PER-DAY"),
    // Microvolt Per Metre
    MicroV__PER__M: Qudt.unitFromLocalname("MicroV-PER-M"),
    // Pound Force Foot Per Ampere
    KiloLB_F__FT__PER__A: Qudt.unitFromLocalname("KiloLB_F-FT-PER-A"),
    // Cubic Yard Per Second
    YD3__PER__SEC: Qudt.unitFromLocalname("YD3-PER-SEC"),
    // Gallon (UK) Per Day
    GAL_UK__PER__DAY: Qudt.unitFromLocalname("GAL_UK-PER-DAY"),
    // Barbados Dollar
    BBD: Qudt.unitFromLocalname("BBD"),
    // Tonne Per Hour
    TONNE__PER__HR: Qudt.unitFromLocalname("TONNE-PER-HR"),
    // Degree Fahrenheit Hour Square Foot per British Thermal Unit (international Table)
    DEG_F__HR__FT2__PER__BTU_IT: Qudt.unitFromLocalname("DEG_F-HR-FT2-PER-BTU_IT"),
    // Volt Ampere
    V__A: Qudt.unitFromLocalname("V-A"),
    // Kilogram Per Litre
    KiloGM__PER__L: Qudt.unitFromLocalname("KiloGM-PER-L"),
    // Microgram Per Liter
    MicroGM__PER__L: Qudt.unitFromLocalname("MicroGM-PER-L"),
    // Nautical Mile per Hour
    MI_N__PER__HR: Qudt.unitFromLocalname("MI_N-PER-HR"),
    // Ohm Meter
    OHM__M: Qudt.unitFromLocalname("OHM-M"),
    // Square Degrees Celsius per second
    DEG_C2__PER__SEC: Qudt.unitFromLocalname("DEG_C2-PER-SEC"),
    // Pataca
    Pataca: Qudt.unitFromLocalname("Pataca"),
    // Fathom
    FATH: Qudt.unitFromLocalname("FATH"),
    // Mean Julian Month
    MO_MeanJulian: Qudt.unitFromLocalname("MO_MeanJulian"),
    // Watts per square metre per nanometre
    W__PER__M2__NanoM: Qudt.unitFromLocalname("W-PER-M2-NanoM"),
    // International Unit
    IU: Qudt.unitFromLocalname("IU"),
    // Second
    SEC: Qudt.unitFromLocalname("SEC"),
    // Cubic Metre per Mole
    M3__PER__MOL: Qudt.unitFromLocalname("M3-PER-MOL"),
    // Kilojoule Per Kilogram
    KiloJ__PER__KiloGM: Qudt.unitFromLocalname("KiloJ-PER-KiloGM"),
    // Newton Per Square Millimeter
    N__PER__MilliM2: Qudt.unitFromLocalname("N-PER-MilliM2"),
    // millimetres per day
    MilliM__PER__DAY: Qudt.unitFromLocalname("MilliM-PER-DAY"),
    // Gill (UK) Per Hour
    GI_UK__PER__HR: Qudt.unitFromLocalname("GI_UK-PER-HR"),
    // Kilomol per Kilogram
    KiloMOL__PER__KiloGM: Qudt.unitFromLocalname("KiloMOL-PER-KiloGM"),
    // Hectopascal Liter Per Second
    HectoPA__L__PER__SEC: Qudt.unitFromLocalname("HectoPA-L-PER-SEC"),
    // Centimetre of Water
    CentiM_H2O: Qudt.unitFromLocalname("CentiM_H2O"),
    // Reciprocal Kilometre
    PER__KiloM: Qudt.unitFromLocalname("PER-KiloM"),
    // Millinewton Per Meter
    MilliN__PER__M: Qudt.unitFromLocalname("MilliN-PER-M"),
    // Reciprocal metre per steradian
    PER__M__SR: Qudt.unitFromLocalname("PER-M-SR"),
    // Jordanian Dinar
    JordanianDinar: Qudt.unitFromLocalname("JordanianDinar"),
    // Attojoule Second
    AttoJ__SEC: Qudt.unitFromLocalname("AttoJ-SEC"),
    // Siemens Per Meter
    S__PER__M: Qudt.unitFromLocalname("S-PER-M"),
    // Cubic Meter per Kilogram Square Second
    M3__PER__KiloGM__SEC2: Qudt.unitFromLocalname("M3-PER-KiloGM-SEC2"),
    // Reciprocal Second Steradian
    PER__SEC__SR: Qudt.unitFromLocalname("PER-SEC-SR"),
    // Ban
    BAN: Qudt.unitFromLocalname("BAN"),
    // Kilomole Per Second
    KiloMOL__PER__SEC: Qudt.unitFromLocalname("KiloMOL-PER-SEC"),
    // Pound per Cubic Foot
    LB__PER__FT3: Qudt.unitFromLocalname("LB-PER-FT3"),
    // MilliTorr
    MilliTORR: Qudt.unitFromLocalname("MilliTORR"),
    // Degree Baume (origin Scale)
    DEGREE_BAUME: Qudt.unitFromLocalname("DEGREE_BAUME"),
    // US Gallon per Day
    GAL_US__PER__DAY: Qudt.unitFromLocalname("GAL_US-PER-DAY"),
    // Micro Joule
    MicroJ: Qudt.unitFromLocalname("MicroJ"),
    // Heart Beat
    HeartBeat: Qudt.unitFromLocalname("HeartBeat"),
    // Kilograms per square kilometre
    KiloGM__PER__KiloM2: Qudt.unitFromLocalname("KiloGM-PER-KiloM2"),
    // Kilocalorie per Square Centimetre Minute
    KiloCAL__PER__CentiM2__MIN: Qudt.unitFromLocalname("KiloCAL-PER-CentiM2-MIN"),
    // Metric KiloTON
    KiloTON_Metric: Qudt.unitFromLocalname("KiloTON_Metric"),
    // Kilogram?force Metre
    KiloGM_F__M: Qudt.unitFromLocalname("KiloGM_F-M"),
    // Imperial Mass Ounce per Square Foot
    OZ__PER__FT2: Qudt.unitFromLocalname("OZ-PER-FT2"),
    // Kilobar
    KiloBAR: Qudt.unitFromLocalname("KiloBAR"),
    // US Liquid Ounce
    OZ_VOL_US: Qudt.unitFromLocalname("OZ_VOL_US"),
    // Pakistan Rupee
    PakistanRupee: Qudt.unitFromLocalname("PakistanRupee"),
    // ExbiByte
    ExbiBYTE: Qudt.unitFromLocalname("ExbiBYTE"),
    // Kilolitre Per Hour
    KiloL__PER__HR: Qudt.unitFromLocalname("KiloL-PER-HR"),
    // Kilogram per Hectare
    KiloGM__PER__HA: Qudt.unitFromLocalname("KiloGM-PER-HA"),
    // Peck (US Dry) Per Minute
    PK_US_DRY__PER__MIN: Qudt.unitFromLocalname("PK_US_DRY-PER-MIN"),
    // Degree Rankine
    DEG_R: Qudt.unitFromLocalname("DEG_R"),
    // CentiMOL
    CentiMOL: Qudt.unitFromLocalname("CentiMOL"),
    // Megapascal Per Kelvin
    MegaPA__PER__K: Qudt.unitFromLocalname("MegaPA-PER-K"),
    // Nanofarad
    NanoFARAD: Qudt.unitFromLocalname("NanoFARAD"),
    // Kilohertz Metre
    KiloHZ__M: Qudt.unitFromLocalname("KiloHZ-M"),
    // Special Drawing Rights
    SpecialDrawingRights: Qudt.unitFromLocalname("SpecialDrawingRights"),
    // Pascal metres per square second
    PA__M__PER__SEC2: Qudt.unitFromLocalname("PA-M-PER-SEC2"),
    // Roentgen
    R: Qudt.unitFromLocalname("R"),
    // V-M
    V__M: Qudt.unitFromLocalname("V-M"),
    // Mole Per Litre
    MOL__PER__L: Qudt.unitFromLocalname("MOL-PER-L"),
    // metric tonne per hectare
    TON_Metric__PER__HA: Qudt.unitFromLocalname("TON_Metric-PER-HA"),
    // Manat
    Manat: Qudt.unitFromLocalname("Manat"),
    // Cubic Yard per Minute
    YD3__PER__MIN: Qudt.unitFromLocalname("YD3-PER-MIN"),
    // US Peck
    PK_US_DRY: Qudt.unitFromLocalname("PK_US_DRY"),
    // Gold franc (special settlement currency)
    GoldFranc: Qudt.unitFromLocalname("GoldFranc"),
    // Microlitre Per Litre
    MicroL__PER__L: Qudt.unitFromLocalname("MicroL-PER-L"),
    // Millimoles per cubic metre per day
    MilliMOL__PER__M3__DAY: Qudt.unitFromLocalname("MilliMOL-PER-M3-DAY"),
    // MILLE
    MILLE: Qudt.unitFromLocalname("MILLE"),
    // Mega Electron Volt
    MegaEV: Qudt.unitFromLocalname("MegaEV"),
    // Deaths per 1000 individuals per year
    DEATHS__PER__1000I__YR: Qudt.unitFromLocalname("DEATHS-PER-1000I-YR"),
    // Square metres Hertz^4
    M2__HZ4: Qudt.unitFromLocalname("M2-HZ4"),
    // N-PER-M2
    N__PER__M2: Qudt.unitFromLocalname("N-PER-M2"),
    // Mole Per Cubic Decimeter
    MOL__PER__DeciM3: Qudt.unitFromLocalname("MOL-PER-DeciM3"),
    // Ounce (US Fluid) Per Minute
    OZ_VOL_US__PER__MIN: Qudt.unitFromLocalname("OZ_VOL_US-PER-MIN"),
    // Pound Mass (avoirdupois) Square Foot
    LB__FT2: Qudt.unitFromLocalname("LB-FT2"),
    // Peck (US Dry) Per Day
    PK_US_DRY__PER__DAY: Qudt.unitFromLocalname("PK_US_DRY-PER-DAY"),
    // Stathenry per Centimeter
    H_Stat__PER__CentiM: Qudt.unitFromLocalname("H_Stat-PER-CentiM"),
    // Chilean Peso
    ChileanPeso: Qudt.unitFromLocalname("ChileanPeso"),
    // Centibar
    CentiBAR: Qudt.unitFromLocalname("CentiBAR"),
    // Point
    PT: Qudt.unitFromLocalname("PT"),
    // Diopter
    DIOPTER: Qudt.unitFromLocalname("DIOPTER"),
    // Reciprocal Mille Per Psi
    PER__MILLE__PER__PSI: Qudt.unitFromLocalname("PER-MILLE-PER-PSI"),
    // Degree Fahrenheit Hour per BTU
    DEG_F__HR__PER__BTU_IT: Qudt.unitFromLocalname("DEG_F-HR-PER-BTU_IT"),
    // US Dollar
    USDollar: Qudt.unitFromLocalname("USDollar"),
    // Reciprocal Henry
    PER__H: Qudt.unitFromLocalname("PER-H"),
    // Conventional Millimetre Of Water
    MilliM_H2O: Qudt.unitFromLocalname("MilliM_H2O"),
    // Ounce (US Fluid) Per Second
    OZ_VOL_US__PER__SEC: Qudt.unitFromLocalname("OZ_VOL_US-PER-SEC"),
    // Register Ton
    RT: Qudt.unitFromLocalname("RT"),
    // Poise
    POISE: Qudt.unitFromLocalname("POISE"),
    // Breath per Minute
    BREATH__PER__MIN: Qudt.unitFromLocalname("BREATH-PER-MIN"),
    // Metre per Hour
    M__PER__HR: Qudt.unitFromLocalname("M-PER-HR"),
    // Reciprocal Cubic Inch
    PER__IN3: Qudt.unitFromLocalname("PER-IN3"),
    // Watts per square metre per nanometre per steradian
    W__PER__M2__NanoM__SR: Qudt.unitFromLocalname("W-PER-M2-NanoM-SR"),
    // Nanomoles per gram per second
    NanoMOL__PER__GM__SEC: Qudt.unitFromLocalname("NanoMOL-PER-GM-SEC"),
    // Technical Atmosphere
    ATM_T: Qudt.unitFromLocalname("ATM_T"),
    // Kip
    KIP_F: Qudt.unitFromLocalname("KIP_F"),
    // Micromoles per square metre per second
    MicroMOL__PER__M2__SEC: Qudt.unitFromLocalname("MicroMOL-PER-M2-SEC"),
    // Pound Force Per Square Inch Degree Fahrenheit
    LB_F__PER__IN2__DEG_F: Qudt.unitFromLocalname("LB_F-PER-IN2-DEG_F"),
    // Cubic Decimetre
    DeciM3: Qudt.unitFromLocalname("DeciM3"),
    // Microhenry Per Metre
    MicroH__PER__M: Qudt.unitFromLocalname("MicroH-PER-M"),
    // Gram Per Millimetre
    GM__PER__MilliM: Qudt.unitFromLocalname("GM-PER-MilliM"),
    // Reciprocal micromole per litre
    PER__MicroMOL__L: Qudt.unitFromLocalname("PER-MicroMOL-L"),
    // Litre Per Second Per Square Metre
    L__PER__SEC__M2: Qudt.unitFromLocalname("L-PER-SEC-M2"),
    // Percent Relative Humidity
    PERCENT_RH: Qudt.unitFromLocalname("PERCENT_RH"),
    // Moles per square metre per second per metre per steradian
    MOL__PER__M2__SEC__M__SR: Qudt.unitFromLocalname("MOL-PER-M2-SEC-M-SR"),
    // Kilowatt
    KiloW: Qudt.unitFromLocalname("KiloW"),
    // Malagasy Ariary
    MalagasyAriary: Qudt.unitFromLocalname("MalagasyAriary"),
    // Hryvnia
    Hryvnia: Qudt.unitFromLocalname("Hryvnia"),
    // Slug Per Minute
    SLUG__PER__MIN: Qudt.unitFromLocalname("SLUG-PER-MIN"),
    // Tunisian Dinar
    TunisianDinar: Qudt.unitFromLocalname("TunisianDinar"),
    // Kilobecquerel
    KiloBQ: Qudt.unitFromLocalname("KiloBQ"),
    // Micrograms per cubic metre per hour
    MicroGM__PER__M3__HR: Qudt.unitFromLocalname("MicroGM-PER-M3-HR"),
    // Reciprocal metre per nanometre
    PER__M__NanoM: Qudt.unitFromLocalname("PER-M-NanoM"),
    // Millilitre
    MilliL: Qudt.unitFromLocalname("MilliL"),
    // Fraction
    FRACTION: Qudt.unitFromLocalname("FRACTION"),
    // Picosecond
    PicoSEC: Qudt.unitFromLocalname("PicoSEC"),
    // Latvian Lats
    LatvianLats: Qudt.unitFromLocalname("LatvianLats"),
    // Picomoles per kilogram
    PicoMOL__PER__KiloGM: Qudt.unitFromLocalname("PicoMOL-PER-KiloGM"),
    // Gigawatt Hour
    GigaW__HR: Qudt.unitFromLocalname("GigaW-HR"),
    // Square Inch
    IN2: Qudt.unitFromLocalname("IN2"),
    // Foot Candle
    FC: Qudt.unitFromLocalname("FC"),
    // Henry per Meter
    H__PER__M: Qudt.unitFromLocalname("H-PER-M"),
    // Slug Per Hour
    SLUG__PER__HR: Qudt.unitFromLocalname("SLUG-PER-HR"),
    // Naira
    Naira: Qudt.unitFromLocalname("Naira"),
    // Degree Celsius per Minute
    DEG_C__PER__MIN: Qudt.unitFromLocalname("DEG_C-PER-MIN"),
    // Statcoulomb
    C_Stat: Qudt.unitFromLocalname("C_Stat"),
    // Tonne Per Day
    TON_Metric__PER__DAY: Qudt.unitFromLocalname("TON_Metric-PER-DAY"),
    // Megajoule Per Cubic Metre
    MegaJ__PER__M3: Qudt.unitFromLocalname("MegaJ-PER-M3"),
    // Watt Per Cubic Metre
    W__PER__M3: Qudt.unitFromLocalname("W-PER-M3"),
    // Oersted
    OERSTED: Qudt.unitFromLocalname("OERSTED"),
    // Pint (UK) Per Second
    PINT_UK__PER__SEC: Qudt.unitFromLocalname("PINT_UK-PER-SEC"),
    // Electron Volt Second
    EV__SEC: Qudt.unitFromLocalname("EV-SEC"),
    // Kilogram per Hour
    KiloGM__PER__HR: Qudt.unitFromLocalname("KiloGM-PER-HR"),
    // Pascal Second
    PA__SEC: Qudt.unitFromLocalname("PA-SEC"),
    // Pound Force per Square Foot
    LB_F__PER__FT2: Qudt.unitFromLocalname("LB_F-PER-FT2"),
    // Acre
    AC: Qudt.unitFromLocalname("AC"),
    // Pound Force per Foot
    LB_F__PER__FT: Qudt.unitFromLocalname("LB_F-PER-FT"),
    // Gon
    GON: Qudt.unitFromLocalname("GON"),
    // Percent per hour
    PERCENT__PER__HR: Qudt.unitFromLocalname("PERCENT-PER-HR"),
    // Seconds per metre
    SEC__PER__M: Qudt.unitFromLocalname("SEC-PER-M"),
    // Thermochemical Calorie
    CAL_TH: Qudt.unitFromLocalname("CAL_TH"),
    // Cubic Foot Per Minute Square Foot
    FT3__PER__MIN__FT2: Qudt.unitFromLocalname("FT3-PER-MIN-FT2"),
    // Number per milligram
    NUM__PER__MilliGM: Qudt.unitFromLocalname("NUM-PER-MilliGM"),
    // Nat per Second
    NAT__PER__SEC: Qudt.unitFromLocalname("NAT-PER-SEC"),
    // Iraqi Dinar
    IraqiDinar: Qudt.unitFromLocalname("IraqiDinar"),
    // Square metres cubic Hertz
    M2__HZ3: Qudt.unitFromLocalname("M2-HZ3"),
    // Millilitre Per Day
    MilliL__PER__DAY: Qudt.unitFromLocalname("MilliL-PER-DAY"),
    // MegaBIT
    MegaBIT: Qudt.unitFromLocalname("MegaBIT"),
    // Kilogram per Square Metre
    KiloGM__PER__M2: Qudt.unitFromLocalname("KiloGM-PER-M2"),
    // Cubic Metre per Kilogram
    M3__PER__KiloGM: Qudt.unitFromLocalname("M3-PER-KiloGM"),
    // Planck Mass
    PlanckMass: Qudt.unitFromLocalname("PlanckMass"),
    // Planck Volume
    PlanckVolume: Qudt.unitFromLocalname("PlanckVolume"),
    // Picomoles per litre
    PicoMOL__PER__L: Qudt.unitFromLocalname("PicoMOL-PER-L"),
    // Square Foot Hour Degree Fahrenheit
    FT2__HR__DEG_F: Qudt.unitFromLocalname("FT2-HR-DEG_F"),
    // Millicurie
    MilliCi: Qudt.unitFromLocalname("MilliCi"),
    // Centimetres per thousand years
    CentiM__PER__KiloYR: Qudt.unitFromLocalname("CentiM-PER-KiloYR"),
    // Foot per Day
    FT__PER__DAY: Qudt.unitFromLocalname("FT-PER-DAY"),
    // Cubic Foot Per Day
    FT3__PER__DAY: Qudt.unitFromLocalname("FT3-PER-DAY"),
    // Picomoles per litre per hour
    PicoMOL__PER__L__HR: Qudt.unitFromLocalname("PicoMOL-PER-L-HR"),
    // Kiloroentgen
    KiloR: Qudt.unitFromLocalname("KiloR"),
    // Reciprocal Cubic Meter Second
    PER__M3__SEC: Qudt.unitFromLocalname("PER-M3-SEC"),
    // Coulomb per Cubic Metre
    C__PER__M3: Qudt.unitFromLocalname("C-PER-M3"),
    // Coulomb Per Cubic Millimeter
    C__PER__MilliM3: Qudt.unitFromLocalname("C-PER-MilliM3"),
    // Ampere Per Centimeter
    A__PER__CentiM: Qudt.unitFromLocalname("A-PER-CentiM"),
    // microampere
    MicroA: Qudt.unitFromLocalname("MicroA"),
    // Square Metre Steradian
    M2__SR: Qudt.unitFromLocalname("M2-SR"),
    // Decagram
    DecaGM: Qudt.unitFromLocalname("DecaGM"),
    // Picofarad Per Metre
    PicoFARAD__PER__M: Qudt.unitFromLocalname("PicoFARAD-PER-M"),
    // Ounce (avoirdupois) Foot
    OZ__FT: Qudt.unitFromLocalname("OZ-FT"),
    // Kilogram per Cubic Meter
    KiloGM__PER__M3: Qudt.unitFromLocalname("KiloGM-PER-M3"),
    // Rayl
    RAYL: Qudt.unitFromLocalname("RAYL"),
    // Abampere per Square Centimetre
    A_Ab__PER__CentiM2: Qudt.unitFromLocalname("A_Ab-PER-CentiM2"),
    // Kilogram Per Second Per Square Metre
    KiloGM__PER__SEC__M2: Qudt.unitFromLocalname("KiloGM-PER-SEC-M2"),
    // Joule
    J: Qudt.unitFromLocalname("J"),
    // Attojoule
    AttoJ: Qudt.unitFromLocalname("AttoJ"),
    // Micrometre Per Kelvin
    MicroM__PER__K: Qudt.unitFromLocalname("MicroM-PER-K"),
    // Millicoulomb Per Square Metre
    MilliC__PER__M2: Qudt.unitFromLocalname("MilliC-PER-M2"),
    // Lithuanian Litas
    LithuanianLitas: Qudt.unitFromLocalname("LithuanianLitas"),
    // Rem
    REM: Qudt.unitFromLocalname("REM"),
    // Planck Impedance
    PlanckImpedance: Qudt.unitFromLocalname("PlanckImpedance"),
    // Joule per Quartic Metre
    J__PER__M4: Qudt.unitFromLocalname("J-PER-M4"),
    // Bulgarian Lev
    BulgarianLev: Qudt.unitFromLocalname("BulgarianLev"),
    // MicroSievert
    MicroSV: Qudt.unitFromLocalname("MicroSV"),
    // Pound Force per Square Inch Second
    LB_F__PER__IN2__SEC: Qudt.unitFromLocalname("LB_F-PER-IN2-SEC"),
    // Long Ton per Cubic Yard
    TON_LONG__PER__YD3: Qudt.unitFromLocalname("TON_LONG-PER-YD3"),
    // Degree Plato
    DEGREE_PLATO: Qudt.unitFromLocalname("DEGREE_PLATO"),
    // Inch Per Degree Fahrenheit
    IN__PER__DEG_F: Qudt.unitFromLocalname("IN-PER-DEG_F"),
    // Joules per square centimetre per day
    J__PER__CentiM2__DAY: Qudt.unitFromLocalname("J-PER-CentiM2-DAY"),
    // Micromoles per gram per hour
    MicroMOL__PER__GM__HR: Qudt.unitFromLocalname("MicroMOL-PER-GM-HR"),
    // Gill (US) Per Second
    GI_US__PER__SEC: Qudt.unitFromLocalname("GI_US-PER-SEC"),
    // Gigabit per Second
    GigaBIT__PER__SEC: Qudt.unitFromLocalname("GigaBIT-PER-SEC"),
    // Reciprocal Nanometre
    PER__NanoM: Qudt.unitFromLocalname("PER-NanoM"),
    // Micrograms per litre per hour
    MicroGM__PER__L__HR: Qudt.unitFromLocalname("MicroGM-PER-L-HR"),
    // Gram Per Second
    GM__PER__SEC: Qudt.unitFromLocalname("GM-PER-SEC"),
    // Nanomoles per square metre per day
    NanoMOL__PER__M2__DAY: Qudt.unitFromLocalname("NanoMOL-PER-M2-DAY"),
    // SpeedOfLight
    SpeedOfLight: Qudt.unitFromLocalname("SpeedOfLight"),
    // Mesh
    MESH: Qudt.unitFromLocalname("MESH"),
    // Degrees per metre
    DEG__PER__M: Qudt.unitFromLocalname("DEG-PER-M"),
    // Becquerel per Cubic Metre
    BQ__PER__M3: Qudt.unitFromLocalname("BQ-PER-M3"),
    // Kilogauss
    KiloGAUSS: Qudt.unitFromLocalname("KiloGAUSS"),
    // Coulomb Per Cubic Centimetre
    C__PER__CentiM3: Qudt.unitFromLocalname("C-PER-CentiM3"),
    // Degrees Celsius per year
    DEG_C__PER__YR: Qudt.unitFromLocalname("DEG_C-PER-YR"),
    // Coulomb
    C: Qudt.unitFromLocalname("C"),
    // Number per 100 grams
    NUM__PER__HectoGM: Qudt.unitFromLocalname("NUM-PER-HectoGM"),
    // Litre Per Kelvin
    L__PER__K: Qudt.unitFromLocalname("L-PER-K"),
    // Metre
    M: Qudt.unitFromLocalname("M"),
    // MicroCoulomb
    MicroC: Qudt.unitFromLocalname("MicroC"),
    // Pound Mass (avoirdupois) Per Square Foot
    LB__PER__FT2: Qudt.unitFromLocalname("LB-PER-FT2"),
    // Picowatt
    PicoW: Qudt.unitFromLocalname("PicoW"),
    // Kilometre per Second
    KiloM__PER__SEC: Qudt.unitFromLocalname("KiloM-PER-SEC"),
    // Inch per Second
    IN__PER__SEC: Qudt.unitFromLocalname("IN-PER-SEC"),
    // BTU per Square Foot Second Degree Fahrenheit
    BTU_IT__PER__FT2__SEC__DEG_F: Qudt.unitFromLocalname("BTU_IT-PER-FT2-SEC-DEG_F"),
    // Kayser
    KY: Qudt.unitFromLocalname("KY"),
    // Tonne Per Cubic Metre
    TONNE__PER__M3: Qudt.unitFromLocalname("TONNE-PER-M3"),
    // Erg
    ERG: Qudt.unitFromLocalname("ERG"),
    // Barrel (US) Per Day
    BBL_US__PER__DAY: Qudt.unitFromLocalname("BBL_US-PER-DAY"),
    // Reciprocal Litre
    PER__L: Qudt.unitFromLocalname("PER-L"),
    // Vatu
    Vatu: Qudt.unitFromLocalname("Vatu"),
    // Megavolt Per Metre
    MegaV__PER__M: Qudt.unitFromLocalname("MegaV-PER-M"),
    // CentiCoulomb
    CentiC: Qudt.unitFromLocalname("CentiC"),
    // Micrometre
    MicroM: Qudt.unitFromLocalname("MicroM"),
    // Abvolt Second
    V_Ab__SEC: Qudt.unitFromLocalname("V_Ab-SEC"),
    // Dyne Second Per Cubic Centimetre
    DYN__SEC__PER__CentiM3: Qudt.unitFromLocalname("DYN-SEC-PER-CentiM3"),
    // Joule Square Metre per Kilogram
    J__M2__PER__KiloGM: Qudt.unitFromLocalname("J-M2-PER-KiloGM"),
    // US Liquid Quart
    QT_US: Qudt.unitFromLocalname("QT_US"),
    // Pound (avoirdupois) Per Second
    LB__PER__SEC: Qudt.unitFromLocalname("LB-PER-SEC"),
    // Pascal Second Per Cubic Metre
    PA__SEC__PER__M3: Qudt.unitFromLocalname("PA-SEC-PER-M3"),
    // Pint (US Liquid) Per Second
    PINT_US__PER__SEC: Qudt.unitFromLocalname("PINT_US-PER-SEC"),
    // Revolution
    REV: Qudt.unitFromLocalname("REV"),
    // Saint Helena Pound
    SaintHelenaPound: Qudt.unitFromLocalname("SaintHelenaPound"),
    // Guarani
    Guarani: Qudt.unitFromLocalname("Guarani"),
    // Slug per Foot Second
    SLUG__PER__FT__SEC: Qudt.unitFromLocalname("SLUG-PER-FT-SEC"),
    // Joule Square Meter
    J__M2: Qudt.unitFromLocalname("J-M2"),
    // Ton (UK)
    TON_UK: Qudt.unitFromLocalname("TON_UK"),
    // Rupiah
    Rupiah: Qudt.unitFromLocalname("Rupiah"),
    // Picograms
    PicoGM: Qudt.unitFromLocalname("PicoGM"),
    // Pint (UK) Per Day
    PINT_UK__PER__DAY: Qudt.unitFromLocalname("PINT_UK-PER-DAY"),
    // Square Meter per Volt Second
    M2__PER__V__SEC: Qudt.unitFromLocalname("M2-PER-V-SEC"),
    // Mile US Statute
    MI_US: Qudt.unitFromLocalname("MI_US"),
    // HectoCoulomb
    HectoC: Qudt.unitFromLocalname("HectoC"),
    // Moles per square metre per second per metre
    MOL__PER__M2__SEC__M: Qudt.unitFromLocalname("MOL-PER-M2-SEC-M"),
    // Farad per Meter
    FARAD__PER__M: Qudt.unitFromLocalname("FARAD-PER-M"),
    // Milligram Per Square Meter
    MilliGM__PER__M2: Qudt.unitFromLocalname("MilliGM-PER-M2"),
    // Cuban Peso
    CubanPeso: Qudt.unitFromLocalname("CubanPeso"),
    // Picomoles per litre per day
    PicoMOL__PER__L__DAY: Qudt.unitFromLocalname("PicoMOL-PER-L-DAY"),
    // Planck Density
    PlanckDensity: Qudt.unitFromLocalname("PlanckDensity"),
    // Reciprocal Kelvin
    PER__K: Qudt.unitFromLocalname("PER-K"),
    // Peso Uruguayo
    UruguayPeso: Qudt.unitFromLocalname("UruguayPeso"),
    // Millibar Per Bar
    MilliBAR__PER__BAR: Qudt.unitFromLocalname("MilliBAR-PER-BAR"),
    // Stathenry
    H_Stat: Qudt.unitFromLocalname("H_Stat"),
    // Gallon (UK) Per Minute
    GAL_UK__PER__MIN: Qudt.unitFromLocalname("GAL_UK-PER-MIN"),
    // Hectopascal Cubic Metre Per Second
    HectoPA__M3__PER__SEC: Qudt.unitFromLocalname("HectoPA-M3-PER-SEC"),
    // Kilocalorie per Centimeter Second Degree Celsius
    KiloCAL__PER__CentiM__SEC__DEG_C: Qudt.unitFromLocalname("KiloCAL-PER-CentiM-SEC-DEG_C"),
    // Megagram Per Cubic Meter
    MegaGM__PER__M3: Qudt.unitFromLocalname("MegaGM-PER-M3"),
    // Gigahertz
    GigaHZ: Qudt.unitFromLocalname("GigaHZ"),
    // BBL_US_PET
    BBL_US_PET: Qudt.unitFromLocalname("BBL_US_PET"),
    // Femtolitre
    FemtoL: Qudt.unitFromLocalname("FemtoL"),
    // Quartic Meter
    M4: Qudt.unitFromLocalname("M4"),
    // Kilocoulomb Per Square Meter
    KiloC__PER__M2: Qudt.unitFromLocalname("KiloC-PER-M2"),
    // Tonne Per Minute
    TONNE__PER__MIN: Qudt.unitFromLocalname("TONNE-PER-MIN"),
    // Mol per Kilogram
    MOL__PER__KiloGM: Qudt.unitFromLocalname("MOL-PER-KiloGM"),
    // Barrel
    BBL: Qudt.unitFromLocalname("BBL"),
    // Millibecquerels per square metre per day
    MilliBQ__PER__M2__DAY: Qudt.unitFromLocalname("MilliBQ-PER-M2-DAY"),
    // Milligram Per Metre
    MilliGM__PER__M: Qudt.unitFromLocalname("MilliGM-PER-M"),
    // Cubic Foot
    FT3: Qudt.unitFromLocalname("FT3"),
    // Watt Second
    W__SEC: Qudt.unitFromLocalname("W-SEC"),
    // Fractional area
    FA: Qudt.unitFromLocalname("FA"),
    // Ampere Square Metre
    A__M2: Qudt.unitFromLocalname("A-M2"),
    // Newton per Kilogram
    N__PER__KiloGM: Qudt.unitFromLocalname("N-PER-KiloGM"),
    // Hectobar
    HectoBAR: Qudt.unitFromLocalname("HectoBAR"),
    // Maltese Lira
    MalteseLira: Qudt.unitFromLocalname("MalteseLira"),
    // KiloBIT
    KiloBIT: Qudt.unitFromLocalname("KiloBIT"),
    // Gigacoulomb Per Cubic Meter
    GigaC__PER__M3: Qudt.unitFromLocalname("GigaC-PER-M3"),
    // Reciprocal square metre per second
    PER__M2__SEC: Qudt.unitFromLocalname("PER-M2-SEC"),
    // Day
    DAY: Qudt.unitFromLocalname("DAY"),
    // Centimole per kilogram
    CentiMOL__PER__KiloGM: Qudt.unitFromLocalname("CentiMOL-PER-KiloGM"),
    // Millilitres per square metre per day
    MilliL__PER__M2__DAY: Qudt.unitFromLocalname("MilliL-PER-M2-DAY"),
    // Grain
    GRAIN: Qudt.unitFromLocalname("GRAIN"),
    // Kelvin metres
    K__M: Qudt.unitFromLocalname("K-M"),
    // Kiloohm
    KiloOHM: Qudt.unitFromLocalname("KiloOHM"),
    // Mega Electron Volt per Centimetre
    MegaEV__PER__CentiM: Qudt.unitFromLocalname("MegaEV-PER-CentiM"),
    // Hartley per Second
    HART__PER__SEC: Qudt.unitFromLocalname("HART-PER-SEC"),
    // Coulomb per Mole
    C__PER__MOL: Qudt.unitFromLocalname("C-PER-MOL"),
    // Electronvolt Per Angstrom
    EV__PER__ANGSTROM: Qudt.unitFromLocalname("EV-PER-ANGSTROM"),
    // Libyan Dinar
    LibyanDinar: Qudt.unitFromLocalname("LibyanDinar"),
    // Dyne
    DYN: Qudt.unitFromLocalname("DYN"),
    // Kilojoule Per Kilogram Kelvin
    KiloJ__PER__KiloGM__K: Qudt.unitFromLocalname("KiloJ-PER-KiloGM-K"),
    // Decare
    DecaARE: Qudt.unitFromLocalname("DecaARE"),
    // Gigawatt
    GigaW: Qudt.unitFromLocalname("GigaW"),
    // calorie (thermochemical) per gram (calTH/g)
    CAL_TH__PER__G: Qudt.unitFromLocalname("CAL_TH-PER-G"),
    // Reciprocal Tesla Second Unit
    PER__T__SEC: Qudt.unitFromLocalname("PER-T-SEC"),
    // Kilolitre
    KiloL: Qudt.unitFromLocalname("KiloL"),
    // Millimeter Per Minute
    MilliM__PER__MIN: Qudt.unitFromLocalname("MilliM-PER-MIN"),
    // Millilitre Per Hour
    MilliL__PER__HR: Qudt.unitFromLocalname("MilliL-PER-HR"),
    // Milligram Per Square Centimetre
    MilliGM__PER__CentiM2: Qudt.unitFromLocalname("MilliGM-PER-CentiM2"),
    // Pa'anga
    Paanga: Qudt.unitFromLocalname("Paanga"),
    // Mean Gregorian Month
    MO_MeanGREGORIAN: Qudt.unitFromLocalname("MO_MeanGREGORIAN"),
    // US Dry Quart
    QT_US_DRY: Qudt.unitFromLocalname("QT_US_DRY"),
    // PebiByte
    PebiBYTE: Qudt.unitFromLocalname("PebiBYTE"),
    // Ton of Refrigeration
    TON_FG: Qudt.unitFromLocalname("TON_FG"),
    // Revolution per Second
    REV__PER__SEC: Qudt.unitFromLocalname("REV-PER-SEC"),
    // Hertz per Tesla
    HZ__PER__T: Qudt.unitFromLocalname("HZ-PER-T"),
    // 1000I
    _1000I: Qudt.unitFromLocalname("1000I"),
    // Cubic Meter Per Cubic Meter
    M3__PER__M3: Qudt.unitFromLocalname("M3-PER-M3"),
    // Watt
    W: Qudt.unitFromLocalname("W"),
    // KiloWB
    KiloWB: Qudt.unitFromLocalname("KiloWB"),
    // DecaCoulomb
    DecaC: Qudt.unitFromLocalname("DecaC"),
    // Coulomb per Square Metre
    C__PER__M2: Qudt.unitFromLocalname("C-PER-M2"),
    // Square Yard
    YD2: Qudt.unitFromLocalname("YD2"),
    // Square Foot per BTU Inch
    FT2__PER__BTU_IT__IN: Qudt.unitFromLocalname("FT2-PER-BTU_IT-IN"),
    // Bushel (US Dry) Per Second
    BU_US_DRY__PER__SEC: Qudt.unitFromLocalname("BU_US_DRY-PER-SEC"),
    // Cubic Metre per Coulomb
    M3__PER__C: Qudt.unitFromLocalname("M3-PER-C"),
    // Square Centimeter
    CentiM2: Qudt.unitFromLocalname("CentiM2"),
    // Pound (avoirdupois) Per Gallon (UK)
    LB__PER__GAL_UK: Qudt.unitFromLocalname("LB-PER-GAL_UK"),
    // Nuevo Sol
    NuevoSol: Qudt.unitFromLocalname("NuevoSol"),
    // Milli-inch
    MilliIN: Qudt.unitFromLocalname("MilliIN"),
    // cubic centimetre
    CentiM3: Qudt.unitFromLocalname("CentiM3"),
    // Megavolt Ampere Hour
    MegaV__A__HR: Qudt.unitFromLocalname("MegaV-A-HR"),
    // Megapascal
    MegaPA: Qudt.unitFromLocalname("MegaPA"),
    // Counts per second
    NUM__PER__SEC: Qudt.unitFromLocalname("NUM-PER-SEC"),
    // Micromoles per square metre per hour
    MicroMOL__PER__M2__HR: Qudt.unitFromLocalname("MicroMOL-PER-M2-HR"),
    // Degree per Square Second
    DEG__PER__SEC2: Qudt.unitFromLocalname("DEG-PER-SEC2"),
    // Moldovan Leu
    MoldovanLeu: Qudt.unitFromLocalname("MoldovanLeu"),
    // Ounce (avoirdupois) Per Day
    OZ__PER__DAY: Qudt.unitFromLocalname("OZ-PER-DAY"),
    // Relative Permittivity
    PERMITTIVITY_REL: Qudt.unitFromLocalname("PERMITTIVITY_REL"),
    // Square Foot Second Degree Fahrenheit
    FT2__SEC__DEG_F: Qudt.unitFromLocalname("FT2-SEC-DEG_F"),
    // Degree Fahrenheit
    DEG_F: Qudt.unitFromLocalname("DEG_F"),
    // Grain Per Gallon (US)
    GRAIN__PER__GAL_US: Qudt.unitFromLocalname("GRAIN-PER-GAL_US"),
    // Calorie (international Table) Per Second Square Centimetre kelvin
    CAL_IT__PER__SEC__CentiM2__K: Qudt.unitFromLocalname("CAL_IT-PER-SEC-CentiM2-K"),
    // Kilogram Force Per Square Meter
    KiloGM_F__PER__M2: Qudt.unitFromLocalname("KiloGM_F-PER-M2"),
    // Horsepower (brake)
    HP_Brake: Qudt.unitFromLocalname("HP_Brake"),
    // Millimetre Per Kelvin
    MilliM__PER__K: Qudt.unitFromLocalname("MilliM-PER-K"),
    // atomic-number
    Z: Qudt.unitFromLocalname("Z"),
    // Picomoles per metre per watt per second
    PicoMOL__PER__M__W__SEC: Qudt.unitFromLocalname("PicoMOL-PER-M-W-SEC"),
    // Philippine Peso
    PhilippinePeso: Qudt.unitFromLocalname("PhilippinePeso"),
    // Australian Dollar
    AUD: Qudt.unitFromLocalname("AUD"),
    // Newtonmetersekunden pro Radian
    N__M__SEC__PER__RAD: Qudt.unitFromLocalname("N-M-SEC-PER-RAD"),
    // Pound Force Inch
    LB_F__IN: Qudt.unitFromLocalname("LB_F-IN"),
    // Hong Kong Dollar
    HongKongDollar: Qudt.unitFromLocalname("HongKongDollar"),
    // Denier
    Denier: Qudt.unitFromLocalname("Denier"),
    // Kilogram Square Meter
    KiloGM__M2: Qudt.unitFromLocalname("KiloGM-M2"),
    // bushel (US)
    BU_US: Qudt.unitFromLocalname("BU_US"),
    // Hundred Weight - Short
    CWT_SHORT: Qudt.unitFromLocalname("CWT_SHORT"),
    // Square pascal per square second
    PA2__PER__SEC2: Qudt.unitFromLocalname("PA2-PER-SEC2"),
    // Milliampere Per Millimeter
    MilliA__PER__MilliM: Qudt.unitFromLocalname("MilliA-PER-MilliM"),
    // Megabar
    MegaBAR: Qudt.unitFromLocalname("MegaBAR"),
    // Mega Electron Volt per Speed of Light
    MegaEV__PER__SpeedOfLight: Qudt.unitFromLocalname("MegaEV-PER-SpeedOfLight"),
    // Sidereal Hour
    HR_Sidereal: Qudt.unitFromLocalname("HR_Sidereal"),
    // Millitesla
    MilliT: Qudt.unitFromLocalname("MilliT"),
    // Kilogram Per Cubic Decimetre
    KiloGM__PER__DeciM3: Qudt.unitFromLocalname("KiloGM-PER-DeciM3"),
    // Microbecquerel
    MicroBQ: Qudt.unitFromLocalname("MicroBQ"),
    // Calorie (international Table) Per Gram Degree Celsius
    CAL_IT__PER__GM__DEG_C: Qudt.unitFromLocalname("CAL_IT-PER-GM-DEG_C"),
    // Yemeni Rial
    YemeniRial: Qudt.unitFromLocalname("YemeniRial"),
    // Megavolt Ampere Reactive Hour
    MegaV__A_Reactive__HR: Qudt.unitFromLocalname("MegaV-A_Reactive-HR"),
    // Mole Kelvin
    MOL__K: Qudt.unitFromLocalname("MOL-K"),
    // MegaCoulomb
    MegaC: Qudt.unitFromLocalname("MegaC"),
    // Nepalese Rupee
    NepaleseRupee: Qudt.unitFromLocalname("NepaleseRupee"),
    // Djibouti Franc
    DjiboutiFranc: Qudt.unitFromLocalname("DjiboutiFranc"),
    // Unitless
    UNITLESS: Qudt.unitFromLocalname("UNITLESS"),
    // Reciprocal Pascal per second
    PER__PA__SEC: Qudt.unitFromLocalname("PER-PA-SEC"),
    // Silver (one Troy ounce)
    Silver__OunceTroy: Qudt.unitFromLocalname("Silver-OunceTroy"),
    // US Gallon
    GAL_US: Qudt.unitFromLocalname("GAL_US"),
    // Picohenry
    PicoH: Qudt.unitFromLocalname("PicoH"),
    // Becquerel
    BQ: Qudt.unitFromLocalname("BQ"),
    // Erg per Second
    ERG__PER__SEC: Qudt.unitFromLocalname("ERG-PER-SEC"),
    // Kilojoule Per Mole
    KiloJ__PER__MOL: Qudt.unitFromLocalname("KiloJ-PER-MOL"),
    // Metric DeciTON
    DeciTON_Metric: Qudt.unitFromLocalname("DeciTON_Metric"),
    // Kelvin per Second
    K__PER__SEC: Qudt.unitFromLocalname("K-PER-SEC"),
    // Parts per thousand
    PPTH: Qudt.unitFromLocalname("PPTH"),
    // Microbecquerels per kilogram
    MicroBQ__PER__KiloGM: Qudt.unitFromLocalname("MicroBQ-PER-KiloGM"),
    // Syrian Pound
    SyrianPound: Qudt.unitFromLocalname("SyrianPound"),
    // Pound Mole Degree Fahrenheit
    LB__MOL__DEG_F: Qudt.unitFromLocalname("LB-MOL-DEG_F"),
    // Metre Kelvin
    M__K: Qudt.unitFromLocalname("M-K"),
    // Moles per mole
    MOL__PER__MOL: Qudt.unitFromLocalname("MOL-PER-MOL"),
    // Milligrams per square metre per hour
    MilliGM__PER__M2__HR: Qudt.unitFromLocalname("MilliGM-PER-M2-HR"),
    // Barrel (UK Petroleum) Per Hour
    BBL_UK_PET__PER__HR: Qudt.unitFromLocalname("BBL_UK_PET-PER-HR"),
    // Dyne Second Per Centimetre
    DYN__SEC__PER__CentiM: Qudt.unitFromLocalname("DYN-SEC-PER-CentiM"),
    // Kilocalorie Per Minute
    KiloCAL__PER__MIN: Qudt.unitFromLocalname("KiloCAL-PER-MIN"),
    // Pound per Foot
    LB__PER__FT: Qudt.unitFromLocalname("LB-PER-FT"),
    // millimoles per litre
    MilliMOL__PER__L: Qudt.unitFromLocalname("MilliMOL-PER-L"),
    // Micronewton
    MicroN: Qudt.unitFromLocalname("MicroN"),
    // Farad
    FARAD: Qudt.unitFromLocalname("FARAD"),
    // Zimbabwe Dollar
    ZimbabweDollar: Qudt.unitFromLocalname("ZimbabweDollar"),
    // Kilonewton Meter
    KiloN__M: Qudt.unitFromLocalname("KiloN-M"),
    // Rad
    RAD_R: Qudt.unitFromLocalname("RAD_R"),
    // Nanomoles per litre per hour
    NanoMOL__PER__L__HR: Qudt.unitFromLocalname("NanoMOL-PER-L-HR"),
    // Becquerels second per cubic metre
    BQ__SEC__PER__M3: Qudt.unitFromLocalname("BQ-SEC-PER-M3"),
    // KiloYR
    KiloYR: Qudt.unitFromLocalname("KiloYR"),
    // Swedish Krona
    SwedishKrona: Qudt.unitFromLocalname("SwedishKrona"),
    // Newton Second
    N__SEC: Qudt.unitFromLocalname("N-SEC"),
    // Ounce (US Fluid) Per Hour
    OZ_VOL_US__PER__HR: Qudt.unitFromLocalname("OZ_VOL_US-PER-HR"),
    // Millicoulomb Per Kilogram
    MilliC__PER__KiloGM: Qudt.unitFromLocalname("MilliC-PER-KiloGM"),
    // Square Meter Kelvin per Watt
    M2__K__PER__W: Qudt.unitFromLocalname("M2-K-PER-W"),
    // Ampere per Square Meter Square Kelvin
    A__PER__M2__K2: Qudt.unitFromLocalname("A-PER-M2-K2"),
    // Reciprocal Mole
    PER__MOL: Qudt.unitFromLocalname("PER-MOL"),
    // Becquerel per Kilogram
    BQ__PER__KiloGM: Qudt.unitFromLocalname("BQ-PER-KiloGM"),
    // Metre per Minute
    M__PER__MIN: Qudt.unitFromLocalname("M-PER-MIN"),
    // Tonne Per Second
    TONNE__PER__SEC: Qudt.unitFromLocalname("TONNE-PER-SEC"),
    // British Thermal Unit (TH) Per Cubic Foot
    BTU_TH__PER__FT3: Qudt.unitFromLocalname("BTU_TH-PER-FT3"),
    // Kilogram per Second
    KiloGM__PER__SEC: Qudt.unitFromLocalname("KiloGM-PER-SEC"),
    // Standard Atmosphere
    ATM: Qudt.unitFromLocalname("ATM"),
    // Cubic microns per cubic metre
    MicroM3__PER__M3: Qudt.unitFromLocalname("MicroM3-PER-M3"),
    // Number per cubic metre
    NUM__PER__M3: Qudt.unitFromLocalname("NUM-PER-M3"),
    // Degree per Second
    DEG__PER__SEC: Qudt.unitFromLocalname("DEG-PER-SEC"),
    // Millimole Per Gram
    MilliMOL__PER__GM: Qudt.unitFromLocalname("MilliMOL-PER-GM"),
    // Watt per Square Meter
    W__PER__M2: Qudt.unitFromLocalname("W-PER-M2"),
    // Volt per Kelvin
    V__PER__K: Qudt.unitFromLocalname("V-PER-K"),
    // Gram Per Gram
    GM__PER__GM: Qudt.unitFromLocalname("GM-PER-GM"),
    // Square centimetres per cubic centimetre
    CentiM2__PER__CentiM3: Qudt.unitFromLocalname("CentiM2-PER-CentiM3"),
    // Megawatt Hour
    MegaW__HR: Qudt.unitFromLocalname("MegaW-HR"),
    // Kip per Square Inch
    KIP_F__PER__IN2: Qudt.unitFromLocalname("KIP_F-PER-IN2"),
    // Planck Angular Frequency
    PlanckFrequency_Ang: Qudt.unitFromLocalname("PlanckFrequency_Ang"),
    // Abfarad per Centimeter
    FARAD_Ab__PER__CentiM: Qudt.unitFromLocalname("FARAD_Ab-PER-CentiM"),
    // Saudi Riyal
    SaudiRiyal: Qudt.unitFromLocalname("SaudiRiyal"),
    // Mexican Peso
    MexicanPeso: Qudt.unitFromLocalname("MexicanPeso"),
    // Kilogram Per Minute
    KiloGM__PER__MIN: Qudt.unitFromLocalname("KiloGM-PER-MIN"),
    // Afghani
    AFN: Qudt.unitFromLocalname("AFN"),
    // GigaCoulomb
    GigaC: Qudt.unitFromLocalname("GigaC"),
    // Maxwell
    MX: Qudt.unitFromLocalname("MX"),
    // Circular Mil
    MIL_Circ: Qudt.unitFromLocalname("MIL_Circ"),
    // BREATH
    BREATH: Qudt.unitFromLocalname("BREATH"),
    // Dyne Per Centimetre
    DYN__PER__CentiM: Qudt.unitFromLocalname("DYN-PER-CentiM"),
    // Joule Per Gram
    J__PER__GM: Qudt.unitFromLocalname("J-PER-GM"),
    // Parts per trillion by volume
    PPTR_VOL: Qudt.unitFromLocalname("PPTR_VOL"),
    // Quarter (UK)
    Quarter_UK: Qudt.unitFromLocalname("Quarter_UK"),
    // Millimetre of Mercury - Absolute
    MilliM_HGA: Qudt.unitFromLocalname("MilliM_HGA"),
    // Newton
    N: Qudt.unitFromLocalname("N"),
    // British Thermal Unit (international Table) Per Hour Square Foot degree Rankine
    BTU_IT__PER__HR__FT2__DEG_R: Qudt.unitFromLocalname("BTU_IT-PER-HR-FT2-DEG_R"),
    // Micrograms per square metre per day
    MicroGM__PER__M2__DAY: Qudt.unitFromLocalname("MicroGM-PER-M2-DAY"),
    // Microhenry Per Kiloohm
    MicroH__PER__KiloOHM: Qudt.unitFromLocalname("MicroH-PER-KiloOHM"),
    // Moles per square metre per day
    MOL__PER__M2__DAY: Qudt.unitFromLocalname("MOL-PER-M2-DAY"),
    // Pound Force Per Foot
    KiloLB_F__PER__FT: Qudt.unitFromLocalname("KiloLB_F-PER-FT"),
    // Degree Oechsle
    DEGREE_OECHSLE: Qudt.unitFromLocalname("DEGREE_OECHSLE"),
    // Milligram Per Liter
    MilliGM__PER__L: Qudt.unitFromLocalname("MilliGM-PER-L"),
    // Moles per gram per hour
    MOL__PER__GM__HR: Qudt.unitFromLocalname("MOL-PER-GM-HR"),
    // Radian per Minute
    RAD__PER__MIN: Qudt.unitFromLocalname("RAD-PER-MIN"),
    // Dry Gallon US
    GAL_US_DRY: Qudt.unitFromLocalname("GAL_US_DRY"),
    // Square Metre per Steradian Joule
    M2__PER__SR__J: Qudt.unitFromLocalname("M2-PER-SR-J"),
    // MicroGAL
    MicroGAL: Qudt.unitFromLocalname("MicroGAL"),
    // Cubic Centimetre Per Cubic Centimetre
    CentiM3__PER__CentiM3: Qudt.unitFromLocalname("CentiM3-PER-CentiM3"),
    // Picosiemens Per Metre
    PicoS__PER__M: Qudt.unitFromLocalname("PicoS-PER-M"),
    // Grams per square centimetre per year
    GM__PER__CentiM2__YR: Qudt.unitFromLocalname("GM-PER-CentiM2-YR"),
    // Dram (UK)
    DRAM_UK: Qudt.unitFromLocalname("DRAM_UK"),
    // MicroTorr
    MicroTORR: Qudt.unitFromLocalname("MicroTORR"),
    // Hectogram
    HectoGM: Qudt.unitFromLocalname("HectoGM"),
    // chain
    CH: Qudt.unitFromLocalname("CH"),
    // Brunei Dollar
    BruneiDollar: Qudt.unitFromLocalname("BruneiDollar"),
    // Kilosiemens
    KiloS: Qudt.unitFromLocalname("KiloS"),
    // Pound per Cubic Inch
    LB__PER__IN3: Qudt.unitFromLocalname("LB-PER-IN3"),
    // Decibel Carrier Unit
    DeciB_C: Qudt.unitFromLocalname("DeciB_C"),
    // Ohm Square Meter per Meter
    OHM__M2__PER__M: Qudt.unitFromLocalname("OHM-M2-PER-M"),
    // Tonne Per Day
    TONNE__PER__DAY: Qudt.unitFromLocalname("TONNE-PER-DAY"),
    // Square Volt per Square Kelvin
    V2__PER__K2: Qudt.unitFromLocalname("V2-PER-K2"),
    // Millicoulomb Per Cubic Meter
    MilliC__PER__M3: Qudt.unitFromLocalname("MilliC-PER-M3"),
    // Newtonmeter pro Radian
    N__M__PER__RAD: Qudt.unitFromLocalname("N-M-PER-RAD"),
    // Cubic Foot Per Hour
    FT3__PER__HR: Qudt.unitFromLocalname("FT3-PER-HR"),
    // Statohm
    OHM_Stat: Qudt.unitFromLocalname("OHM_Stat"),
    // Long Ton (uk) Per Day
    TON_UK__PER__DAY: Qudt.unitFromLocalname("TON_UK-PER-DAY"),
    // Quartic Millimetre
    MilliM4: Qudt.unitFromLocalname("MilliM4"),
    // Millisiemens Per Centimetre
    MilliS__PER__CentiM: Qudt.unitFromLocalname("MilliS-PER-CentiM"),
    // Liberian Dollar
    LiberianDollar: Qudt.unitFromLocalname("LiberianDollar"),
    // Dots Per Inch
    DPI: Qudt.unitFromLocalname("DPI"),
    // DeciTonne
    DeciTONNE: Qudt.unitFromLocalname("DeciTONNE"),
    // Ton (US)
    TON_US: Qudt.unitFromLocalname("TON_US"),
    // Kiloampere Hour
    KiloA__HR: Qudt.unitFromLocalname("KiloA-HR"),
    // Joule Per Second
    J__PER__SEC: Qudt.unitFromLocalname("J-PER-SEC"),
    // Hertz per Volt
    HZ__PER__V: Qudt.unitFromLocalname("HZ-PER-V"),
    // FemtoMOL
    FemtoMOL: Qudt.unitFromLocalname("FemtoMOL"),
    // Reciprocal Second Square Meter
    PER__SEC__M2: Qudt.unitFromLocalname("PER-SEC-M2"),
    // Terawatt
    TeraW: Qudt.unitFromLocalname("TeraW"),
    // Degree Fahrenheit Per Kelvin
    DEG_F__PER__K: Qudt.unitFromLocalname("DEG_F-PER-K"),
    // Tropical Year
    YR_TROPICAL: Qudt.unitFromLocalname("YR_TROPICAL"),
    // Foot Pound Force Second
    FT__LB_F__SEC: Qudt.unitFromLocalname("FT-LB_F-SEC"),
    // Hectopascal
    HectoPA: Qudt.unitFromLocalname("HectoPA"),
    // Milliweber
    MilliWB: Qudt.unitFromLocalname("MilliWB"),
    // Planck Frequency
    PlanckFrequency: Qudt.unitFromLocalname("PlanckFrequency"),
    // Number
    NUM: Qudt.unitFromLocalname("NUM"),
    // Slovak Koruna
    SlovakKoruna: Qudt.unitFromLocalname("SlovakKoruna"),
    // Kilovolt Ampere
    KiloV__A: Qudt.unitFromLocalname("KiloV-A"),
    // Solomon Islands Dollar
    SolomonIslandsDollar: Qudt.unitFromLocalname("SolomonIslandsDollar"),
    // Kelvin metres per second
    K__M__PER__SEC: Qudt.unitFromLocalname("K-M-PER-SEC"),
    // United States Dollar (same day) (funds code)
    USDollar__SameDay: Qudt.unitFromLocalname("USDollar-SameDay"),
    // Microgram Per Kilogram
    MicroGM__PER__KiloGM: Qudt.unitFromLocalname("MicroGM-PER-KiloGM"),
    // Grade
    GR: Qudt.unitFromLocalname("GR"),
    // Cubic microns per millilitre
    MicroM3__PER__MilliL: Qudt.unitFromLocalname("MicroM3-PER-MilliL"),
    // Ounce Troy
    OZ_TROY: Qudt.unitFromLocalname("OZ_TROY"),
    // Kiloampere Per Square Metre
    KiloA__PER__M2: Qudt.unitFromLocalname("KiloA-PER-M2"),
    // Lilangeni
    Lilangeni: Qudt.unitFromLocalname("Lilangeni"),
    // Erg Per Centimeter
    ERG__PER__CentiM: Qudt.unitFromLocalname("ERG-PER-CentiM"),
    // BU_US_DRY
    BU_US_DRY: Qudt.unitFromLocalname("BU_US_DRY"),
    // Elementary Charge
    ElementaryCharge: Qudt.unitFromLocalname("ElementaryCharge"),
    // Gold (one Troy ounce)
    Gold__OunceTroy: Qudt.unitFromLocalname("Gold-OunceTroy"),
    // Joule Meter per Mole
    J__M__PER__MOL: Qudt.unitFromLocalname("J-M-PER-MOL"),
    // Kroon
    Kroon: Qudt.unitFromLocalname("Kroon"),
    // millisecond
    MilliSEC: Qudt.unitFromLocalname("MilliSEC"),
    // Kilometres per day
    KiloM__PER__DAY: Qudt.unitFromLocalname("KiloM-PER-DAY"),
    // Metre per Square Second
    M__PER__SEC2: Qudt.unitFromLocalname("M-PER-SEC2"),
    // Kilogram Square Centimetre
    KiloGM__CentiM2: Qudt.unitFromLocalname("KiloGM-CentiM2"),
    // Femtograms per kilogram
    FemtoGM__PER__KiloGM: Qudt.unitFromLocalname("FemtoGM-PER-KiloGM"),
    // Gray
    GRAY: Qudt.unitFromLocalname("GRAY"),
    // Joule Per Metre
    J__PER__M: Qudt.unitFromLocalname("J-PER-M"),
    // Unit Pole
    UnitPole: Qudt.unitFromLocalname("UnitPole"),
    // A_Reactive
    A_Reactive: Qudt.unitFromLocalname("A_Reactive"),
    // Mega Hertz per Tesla
    MegaHZ__PER__T: Qudt.unitFromLocalname("MegaHZ-PER-T"),
    // Inch per Square second
    IN__PER__SEC2: Qudt.unitFromLocalname("IN-PER-SEC2"),
    // FemtoGM
    FemtoGM: Qudt.unitFromLocalname("FemtoGM"),
    // Nanotesla
    NanoT: Qudt.unitFromLocalname("NanoT"),
    // Milligram Per Day
    MilliGM__PER__DAY: Qudt.unitFromLocalname("MilliGM-PER-DAY"),
    // Microcoulomb Per Square Meter
    MicroC__PER__M2: Qudt.unitFromLocalname("MicroC-PER-M2"),
    // square metre per square metre
    M2__PER__M2: Qudt.unitFromLocalname("M2-PER-M2"),
    // ZettaCoulomb
    ZettaC: Qudt.unitFromLocalname("ZettaC"),
    // Unidad de Valor Real
    UnidadDeValorReal: Qudt.unitFromLocalname("UnidadDeValorReal"),
    // Kilopascal Per Millimetre
    KiloPA__PER__MilliM: Qudt.unitFromLocalname("KiloPA-PER-MilliM"),
    // Carat
    CARAT: Qudt.unitFromLocalname("CARAT"),
    // Pound per Hour
    LB__PER__HR: Qudt.unitFromLocalname("LB-PER-HR"),
    // Sidereal Day
    DAY_Sidereal: Qudt.unitFromLocalname("DAY_Sidereal"),
    // Statfarad
    FARAD_Stat: Qudt.unitFromLocalname("FARAD_Stat"),
    // Radian per Square Second
    RAD__PER__SEC2: Qudt.unitFromLocalname("RAD-PER-SEC2"),
    // Moles per cubic metre per second
    MOL__PER__M3__SEC: Qudt.unitFromLocalname("MOL-PER-M3-SEC"),
    // Newtonmetersekunden pro Meter
    N__M__SEC__PER__M: Qudt.unitFromLocalname("N-M-SEC-PER-M"),
    // Lux Hour
    LUX__HR: Qudt.unitFromLocalname("LUX-HR"),
    // Decigram
    DeciGM: Qudt.unitFromLocalname("DeciGM"),
    // Elementary Charge
    E: Qudt.unitFromLocalname("E"),
    // Horsepower
    HP: Qudt.unitFromLocalname("HP"),
    // British Thermal Unit (international Table) Per Minute
    BTU_IT__PER__MIN: Qudt.unitFromLocalname("BTU_IT-PER-MIN"),
    // Reciprocal Bar
    PER__BAR: Qudt.unitFromLocalname("PER-BAR"),
    // Mho
    MHO: Qudt.unitFromLocalname("MHO"),
    // Kilowatthour
    KiloW__HR: Qudt.unitFromLocalname("KiloW-HR"),
    // Square Mile
    MI2: Qudt.unitFromLocalname("MI2"),
    // Kilobit per Second
    KiloBIT__PER__SEC: Qudt.unitFromLocalname("KiloBIT-PER-SEC"),
    // Cubic Decimeter Per Mole
    DeciM3__PER__MOL: Qudt.unitFromLocalname("DeciM3-PER-MOL"),
    // Singapore Dollar
    SingaporeDollar: Qudt.unitFromLocalname("SingaporeDollar"),
    // Atomic mass unit
    AMU: Qudt.unitFromLocalname("AMU"),
    // Kilocalorie (thermochemical)
    KiloCAL_TH: Qudt.unitFromLocalname("KiloCAL_TH"),
    // Millilitre Per Litre
    MilliL__PER__L: Qudt.unitFromLocalname("MilliL-PER-L"),
    // Millisiemens
    MilliS: Qudt.unitFromLocalname("MilliS"),
    // FRAME
    FRAME: Qudt.unitFromLocalname("FRAME"),
    // Bar Per Kelvin
    BAR__PER__K: Qudt.unitFromLocalname("BAR-PER-K"),
    // Decametre
    DecaM: Qudt.unitFromLocalname("DecaM"),
    // Picograms per millilitre
    PicoGM__PER__MilliL: Qudt.unitFromLocalname("PicoGM-PER-MilliL"),
    // Meganewton Meter
    MegaN__M: Qudt.unitFromLocalname("MegaN-M"),
    // Planck Current
    PlanckCurrent: Qudt.unitFromLocalname("PlanckCurrent"),
    // CFA Franc BCEAO
    XOF: Qudt.unitFromLocalname("XOF"),
    // KiloCoulomb
    KiloC: Qudt.unitFromLocalname("KiloC"),
    // Degree Rankine per Hour
    DEG_R__PER__HR: Qudt.unitFromLocalname("DEG_R-PER-HR"),
    // Ampere Square Metre Per Joule Second
    A__M2__PER__J__SEC: Qudt.unitFromLocalname("A-M2-PER-J-SEC"),
    // are
    ARE: Qudt.unitFromLocalname("ARE"),
    // Galileo
    GALILEO: Qudt.unitFromLocalname("GALILEO"),
    // BTU per Second
    BTU_IT__PER__SEC: Qudt.unitFromLocalname("BTU_IT-PER-SEC"),
    // Barye
    BARYE: Qudt.unitFromLocalname("BARYE"),
    // Zloty
    Zloty: Qudt.unitFromLocalname("Zloty"),
    // Foot per Hour
    FT__PER__HR: Qudt.unitFromLocalname("FT-PER-HR"),
    // South African Rand
    SouthAfricanRand: Qudt.unitFromLocalname("SouthAfricanRand"),
    // Planck Current Density
    PlanckCurrentDensity: Qudt.unitFromLocalname("PlanckCurrentDensity"),
    // Ton (US Shipping)
    TON_SHIPPING_US: Qudt.unitFromLocalname("TON_SHIPPING_US"),
    // Newton per radian
    N__PER__RAD: Qudt.unitFromLocalname("N-PER-RAD"),
    // fermi
    FM: Qudt.unitFromLocalname("FM"),
    // KiloTonne
    KiloTONNE: Qudt.unitFromLocalname("KiloTONNE"),
    // Foot Poundal
    FT__PDL: Qudt.unitFromLocalname("FT-PDL"),
    // MegaJoule per Kelvin
    MegaJ__PER__K: Qudt.unitFromLocalname("MegaJ-PER-K"),
    // Square centimetres per second
    CentiM2__PER__SEC: Qudt.unitFromLocalname("CentiM2-PER-SEC"),
    // Cubic Coulomb Metre per Square Joule
    C3__M__PER__J2: Qudt.unitFromLocalname("C3-M-PER-J2"),
    // CFA Franc BEAC
    XAF: Qudt.unitFromLocalname("XAF"),
    // Boiler Horsepower
    HP_Boiler: Qudt.unitFromLocalname("HP_Boiler"),
    // Nat
    NAT: Qudt.unitFromLocalname("NAT"),
    // Kelvin square metres per kilogram per second
    K__M2__PER__KiloGM__SEC: Qudt.unitFromLocalname("K-M2-PER-KiloGM-SEC"),
    // Pint (US Liquid) Per Minute
    PINT_US__PER__MIN: Qudt.unitFromLocalname("PINT_US-PER-MIN"),
    // Watt Per Kilogram
    W__PER__KiloGM: Qudt.unitFromLocalname("W-PER-KiloGM"),
    // Joule Second
    J__SEC: Qudt.unitFromLocalname("J-SEC"),
    // Square Metres square Hertz
    M2__HZ2: Qudt.unitFromLocalname("M2-HZ2"),
    // Peck (UK) Per Day
    PK_UK__PER__DAY: Qudt.unitFromLocalname("PK_UK-PER-DAY"),
    // Percent
    PERCENT: Qudt.unitFromLocalname("PERCENT"),
    // YoctoCoulomb
    YoctoC: Qudt.unitFromLocalname("YoctoC"),
    // Number per square kilometre
    NUM__PER__KiloM2: Qudt.unitFromLocalname("NUM-PER-KiloM2"),
    // BTU per Pound Degree Rankine
    BTU_IT__PER__LB__DEG_R: Qudt.unitFromLocalname("BTU_IT-PER-LB-DEG_R"),
    // Million US Dollars
    MillionUSD: Qudt.unitFromLocalname("MillionUSD"),
    // Pascal Per Bar
    PA__PER__BAR: Qudt.unitFromLocalname("PA-PER-BAR"),
    // Cubic Decimetre Per Minute
    DeciM3__PER__MIN: Qudt.unitFromLocalname("DeciM3-PER-MIN"),
    // Femtometre
    FemtoM: Qudt.unitFromLocalname("FemtoM"),
    // Horsepower (metric)
    HP_Metric: Qudt.unitFromLocalname("HP_Metric"),
    // Henry
    H: Qudt.unitFromLocalname("H"),
    // Malawi Kwacha
    MalawiKwacha: Qudt.unitFromLocalname("MalawiKwacha"),
    // Degree per Minute
    DEG__PER__MIN: Qudt.unitFromLocalname("DEG-PER-MIN"),
    // Nanograms per litre
    NanoGM__PER__L: Qudt.unitFromLocalname("NanoGM-PER-L"),
    // Micromole
    MicroMOL: Qudt.unitFromLocalname("MicroMOL"),
    // Giga Electron Volt
    GigaEV: Qudt.unitFromLocalname("GigaEV"),
    // GigaByte
    GigaBYTE: Qudt.unitFromLocalname("GigaBYTE"),
    // Cubic Foot per Minute
    FT3__PER__MIN: Qudt.unitFromLocalname("FT3-PER-MIN"),
    // Millirads per hour
    MilliRAD_R__PER__HR: Qudt.unitFromLocalname("MilliRAD_R-PER-HR"),
    // Millimoles per square metre per day
    MilliMOL__PER__M2__DAY: Qudt.unitFromLocalname("MilliMOL-PER-M2-DAY"),
    // Hectopascal Per Bar
    HectoPA__PER__BAR: Qudt.unitFromLocalname("HectoPA-PER-BAR"),
    // New Zealand Dollar
    NewZealandDollar: Qudt.unitFromLocalname("NewZealandDollar"),
    // Cubic Meter Per Minute
    M3__PER__MIN: Qudt.unitFromLocalname("M3-PER-MIN"),
    // Electronvolt Per Meter
    EV__PER__M: Qudt.unitFromLocalname("EV-PER-M"),
    // Romanian New Leu
    RomanianNeLeu: Qudt.unitFromLocalname("RomanianNeLeu"),
    // Sri Lanka Rupee
    SriLankaRupee: Qudt.unitFromLocalname("SriLankaRupee"),
    // Kiloampere Per Metre
    KiloA__PER__M: Qudt.unitFromLocalname("KiloA-PER-M"),
    // Foot Pound Force per Square Metre
    FT__LB_F__PER__M2: Qudt.unitFromLocalname("FT-LB_F-PER-M2"),
    // Quart (US Liquid) Per Second
    QT_US__PER__SEC: Qudt.unitFromLocalname("QT_US-PER-SEC"),
    // Calorie (15 Degrees C)
    CAL_15_DEG_C: Qudt.unitFromLocalname("CAL_15_DEG_C"),
    // Kilogram Per Millimeter
    KiloGM__PER__MilliM: Qudt.unitFromLocalname("KiloGM-PER-MilliM"),
    // Pound Force per Pound
    LB_F__PER__LB: Qudt.unitFromLocalname("LB_F-PER-LB"),
    // Micromoles per litre per day
    MicroM__PER__L__DAY: Qudt.unitFromLocalname("MicroM-PER-L-DAY"),
    // Coulomb Square Metre
    C__M2: Qudt.unitFromLocalname("C-M2"),
    // Erg Per Gram
    ERG__PER__GM: Qudt.unitFromLocalname("ERG-PER-GM"),
    // Cubic Yard Per Degree Fahrenheit
    YD3__PER__DEG_F: Qudt.unitFromLocalname("YD3-PER-DEG_F"),
    // Radian Square Metre per Mole
    RAD__M2__PER__MOL: Qudt.unitFromLocalname("RAD-M2-PER-MOL"),
    // Pint (UK) Per Minute
    PINT_UK__PER__MIN: Qudt.unitFromLocalname("PINT_UK-PER-MIN"),
    // Pound Degree Rankine
    LB__DEG_R: Qudt.unitFromLocalname("LB-DEG_R"),
    // Gigabecquerel
    GigaBQ: Qudt.unitFromLocalname("GigaBQ"),
    // Statampere per Square Centimetre
    A_Stat__PER__CentiM2: Qudt.unitFromLocalname("A_Stat-PER-CentiM2"),
    // Kelvin per Minute
    K__PER__MIN: Qudt.unitFromLocalname("K-PER-MIN"),
    // Milligram Per Minute
    MilliGM__PER__MIN: Qudt.unitFromLocalname("MilliGM-PER-MIN"),
    // Cubic Inch per Minute
    IN3__PER__MIN: Qudt.unitFromLocalname("IN3-PER-MIN"),
    // Number per litre
    NUM__PER__L: Qudt.unitFromLocalname("NUM-PER-L"),
    // Newton Per Centimeter
    N__PER__CentiM: Qudt.unitFromLocalname("N-PER-CentiM"),
    // Reciprocal Square Meter
    PER__M2: Qudt.unitFromLocalname("PER-M2"),
    // Hectometre
    HectoM: Qudt.unitFromLocalname("HectoM"),
    // Barrel (US)
    BBL_US: Qudt.unitFromLocalname("BBL_US"),
    // Micronewton Meter
    MicroN__M: Qudt.unitFromLocalname("MicroN-M"),
    // British Thermal Unit (thermochemical) Per Pound Degree Fahrenheit
    BTU_TH__PER__LB__DEG_F: Qudt.unitFromLocalname("BTU_TH-PER-LB-DEG_F"),
    // Gravity
    G: Qudt.unitFromLocalname("G"),
    // Stokes
    ST: Qudt.unitFromLocalname("ST"),
    // Picofarad
    PicoFARAD: Qudt.unitFromLocalname("PicoFARAD"),
    // Coulomb Square Metre Per Volt
    C__M2__PER__V: Qudt.unitFromLocalname("C-M2-PER-V"),
    // Grad
    GRAD: Qudt.unitFromLocalname("GRAD"),
    // Square Nanometer
    NanoM2: Qudt.unitFromLocalname("NanoM2"),
    // Somoni
    Somoni: Qudt.unitFromLocalname("Somoni"),
    // Som
    Som: Qudt.unitFromLocalname("Som"),
    // KibiByte
    KibiBYTE: Qudt.unitFromLocalname("KibiBYTE"),
    // Balboa
    PAB: Qudt.unitFromLocalname("PAB"),
    // Square Metre per Mole
    M2__PER__MOL: Qudt.unitFromLocalname("M2-PER-MOL"),
    // Ounce (avoirdupois) Per Hour
    OZ__PER__HR: Qudt.unitFromLocalname("OZ-PER-HR"),
    // Milligram Per Gram
    MilliGM__PER__GM: Qudt.unitFromLocalname("MilliGM-PER-GM"),
    // Degree
    DEG: Qudt.unitFromLocalname("DEG"),
    // Calorie per Gram Degree Celsius
    KiloCAL__PER__GM__DEG_C: Qudt.unitFromLocalname("KiloCAL-PER-GM-DEG_C"),
    // Milliroentgen
    MilliR: Qudt.unitFromLocalname("MilliR"),
    // Kilogram Force
    KiloGM_F: Qudt.unitFromLocalname("KiloGM_F"),
    // Cubic Decimeter Per Second
    DeciM3__PER__SEC: Qudt.unitFromLocalname("DeciM3-PER-SEC"),
    // Femtograms per litre
    FemtoGM__PER__L: Qudt.unitFromLocalname("FemtoGM-PER-L"),
    // Stere
    STR: Qudt.unitFromLocalname("STR"),
    // Foot Pound Force per Hour
    FT__LB_F__PER__HR: Qudt.unitFromLocalname("FT-LB_F-PER-HR"),
    // Ampere per Degree Celsius
    A__PER__DEG_C: Qudt.unitFromLocalname("A-PER-DEG_C"),
    // Lunar mass
    LunarMass: Qudt.unitFromLocalname("LunarMass"),
    // Microhenry Per Ohm
    MicroH__PER__OHM: Qudt.unitFromLocalname("MicroH-PER-OHM"),
    // Cubic Decimetre Per Day
    DeciM3__PER__DAY: Qudt.unitFromLocalname("DeciM3-PER-DAY"),
    // Nanosiemens Per Metre
    NanoS__PER__M: Qudt.unitFromLocalname("NanoS-PER-M"),
    // Cubic Inch
    IN3: Qudt.unitFromLocalname("IN3"),
    // NanoMOL
    NanoMOL: Qudt.unitFromLocalname("NanoMOL"),
    // Kilojoule
    KiloJ: Qudt.unitFromLocalname("KiloJ"),
    // Kilogram Per Square Centimetre
    KiloGM__PER__CentiM2: Qudt.unitFromLocalname("KiloGM-PER-CentiM2"),
    // British Thermal Unit (IT) Per Cubic Foot
    BTU_IT__PER__FT3: Qudt.unitFromLocalname("BTU_IT-PER-FT3"),
    // GAL
    GAL: Qudt.unitFromLocalname("GAL"),
    // Reciprocal Square Giga Electron Volt Unit
    PER__GigaEV2: Qudt.unitFromLocalname("PER-GigaEV2"),
    // Cubic Metre Per Day
    M3__PER__DAY: Qudt.unitFromLocalname("M3-PER-DAY"),
    // Reciprocal steradian
    PER__SR: Qudt.unitFromLocalname("PER-SR"),
    // Kilocalorie (international Table) Per Hour Metre Degree Celsius
    KiloCAL_IT__PER__HR__M__DEG_C: Qudt.unitFromLocalname("KiloCAL_IT-PER-HR-M-DEG_C"),
    // Kilomole Per Cubic Metre
    KiloMOL__PER__M3: Qudt.unitFromLocalname("KiloMOL-PER-M3"),
    // Milliampere Per Inch
    MilliA__PER__IN: Qudt.unitFromLocalname("MilliA-PER-IN"),
    // Microgram per square centimetre
    MicroG__PER__CentiM2: Qudt.unitFromLocalname("MicroG-PER-CentiM2"),
    // Centigram
    CentiGM: Qudt.unitFromLocalname("CentiGM"),
    // Cubic Millimetre Per Cubic Metre
    MilliM3__PER__M3: Qudt.unitFromLocalname("MilliM3-PER-M3"),
    // Erg Per Gram Second
    ERG__PER__GM__SEC: Qudt.unitFromLocalname("ERG-PER-GM-SEC"),
    // Reciprocal gram
    PER__GM: Qudt.unitFromLocalname("PER-GM"),
    // Gauss
    GAUSS: Qudt.unitFromLocalname("GAUSS"),
    // Ampere per Joule
    A__PER__J: Qudt.unitFromLocalname("A-PER-J"),
    // Dalton
    Da: Qudt.unitFromLocalname("Da"),
    // Cubic Inch Per Hour
    IN3__PER__HR: Qudt.unitFromLocalname("IN3-PER-HR"),
    // Kilocalorie (thermochemical) Per Minute
    KiloCAL_TH__PER__MIN: Qudt.unitFromLocalname("KiloCAL_TH-PER-MIN"),
    // Nanomoles per microgram per hour
    NanoMOL__PER__MicroGM__HR: Qudt.unitFromLocalname("NanoMOL-PER-MicroGM-HR"),
    // Foot per Square Second
    FT__PER__SEC2: Qudt.unitFromLocalname("FT-PER-SEC2"),
    // Uganda Shilling
    UgandaShilling: Qudt.unitFromLocalname("UgandaShilling"),
    // Picopascal Per Kilometre
    PicoPA__PER__KiloM: Qudt.unitFromLocalname("PicoPA-PER-KiloM"),
    // Picometre
    PicoM: Qudt.unitFromLocalname("PicoM"),
    // Gram Per Meter
    GM__PER__M: Qudt.unitFromLocalname("GM-PER-M"),
    // Square Meter Hour Degree Celsius Per Kilocalorie (international Table)
    M2__HR__DEG_C__PER__KiloCAL_IT: Qudt.unitFromLocalname("M2-HR-DEG_C-PER-KiloCAL_IT"),
    // Quart (UK Liquid) Per Day
    QT_UK__PER__DAY: Qudt.unitFromLocalname("QT_UK-PER-DAY"),
    // Litre Per Hour
    L__PER__HR: Qudt.unitFromLocalname("L-PER-HR"),
    // Millipascal Second
    MilliPA__SEC: Qudt.unitFromLocalname("MilliPA-SEC"),
    // Bit
    BIT: Qudt.unitFromLocalname("BIT"),
    // Milligram Per Kilogram
    MilliGM__PER__KiloGM: Qudt.unitFromLocalname("MilliGM-PER-KiloGM"),
    // Newton Metre Per Ampere
    N__M__PER__A: Qudt.unitFromLocalname("N-M-PER-A"),
    // Cubic Meter per Square Second
    M3__PER__SEC2: Qudt.unitFromLocalname("M3-PER-SEC2"),
    // European Monetary Unit (E.M.U.-6) (Bonds market unit)
    EuropeanMonetaryUnit: Qudt.unitFromLocalname("EuropeanMonetaryUnit"),
    // Calorie (thermochemical) Per Second Centimetre Kelvin
    CAL_TH__PER__SEC__CentiM__K: Qudt.unitFromLocalname("CAL_TH-PER-SEC-CentiM-K"),
    // Megaampere Per Square Metre
    MegaA__PER__M2: Qudt.unitFromLocalname("MegaA-PER-M2"),
    // Coulomb Metre
    C__M: Qudt.unitFromLocalname("C-M"),
    // Number per metre
    NUM__PER__M: Qudt.unitFromLocalname("NUM-PER-M"),
    // Franc Congolais
    FrancCongolais: Qudt.unitFromLocalname("FrancCongolais"),
    // Pound per Foot Hour
    LB__PER__FT__HR: Qudt.unitFromLocalname("LB-PER-FT-HR"),
    // Shannon per Second
    SHANNON__PER__SEC: Qudt.unitFromLocalname("SHANNON-PER-SEC"),
    // Pennyweight
    Pennyweight: Qudt.unitFromLocalname("Pennyweight"),
    // Acre Foot
    AC__FT: Qudt.unitFromLocalname("AC-FT"),
    // Kilomole Per Hour
    KiloMOL__PER__HR: Qudt.unitFromLocalname("KiloMOL-PER-HR"),
    // Kilocalorie per Mole
    KiloCAL__PER__MOL: Qudt.unitFromLocalname("KiloCAL-PER-MOL"),
    // Cubic Yard
    YD3: Qudt.unitFromLocalname("YD3"),
    // Radian per Hour
    RAD__PER__HR: Qudt.unitFromLocalname("RAD-PER-HR"),
    // Picograms per gram
    PicoGM__PER__GM: Qudt.unitFromLocalname("PicoGM-PER-GM"),
    // US Liquid Pint
    PINT_US: Qudt.unitFromLocalname("PINT_US"),
    // MilliAmpere
    MilliA: Qudt.unitFromLocalname("MilliA"),
    // Square Metre per Steradian
    M2__PER__SR: Qudt.unitFromLocalname("M2-PER-SR"),
    // Forint
    Forint: Qudt.unitFromLocalname("Forint"),
    // Centimeter per Square Second
    CentiM__PER__SEC2: Qudt.unitFromLocalname("CentiM-PER-SEC2"),
    // Frame per Second
    FRAME__PER__SEC: Qudt.unitFromLocalname("FRAME-PER-SEC"),
    // Microhenry
    MicroH: Qudt.unitFromLocalname("MicroH"),
    // Hectolitre
    HectoL: Qudt.unitFromLocalname("HectoL"),
    // Mile per Hour
    MI__PER__HR: Qudt.unitFromLocalname("MI-PER-HR"),
    // Joule per Kelvin
    J__PER__K: Qudt.unitFromLocalname("J-PER-K"),
    // kilosecond
    KiloSEC: Qudt.unitFromLocalname("KiloSEC"),
    // Gram Per Litre
    GM__PER__L: Qudt.unitFromLocalname("GM-PER-L"),
    // Bushel (US Dry) Per Hour
    BU_US_DRY__PER__HR: Qudt.unitFromLocalname("BU_US_DRY-PER-HR"),
    // Imperial Ounce Force Inch
    OZ_F__IN: Qudt.unitFromLocalname("OZ_F-IN"),
    // Ounce (UK Fluid) Per Day
    OZ_VOL_UK__PER__DAY: Qudt.unitFromLocalname("OZ_VOL_UK-PER-DAY"),
    // BTU (TH) Inch per Square Foot Hour Degree Fahrenheit
    BTU_TH__IN__PER__FT2__HR__DEG_F: Qudt.unitFromLocalname("BTU_TH-IN-PER-FT2-HR-DEG_F"),
    // T-SEC
    T__SEC: Qudt.unitFromLocalname("T-SEC"),
    // Gallon (UK)
    GAL_UK: Qudt.unitFromLocalname("GAL_UK"),
    // NanoBQ
    NanoBQ: Qudt.unitFromLocalname("NanoBQ"),
    // Nanomoles per litre per day
    NanoMOL__PER__L__DAY: Qudt.unitFromLocalname("NanoMOL-PER-L-DAY"),
    // Ampere per Square Meter
    A__PER__M2: Qudt.unitFromLocalname("A-PER-M2"),
    // Nanomoles per litre
    NanoMOL__PER__L: Qudt.unitFromLocalname("NanoMOL-PER-L"),
    // Reciprocal Hour
    PER__HR: Qudt.unitFromLocalname("PER-HR"),
    // Pascal
    PA: Qudt.unitFromLocalname("PA"),
    // grams per square meter per day
    GM__PER__M2__DAY: Qudt.unitFromLocalname("GM-PER-M2-DAY"),
    // Foot Pound Force
    FT__LB_F: Qudt.unitFromLocalname("FT-LB_F"),
    // Planck Length
    PlanckLength: Qudt.unitFromLocalname("PlanckLength"),
    // tonne per hectare per year
    TONNE__PER__HA__YR: Qudt.unitFromLocalname("TONNE-PER-HA-YR"),
    // North Korean Won
    NorthKoreanWon: Qudt.unitFromLocalname("NorthKoreanWon"),
    // Bushel (UK) Per Hour
    BU_UK__PER__HR: Qudt.unitFromLocalname("BU_UK-PER-HR"),
    // Shannon
    SHANNON: Qudt.unitFromLocalname("SHANNON"),
    // Meter per Farad
    M__PER__FARAD: Qudt.unitFromLocalname("M-PER-FARAD"),
    // Picofarad Per Metre
    PicoGM__PER__L: Qudt.unitFromLocalname("PicoGM-PER-L"),
    // lumen second
    LM__SEC: Qudt.unitFromLocalname("LM-SEC"),
    // Cubic Decameter
    DecaM3: Qudt.unitFromLocalname("DecaM3"),
    // Joule per Tesla
    J__PER__T: Qudt.unitFromLocalname("J-PER-T"),
    // Serbian Dinar
    SerbianDinar: Qudt.unitFromLocalname("SerbianDinar"),
    // Reciprocal metre per second
    PER__M__SEC: Qudt.unitFromLocalname("PER-M-SEC"),
    // Gram Per Millilitre
    GM__PER__MilliL: Qudt.unitFromLocalname("GM-PER-MilliL"),
    // Denar
    Denar: Qudt.unitFromLocalname("Denar"),
    // Pound Troy
    LB_T: Qudt.unitFromLocalname("LB_T"),
    // Number per Year
    NUM__PER__YR: Qudt.unitFromLocalname("NUM-PER-YR"),
    // Mebibyte
    MebiBYTE: Qudt.unitFromLocalname("MebiBYTE"),
    // Millimoles per square metre per second
    MilliMOL__PER__M2__SEC: Qudt.unitFromLocalname("MilliMOL-PER-M2-SEC"),
    // Reciprocal Psi
    PER__PSI: Qudt.unitFromLocalname("PER-PSI"),
    // Milligram Per Cubic Metre
    MilliGM__PER__M3: Qudt.unitFromLocalname("MilliGM-PER-M3"),
    // Indian Rupee
    IndianRupee: Qudt.unitFromLocalname("IndianRupee"),
    // Decinewton Metre
    DeciN__M: Qudt.unitFromLocalname("DeciN-M"),
    // Newton per Meter
    N__PER__M: Qudt.unitFromLocalname("N-PER-M"),
    // Degrees Celsius per metre
    DEG_C__PER__M: Qudt.unitFromLocalname("DEG_C-PER-M"),
    // Pound Force Foot Per Pound
    KiloLB_F__FT__PER__LB: Qudt.unitFromLocalname("KiloLB_F-FT-PER-LB"),
    // Ounce (avoirdupois) Inch
    OZ__IN: Qudt.unitFromLocalname("OZ-IN"),
    // Beaufort
    BFT: Qudt.unitFromLocalname("BFT"),
    // Hectopascals per hour
    HectoPA__PER__HR: Qudt.unitFromLocalname("HectoPA-PER-HR"),
    // Planck Force
    PlanckForce: Qudt.unitFromLocalname("PlanckForce"),
    // Slug
    SLUG: Qudt.unitFromLocalname("SLUG"),
    // Platinum (one Troy ounce)
    Platinum__OunceTroy: Qudt.unitFromLocalname("Platinum-OunceTroy"),
    // Square Centimetre Second
    CentiM2__SEC: Qudt.unitFromLocalname("CentiM2-SEC"),
    // British Thermal Unit (international Table) Inch Per Second Square Foot degree Fahrenheit
    BTU_IT__IN__PER__SEC__FT2__DEG_F: Qudt.unitFromLocalname("BTU_IT-IN-PER-SEC-FT2-DEG_F"),
    // Kilohertz
    KiloHZ: Qudt.unitFromLocalname("KiloHZ"),
    // Megapascal Litre Per Second
    MegaPA__L__PER__SEC: Qudt.unitFromLocalname("MegaPA-L-PER-SEC"),
    // Microwatt Per Square Metre
    MicroW__PER__M2: Qudt.unitFromLocalname("MicroW-PER-M2"),
    // Siemens Square metre per mole
    S__M2__PER__MOL: Qudt.unitFromLocalname("S-M2-PER-MOL"),
    // Short Ton (US) Per Cubic Yard
    TON_US__PER__YD3: Qudt.unitFromLocalname("TON_US-PER-YD3"),
    // TeraByte
    TeraBYTE: Qudt.unitFromLocalname("TeraBYTE"),
    // Watts per square metre per metre
    W__PER__M2__M: Qudt.unitFromLocalname("W-PER-M2-M"),
    // Kilocalorie per Square Centimetre Second
    KiloCAL__PER__CentiM2__SEC: Qudt.unitFromLocalname("KiloCAL-PER-CentiM2-SEC"),
    // Phot
    PHOT: Qudt.unitFromLocalname("PHOT"),
    // Attofarad
    AttoFARAD: Qudt.unitFromLocalname("AttoFARAD"),
    // Newton Centimeter
    N__CentiM: Qudt.unitFromLocalname("N-CentiM"),
    // Kilocalorie (thermochemical) Per Second
    KiloCAL_TH__PER__SEC: Qudt.unitFromLocalname("KiloCAL_TH-PER-SEC"),
    // Japanese yen
    JapaneseYen: Qudt.unitFromLocalname("JapaneseYen"),
    // Bushel (US Dry) Per Day
    BU_US_DRY__PER__DAY: Qudt.unitFromLocalname("BU_US_DRY-PER-DAY"),
    // Bangladeshi Taka
    BDT: Qudt.unitFromLocalname("BDT"),
    // Lux
    LUX: Qudt.unitFromLocalname("LUX"),
    // Foot per Second
    FT__PER__SEC: Qudt.unitFromLocalname("FT-PER-SEC"),
    // Burundian Franc
    BurundianFranc: Qudt.unitFromLocalname("BurundianFranc"),
    // Tonne Per Second (metric Ton)
    TON_Metric__PER__SEC: Qudt.unitFromLocalname("TON_Metric-PER-SEC"),
    // Meter Kelvin per Watt
    M__K__PER__W: Qudt.unitFromLocalname("M-K-PER-W"),
    // Seychelles Rupee
    SeychellesRupee: Qudt.unitFromLocalname("SeychellesRupee"),
    // Ounce (UK Fluid) Per Second
    OZ_VOL_UK__PER__SEC: Qudt.unitFromLocalname("OZ_VOL_UK-PER-SEC"),
    // Slug per Foot
    SLUG__PER__FT: Qudt.unitFromLocalname("SLUG-PER-FT"),
    // BTU per Pound Mole
    BTU_IT__PER__LB__MOL: Qudt.unitFromLocalname("BTU_IT-PER-LB-MOL"),
    // US Dry Pint
    PINT_US_DRY: Qudt.unitFromLocalname("PINT_US_DRY"),
    // Microohm
    MicroOHM: Qudt.unitFromLocalname("MicroOHM"),
    // Loti
    Loti: Qudt.unitFromLocalname("Loti"),
    // International Table calorie
    CAL_IT: Qudt.unitFromLocalname("CAL_IT"),
    // Milliwatt Per Square Metre
    MilliW__PER__M2: Qudt.unitFromLocalname("MilliW-PER-M2"),
    // Foot per Minute
    FT__PER__MIN: Qudt.unitFromLocalname("FT-PER-MIN"),
    // Percent per metre
    PERCENT__PER__M: Qudt.unitFromLocalname("PERCENT-PER-M"),
    // Gigapascal
    GigaPA: Qudt.unitFromLocalname("GigaPA"),
    // GM_Carbon
    GM_Carbon: Qudt.unitFromLocalname("GM_Carbon"),
    // Nanosiemens Per Centimetre
    NanoS__PER__CentiM: Qudt.unitFromLocalname("NanoS-PER-CentiM"),
    // Cubic Centimeter Per Minute
    CentiM3__PER__MIN: Qudt.unitFromLocalname("CentiM3-PER-MIN"),
    // Square metres Hertz
    M2__HZ: Qudt.unitFromLocalname("M2-HZ"),
    // Baht
    THB: Qudt.unitFromLocalname("THB"),
    // Kilocalorie (international Table)
    KiloCAL_IT: Qudt.unitFromLocalname("KiloCAL_IT"),
    // Bushel (US Dry) Per Minute
    BU_US_DRY__PER__MIN: Qudt.unitFromLocalname("BU_US_DRY-PER-MIN"),
    // Pound Force per Square Inch
    LB_F__PER__IN2: Qudt.unitFromLocalname("LB_F-PER-IN2"),
    // Abvolt per centimeter
    V_Ab__PER__CentiM: Qudt.unitFromLocalname("V_Ab-PER-CentiM"),
    // Millilitre Per Kilogram
    MilliL__PER__KiloGM: Qudt.unitFromLocalname("MilliL-PER-KiloGM"),
    // Norwegian Krone
    NorwegianKrone: Qudt.unitFromLocalname("NorwegianKrone"),
    // Kelvin Pascals per second
    K__PA__PER__SEC: Qudt.unitFromLocalname("K-PA-PER-SEC"),
    // Gill (UK) Per Minute
    GI_UK__PER__MIN: Qudt.unitFromLocalname("GI_UK-PER-MIN"),
    // Litre Per Litre
    L__PER__L: Qudt.unitFromLocalname("L-PER-L"),
    // Namibian Dollar
    NamibianDollar: Qudt.unitFromLocalname("NamibianDollar"),
    // Solar mass
    SolarMass: Qudt.unitFromLocalname("SolarMass"),
    // British Thermal Unit (thermochemical) Per Minute
    BTU_TH__PER__MIN: Qudt.unitFromLocalname("BTU_TH-PER-MIN"),
    // Reciprocal Metre Kelvin
    PER__M__K: Qudt.unitFromLocalname("PER-M-K"),
    // Gross Tonnage
    GT: Qudt.unitFromLocalname("GT"),
    // Cayman Islands Dollar
    CaymanIslandsDollar: Qudt.unitFromLocalname("CaymanIslandsDollar"),
    // Dalasi
    Dalasi: Qudt.unitFromLocalname("Dalasi"),
    // Yard
    YD: Qudt.unitFromLocalname("YD"),
    // Peck (UK)
    PK_UK: Qudt.unitFromLocalname("PK_UK"),
    // Millilitre Per Kelvin
    MilliL__PER__K: Qudt.unitFromLocalname("MilliL-PER-K"),
    // Femtojoule
    FemtoJ: Qudt.unitFromLocalname("FemtoJ"),
    // Volt Ampere Reactive Hour
    V__A_Reactive__HR: Qudt.unitFromLocalname("V-A_Reactive-HR"),
    // PicoS
    PicoS: Qudt.unitFromLocalname("PicoS"),
    // Psi Liter Per Second
    PSI__L__PER__SEC: Qudt.unitFromLocalname("PSI-L-PER-SEC"),
    // Bahamian Dollar
    BSD: Qudt.unitFromLocalname("BSD"),
    // Teraohm
    TeraOHM: Qudt.unitFromLocalname("TeraOHM"),
    // Henry Per Kiloohm
    H__PER__KiloOHM: Qudt.unitFromLocalname("H-PER-KiloOHM"),
    // Kilocalorie
    KiloCAL: Qudt.unitFromLocalname("KiloCAL"),
    // Reciprocal Centimeter
    PER__CentiM: Qudt.unitFromLocalname("PER-CentiM"),
    // Square Foot per Second
    FT2__PER__SEC: Qudt.unitFromLocalname("FT2-PER-SEC"),
    // Barrel (US) Per Minute
    BBL_US__PER__MIN: Qudt.unitFromLocalname("BBL_US-PER-MIN"),
    // Reciprocal Cubic Centimetre
    PER__CentiM3: Qudt.unitFromLocalname("PER-CentiM3"),
    // Foot Pound per Square Foot
    FT__LB_F__PER__FT2: Qudt.unitFromLocalname("FT-LB_F-PER-FT2"),
    // Inch of Water
    IN_H2O: Qudt.unitFromLocalname("IN_H2O"),
    // Mil Length
    MilLength: Qudt.unitFromLocalname("MilLength"),
    // Microgram
    MicroGM: Qudt.unitFromLocalname("MicroGM"),
    // Gigabase Pair
    GigaBasePair: Qudt.unitFromLocalname("GigaBasePair"),
    // Cord
    CORD: Qudt.unitFromLocalname("CORD"),
    // Egyptian Pound
    EgyptianPound: Qudt.unitFromLocalname("EgyptianPound"),
    // Millimoles per square metre
    MilliMOL__PER__M2: Qudt.unitFromLocalname("MilliMOL-PER-M2"),
    // Cubic Metre
    M3: Qudt.unitFromLocalname("M3"),
    // Slug per Cubic Foot
    SLUG__PER__FT3: Qudt.unitFromLocalname("SLUG-PER-FT3"),
    // Ounce (avoirdupois) Per Minute
    OZ__PER__MIN: Qudt.unitFromLocalname("OZ-PER-MIN"),
    // Algerian Dinar
    DZD: Qudt.unitFromLocalname("DZD"),
    // Imperial Pint
    PINT: Qudt.unitFromLocalname("PINT"),
    // GM_Nitrogen
    GM_Nitrogen: Qudt.unitFromLocalname("GM_Nitrogen"),
    // BTU per Hour
    BTU_IT__PER__HR: Qudt.unitFromLocalname("BTU_IT-PER-HR"),
    // Reciprocal Second
    PER__SEC: Qudt.unitFromLocalname("PER-SEC"),
    // Dominican Peso
    DominicanPeso: Qudt.unitFromLocalname("DominicanPeso"),
    // Quart (UK)
    QT_UK: Qudt.unitFromLocalname("QT_UK"),
    // Millifarad
    MilliFARAD: Qudt.unitFromLocalname("MilliFARAD"),
    // Number per hectare
    NUM__PER__HA: Qudt.unitFromLocalname("NUM-PER-HA"),
    // Gill (US) Per Hour
    GI_US__PER__HR: Qudt.unitFromLocalname("GI_US-PER-HR"),
    // Number per microlitre
    NUM__PER__MicroL: Qudt.unitFromLocalname("NUM-PER-MicroL"),
    // Sievert
    SV: Qudt.unitFromLocalname("SV"),
    // Dry Barrel (US)
    BBL_US_DRY: Qudt.unitFromLocalname("BBL_US_DRY"),
    // Microbar
    MicroBAR: Qudt.unitFromLocalname("MicroBAR"),
    // Centistokes
    CentiST: Qudt.unitFromLocalname("CentiST"),
    // Degree Fahrenheit per Square Second
    DEG_F__PER__SEC2: Qudt.unitFromLocalname("DEG_F-PER-SEC2"),
    // Ounce Mass
    OZ: Qudt.unitFromLocalname("OZ"),
    // Pound per Minute
    LB__PER__MIN: Qudt.unitFromLocalname("LB-PER-MIN"),
    // Kilovolt Ampere Reactive
    KiloV__A_Reactive: Qudt.unitFromLocalname("KiloV-A_Reactive"),
    // Quartic Inch
    IN4: Qudt.unitFromLocalname("IN4"),
    // BTU per Pound Degree Fahrenheit
    BTU_IT__PER__LB__DEG_F: Qudt.unitFromLocalname("BTU_IT-PER-LB-DEG_F"),
    // Pascal Second Per Metre
    PA__SEC__PER__M: Qudt.unitFromLocalname("PA-SEC-PER-M"),
    // Franklin
    FR: Qudt.unitFromLocalname("FR"),
    // centimeter per second
    CentiM__PER__SEC: Qudt.unitFromLocalname("CentiM-PER-SEC"),
    // Byte
    BYTE: Qudt.unitFromLocalname("BYTE"),
    // Kilocalorie (mean)
    KiloCAL_Mean: Qudt.unitFromLocalname("KiloCAL_Mean"),
    // microradian
    MicroRAD: Qudt.unitFromLocalname("MicroRAD"),
    // Haiti Gourde
    HaitiGourde: Qudt.unitFromLocalname("HaitiGourde"),
    // Microvolt
    MicroV: Qudt.unitFromLocalname("MicroV"),
    // Electron Volt
    EV: Qudt.unitFromLocalname("EV"),
    // Number per nanolitre
    NUM__PER__NanoL: Qudt.unitFromLocalname("NUM-PER-NanoL"),
    // Millilitre Per Second
    MilliL__PER__SEC: Qudt.unitFromLocalname("MilliL-PER-SEC"),
    // Milligram Per Hour
    MilliGM__PER__HR: Qudt.unitFromLocalname("MilliGM-PER-HR"),
    // Sidereal Minute
    MIN_Sidereal: Qudt.unitFromLocalname("MIN_Sidereal"),
    // Abohm
    OHM_Ab: Qudt.unitFromLocalname("OHM_Ab"),
    // Furlong
    FUR: Qudt.unitFromLocalname("FUR"),
    // Ounce (avoirdupois) Per Second
    OZ__PER__SEC: Qudt.unitFromLocalname("OZ-PER-SEC"),
    // Netherlands Antillian Guilder
    NetherlandsAntillianGuilder: Qudt.unitFromLocalname("NetherlandsAntillianGuilder"),
    // YottaCoulomb
    YottaC: Qudt.unitFromLocalname("YottaC"),
    // Nanowatt
    NanoW: Qudt.unitFromLocalname("NanoW"),
    // US Survey Foot
    FT_US: Qudt.unitFromLocalname("FT_US"),
    // British Thermal Unit (international Table) Per Pound of Force
    BTU_IT__PER__LB_F: Qudt.unitFromLocalname("BTU_IT-PER-LB_F"),
    // Ethiopian Birr
    EthiopianBirr: Qudt.unitFromLocalname("EthiopianBirr"),
    // CASES
    CASES: Qudt.unitFromLocalname("CASES"),
    // Board Foot
    FBM: Qudt.unitFromLocalname("FBM"),
    // Lempira
    Lempira: Qudt.unitFromLocalname("Lempira"),
    // Joule Second per Mole
    J__SEC__PER__MOL: Qudt.unitFromLocalname("J-SEC-PER-MOL"),
    // Square Meter Per Newton
    M2__PER__N: Qudt.unitFromLocalname("M2-PER-N"),
    // Joule per Kilogram
    J__PER__KiloGM: Qudt.unitFromLocalname("J-PER-KiloGM"),
    // MicroSievert per hour
    MicroSV__PER__HR: Qudt.unitFromLocalname("MicroSV-PER-HR"),
    // Biot
    BIOT: Qudt.unitFromLocalname("BIOT"),
    // Watts per square metre per inverse metre per steradian
    W__M__PER__M2__SR: Qudt.unitFromLocalname("W-M-PER-M2-SR"),
    // Megaton of Oil Equivalent
    MegaTOE: Qudt.unitFromLocalname("MegaTOE"),
    // Joule per Cubic Meter Kelvin
    J__PER__M3__K: Qudt.unitFromLocalname("J-PER-M3-K"),
    // Degree Fahrenheit per Hour
    DEG_F__PER__HR: Qudt.unitFromLocalname("DEG_F-PER-HR"),
    // Newton Per Millimetre
    N__PER__MilliM: Qudt.unitFromLocalname("N-PER-MilliM"),
    // Millimole Per Kilogram
    MilliMOL__PER__KiloGM: Qudt.unitFromLocalname("MilliMOL-PER-KiloGM"),
    // SameDay
    SameDay: Qudt.unitFromLocalname("SameDay"),
    // Pound Sterling
    PoundSterling: Qudt.unitFromLocalname("PoundSterling"),
    // nanosecond
    NanoSEC: Qudt.unitFromLocalname("NanoSEC"),
    // Square Centimetre Minute
    CentiM2__MIN: Qudt.unitFromLocalname("CentiM2-MIN"),
    // Pound Mass (avoirdupois) Square Inch
    LB__IN2: Qudt.unitFromLocalname("LB-IN2"),
    // Volt Ampere Hour
    V__A__HR: Qudt.unitFromLocalname("V-A-HR"),
    // Decibars per year
    DeciBAR__PER__YR: Qudt.unitFromLocalname("DeciBAR-PER-YR"),
    // Milliwatts per square metre per nanometre per steradian
    MilliW__PER__M2__NanoM__SR: Qudt.unitFromLocalname("MilliW-PER-M2-NanoM-SR"),
    // Kilocalorie per Gram
    KiloCAL__PER__GM: Qudt.unitFromLocalname("KiloCAL-PER-GM"),
    // Decibel Referred to 1mw
    DeciB_M: Qudt.unitFromLocalname("DeciB_M"),
    // Nanomoles per micromole
    NanoMOL__PER__MicroMOL: Qudt.unitFromLocalname("NanoMOL-PER-MicroMOL"),
    // Hectare
    HA: Qudt.unitFromLocalname("HA"),
    // Litres per micromole
    L__PER__MicroMOL: Qudt.unitFromLocalname("L-PER-MicroMOL"),
    // Croatian Kuna
    CroatianKuna: Qudt.unitFromLocalname("CroatianKuna"),
    // East Caribbean Dollar
    EastCaribbeanDollar: Qudt.unitFromLocalname("EastCaribbeanDollar"),
    // Short Ton (us) Per Day
    TON_US__PER__DAY: Qudt.unitFromLocalname("TON_US-PER-DAY"),
    // Pascal Cubic Metre Per Second
    PA__M3__PER__SEC: Qudt.unitFromLocalname("PA-M3-PER-SEC"),
    // Gill (US)
    GI_US: Qudt.unitFromLocalname("GI_US"),
    // South Korean Won
    SouthKoreanWon: Qudt.unitFromLocalname("SouthKoreanWon"),
    // Kilogram Force Per Square Millimetre
    KiloGM_F__PER__MilliM2: Qudt.unitFromLocalname("KiloGM_F-PER-MilliM2"),
    // Centimetre of Water
    CM_H2O: Qudt.unitFromLocalname("CM_H2O"),
    // Kilo Electron Volt
    KiloEV: Qudt.unitFromLocalname("KiloEV"),
    // Number per square centimetre per thousand years
    NUM__PER__CentiM__KiloYR: Qudt.unitFromLocalname("NUM-PER-CentiM-KiloYR"),
    // Kelvin per Tesla
    K__PER__T: Qudt.unitFromLocalname("K-PER-T"),
    // British Thermal Unit (thermochemical) Foot Per Hour Square Foot degree Fahrenheit
    BTU_TH__FT__PER__HR__FT2__DEG_F: Qudt.unitFromLocalname("BTU_TH-FT-PER-HR-FT2-DEG_F"),
    // Number per square metre
    NUM__PER__M2: Qudt.unitFromLocalname("NUM-PER-M2"),
    // grams Nitrogen per square meter per day
    GM_Nitrogen__PER__M2__DAY: Qudt.unitFromLocalname("GM_Nitrogen-PER-M2-DAY"),
    // ArcSecond
    ARCSEC: Qudt.unitFromLocalname("ARCSEC"),
    // Square Millimeter Per Second
    MilliM2__PER__SEC: Qudt.unitFromLocalname("MilliM2-PER-SEC"),
    // Watthour per Cubic meter
    W__HR__PER__M3: Qudt.unitFromLocalname("W-HR-PER-M3"),
    // Hundredweight (UK)
    Hundredweight_UK: Qudt.unitFromLocalname("Hundredweight_UK"),
    // Dobra
    Dobra: Qudt.unitFromLocalname("Dobra"),
    // Abampere
    A_Ab: Qudt.unitFromLocalname("A_Ab"),
    // Mole per Cubic Metre
    MOL__PER__M3: Qudt.unitFromLocalname("MOL-PER-M3"),
    // Russian Ruble
    RussianRuble: Qudt.unitFromLocalname("RussianRuble"),
    // Moles per square metre per second
    MOL__PER__M2__SEC: Qudt.unitFromLocalname("MOL-PER-M2-SEC"),
    // Moles per square metre per second per steradian
    MOL__PER__M2__SEC__SR: Qudt.unitFromLocalname("MOL-PER-M2-SEC-SR"),
    // T-M
    T__M: Qudt.unitFromLocalname("T-M"),
    // Degrees Celsius kilogram per square metre
    DEG_C__KiloGM__PER__M2: Qudt.unitFromLocalname("DEG_C-KiloGM-PER-M2"),
    // Quart (UK Liquid) Per Minute
    QT_UK__PER__MIN: Qudt.unitFromLocalname("QT_UK-PER-MIN"),
    // Nanomoles per kilogram
    NanoMOL__PER__KiloGM: Qudt.unitFromLocalname("NanoMOL-PER-KiloGM"),
    // Millibecquerels per litre
    MilliBQ__PER__L: Qudt.unitFromLocalname("MilliBQ-PER-L"),
    // Erg Second
    ERG__SEC: Qudt.unitFromLocalname("ERG-SEC"),
    // Gram Per Square Meter
    GM__PER__M2: Qudt.unitFromLocalname("GM-PER-M2"),
    // Stone (UK)
    Stone_UK: Qudt.unitFromLocalname("Stone_UK"),
    // Microlitre
    MicroL: Qudt.unitFromLocalname("MicroL"),
    // PSI
    PSI: Qudt.unitFromLocalname("PSI"),
    // Electron Volt per Tesla
    EV__PER__T: Qudt.unitFromLocalname("EV-PER-T"),
    // Gram Per Square Centimetre
    GM__PER__CentiM2: Qudt.unitFromLocalname("GM-PER-CentiM2"),
    // Reciprocal Tesla Metre
    PER__T__M: Qudt.unitFromLocalname("PER-T-M"),
    // Bel
    B: Qudt.unitFromLocalname("B"),
    // Picowatts per square centimetre per litre
    PicoW__PER__CentiM2__L: Qudt.unitFromLocalname("PicoW-PER-CentiM2-L"),
    // Tablespoon
    TBSP: Qudt.unitFromLocalname("TBSP"),
    // Parsec
    PARSEC: Qudt.unitFromLocalname("PARSEC"),
    // Milligrams per square metre per second
    MilliGM__PER__M2__SEC: Qudt.unitFromLocalname("MilliGM-PER-M2-SEC"),
    // Centilitre
    CentiL: Qudt.unitFromLocalname("CentiL"),
    // Kilogram Per Kilomol
    KiloGM__PER__KiloMOL: Qudt.unitFromLocalname("KiloGM-PER-KiloMOL"),
    // Calorie (thermochemical) Per Gram Degree Celsius
    CAL_TH__PER__GM__DEG_C: Qudt.unitFromLocalname("CAL_TH-PER-GM-DEG_C"),
    // astronomical-unit
    AU: Qudt.unitFromLocalname("AU"),
    // Barrel (UK Petroleum)
    BBL_UK_PET: Qudt.unitFromLocalname("BBL_UK_PET"),
    // Ampere Turn per Inch
    AT__PER__IN: Qudt.unitFromLocalname("AT-PER-IN"),
    // Kilosiemens Per Metre
    KiloS__PER__M: Qudt.unitFromLocalname("KiloS-PER-M"),
    // Ampere Turn
    AT: Qudt.unitFromLocalname("AT"),
    // Bar Cubic Meter Per Second
    BAR__M3__PER__SEC: Qudt.unitFromLocalname("BAR-M3-PER-SEC"),
    // Barad
    BARAD: Qudt.unitFromLocalname("BARAD"),
    // CentiN
    CentiN: Qudt.unitFromLocalname("CentiN"),
    // Guinea Franc
    GuineaFranc: Qudt.unitFromLocalname("GuineaFranc"),
    // Milligal
    MilliGAL: Qudt.unitFromLocalname("MilliGAL"),
    // Joule per Kilogram Kelvin per Pascal
    J__PER__KiloGM__K__PA: Qudt.unitFromLocalname("J-PER-KiloGM-K-PA"),
    // Unified Atomic Mass Unit
    U: Qudt.unitFromLocalname("U"),
    // Degree Celsius per Hour
    DEG_C__PER__HR: Qudt.unitFromLocalname("DEG_C-PER-HR"),
    // Cubic Centimeter Per Second
    CentiM3__PER__SEC: Qudt.unitFromLocalname("CentiM3-PER-SEC"),
    // Kilocalorie Per Second
    KiloCAL__PER__SEC: Qudt.unitFromLocalname("KiloCAL-PER-SEC"),
    // Costa Rican Colon
    CostaRicanColon: Qudt.unitFromLocalname("CostaRicanColon"),
    // Meganewton
    MegaN: Qudt.unitFromLocalname("MegaN"),
    // Henry Per Ohm
    H__PER__OHM: Qudt.unitFromLocalname("H-PER-OHM"),
    // Volt Per Centimetre
    V__PER__CentiM: Qudt.unitFromLocalname("V-PER-CentiM"),
    // Megaohm
    MegaOHM: Qudt.unitFromLocalname("MegaOHM"),
    // Megabit per Second
    MegaBIT__PER__SEC: Qudt.unitFromLocalname("MegaBIT-PER-SEC"),
    // Watt per Square Foot
    W__PER__FT2: Qudt.unitFromLocalname("W-PER-FT2"),
    // Long Ton (UK) Per Cubic Yard
    TON_UK__PER__YD3: Qudt.unitFromLocalname("TON_UK-PER-YD3"),
    // Joule per Kilogram Kelvin Cubic Metre
    J__PER__KiloGM__K__M3: Qudt.unitFromLocalname("J-PER-KiloGM-K-M3"),
    // Ampere Per Square Centimetre
    A__PER__CentiM2: Qudt.unitFromLocalname("A-PER-CentiM2"),
    // Gray per Second
    GRAY__PER__SEC: Qudt.unitFromLocalname("GRAY-PER-SEC"),
    // Ampere Hour
    A__HR: Qudt.unitFromLocalname("A-HR"),
    // Bar Per Bar
    BAR__PER__BAR: Qudt.unitFromLocalname("BAR-PER-BAR"),
    // Bit per Second
    BIT__PER__SEC: Qudt.unitFromLocalname("BIT-PER-SEC"),
    // British Thermal Unit (mean)
    BTU_MEAN: Qudt.unitFromLocalname("BTU_MEAN"),
    // Hertz Meter
    HZ__M: Qudt.unitFromLocalname("HZ-M"),
    // Metres to the power four per second
    M4__PER__SEC: Qudt.unitFromLocalname("M4-PER-SEC"),
    // Sudanese Pound
    SudanesePound: Qudt.unitFromLocalname("SudanesePound"),
    // Gilbert
    GI: Qudt.unitFromLocalname("GI"),
    // Newton Square Metre Per Square Kilogram
    N__M2__PER__KiloGM2: Qudt.unitFromLocalname("N-M2-PER-KiloGM2"),
    // Micrograms per gram
    MicroGM__PER__GM: Qudt.unitFromLocalname("MicroGM-PER-GM"),
    // Millihenry
    MilliH: Qudt.unitFromLocalname("MilliH"),
    // Electron Volt per Kelvin
    EV__PER__K: Qudt.unitFromLocalname("EV-PER-K"),
    // Nanomoles per micromole per day
    NanoMOL__PER__MicroMOL__DAY: Qudt.unitFromLocalname("NanoMOL-PER-MicroMOL-DAY"),
    // NanoCoulomb
    NanoC: Qudt.unitFromLocalname("NanoC"),
    // Barrel (US Petroleum) Per Hour
    BBL_US_PET__PER__HR: Qudt.unitFromLocalname("BBL_US_PET-PER-HR"),
    // Long Hundred Weight
    CWT_LONG: Qudt.unitFromLocalname("CWT_LONG"),
    // Deaths per Million individuals per year
    DEATHS__PER__1000000I__YR: Qudt.unitFromLocalname("DEATHS-PER-1000000I-YR"),
    // Candlepower
    CP: Qudt.unitFromLocalname("CP"),
    // Nautical Mile
    MI_N: Qudt.unitFromLocalname("MI_N"),
    // Oersted Centimetre
    OERSTED__CentiM: Qudt.unitFromLocalname("OERSTED-CentiM"),
    // CFP franc
    XPF: Qudt.unitFromLocalname("XPF"),
    // Abhenry
    H_Ab: Qudt.unitFromLocalname("H_Ab"),
    // Microcoulomb Per Cubic Metre
    MicroC__PER__M3: Qudt.unitFromLocalname("MicroC-PER-M3"),
    // Degree Fahrenheit Hour
    DEG_F__HR: Qudt.unitFromLocalname("DEG_F-HR"),
    // ExaByte
    ExaBYTE: Qudt.unitFromLocalname("ExaBYTE"),
    // Horsepower Electric
    HP__PER__V: Qudt.unitFromLocalname("HP-PER-V"),
    // Iceland Krona
    IcelandKrona: Qudt.unitFromLocalname("IcelandKrona"),
    // NanoS
    NanoS: Qudt.unitFromLocalname("NanoS"),
    // PicoMOL
    PicoMOL: Qudt.unitFromLocalname("PicoMOL"),
    // Picoamps per micromole per litre
    PicoA__PER__MicroMOL__L: Qudt.unitFromLocalname("PicoA-PER-MicroMOL-L"),
    // Newton Second per Meter
    N__SEC__PER__M: Qudt.unitFromLocalname("N-SEC-PER-M"),
    // Degree Celsius Per Kelvin
    DEG_C__PER__K: Qudt.unitFromLocalname("DEG_C-PER-K"),
    // Micromoles per gram
    MicroMOL__PER__GM: Qudt.unitFromLocalname("MicroMOL-PER-GM"),
    // Rial Omani
    OmaniRial: Qudt.unitFromLocalname("OmaniRial"),
    // Curie
    Ci: Qudt.unitFromLocalname("Ci"),
    // Kelvin
    K: Qudt.unitFromLocalname("K"),
    // V_Stat-CentiM
    V_Stat__CentiM: Qudt.unitFromLocalname("V_Stat-CentiM"),
    // Volt Ampere Reactive
    V__A_Reactive: Qudt.unitFromLocalname("V-A_Reactive"),
    // Megahertz Metre
    MegaHZ__M: Qudt.unitFromLocalname("MegaHZ-M"),
    // Ounce (US Fluid) Per Day
    OZ_VOL_US__PER__DAY: Qudt.unitFromLocalname("OZ_VOL_US-PER-DAY"),
    // Millimetre Per Second
    MilliM__PER__SEC: Qudt.unitFromLocalname("MilliM-PER-SEC"),
    // Decilitre
    DeciL: Qudt.unitFromLocalname("DeciL"),
    // Ounce (UK Fluid) Per Hour
    OZ_VOL_UK__PER__HR: Qudt.unitFromLocalname("OZ_VOL_UK-PER-HR"),
    // Quetzal
    Quetzal: Qudt.unitFromLocalname("Quetzal"),
    // Ampere per Metre
    A__PER__M: Qudt.unitFromLocalname("A-PER-M"),
    // Reciprocal Weber
    PER__WB: Qudt.unitFromLocalname("PER-WB"),
    // W-M2-PER-SR
    W__M2__PER__SR: Qudt.unitFromLocalname("W-M2-PER-SR"),
    // Reciprocal Year
    PER__YR: Qudt.unitFromLocalname("PER-YR"),
    // Siemens Per Centimetre
    S__PER__CentiM: Qudt.unitFromLocalname("S-PER-CentiM"),
    // Cubic Decimetre Per Cubic Metre
    DeciM3__PER__M3: Qudt.unitFromLocalname("DeciM3-PER-M3"),
    // New Turkish Lira
    NewTurkishLira: Qudt.unitFromLocalname("NewTurkishLira"),
    // BTU per Square Foot Hour Degree Fahrenheit
    BTU_IT__PER__FT2__HR__DEG_F: Qudt.unitFromLocalname("BTU_IT-PER-FT2-HR-DEG_F"),
    // Cubic Metre per Second
    M3__PER__SEC: Qudt.unitFromLocalname("M3-PER-SEC"),
    // Gallon (US) Per Hour
    GAL_US__PER__HR: Qudt.unitFromLocalname("GAL_US-PER-HR"),
    // British Thermal Unit (international Table) Inch Per Hour Square Foot degree Fahrenheit
    BTU_IT__IN__PER__HR__FT2__DEG_F: Qudt.unitFromLocalname("BTU_IT-IN-PER-HR-FT2-DEG_F"),
    // W-M2
    W__M2: Qudt.unitFromLocalname("W-M2"),
    // Second per Radian Cubic Meter
    SEC__PER__RAD__M3: Qudt.unitFromLocalname("SEC-PER-RAD-M3"),
    // Pound Degree Fahrenheit
    LB__DEG_F: Qudt.unitFromLocalname("LB-DEG_F"),
    // Kyat
    Kyat: Qudt.unitFromLocalname("Kyat"),
    // Square degree
    DEG2: Qudt.unitFromLocalname("DEG2"),
    // Square Metre per Joule
    M2__PER__J: Qudt.unitFromLocalname("M2-PER-J"),
    // MilliSiemens per metre
    MilliS__PER__M: Qudt.unitFromLocalname("MilliS-PER-M"),
    // Volt
    V: Qudt.unitFromLocalname("V"),
    // Gamma
    Gamma: Qudt.unitFromLocalname("Gamma"),
    // Millimoles per cubic metre
    MilliMOL__PER__M3: Qudt.unitFromLocalname("MilliMOL-PER-M3"),
    // Comoro Franc
    ComoroFranc: Qudt.unitFromLocalname("ComoroFranc"),
    // Decapascal
    DecaPA: Qudt.unitFromLocalname("DecaPA"),
    // Nanohenry
    NanoH: Qudt.unitFromLocalname("NanoH"),
    // Kilopond
    KiloP: Qudt.unitFromLocalname("KiloP"),
    // AttoCoulomb
    AttoC: Qudt.unitFromLocalname("AttoC"),
    // Watt per Square Metre Pascal
    W__PER__M2__PA: Qudt.unitFromLocalname("W-PER-M2-PA"),
    // Newton seconds per radian
    N__SEC__PER__RAD: Qudt.unitFromLocalname("N-SEC-PER-RAD"),
    // Foot
    FT: Qudt.unitFromLocalname("FT"),
    // Volt per Square Meter
    V__PER__M2: Qudt.unitFromLocalname("V-PER-M2"),
    // Megajoule Per Second
    MegaJ__PER__SEC: Qudt.unitFromLocalname("MegaJ-PER-SEC"),
    // Imperial Ounce Force
    OZ_F: Qudt.unitFromLocalname("OZ_F"),
    // Samoan Tala
    SamoanTala: Qudt.unitFromLocalname("SamoanTala"),
    // Quart (UK Liquid) Per Second
    QT_UK__PER__SEC: Qudt.unitFromLocalname("QT_UK-PER-SEC"),
    // Abcoulomb
    C_Ab: Qudt.unitFromLocalname("C_Ab"),
    // Pound (avoirdupois) Per Square Inch
    LB__PER__IN2: Qudt.unitFromLocalname("LB-PER-IN2"),
    // Ton (US) Per Hour
    TON_US__PER__HR: Qudt.unitFromLocalname("TON_US-PER-HR"),
    // Nanometer
    NanoM: Qudt.unitFromLocalname("NanoM"),
    // Gram Per Minute
    GM__PER__MIN: Qudt.unitFromLocalname("GM-PER-MIN"),
    // Decibar
    DeciBAR: Qudt.unitFromLocalname("DeciBAR"),
    // Picomoles per cubic metre
    PicoMOL__PER__M3: Qudt.unitFromLocalname("PicoMOL-PER-M3"),
    // Planck Time
    PlanckTime: Qudt.unitFromLocalname("PlanckTime"),
    // MicroGray
    MicroGRAY: Qudt.unitFromLocalname("MicroGRAY"),
    // Degree Balling
    DEGREE_BALLING: Qudt.unitFromLocalname("DEGREE_BALLING"),
    // Short Ton per Cubic Yard
    TON_SHORT__PER__YD3: Qudt.unitFromLocalname("TON_SHORT-PER-YD3"),
    // Reciprocal Cubic Millimeter
    PER__MilliM3: Qudt.unitFromLocalname("PER-MilliM3"),
    // French Gauge
    GAUGE_FR: Qudt.unitFromLocalname("GAUGE_FR"),
    // microsecond
    MicroSEC: Qudt.unitFromLocalname("MicroSEC"),
    // Newton Per Ampere
    N__PER__A: Qudt.unitFromLocalname("N-PER-A"),
    // Joule per Mole
    J__PER__MOL: Qudt.unitFromLocalname("J-PER-MOL"),
    // Kilogram Square Second
    KiloGM__SEC2: Qudt.unitFromLocalname("KiloGM-SEC2"),
    // Gigahertz Metre
    GigaHZ__M: Qudt.unitFromLocalname("GigaHZ-M"),
    // Tanzanian Shilling
    TanzanianShilling: Qudt.unitFromLocalname("TanzanianShilling"),
    // Pound Force per Inch
    LB_F__PER__IN: Qudt.unitFromLocalname("LB_F-PER-IN"),
    // Centimetre Of Mercury
    CentiM_HG: Qudt.unitFromLocalname("CentiM_HG"),
    // Kilovolt Ampere Reactive Hour
    KiloV__A_Reactive__HR: Qudt.unitFromLocalname("KiloV-A_Reactive-HR"),
    // Parts per million
    PPM: Qudt.unitFromLocalname("PPM"),
    // Degree Rankine per Second
    DEG_R__PER__SEC: Qudt.unitFromLocalname("DEG_R-PER-SEC"),
    // Gill (UK) Per Day
    GI_UK__PER__DAY: Qudt.unitFromLocalname("GI_UK-PER-DAY"),
    // Weber Per Millimetre
    WB__PER__MilliM: Qudt.unitFromLocalname("WB-PER-MilliM"),
    // Millilitre Per Minute
    MilliL__PER__MIN: Qudt.unitFromLocalname("MilliL-PER-MIN"),
    // Decimetre
    DeciM: Qudt.unitFromLocalname("DeciM"),
    // Square Kilograms per square second
    KiloGM2__PER__SEC2: Qudt.unitFromLocalname("KiloGM2-PER-SEC2"),
    // Ngultrum
    Ngultrum: Qudt.unitFromLocalname("Ngultrum"),
    // TebiByte
    TebiBYTE: Qudt.unitFromLocalname("TebiBYTE"),
    // Pascal metres per second
    PA__M__PER__SEC: Qudt.unitFromLocalname("PA-M-PER-SEC"),
    // Knot per Second
    KN__PER__SEC: Qudt.unitFromLocalname("KN-PER-SEC"),
    // Coulomb per Kilogram
    C__PER__KiloGM: Qudt.unitFromLocalname("C-PER-KiloGM"),
    // Micromoles per litre
    MicroMOL__PER__L: Qudt.unitFromLocalname("MicroMOL-PER-L"),
    // Radian per Metre
    RAD__PER__M: Qudt.unitFromLocalname("RAD-PER-M"),
    // Mole Degree Celsius
    MOL__DEG_C: Qudt.unitFromLocalname("MOL-DEG_C"),
    // Pound per Inch
    LB__PER__IN: Qudt.unitFromLocalname("LB-PER-IN"),
    // Kina
    Kina: Qudt.unitFromLocalname("Kina"),
    // Milligrams per cubic metre per hour
    MilliGM__PER__M3__HR: Qudt.unitFromLocalname("MilliGM-PER-M3-HR"),
    // Pint (UK)
    PINT_UK: Qudt.unitFromLocalname("PINT_UK"),
    // Gram Millimeter
    GM__MilliM: Qudt.unitFromLocalname("GM-MilliM"),
    // Kilograms per square metre per second
    KiloGM__PER__M2__SEC: Qudt.unitFromLocalname("KiloGM-PER-M2-SEC"),
    // Oct
    OCT: Qudt.unitFromLocalname("OCT"),
    // Cubic Yard Per Hour
    YD3__PER__HR: Qudt.unitFromLocalname("YD3-PER-HR"),
    // Square metres per Hertz
    M2__PER__HZ: Qudt.unitFromLocalname("M2-PER-HZ"),
    // Newton Per Square Centimetre
    N__PER__CentiM2: Qudt.unitFromLocalname("N-PER-CentiM2"),
    // Bar
    BAR: Qudt.unitFromLocalname("BAR"),
    // Milligrams per cubic metre per day
    MilliGM__PER__M3__DAY: Qudt.unitFromLocalname("MilliGM-PER-M3-DAY"),
    // Milligram Per Hectare
    MilliGM__PER__HA: Qudt.unitFromLocalname("MilliGM-PER-HA"),
    // Volt per second
    V__PER__SEC: Qudt.unitFromLocalname("V-PER-SEC"),
    // Joules per kilogram per Kelvin
    J__PER__KiloGM__K: Qudt.unitFromLocalname("J-PER-KiloGM-K"),
    // Foot Per Degree Fahrenheit
    FT__PER__DEG_F: Qudt.unitFromLocalname("FT-PER-DEG_F"),
    // Gallon (US Liquid) Per Second
    GAL_US__PER__SEC: Qudt.unitFromLocalname("GAL_US-PER-SEC"),
    // MDOLLAR
    MDOLLAR: Qudt.unitFromLocalname("MDOLLAR"),
    // Kilovolt
    KiloV: Qudt.unitFromLocalname("KiloV"),
    // BTU per Second Square Foot
    BTU_IT__PER__SEC__FT2: Qudt.unitFromLocalname("BTU_IT-PER-SEC-FT2"),
    // Quad
    QUAD: Qudt.unitFromLocalname("QUAD"),
    // Millimetre Per Year
    MilliM__PER__YR: Qudt.unitFromLocalname("MilliM-PER-YR"),
    // UIC franc (special settlement currency)
    UICFranc: Qudt.unitFromLocalname("UICFranc"),
    // Square Meter per Kilogram
    M2__PER__KiloGM: Qudt.unitFromLocalname("M2-PER-KiloGM"),
    // Terahertz
    TeraHZ: Qudt.unitFromLocalname("TeraHZ"),
    // Cubic Centimeter Per Day
    CentiM3__PER__DAY: Qudt.unitFromLocalname("CentiM3-PER-DAY"),
    // Imperial Mass Ounce per Gallon
    OZ__PER__GAL: Qudt.unitFromLocalname("OZ-PER-GAL"),
    // Ohm
    OHM: Qudt.unitFromLocalname("OHM"),
    // Watt per Square Inch
    W__PER__IN2: Qudt.unitFromLocalname("W-PER-IN2"),
    // Watthour
    W__HR: Qudt.unitFromLocalname("W-HR"),
    // picoampere
    PicoA: Qudt.unitFromLocalname("PicoA"),
    // Centimeter
    CentiM: Qudt.unitFromLocalname("CentiM"),
    // Month
    MO: Qudt.unitFromLocalname("MO"),
    // International Unit per milligram
    IU__PER__MilliGM: Qudt.unitFromLocalname("IU-PER-MilliGM"),
    // Steradian
    SR: Qudt.unitFromLocalname("SR"),
    // Square Meter Kelvin
    M2__K: Qudt.unitFromLocalname("M2-K"),
    // Foot Lambert
    FT__LA: Qudt.unitFromLocalname("FT-LA"),
    // Volt Per Inch
    V__PER__IN: Qudt.unitFromLocalname("V-PER-IN"),
    // Parts per thousand per hour
    PPTH__PER__HR: Qudt.unitFromLocalname("PPTH-PER-HR"),
    // Watt per Steradian
    W__PER__SR: Qudt.unitFromLocalname("W-PER-SR"),
    // Milli ArcSecond
    MilliARCSEC: Qudt.unitFromLocalname("MilliARCSEC"),
    // Canadian Dollar
    CAD: Qudt.unitFromLocalname("CAD"),
    // Bushel (UK) Per Day
    BU_UK__PER__DAY: Qudt.unitFromLocalname("BU_UK-PER-DAY"),
    // Magnetic Susceptibility Unit
    SUSCEPTIBILITY_MAG: Qudt.unitFromLocalname("SUSCEPTIBILITY_MAG"),
    // Gram Per Cubic Centimeter
    GM__PER__CentiM3: Qudt.unitFromLocalname("GM-PER-CentiM3"),
    // Megavolt Ampere Reactive
    MegaV__A_Reactive: Qudt.unitFromLocalname("MegaV-A_Reactive"),
    // Megasiemens Per Meter
    MegaS__PER__M: Qudt.unitFromLocalname("MegaS-PER-M"),
    // Meter Kilogram
    M__KiloGM: Qudt.unitFromLocalname("M-KiloGM"),
    // Nanohenry Per Meter
    NanoH__PER__M: Qudt.unitFromLocalname("NanoH-PER-M"),
    // Million US Dollars per Year
    MillionUSD__PER__YR: Qudt.unitFromLocalname("MillionUSD-PER-YR"),
    // Stilb
    STILB: Qudt.unitFromLocalname("STILB"),
    // Degrees Kelvin per metre
    K__PER__M: Qudt.unitFromLocalname("K-PER-M"),
    // Trinidad and Tobago Dollar
    TrinidadAndTobagoDollar: Qudt.unitFromLocalname("TrinidadAndTobagoDollar"),
    // Reciprocal Day
    PER__DAY: Qudt.unitFromLocalname("PER-DAY"),
    // Synodic month
    MO_Synodic: Qudt.unitFromLocalname("MO_Synodic"),
    // candela per square metre
    CD__PER__M2: Qudt.unitFromLocalname("CD-PER-M2"),
    // Kilogram per Meter
    KiloGM__PER__M: Qudt.unitFromLocalname("KiloGM-PER-M"),
    // Newton Metre Squared per Ampere
    N__M2__PER__A: Qudt.unitFromLocalname("N-M2-PER-A"),
    // Volt Per Microsecond
    V__PER__MicroSEC: Qudt.unitFromLocalname("V-PER-MicroSEC"),
    // Erg per Square Centimetre Second
    ERG__PER__CentiM2__SEC: Qudt.unitFromLocalname("ERG-PER-CentiM2-SEC"),
    // Year
    YR: Qudt.unitFromLocalname("YR"),
    // Psi Per Psi
    PSI__PER__PSI: Qudt.unitFromLocalname("PSI-PER-PSI"),
    // Mexican Unidad de Inversion (UDI) (Funds code)
    MexicanUnidadDeInversion: Qudt.unitFromLocalname("MexicanUnidadDeInversion"),
    // Nanograms
    NanoGM: Qudt.unitFromLocalname("NanoGM"),
    // Square metres per square Hertz
    M2__PER__HZ2: Qudt.unitFromLocalname("M2-PER-HZ2"),
    // Hertz
    HZ: Qudt.unitFromLocalname("HZ"),
    // Tugrik
    Tugrik: Qudt.unitFromLocalname("Tugrik"),
    // Kilograms per metre per second
    KiloGM__PER__M__SEC: Qudt.unitFromLocalname("KiloGM-PER-M-SEC"),
    // Decalitre
    DecaL: Qudt.unitFromLocalname("DecaL"),
    // MilliBQ
    MilliBQ: Qudt.unitFromLocalname("MilliBQ"),
    // Centinewton Meter
    CentiN__M: Qudt.unitFromLocalname("CentiN-M"),
    // Cubic Centimeter Per Hour
    CentiM3__PER__HR: Qudt.unitFromLocalname("CentiM3-PER-HR"),
    // Exajoule
    ExaJ: Qudt.unitFromLocalname("ExaJ"),
    // Kwanza
    Kwanza: Qudt.unitFromLocalname("Kwanza"),
    // Pascal metres
    PA__M: Qudt.unitFromLocalname("PA-M"),
    // DeciCoulomb
    DeciC: Qudt.unitFromLocalname("DeciC"),
    // Kelvin Meter Per Watt
    K__M__PER__W: Qudt.unitFromLocalname("K-M-PER-W"),
    // Pascal Per Metre
    PA__PER__M: Qudt.unitFromLocalname("PA-PER-M"),
    // Microsiemens
    MicroS: Qudt.unitFromLocalname("MicroS"),
    // PicoPA
    PicoPA: Qudt.unitFromLocalname("PicoPA"),
    // Barrel (UK Petroleum) Per Minute
    BBL_UK_PET__PER__MIN: Qudt.unitFromLocalname("BBL_UK_PET-PER-MIN"),
    // Pica
    PCA: Qudt.unitFromLocalname("PCA"),
    // Erlang
    ERLANG: Qudt.unitFromLocalname("ERLANG"),
    // Millisievert
    MilliSV: Qudt.unitFromLocalname("MilliSV"),
    // Microsiemens Per Metre
    MicroS__PER__M: Qudt.unitFromLocalname("MicroS-PER-M"),
    // Relative Electromagnetic Permeability
    PERMEABILITY_EM_REL: Qudt.unitFromLocalname("PERMEABILITY_EM_REL"),
    // Statsiemens
    S_Stat: Qudt.unitFromLocalname("S_Stat"),
    // Rufiyaa
    Rufiyaa: Qudt.unitFromLocalname("Rufiyaa"),
    // British Thermal Unit (international Table) Inch Per Hour Square Foot Degree Fahrenheit
    BTU_IT__IN__PER__FT2__HR__DEG_F: Qudt.unitFromLocalname("BTU_IT-IN-PER-FT2-HR-DEG_F"),
    // Kilojoule Per Kelvin
    KiloJ__PER__K: Qudt.unitFromLocalname("KiloJ-PER-K"),
    // Tonne Per Hour
    TON_Metric__PER__HR: Qudt.unitFromLocalname("TON_Metric-PER-HR"),
    // Pint (US Liquid) Per Hour
    PINT_US__PER__HR: Qudt.unitFromLocalname("PINT_US-PER-HR"),
    // Kilogram Per Day
    KiloGM__PER__DAY: Qudt.unitFromLocalname("KiloGM-PER-DAY"),
    // Coulomb Per Kilogram Second
    C__PER__KiloGM__SEC: Qudt.unitFromLocalname("C-PER-KiloGM-SEC"),
    // Reciprocal square second
    PER__SEC2: Qudt.unitFromLocalname("PER-SEC2"),
    // Cubic Foot per Second
    FT3__PER__SEC: Qudt.unitFromLocalname("FT3-PER-SEC"),
    // Abampere Square centimetre
    A_Ab__CentiM2: Qudt.unitFromLocalname("A_Ab-CentiM2"),
    // Pound per Foot Second
    LB__PER__FT__SEC: Qudt.unitFromLocalname("LB-PER-FT-SEC"),
    // MilliRAD_R
    MilliRAD_R: Qudt.unitFromLocalname("MilliRAD_R"),
    // lumen
    LM: Qudt.unitFromLocalname("LM"),
    // Millimoles per mole
    MilliMOL__PER__MOL: Qudt.unitFromLocalname("MilliMOL-PER-MOL"),
    // Newton second per Cubic Meter
    N__SEC__PER__M3: Qudt.unitFromLocalname("N-SEC-PER-M3"),
    // Weber Metre
    WB__M: Qudt.unitFromLocalname("WB-M"),
    // Megavolt
    MegaV: Qudt.unitFromLocalname("MegaV"),
    // International Mile
    MI: Qudt.unitFromLocalname("MI"),
    // PetaByte
    PetaBYTE: Qudt.unitFromLocalname("PetaBYTE"),
    // Statvolt
    V_Stat: Qudt.unitFromLocalname("V_Stat"),
    // Euro
    Euro: Qudt.unitFromLocalname("Euro"),
    // Micromoles per square metre
    MicroMOL__PER__M2: Qudt.unitFromLocalname("MicroMOL-PER-M2"),
    // Millilitre Per Cubic Metre
    MilliL__PER__M3: Qudt.unitFromLocalname("MilliL-PER-M3"),
    // radian per second
    RAD__PER__SEC: Qudt.unitFromLocalname("RAD-PER-SEC"),
    // Barrel (US Petroleum) Per Second
    BBL_US_PET__PER__SEC: Qudt.unitFromLocalname("BBL_US_PET-PER-SEC"),
    // Common Year
    YR_Common: Qudt.unitFromLocalname("YR_Common"),
    // Dec
    DECADE: Qudt.unitFromLocalname("DECADE"),
    // Centimeter Per Kelvin
    CentiM__PER__K: Qudt.unitFromLocalname("CentiM-PER-K"),
    // Micromoles per kilogram
    MicroMOL__PER__KiloGM: Qudt.unitFromLocalname("MicroMOL-PER-KiloGM"),
    // Millivolt
    MilliV: Qudt.unitFromLocalname("MilliV"),
    // Square Metre per Second
    M2__PER__SEC: Qudt.unitFromLocalname("M2-PER-SEC"),
    // BTU Foot
    BTU_IT__FT: Qudt.unitFromLocalname("BTU_IT-FT"),
    // Square microns per millilitre
    MicroM__PER__MilliL: Qudt.unitFromLocalname("MicroM-PER-MilliL"),
    // Kilopascal
    KiloPA: Qudt.unitFromLocalname("KiloPA"),
    // Kilogram per Mol
    KiloGM__PER__MOL: Qudt.unitFromLocalname("KiloGM-PER-MOL"),
    // Microtesla
    MicroT: Qudt.unitFromLocalname("MicroT"),
    // British Thermal Unit (international Table) Per Second Square Foot degree Rankine
    BTU_IT__PER__SEC__FT2__DEG_R: Qudt.unitFromLocalname("BTU_IT-PER-SEC-FT2-DEG_R"),
    // Aruban Guilder
    AWG: Qudt.unitFromLocalname("AWG"),
    // Revolution per Hour
    REV__PER__HR: Qudt.unitFromLocalname("REV-PER-HR"),
    // square meters per hectare
    M2__PER__HA: Qudt.unitFromLocalname("M2-PER-HA"),
    // 1000000I
    _1000000I: Qudt.unitFromLocalname("1000000I"),
    // Number per square metre per day
    NUM__PER__M2__DAY: Qudt.unitFromLocalname("NUM-PER-M2-DAY"),
    // Hertz per Kelvin
    HZ__PER__K: Qudt.unitFromLocalname("HZ-PER-K"),
    // Reciprocal metre per nanometre per steradian
    PER__M__NanoM__SR: Qudt.unitFromLocalname("PER-M-NanoM-SR"),
    // Square Metre
    M2: Qudt.unitFromLocalname("M2"),
    // Unidades de formento (Funds code)
    UnidadesDeFormento: Qudt.unitFromLocalname("UnidadesDeFormento"),
    // Metre per Second
    M__PER__SEC: Qudt.unitFromLocalname("M-PER-SEC"),
    // Kelvin second
    K__SEC: Qudt.unitFromLocalname("K-SEC"),
    // Foot Of Mercury
    FT_HG: Qudt.unitFromLocalname("FT_HG"),
    // Pascal per Minute
    PA__PER__MIN: Qudt.unitFromLocalname("PA-PER-MIN"),
    // Square Foot Hour Degree Fahrenheit per BTU
    FT2__HR__DEG_F__PER__BTU_IT: Qudt.unitFromLocalname("FT2-HR-DEG_F-PER-BTU_IT"),
    // Millidegree Celsius
    MilliDEG_C: Qudt.unitFromLocalname("MilliDEG_C"),
    // Hartree
    E_h: Qudt.unitFromLocalname("E_h"),
    // Millimole
    MilliMOL: Qudt.unitFromLocalname("MilliMOL"),
    // Joule per Mole Kelvin
    J__PER__MOL__K: Qudt.unitFromLocalname("J-PER-MOL-K"),
    // Metres per year
    M__PER__YR: Qudt.unitFromLocalname("M-PER-YR"),
    // nanoampere
    NanoA: Qudt.unitFromLocalname("NanoA"),
    // Gram Per Kilometre
    GM__PER__KiloM: Qudt.unitFromLocalname("GM-PER-KiloM"),
    // Tonne Per Cubic Metre
    TON_Metric__PER__M3: Qudt.unitFromLocalname("TON_Metric-PER-M3"),
    // Square metres per square second
    M2__PER__SEC2: Qudt.unitFromLocalname("M2-PER-SEC2"),
    // SAMPLE
    SAMPLE: Qudt.unitFromLocalname("SAMPLE"),
    // Cubic Centimetre Per Mole
    CentiM3__PER__MOL: Qudt.unitFromLocalname("CentiM3-PER-MOL"),
    // Micromoles per gram per second
    MicroMOL__PER__GM__SEC: Qudt.unitFromLocalname("MicroMOL-PER-GM-SEC"),
    // Rwanda Franc
    RwandaFranc: Qudt.unitFromLocalname("RwandaFranc"),
    // Degree Celsius
    DEG_C: Qudt.unitFromLocalname("DEG_C"),
    // Planck Volt
    PlanckVolt: Qudt.unitFromLocalname("PlanckVolt"),
    // Calorie (international Table) Per Gram Kelvin
    CAL_IT__PER__GM__K: Qudt.unitFromLocalname("CAL_IT-PER-GM-K"),
    // DeciS
    DeciS: Qudt.unitFromLocalname("DeciS"),
    // Megaampere
    MegaA: Qudt.unitFromLocalname("MegaA"),
    // Tenge
    Tenge: Qudt.unitFromLocalname("Tenge"),
    // Pula
    Pula: Qudt.unitFromLocalname("Pula"),
    // Kilo Electron Volt per Micrometre
    KiloEV__PER__MicroM: Qudt.unitFromLocalname("KiloEV-PER-MicroM"),
    // Revolution per Square Second
    REV__PER__SEC2: Qudt.unitFromLocalname("REV-PER-SEC2"),
    // Kilocoulomb Per Cubic Meter
    KiloC__PER__M3: Qudt.unitFromLocalname("KiloC-PER-M3"),
    // grams Carbon per square meter per day
    GM_Carbon__PER__M2__DAY: Qudt.unitFromLocalname("GM_Carbon-PER-M2-DAY"),
    // Square Coulomb Meter per Joule
    C2__M__PER__J: Qudt.unitFromLocalname("C2-M-PER-J"),
    // British Thermal Unit (Thermochemical Definition)
    BTU_TH: Qudt.unitFromLocalname("BTU_TH"),
    // MegaW
    MegaW: Qudt.unitFromLocalname("MegaW"),
    // Relative Permeability
    PERMEABILITY_REL: Qudt.unitFromLocalname("PERMEABILITY_REL"),
    // Newtons per cubic metre
    N__PER__M3: Qudt.unitFromLocalname("N-PER-M3"),
    // Reciprocal Metre
    PER__M: Qudt.unitFromLocalname("PER-M"),
    // Square Kelvin
    K2: Qudt.unitFromLocalname("K2"),
    // Newton metre per metre
    N__M__PER__M: Qudt.unitFromLocalname("N-M-PER-M"),
    // Megavolt Ampere
    MegaV__A: Qudt.unitFromLocalname("MegaV-A"),
    // Pound Force Second per Square Inch
    LB_F__SEC__PER__IN2: Qudt.unitFromLocalname("LB_F-SEC-PER-IN2"),
    // Degree Fahrenheit per Minute
    DEG_F__PER__MIN: Qudt.unitFromLocalname("DEG_F-PER-MIN"),
    // Nanobecquerels per litre
    NanoBQ__PER__L: Qudt.unitFromLocalname("NanoBQ-PER-L"),
    // milligrams per decilitre
    MilliGM__PER__DeciL: Qudt.unitFromLocalname("MilliGM-PER-DeciL"),
    // Picolitre
    PicoL: Qudt.unitFromLocalname("PicoL"),
    // Iranian Rial
    IranianRial: Qudt.unitFromLocalname("IranianRial"),
    // Convertible Marks
    ConvertibleMark: Qudt.unitFromLocalname("ConvertibleMark"),
    // Poundal per Square Foot
    PDL__PER__FT2: Qudt.unitFromLocalname("PDL-PER-FT2"),
    // Watt per Kelvin
    W__PER__K: Qudt.unitFromLocalname("W-PER-K"),
    // Kilocalorie (thermochemical) Per Hour
    KiloCAL_TH__PER__HR: Qudt.unitFromLocalname("KiloCAL_TH-PER-HR"),
    // decisiemens per metre
    DeciS__PER__M: Qudt.unitFromLocalname("DeciS-PER-M"),
    // Litre Per Second
    L__PER__SEC: Qudt.unitFromLocalname("L-PER-SEC"),
    // Picomoles per cubic metre per second
    PicoMOL__PER__M3__SEC: Qudt.unitFromLocalname("PicoMOL-PER-M3-SEC"),
    // Nephelometry Turbidity Unit
    NTU: Qudt.unitFromLocalname("NTU"),
    // Cup (US)
    CUP_US: Qudt.unitFromLocalname("CUP_US"),
    // United Arab Emirates dirham
    UAEDirham: Qudt.unitFromLocalname("UAEDirham"),
    // British Thermal Unit (TH) Per Pound
    BTU_TH__PER__LB: Qudt.unitFromLocalname("BTU_TH-PER-LB"),
    // Statmho
    MHO_Stat: Qudt.unitFromLocalname("MHO_Stat"),
    // Belize Dollar
    BelizeDollar: Qudt.unitFromLocalname("BelizeDollar"),
    // Radian Square Meter per Kilogram
    RAD__M2__PER__KiloGM: Qudt.unitFromLocalname("RAD-M2-PER-KiloGM"),
    // Square Meter per Kelvin
    M2__PER__K: Qudt.unitFromLocalname("M2-PER-K"),
    // Reciprocal Micrometre
    PER__MicroM: Qudt.unitFromLocalname("PER-MicroM"),
    // Reciprocal Cubic Yard
    PER__YD3: Qudt.unitFromLocalname("PER-YD3"),
    // Kiloweber Per Meter
    KiloWB__PER__M: Qudt.unitFromLocalname("KiloWB-PER-M"),
    // US Gallon per Minute
    GAL_US__PER__MIN: Qudt.unitFromLocalname("GAL_US-PER-MIN"),
    // Decilitre Per Gram
    DeciL__PER__GM: Qudt.unitFromLocalname("DeciL-PER-GM"),
    // Neper
    NP: Qudt.unitFromLocalname("NP"),
    // Zambian Kwacha
    ZambianKwacha: Qudt.unitFromLocalname("ZambianKwacha"),
    // Milliwatts per square centimetre per micrometre per steradian
    MilliW__PER__CentiM2__MicroM__SR: Qudt.unitFromLocalname("MilliW-PER-CentiM2-MicroM-SR"),
    // Degree Rankine per Minute
    DEG_R__PER__MIN: Qudt.unitFromLocalname("DEG_R-PER-MIN"),
    // Kilowatt hour per square metre
    KiloW__HR__PER__M2: Qudt.unitFromLocalname("KiloW-HR-PER-M2"),
    // Pascal per Hour
    PA__PER__HR: Qudt.unitFromLocalname("PA-PER-HR"),
    // Vietnamese ??ng
    VietnameseDong: Qudt.unitFromLocalname("VietnameseDong"),
    // Milliohm
    MilliOHM: Qudt.unitFromLocalname("MilliOHM"),
    // Kilomole
    KiloMOL: Qudt.unitFromLocalname("KiloMOL"),
    // THM_EEC
    THM_EEC: Qudt.unitFromLocalname("THM_EEC"),
    // Litre
    L: Qudt.unitFromLocalname("L"),
    // Foot Pound Force per Minute
    FT__LB_F__PER__MIN: Qudt.unitFromLocalname("FT-LB_F-PER-MIN"),
    // MegaS
    MegaS: Qudt.unitFromLocalname("MegaS"),
    // Pound Mass (avoirdupois) Inch
    LB__IN: Qudt.unitFromLocalname("LB-IN"),
    // Joule per Cubic Meter
    J__PER__M3: Qudt.unitFromLocalname("J-PER-M3"),
    // Torr
    TORR: Qudt.unitFromLocalname("TORR"),
    // Kilovolt Ampere Hour
    KiloV__A__HR: Qudt.unitFromLocalname("KiloV-A-HR"),
    // Centimetre Second Degree Celsius
    CentiM__SEC__DEG_C: Qudt.unitFromLocalname("CentiM-SEC-DEG_C"),
    // Mole Per Hour
    MOL__PER__HR: Qudt.unitFromLocalname("MOL-PER-HR"),
    // Pound Mole
    LB__MOL: Qudt.unitFromLocalname("LB-MOL"),
    // Teaspoon
    TSP: Qudt.unitFromLocalname("TSP"),
    // MilliW
    MilliW: Qudt.unitFromLocalname("MilliW"),
    // Milligray
    MilliGRAY: Qudt.unitFromLocalname("MilliGRAY"),
    // Microsiemens Per Centimetre
    MicroS__PER__CentiM: Qudt.unitFromLocalname("MicroS-PER-CentiM"),
    // Kilogram Force per Square Centimetre
    KiloGM_F__PER__CentiM2: Qudt.unitFromLocalname("KiloGM_F-PER-CentiM2"),
    // Kilomole Per Minute
    KiloMOL__PER__MIN: Qudt.unitFromLocalname("KiloMOL-PER-MIN"),
    // Growing Degree Days (Cereals)
    DEG_C_GROWING_CEREAL__DAY: Qudt.unitFromLocalname("DEG_C_GROWING_CEREAL-DAY"),
    // Quart (US Liquid) Per Day
    QT_US__PER__DAY: Qudt.unitFromLocalname("QT_US-PER-DAY"),
    // Microgravity
    MicroG: Qudt.unitFromLocalname("MicroG"),
    // Kuwaiti Dinar
    KuwaitiDinar: Qudt.unitFromLocalname("KuwaitiDinar"),
    // KiloLB_F
    KiloLB_F: Qudt.unitFromLocalname("KiloLB_F"),
    // Katal
    KAT: Qudt.unitFromLocalname("KAT"),
    // Statampere
    A_Stat: Qudt.unitFromLocalname("A_Stat"),
    // Yard Per Degree Fahrenheit
    YD__PER__DEG_F: Qudt.unitFromLocalname("YD-PER-DEG_F"),
    // Gibraltar pound
    GibraltarPound: Qudt.unitFromLocalname("GibraltarPound"),
    // Parts per billion
    PPB: Qudt.unitFromLocalname("PPB"),
    // Micromho
    MicroMHO: Qudt.unitFromLocalname("MicroMHO"),
    // Slug Per Day
    SLUG__PER__DAY: Qudt.unitFromLocalname("SLUG-PER-DAY"),
    // DEATHS
    DEATHS: Qudt.unitFromLocalname("DEATHS"),
    // Ton of Oil Equivalent
    TOE: Qudt.unitFromLocalname("TOE"),
    // Milligram Per Millilitre
    MilliGM__PER__MilliL: Qudt.unitFromLocalname("MilliGM-PER-MilliL"),
    // Microgram Per Cubic Metre
    MicroGM__PER__M3: Qudt.unitFromLocalname("MicroGM-PER-M3"),
    // Lebanese Pound
    LebanesePound: Qudt.unitFromLocalname("LebanesePound"),
    // Foot Pound Force per Square Foot Second
    FT__LB_F__PER__FT2__SEC: Qudt.unitFromLocalname("FT-LB_F-PER-FT2-SEC"),
    // Planck Pressure
    PlanckPressure: Qudt.unitFromLocalname("PlanckPressure"),
    // Tesla
    T: Qudt.unitFromLocalname("T"),
    // Milligram
    MilliGM: Qudt.unitFromLocalname("MilliGM"),
    // Reciprocal Second Square Metre Steradian
    PER__SEC__M2__SR: Qudt.unitFromLocalname("PER-SEC-M2-SR"),
    // Statvolt per Centimeter
    V_Stat__PER__CentiM: Qudt.unitFromLocalname("V_Stat-PER-CentiM"),
    // GM_F
    GM_F: Qudt.unitFromLocalname("GM_F"),
    // Earth mass
    EarthMass: Qudt.unitFromLocalname("EarthMass"),
    // Kilograms per metre per square second
    KiloGM__PER__M__SEC2: Qudt.unitFromLocalname("KiloGM-PER-M-SEC2"),
    // Megajoule Per Square Metre
    MegaJ__PER__M2: Qudt.unitFromLocalname("MegaJ-PER-M2"),
    // Kelvin Per Kelvin
    K__PER__K: Qudt.unitFromLocalname("K-PER-K"),
    // Kilogram Square Meter Per Second
    KiloGM__M2__PER__SEC: Qudt.unitFromLocalname("KiloGM-M2-PER-SEC"),
    // British Thermal Unit (international Table) Per Pound Degree Rankine
    BTU_IT__PER__LB_F__DEG_R: Qudt.unitFromLocalname("BTU_IT-PER-LB_F-DEG_R"),
    // Kilocalorie per Mole Degree Celsius
    KiloCAL__PER__MOL__DEG_C: Qudt.unitFromLocalname("KiloCAL-PER-MOL-DEG_C"),
    // Square metres per gram
    M2__PER__GM: Qudt.unitFromLocalname("M2-PER-GM"),
    // Reciprocal Cubic Foot
    PER__FT3: Qudt.unitFromLocalname("PER-FT3"),
    // Pascal per Kelvin
    PA__PER__K: Qudt.unitFromLocalname("PA-PER-K"),
    // New Israeli Shekel
    NewIsraeliShekel: Qudt.unitFromLocalname("NewIsraeliShekel"),
    // Joule per Square Tesla
    J__PER__T2: Qudt.unitFromLocalname("J-PER-T2"),
    // Abfarad
    FARAD_Ab: Qudt.unitFromLocalname("FARAD_Ab"),
    // Ampere
    A: Qudt.unitFromLocalname("A"),
    // PSI Cubic Meter Per Second
    PSI__M3__PER__SEC: Qudt.unitFromLocalname("PSI-M3-PER-SEC"),
    // Second Square Foot
    SEC__FT2: Qudt.unitFromLocalname("SEC-FT2"),
    // Calorie (thermochemical) Per Second Square Centimeter kelvin
    CAL_TH__PER__SEC__CentiM2__K: Qudt.unitFromLocalname("CAL_TH-PER-SEC-CentiM2-K"),
    // Square metres per gram of dry sediment
    M2__PER__GM_DRY: Qudt.unitFromLocalname("M2-PER-GM_DRY"),
    // Cubic Metre per Kelvin
    M3__PER__K: Qudt.unitFromLocalname("M3-PER-K"),
    // Reciprocal Minute
    PER__MIN: Qudt.unitFromLocalname("PER-MIN"),
    // Cubic Centimeter per Mole Second
    CentiM3__PER__MOL__SEC: Qudt.unitFromLocalname("CentiM3-PER-MOL-SEC"),
    // BTU Inch
    BTU_IT__IN: Qudt.unitFromLocalname("BTU_IT-IN"),
    // Watt per Square Meter Kelvin
    W__PER__M2__K: Qudt.unitFromLocalname("W-PER-M2-K"),
    // Cubic Meter per Hour
    M3__PER__HR: Qudt.unitFromLocalname("M3-PER-HR"),
    // kiloampere
    KiloA: Qudt.unitFromLocalname("KiloA"),
    // DEG_C_GROWING_CEREAL
    DEG_C_GROWING_CEREAL: Qudt.unitFromLocalname("DEG_C_GROWING_CEREAL"),
    // Colony Forming Unit
    CFU: Qudt.unitFromLocalname("CFU"),
    // Farad Per Kilometre
    FARAD__PER__KiloM: Qudt.unitFromLocalname("FARAD-PER-KiloM"),
    // Reciprocal Millimetre
    PER__MilliM: Qudt.unitFromLocalname("PER-MilliM"),
    // Millimeter Per Hour
    MilliM__PER__HR: Qudt.unitFromLocalname("MilliM-PER-HR"),
    // Millimetre of Mercury
    MilliM_HG: Qudt.unitFromLocalname("MilliM_HG"),
    // Gram Degree Celsius
    GM__PER__DEG_C: Qudt.unitFromLocalname("GM-PER-DEG_C"),
    // Ampere Turn per Metre
    AT__PER__M: Qudt.unitFromLocalname("AT-PER-M"),
    // Ounce (avoirdupois) Per Gallon (UK)
    OZ__PER__GAL_UK: Qudt.unitFromLocalname("OZ-PER-GAL_UK"),
    // British Thermal Unit (international Table) Per Pound Degree Fahrenheit
    BTU_IT__PER__LB_F__DEG_F: Qudt.unitFromLocalname("BTU_IT-PER-LB_F-DEG_F"),
    // Square Decimetre
    DeciM2: Qudt.unitFromLocalname("DeciM2"),
    // Microbecquerels per litre
    MicroBQ__PER__L: Qudt.unitFromLocalname("MicroBQ-PER-L"),
    // Square Inch Per Second
    IN2__PER__SEC: Qudt.unitFromLocalname("IN2-PER-SEC"),
    // Gill (UK)
    GI_UK: Qudt.unitFromLocalname("GI_UK"),
    // Milligrams per square metre per day
    MilliGM__PER__M2__DAY: Qudt.unitFromLocalname("MilliGM-PER-M2-DAY"),
    // Millibar Litre Per Second
    MilliBAR__L__PER__SEC: Qudt.unitFromLocalname("MilliBAR-L-PER-SEC"),
    // PicoCoulomb
    PicoC: Qudt.unitFromLocalname("PicoC"),
    // Quartic Coulomb Metre per Cubic Energy
    C4__M4__PER__J3: Qudt.unitFromLocalname("C4-M4-PER-J3"),
    // Megabecquerel
    MegaBQ: Qudt.unitFromLocalname("MegaBQ"),
    // Falkland Islands Pound
    FalklandIslandsPound: Qudt.unitFromLocalname("FalklandIslandsPound"),
    // Peck (US Dry) Per Hour
    PK_US_DRY__PER__HR: Qudt.unitFromLocalname("PK_US_DRY-PER-HR"),
    // Kelvin day
    K__DAY: Qudt.unitFromLocalname("K-DAY"),
    // Newton Meter Per Kilogram
    N__M__PER__KiloGM: Qudt.unitFromLocalname("N-M-PER-KiloGM"),
    // Milliampere Hour
    MilliA__HR: Qudt.unitFromLocalname("MilliA-HR"),
    // Newton Metre Per Square Metre
    N__M__PER__M2: Qudt.unitFromLocalname("N-M-PER-M2"),
    // Kilobyte per Second
    KiloBYTE__PER__SEC: Qudt.unitFromLocalname("KiloBYTE-PER-SEC"),
    // Joule Per Square Centimeter
    J__PER__CentiM2: Qudt.unitFromLocalname("J-PER-CentiM2"),
    // Gill (US) Per Day
    GI_US__PER__DAY: Qudt.unitFromLocalname("GI_US-PER-DAY"),
    // Nanogram Per Cubic Metre
    NanoGM__PER__M3: Qudt.unitFromLocalname("NanoGM-PER-M3"),
    // Penny Weight
    DWT: Qudt.unitFromLocalname("DWT"),
    // Metric Ton
    TON_Metric: Qudt.unitFromLocalname("TON_Metric"),
    // Pound (avoirdupois) Per Day
    LB__PER__DAY: Qudt.unitFromLocalname("LB-PER-DAY"),
    // Reciprocal Picometre
    PER__PicoM: Qudt.unitFromLocalname("PER-PicoM"),
    // BTU (IT) Foot per Square Foot Hour Degree Fahrenheit
    BTU_IT__FT__PER__FT2__HR__DEG_F: Qudt.unitFromLocalname("BTU_IT-FT-PER-FT2-HR-DEG_F"),
    // Hectopascal Per Kelvin
    HectoPA__PER__K: Qudt.unitFromLocalname("HectoPA-PER-K"),
    // Megajoule Per Kilogram
    MegaJ__PER__KiloGM: Qudt.unitFromLocalname("MegaJ-PER-KiloGM"),
    // Liter Per Minute
    L__PER__MIN: Qudt.unitFromLocalname("L-PER-MIN"),
    // Millihenry Per Kiloohm
    MilliH__PER__KiloOHM: Qudt.unitFromLocalname("MilliH-PER-KiloOHM"),
    // Statcoulomb per Square Centimetre
    C_Stat__PER__CentiM2: Qudt.unitFromLocalname("C_Stat-PER-CentiM2"),
    // Nautical Mile per Minute
    MI_N__PER__MIN: Qudt.unitFromLocalname("MI_N-PER-MIN"),
    // Millipascal
    MilliPA: Qudt.unitFromLocalname("MilliPA"),
    // Cases per 1000 individuals per year
    CASES__PER__1000I__YR: Qudt.unitFromLocalname("CASES-PER-1000I-YR"),
    // Fiji Dollar
    FijiDollar: Qudt.unitFromLocalname("FijiDollar"),
    // Milliwatts per square metre per nanometre
    MilliW__PER__M2__NanoM: Qudt.unitFromLocalname("MilliW-PER-M2-NanoM"),
    // Quart (UK Liquid) Per Hour
    QT_UK__PER__HR: Qudt.unitFromLocalname("QT_UK-PER-HR"),
    // Microfarad Per Meter
    MicroFARAD__PER__M: Qudt.unitFromLocalname("MicroFARAD-PER-M"),
    // Mach
    MACH: Qudt.unitFromLocalname("MACH"),
    // Practical salinity unit
    PSU: Qudt.unitFromLocalname("PSU"),
    // Abvolt
    V_Ab: Qudt.unitFromLocalname("V_Ab"),
    // WIR Franc (complementary currency)
    WIRFranc: Qudt.unitFromLocalname("WIRFranc"),
    // BEAT
    BEAT: Qudt.unitFromLocalname("BEAT"),
    // Knot
    KN: Qudt.unitFromLocalname("KN"),
    // Long Ton
    TON_LONG: Qudt.unitFromLocalname("TON_LONG"),
    // Guyana Dollar
    GuyanaDollar: Qudt.unitFromLocalname("GuyanaDollar"),
    // GibiByte
    GibiBYTE: Qudt.unitFromLocalname("GibiBYTE"),
    // Gill (US) Per Minute
    GI_US__PER__MIN: Qudt.unitFromLocalname("GI_US-PER-MIN"),
    // British Thermal Unit (thermochemical) Per Second
    BTU_TH__PER__SEC: Qudt.unitFromLocalname("BTU_TH-PER-SEC"),
    // Jamaican Dollar
    JamaicanDollar: Qudt.unitFromLocalname("JamaicanDollar"),
    // BTU per Degree Rankine
    BTU_IT__PER__DEG_R: Qudt.unitFromLocalname("BTU_IT-PER-DEG_R"),
    // Czech Koruna
    CzechKoruna: Qudt.unitFromLocalname("CzechKoruna"),
    // Centipoise
    CentiPOISE: Qudt.unitFromLocalname("CentiPOISE"),
    // Inverse Square Planck Mass
    PER__PlanckMass2: Qudt.unitFromLocalname("PER-PlanckMass2"),
    // PlanckTemperature
    PlanckTemperature: Qudt.unitFromLocalname("PlanckTemperature"),
    // Kilometer per Hour
    KiloM__PER__HR: Qudt.unitFromLocalname("KiloM-PER-HR"),
    // Rod
    ROD: Qudt.unitFromLocalname("ROD"),
    // Gill (UK) Per Second
    GI_UK__PER__SEC: Qudt.unitFromLocalname("GI_UK-PER-SEC"),
    // Kilopond
    KiloPOND: Qudt.unitFromLocalname("KiloPOND"),
    // Gram Per Day
    GM__PER__DAY: Qudt.unitFromLocalname("GM-PER-DAY"),
    // Inch
    IN: Qudt.unitFromLocalname("IN"),
    // Kilogram Per Kilogram
    KiloGM__PER__KiloGM: Qudt.unitFromLocalname("KiloGM-PER-KiloGM"),
    // Litre Per Kilogram
    L__PER__KiloGM: Qudt.unitFromLocalname("L-PER-KiloGM"),
    // Long Furlong
    FUR_Long: Qudt.unitFromLocalname("FUR_Long"),
    // Calorie (thermochemical) Per Gram Kelvin
    CAL_TH__PER__GM__K: Qudt.unitFromLocalname("CAL_TH-PER-GM-K"),
    // TeraCoulomb
    TeraC: Qudt.unitFromLocalname("TeraC"),
    // Acidity
    PH: Qudt.unitFromLocalname("PH"),
    // Tex
    TEX: Qudt.unitFromLocalname("TEX"),
    // Kilogram Kelvin
    KiloGM__K: Qudt.unitFromLocalname("KiloGM-K"),
    // Micromoles per mole
    MicroMOL__PER__MOL: Qudt.unitFromLocalname("MicroMOL-PER-MOL"),
    // Micromoles per square metre per day
    MicroMOL__PER__M2__DAY: Qudt.unitFromLocalname("MicroMOL-PER-M2-DAY"),
    // Fluid Ounce (UK)
    OZ_VOL_UK: Qudt.unitFromLocalname("OZ_VOL_UK"),
    // Millipascal Second Per Bar
    MilliPA__SEC__PER__BAR: Qudt.unitFromLocalname("MilliPA-SEC-PER-BAR"),
    // Lari
    Lari: Qudt.unitFromLocalname("Lari"),
    // Square metres per Hertz per degree
    M2__PER__HZ__DEG: Qudt.unitFromLocalname("M2-PER-HZ-DEG"),
    // Gs
    Gs: Qudt.unitFromLocalname("Gs"),
    // ArcMinute
    ARCMIN: Qudt.unitFromLocalname("ARCMIN"),
    // Moroccan Dirham
    MoroccanDirham: Qudt.unitFromLocalname("MoroccanDirham"),
    // FemtoCoulomb
    FemtoC: Qudt.unitFromLocalname("FemtoC"),
    // Calorie (international Table) Per Gram
    CAL_IT__PER__GM: Qudt.unitFromLocalname("CAL_IT-PER-GM"),
    // European Composite Unit (EURCO) (Bonds market unit)
    EuropeanCompositeUnit: Qudt.unitFromLocalname("EuropeanCompositeUnit"),
    // Colombian Peso
    ColombianPeso: Qudt.unitFromLocalname("ColombianPeso"),
    // Millinewton
    MilliN: Qudt.unitFromLocalname("MilliN"),
    // BTU-IT-PER-lb
    BTU_IT__PER__LB: Qudt.unitFromLocalname("BTU_IT-PER-LB"),
    // Kilopound Force Per Square Inch
    KiloLB_F__PER__IN2: Qudt.unitFromLocalname("KiloLB_F-PER-IN2"),
    // Swiss Franc
    SwissFranc: Qudt.unitFromLocalname("SwissFranc"),
    // Dram (US)
    DRAM_US: Qudt.unitFromLocalname("DRAM_US"),
    // Gigaohm
    GigaOHM: Qudt.unitFromLocalname("GigaOHM"),
    // Cubic Mile
    MI3: Qudt.unitFromLocalname("MI3"),
    // Ounce (UK Fluid) Per Minute
    OZ_VOL_UK__PER__MIN: Qudt.unitFromLocalname("OZ_VOL_UK-PER-MIN"),
    // Megacoulomb Per Square Metre
    MegaC__PER__M2: Qudt.unitFromLocalname("MegaC-PER-M2"),
    // Millilitre Per Square Centimeter Minute
    MilliL__PER__CentiM2__MIN: Qudt.unitFromLocalname("MilliL-PER-CentiM2-MIN"),
    // Short Ton
    TON_SHORT: Qudt.unitFromLocalname("TON_SHORT"),
    // Parts per trillion
    PPTR: Qudt.unitFromLocalname("PPTR"),
    // Square Millimetre
    MilliM2: Qudt.unitFromLocalname("MilliM2"),
    // Picowatt Per Square Metre
    PicoW__PER__M2: Qudt.unitFromLocalname("PicoW-PER-M2"),
    // milliradian
    MilliRAD: Qudt.unitFromLocalname("MilliRAD"),
    // Mohm
    MOHM: Qudt.unitFromLocalname("MOHM"),
    // Pascal Litre Per Second
    PA__L__PER__SEC: Qudt.unitFromLocalname("PA-L-PER-SEC"),
    // Mole per Kilogram Pascal
    MOL__PER__KiloGM__PA: Qudt.unitFromLocalname("MOL-PER-KiloGM-PA"),
    // Kelvin per Hour
    K__PER__HR: Qudt.unitFromLocalname("K-PER-HR"),
    // Cubic Kilometer per Square Second
    KiloM3__PER__SEC2: Qudt.unitFromLocalname("KiloM3-PER-SEC2"),
    // Failures In Time
    failures__in__time: Qudt.unitFromLocalname("failures-in-time"),
    // BTU (IT) per Degree Fahrenheit
    BTU_IT__PER__DEG_F: Qudt.unitFromLocalname("BTU_IT-PER-DEG_F"),
    // Pound (avoirdupois) Per Gallon (US)
    LB__PER__GAL_US: Qudt.unitFromLocalname("LB-PER-GAL_US"),
    // Picograms per kilogram
    PicoGM__PER__KiloGM: Qudt.unitFromLocalname("PicoGM-PER-KiloGM"),
    // Degree Celsius per Second
    DEG_C__PER__SEC: Qudt.unitFromLocalname("DEG_C-PER-SEC"),
    // Ton Force (US Short)
    TON_F_US: Qudt.unitFromLocalname("TON_F_US"),
    // Cubic Yard Per Day
    YD3__PER__DAY: Qudt.unitFromLocalname("YD3-PER-DAY"),
    // BTU (IT) Inch per Square Foot Second Degree Fahrenheit
    BTU_IT__IN__PER__FT2__SEC__DEG_F: Qudt.unitFromLocalname("BTU_IT-IN-PER-FT2-SEC-DEG_F"),
    // European Unit of Account 9 (E.U.A.-9) (Bonds market unit)
    EuropeanUnitOfAccount9: Qudt.unitFromLocalname("EuropeanUnitOfAccount9"),
    // Gram Per Cubic Metre
    GM__PER__M3: Qudt.unitFromLocalname("GM-PER-M3"),
    // Decibel
    DeciB: Qudt.unitFromLocalname("DeciB"),
    // Calorie (thermochemical) Per Centimetre Second Degree Celsius
    CAL_TH__PER__CentiM__SEC__DEG_C: Qudt.unitFromLocalname("CAL_TH-PER-CentiM-SEC-DEG_C"),
    // Micromoles per litre per hour
    MicroMOL__PER__L__HR: Qudt.unitFromLocalname("MicroMOL-PER-L-HR"),
    // Qatari Rial
    QatariRial: Qudt.unitFromLocalname("QatariRial"),
    // Ampere Per Square Millimetre
    A__PER__MilliM2: Qudt.unitFromLocalname("A-PER-MilliM2"),
    // Kilogram Metre Per Second
    KiloGM__M__PER__SEC: Qudt.unitFromLocalname("KiloGM-M-PER-SEC"),
    // Gram Per Mole
    GM__PER__MOL: Qudt.unitFromLocalname("GM-PER-MOL"),
    // Coulomb Per Square Centimeter
    C__PER__CentiM2: Qudt.unitFromLocalname("C-PER-CentiM2"),
    // Debye
    Debye: Qudt.unitFromLocalname("Debye"),
    // Cubic micrometres (microns)
    MicroM3: Qudt.unitFromLocalname("MicroM3"),
    // Peck (UK) Per Minute
    PK_UK__PER__MIN: Qudt.unitFromLocalname("PK_UK-PER-MIN"),
    // Short Ton per Hour
    TON_SHORT__PER__HR: Qudt.unitFromLocalname("TON_SHORT-PER-HR"),
    // Kilo Byte
    KiloBYTE: Qudt.unitFromLocalname("KiloBYTE"),
    // Micropascal
    MicroPA: Qudt.unitFromLocalname("MicroPA"),
    // Kilocurie
    KiloCi: Qudt.unitFromLocalname("KiloCi"),
    // Picomoles per square metre per day
    PicoMOL__PER__M2__DAY: Qudt.unitFromLocalname("PicoMOL-PER-M2-DAY"),
    // Barrel (UK Petroleum) Per Day
    BBL_UK_PET__PER__DAY: Qudt.unitFromLocalname("BBL_UK_PET-PER-DAY"),
    // MicroCurie
    MicroCi: Qudt.unitFromLocalname("MicroCi"),
    // Becquerels per litre
    BQ__PER__L: Qudt.unitFromLocalname("BQ-PER-L"),
    // Millivolt Per Meter
    MilliV__PER__M: Qudt.unitFromLocalname("MilliV-PER-M"),
    // Degree Baume (US Heavy)
    DEGREE_BAUME_US_HEAVY: Qudt.unitFromLocalname("DEGREE_BAUME_US_HEAVY"),
    // Ouguiya
    Ouguiya: Qudt.unitFromLocalname("Ouguiya"),
    // GM_DRY
    GM_DRY: Qudt.unitFromLocalname("GM_DRY"),
    // Pascal Second Per Bar
    PA__SEC__PER__BAR: Qudt.unitFromLocalname("PA-SEC-PER-BAR"),
    // Reciprocal Pascal
    PER__PA: Qudt.unitFromLocalname("PER-PA"),
    // Reciprocal Kilovolt Ampere Hour
    PER__KiloV__A__HR: Qudt.unitFromLocalname("PER-KiloV-A-HR"),
    // Psi Cubic Inch Per Second
    PSI__IN3__PER__SEC: Qudt.unitFromLocalname("PSI-IN3-PER-SEC"),
    // Petajoule
    PetaJ: Qudt.unitFromLocalname("PetaJ"),
    // Degree Fahrenheit per Second
    DEG_F__PER__SEC: Qudt.unitFromLocalname("DEG_F-PER-SEC"),
    // ZeptoCoulomb
    ZeptoC: Qudt.unitFromLocalname("ZeptoC"),
    // Imperial Gallon
    GAL_IMP: Qudt.unitFromLocalname("GAL_IMP"),
    // Inch of Mercury
    IN_HG: Qudt.unitFromLocalname("IN_HG"),
    // European Unit of Account 17 (E.U.A.-17) (Bonds market unit)
    EuropeanUnitOfAccount17: Qudt.unitFromLocalname("EuropeanUnitOfAccount17"),
    // Percent per week
    PERCENT__PER__WK: Qudt.unitFromLocalname("PERCENT-PER-WK"),
    // Surinam Dollar
    SurinamDollar: Qudt.unitFromLocalname("SurinamDollar"),
    // Peck (UK) Per Second
    PK_UK__PER__SEC: Qudt.unitFromLocalname("PK_UK-PER-SEC"),
    // Degree Celsius week
    DEG_C__WK: Qudt.unitFromLocalname("DEG_C-WK"),
    // MilliCoulomb
    MilliC: Qudt.unitFromLocalname("MilliC"),
    // ExaCoulomb
    ExaC: Qudt.unitFromLocalname("ExaC"),
    // Kilograms per metre per hour
    KiloGM__PER__M__HR: Qudt.unitFromLocalname("KiloGM-PER-M-HR"),
    // Mega Pound Force
    MegaLB_F: Qudt.unitFromLocalname("MegaLB_F"),
    // Litre Per Mole
    L__PER__MOL: Qudt.unitFromLocalname("L-PER-MOL"),
    // Ampere Second
    A__SEC: Qudt.unitFromLocalname("A-SEC"),
    // Leone
    Leone: Qudt.unitFromLocalname("Leone"),
    // Coulomb per Metre
    C__PER__M: Qudt.unitFromLocalname("C-PER-M"),
    // Dyne per Square Centimetre
    DYN__PER__CentiM2: Qudt.unitFromLocalname("DYN-PER-CentiM2"),
    // Kilometre
    KiloM: Qudt.unitFromLocalname("KiloM"),
    // Tonne
    TONNE: Qudt.unitFromLocalname("TONNE"),
    // Azerbaijanian Manat
    AZN: Qudt.unitFromLocalname("AZN"),
    // GigaBIT
    GigaBIT: Qudt.unitFromLocalname("GigaBIT"),
    // Pint (UK) Per Hour
    PINT_UK__PER__HR: Qudt.unitFromLocalname("PINT_UK-PER-HR"),
    // Watts per square metre per metre per steradian
    W__PER__M2__M__SR: Qudt.unitFromLocalname("W-PER-M2-M-SR"),
    // Microfarad Per Kilometre
    MicroFARAD__PER__KiloM: Qudt.unitFromLocalname("MicroFARAD-PER-KiloM"),
    // Femtomoles per kilogram
    FemtoMOL__PER__KiloGM: Qudt.unitFromLocalname("FemtoMOL-PER-KiloGM"),
    // Imperial Mass Ounce per Cubic Inch
    OZ__PER__IN3: Qudt.unitFromLocalname("OZ-PER-IN3"),
    // Cordoba Oro
    CordobaOro: Qudt.unitFromLocalname("CordobaOro"),
    // Mega Hertz per Kelvin
    MegaHZ__PER__K: Qudt.unitFromLocalname("MegaHZ-PER-K"),
    // Centimetre Per Hour
    CentiM__PER__HR: Qudt.unitFromLocalname("CentiM-PER-HR"),
    // Quart (US Liquid) Per Minute
    QT_US__PER__MIN: Qudt.unitFromLocalname("QT_US-PER-MIN"),
    // Reciprocal Cubic Meter
    PER__M3: Qudt.unitFromLocalname("PER-M3"),
    // Nanograms per millilitre
    NanoGM__PER__MilliL: Qudt.unitFromLocalname("NanoGM-PER-MilliL"),
    // Tonne Per Minute
    TON_Metric__PER__MIN: Qudt.unitFromLocalname("TON_Metric-PER-MIN"),
    // Pound Force
    LB_F: Qudt.unitFromLocalname("LB_F"),
    // Quart (US Liquid) Per Hour
    QT_US__PER__HR: Qudt.unitFromLocalname("QT_US-PER-HR"),
    // Newton Metre
    N__M: Qudt.unitFromLocalname("N-M"),
    // Kilopascal Absolute
    KiloPA_A: Qudt.unitFromLocalname("KiloPA_A"),
    // Boliviano
    Boliviano: Qudt.unitFromLocalname("Boliviano"),
    // Kilogram Square Millimetre
    KiloGM__MilliM2: Qudt.unitFromLocalname("KiloGM-MilliM2"),
    // bushel (UK)
    BU_UK: Qudt.unitFromLocalname("BU_UK"),
    // Joule per Square Metre
    J__PER__M2: Qudt.unitFromLocalname("J-PER-M2"),
    // Millibar Per Kelvin
    MilliBAR__PER__K: Qudt.unitFromLocalname("MilliBAR-PER-K"),
    // Kilogram?force Metre Per Square Centimetre
    KiloGM_F__M__PER__CentiM2: Qudt.unitFromLocalname("KiloGM_F-M-PER-CentiM2"),
    // Coulomb Per Square Millimeter
    C__PER__MilliM2: Qudt.unitFromLocalname("C-PER-MilliM2"),
    // Therm US
    THM_US: Qudt.unitFromLocalname("THM_US"),
    // Nanolitre
    NanoL: Qudt.unitFromLocalname("NanoL"),
    // Poundal
    PDL: Qudt.unitFromLocalname("PDL"),
    // Abcoulomb per Square Centimetre
    C_Ab__PER__CentiM2: Qudt.unitFromLocalname("C_Ab-PER-CentiM2"),
    // Kilocalorie per Square Centimeter
    KiloCAL__PER__CentiM2: Qudt.unitFromLocalname("KiloCAL-PER-CentiM2"),
    // Flight
    Flight: Qudt.unitFromLocalname("Flight"),
    // Bahraini Dinar
    BHD: Qudt.unitFromLocalname("BHD"),
    // Candela
    CD: Qudt.unitFromLocalname("CD"),
    // Square Pascal Second
    PA2__SEC: Qudt.unitFromLocalname("PA2-SEC"),
    // Planck Energy
    PlanckEnergy: Qudt.unitFromLocalname("PlanckEnergy"),
    // Megajoule
    MegaJ: Qudt.unitFromLocalname("MegaJ"),
    // Gram Force Per Square Centimetre
    GM_F__PER__CentiM2: Qudt.unitFromLocalname("GM_F-PER-CentiM2"),
    // Heart Beats per Minute
    BEAT__PER__MIN: Qudt.unitFromLocalname("BEAT-PER-MIN"),
    // Bolivian Mvdol (Funds code)
    BolivianMvdol: Qudt.unitFromLocalname("BolivianMvdol"),
    // BTU per Pound Mole Degree Fahrenheit
    BTU_IT__PER__MOL__DEG_F: Qudt.unitFromLocalname("BTU_IT-PER-MOL-DEG_F"),
    // Angstrom
    ANGSTROM: Qudt.unitFromLocalname("ANGSTROM"),
    // Lek
    Lek: Qudt.unitFromLocalname("Lek"),
    // Sample per second
    SAMPLE__PER__SEC: Qudt.unitFromLocalname("SAMPLE-PER-SEC"),
    // Kilonewton
    KiloN: Qudt.unitFromLocalname("KiloN"),
    // Metical
    Metical: Qudt.unitFromLocalname("Metical"),
    // Watt seconds per square metre
    W__SEC__PER__M2: Qudt.unitFromLocalname("W-SEC-PER-M2"),
    // Psi Cubic Yard Per Second
    PSI__YD3__PER__SEC: Qudt.unitFromLocalname("PSI-YD3-PER-SEC"),
    // Micropoise
    MicroPOISE: Qudt.unitFromLocalname("MicroPOISE"),
    // Barn
    BARN: Qudt.unitFromLocalname("BARN"),
    // Millimetre
    MilliM: Qudt.unitFromLocalname("MilliM"),
    // Bushel (UK) Per Second
    BU_UK__PER__SEC: Qudt.unitFromLocalname("BU_UK-PER-SEC"),
    // MicroGals per metre
    MicroGAL__PER__M: Qudt.unitFromLocalname("MicroGAL-PER-M"),
    // Megahertz
    MegaHZ: Qudt.unitFromLocalname("MegaHZ"),
    // Peck (US Dry) Per Second
    PK_US_DRY__PER__SEC: Qudt.unitFromLocalname("PK_US_DRY-PER-SEC"),
    // Erg per Gram
    ERG__PER__G: Qudt.unitFromLocalname("ERG-PER-G"),
    // New Taiwan Dollar
    NewTaiwanDollar: Qudt.unitFromLocalname("NewTaiwanDollar"),
    // Joule Per Hour
    J__PER__HR: Qudt.unitFromLocalname("J-PER-HR"),
    // Micromoles per second
    MicroMOL__PER__SEC: Qudt.unitFromLocalname("MicroMOL-PER-SEC"),
    // Newton per Coulomb
    N__PER__C: Qudt.unitFromLocalname("N-PER-C"),
    // Gigajoule
    GigaJ: Qudt.unitFromLocalname("GigaJ"),
    // Degree Baume (US Light)
    DEGREE_BAUME_US_LIGHT: Qudt.unitFromLocalname("DEGREE_BAUME_US_LIGHT"),
    // Abtesla
    T_Ab: Qudt.unitFromLocalname("T_Ab"),
    // Assay Ton
    TON_Assay: Qudt.unitFromLocalname("TON_Assay"),
    // Megapascal Per Bar
    MegaPA__PER__BAR: Qudt.unitFromLocalname("MegaPA-PER-BAR"),
    // Hour
    HR: Qudt.unitFromLocalname("HR"),
    // Calorie (thermochemical) Per Gram
    CAL_TH__PER__GM: Qudt.unitFromLocalname("CAL_TH-PER-GM"),
    // Reciprocal Ã¥ngstrÃ¶m
    PER__ANGSTROM: Qudt.unitFromLocalname("PER-ANGSTROM"),
    // Nakfa
    Nakfa: Qudt.unitFromLocalname("Nakfa"),
    // Reciprocal Joule Cubic Meter
    PER__J__M3: Qudt.unitFromLocalname("PER-J-M3"),
    // Million Years
    MegaYR: Qudt.unitFromLocalname("MegaYR"),
    // Atmosphere Cubic Meter per Mole
    ATM__M3__PER__MOL: Qudt.unitFromLocalname("ATM-M3-PER-MOL"),
    // Barrel (UK Petroleum) Per Second
    BBL_UK_PET__PER__SEC: Qudt.unitFromLocalname("BBL_UK_PET-PER-SEC"),
}

// QuantityKinds
function addQuantityKind0(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AbsoluteActivity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Absolute Activity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AbsoluteActivity", quantityKind);
}
function addQuantityKind1(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AbsoluteHumidity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", "AH", undefined);
        quantityKind.addLabel(new LangString("Absolute Humidity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AbsoluteHumidity", quantityKind);
}
function addQuantityKind2(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AbsorbedDose", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "D", undefined);
        quantityKind.addLabel(new LangString("Absorbed Dose", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AbsorbedDose", quantityKind);
}
function addQuantityKind3(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AbsorbedDoseRate", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Absorbed Dose Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AbsorbedDoseRate", quantityKind);
}
function addQuantityKind4(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Absorptance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Absorptance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Absorptance", quantityKind);
}
function addQuantityKind5(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Acceleration", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Acceleration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Acceleration", quantityKind);
}
function addQuantityKind6(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AccelerationOfGravity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", "g", undefined);
        quantityKind.addLabel(new LangString("Acceleration Of Gravity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AccelerationOfGravity", quantityKind);
}
function addQuantityKind7(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AcceptorDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "n_a", undefined);
        quantityKind.addLabel(new LangString("Acceptor Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AcceptorDensity", quantityKind);
}
function addQuantityKind8(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AcceptorIonizationEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_a", undefined);
        quantityKind.addLabel(new LangString("Acceptor Ionization Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AcceptorIonizationEnergy", quantityKind);
}
function addQuantityKind9(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AcousticImpedance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", "Z", undefined);
        quantityKind.addLabel(new LangString("Acoustic Impediance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AcousticImpedance", quantityKind);
}
function addQuantityKind10(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Action", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", "S", undefined);
        quantityKind.addLabel(new LangString("Action", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Action", quantityKind);
}
function addQuantityKind11(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ActionTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Action Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ActionTime", quantityKind);
}
function addQuantityKind12(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ActiveEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "W", undefined);
        quantityKind.addLabel(new LangString("Active Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ActiveEnergy", quantityKind);
}
function addQuantityKind13(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ActivePower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "P", undefined);
        quantityKind.addLabel(new LangString("Active Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ActivePower", quantityKind);
}
function addQuantityKind14(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Activity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", "A", undefined);
        quantityKind.addLabel(new LangString("Activity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Activity", quantityKind);
}
function addQuantityKind15(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ActivityCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "f_B", undefined);
        quantityKind.addLabel(new LangString("Activity Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ActivityCoefficient", quantityKind);
}
function addQuantityKind16(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ActivityConcentration", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", "c_A", undefined);
        quantityKind.addLabel(new LangString("Activity Concentration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ActivityConcentration", quantityKind);
}
function addQuantityKind17(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ActivityThresholds", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Activity Thresholds", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ActivityThresholds", quantityKind);
}
function addQuantityKind18(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Adaptation", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Adaptation", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Adaptation", quantityKind);
}
function addQuantityKind19(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Admittance", "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Admittance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Admittance", quantityKind);
}
function addQuantityKind20(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AlphaDisintegrationEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Alpha Disintegration Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AlphaDisintegrationEnergy", quantityKind);
}
function addQuantityKind21(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Altitude", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Altitude", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Altitude", quantityKind);
}
function addQuantityKind22(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmbientPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "p_a", undefined);
        quantityKind.addLabel(new LangString("Ambient Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmbientPressure", quantityKind);
}
function addQuantityKind23(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmountOfSubstance", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", "n", undefined);
        quantityKind.addLabel(new LangString("Amount of Substance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmountOfSubstance", quantityKind);
}
function addQuantityKind24(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmountOfSubstanceConcentrationOfB", "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", "C_B", undefined);
        quantityKind.addLabel(new LangString("Amount of Substance of Concentration of B", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmountOfSubstanceConcentrationOfB", quantityKind);
}
function addQuantityKind25(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmountOfSubstanceFractionOfB", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "X_B", undefined);
        quantityKind.addLabel(new LangString("Amount of Substance of Fraction of B", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmountOfSubstanceFractionOfB", quantityKind);
}
function addQuantityKind26(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Amount of Substance per Unit Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass", quantityKind);
}
function addQuantityKind27(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMassPressure", "http://qudt.org/vocab/dimensionvector/A1E0L1I0M-2H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Molar Mass variation due to Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMassPressure", quantityKind);
}
function addQuantityKind28(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume", "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Amount of Substance per Unit Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume", quantityKind);
}
function addQuantityKind29(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Angle", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Angle", quantityKind);
}
function addQuantityKind30(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngleOfAttack", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Angle Of Attack", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngleOfAttack", quantityKind);
}
function addQuantityKind31(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngleOfOpticalRotation", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Angle of Optical Rotation", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngleOfOpticalRotation", quantityKind);
}
function addQuantityKind32(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularAcceleration", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Angular Acceleration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularAcceleration", quantityKind);
}
function addQuantityKind33(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularCrossSection", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Angular Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularCrossSection", quantityKind);
}
function addQuantityKind34(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularDistance", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Angular Distance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularDistance", quantityKind);
}
function addQuantityKind35(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularFrequency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Angular Frequency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularFrequency", quantityKind);
}
function addQuantityKind36(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularImpulse", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", "H", undefined);
        quantityKind.addLabel(new LangString("Angular Impulse", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularImpulse", quantityKind);
}
function addQuantityKind37(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularMomentum", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", "L", undefined);
        quantityKind.addLabel(new LangString("Angular Momentum", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularMomentum", quantityKind);
}
function addQuantityKind38(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularMomentumPerAngle", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Angular Momentum per Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularMomentumPerAngle", quantityKind);
}
function addQuantityKind39(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", "G", undefined);
        quantityKind.addLabel(new LangString("Angular Reciprocal Lattice Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector", quantityKind);
}
function addQuantityKind40(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Angular Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularVelocity", quantityKind);
}
function addQuantityKind41(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AngularWavenumber", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", "k", undefined);
        quantityKind.addLabel(new LangString("Angular Wavenumber", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AngularWavenumber", quantityKind);
}
function addQuantityKind42(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ApogeeRadius", undefined, "r_2", undefined);
        quantityKind.addLabel(new LangString("Apogee Radius", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ApogeeRadius", quantityKind);
}
function addQuantityKind43(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ApparentPower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Apparent Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ApparentPower", quantityKind);
}
function addQuantityKind44(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Area", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Area", quantityKind);
}
function addQuantityKind45(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaAngle", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaAngle", quantityKind);
}
function addQuantityKind46(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaPerTime", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area per Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaPerTime", quantityKind);
}
function addQuantityKind47(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Area Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaRatio", quantityKind);
}
function addQuantityKind48(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaTemperature", quantityKind);
}
function addQuantityKind49(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaThermalExpansion", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area Thermal Expansion", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaThermalExpansion", quantityKind);
}
function addQuantityKind50(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaTime", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaTime", quantityKind);
}
function addQuantityKind51(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreaTimeTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Area Time Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreaTimeTemperature", quantityKind);
}
function addQuantityKind52(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AreicHeatFlowRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", "φ", undefined);
        quantityKind.addLabel(new LangString("Aeric Heat Flow Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AreicHeatFlowRate", quantityKind);
}
function addQuantityKind53(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Asset", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Asset", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Asset", quantityKind);
}
function addQuantityKind54(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtmosphericHydroxylationRate", "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Atmospheric Hydroxylation Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtmosphericHydroxylationRate", quantityKind);
}
function addQuantityKind55(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtmosphericPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Atmospheric Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtmosphericPressure", quantityKind);
}
function addQuantityKind56(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtomScatteringFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "f", undefined);
        quantityKind.addLabel(new LangString("Atom Scattering Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtomScatteringFactor", quantityKind);
}
function addQuantityKind57(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtomicAttenuationCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "μₐ", undefined);
        quantityKind.addLabel(new LangString("Atomic Attenuation Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtomicAttenuationCoefficient", quantityKind);
}
function addQuantityKind58(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtomicCharge", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Atomic Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtomicCharge", quantityKind);
}
function addQuantityKind59(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtomicMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "m_a", undefined);
        quantityKind.addLabel(new LangString("Atomic Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtomicMass", quantityKind);
}
function addQuantityKind60(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AtomicNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Z", undefined);
        quantityKind.addLabel(new LangString("Atomic Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AtomicNumber", quantityKind);
}
function addQuantityKind61(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AttenuationCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Attenuation Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AttenuationCoefficient", quantityKind);
}
function addQuantityKind62(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AuditoryThresholds", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Auditory Thresholds", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AuditoryThresholds", quantityKind);
}
function addQuantityKind63(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AuxillaryMagneticField", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Auxillary Magnetic Field", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AuxillaryMagneticField", quantityKind);
}
function addQuantityKind64(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AverageEnergyLossPerElementaryChargeProduced", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "W_i", undefined);
        quantityKind.addLabel(new LangString("Average Energy Loss per Elementary Charge Produced", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AverageEnergyLossPerElementaryChargeProduced", quantityKind);
}
function addQuantityKind65(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AverageHeadEndPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Average Head End Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AverageHeadEndPressure", quantityKind);
}
function addQuantityKind66(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AverageLogarithmicEnergyDecrement", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Average Logarithmic Energy Decrement", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AverageLogarithmicEnergyDecrement", quantityKind);
}
function addQuantityKind67(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AverageSpecificImpulse", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Average Specific Impulse", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AverageSpecificImpulse", quantityKind);
}
function addQuantityKind68(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/AverageVacuumThrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Average Vacuum Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/AverageVacuumThrust", quantityKind);
}
function addQuantityKind69(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BendingMomentOfForce", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "M_b", undefined);
        quantityKind.addLabel(new LangString("Bending Moment of Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BendingMomentOfForce", quantityKind);
}
function addQuantityKind70(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BetaDisintegrationEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Qᵦ", undefined);
        quantityKind.addLabel(new LangString("Beta Disintegration Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BetaDisintegrationEnergy", quantityKind);
}
function addQuantityKind71(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BevelGearPitchAngle", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Bevel Gear Pitch Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BevelGearPitchAngle", quantityKind);
}
function addQuantityKind72(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BindingFraction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "b", undefined);
        quantityKind.addLabel(new LangString("Binding Fraction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BindingFraction", quantityKind);
}
function addQuantityKind73(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BioconcentrationFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Bioconcentration Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BioconcentrationFactor", quantityKind);
}
function addQuantityKind74(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BiodegredationHalfLife", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Biodegredation Half Life", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BiodegredationHalfLife", quantityKind);
}
function addQuantityKind75(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BloodGlucoseLevel", "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Blood Glucose Level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BloodGlucoseLevel", quantityKind);
}
function addQuantityKind76(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BloodGlucoseLevel_Mass", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Blood Glucose Level by Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BloodGlucoseLevel_Mass", quantityKind);
}
function addQuantityKind77(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BodyMassIndex", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", "BMI", undefined);
        quantityKind.addLabel(new LangString("Body Mass Index", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BodyMassIndex", quantityKind);
}
function addQuantityKind78(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BoilingPoint", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Boiling Point Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BoilingPoint", quantityKind);
}
function addQuantityKind79(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BraggAngle", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Bragg Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BraggAngle", quantityKind);
}
function addQuantityKind80(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Breadth", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "b", undefined);
        quantityKind.addLabel(new LangString("Breadth", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Breadth", quantityKind);
}
function addQuantityKind81(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BucklingFactor", undefined, "B", undefined);
        quantityKind.addLabel(new LangString("Buckling Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BucklingFactor", quantityKind);
}
function addQuantityKind82(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BulkModulus", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "K", undefined);
        quantityKind.addLabel(new LangString("Bulk Modulus", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BulkModulus", quantityKind);
}
function addQuantityKind83(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BurgersVector", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "b", undefined);
        quantityKind.addLabel(new LangString("Burgers Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BurgersVector", quantityKind);
}
function addQuantityKind84(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BurnRate", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Burn Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BurnRate", quantityKind);
}
function addQuantityKind85(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/BurnTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", "t", undefined);
        quantityKind.addLabel(new LangString("Burn Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/BurnTime", quantityKind);
}
function addQuantityKind86(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_X", undefined, "cg", undefined);
        quantityKind.addLabel(new LangString("Center of Gravity in the X axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_X", quantityKind);
}
function addQuantityKind87(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Y", undefined, "cg", undefined);
        quantityKind.addLabel(new LangString("Center of Gravity in the Y axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Y", quantityKind);
}
function addQuantityKind88(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Z", undefined, "cg", undefined);
        quantityKind.addLabel(new LangString("Center of Gravity in the X axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Z", quantityKind);
}
function addQuantityKind89(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CENTER-OF-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "R", undefined);
        quantityKind.addLabel(new LangString("Center of Mass (CoM)", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CENTER-OF-MASS", quantityKind);
}
function addQuantityKind90(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CONTRACT-END-ITEM-SPECIFICATION-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Contract End Item (CEI) Specification Mass.", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CONTRACT-END-ITEM-SPECIFICATION-MASS", quantityKind);
}
function addQuantityKind91(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CONTROL-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Control Mass.", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CONTROL-MASS", quantityKind);
}
function addQuantityKind92(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Z", undefined);
        quantityKind.addLabel(new LangString("Canonical Partition Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction", quantityKind);
}
function addQuantityKind93(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Capacitance", "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0", "C", undefined);
        quantityKind.addLabel(new LangString("Capacitance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Capacitance", quantityKind);
}
function addQuantityKind94(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Capacity", undefined, "TBD", undefined);
        quantityKind.addLabel(new LangString("Capacity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Capacity", quantityKind);
}
function addQuantityKind95(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CarrierLifetime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Carrier LifetIme", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CarrierLifetime", quantityKind);
}
function addQuantityKind96(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CartesianArea", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "A", undefined);
        quantityKind.addLabel(new LangString("Cartesian Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CartesianArea", quantityKind);
}
function addQuantityKind97(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CartesianCoordinates", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "x, y, z", undefined);
        quantityKind.addLabel(new LangString("Cartesian Coordinates", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CartesianCoordinates", quantityKind);
}
function addQuantityKind98(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CartesianVolume", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", "V", undefined);
        quantityKind.addLabel(new LangString("Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CartesianVolume", quantityKind);
}
function addQuantityKind99(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CatalyticActivity", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Catalytic Activity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CatalyticActivity", quantityKind);
}
function addQuantityKind100(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CelsiusTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Celsius temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CelsiusTemperature", quantityKind);
}
function addQuantityKind101(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CharacteristicAcousticImpedance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", "Z", undefined);
        quantityKind.addLabel(new LangString("Characteristic Acoustic Impedance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CharacteristicAcousticImpedance", quantityKind);
}
function addQuantityKind102(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CharacteristicVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Characteristic Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CharacteristicVelocity", quantityKind);
}
function addQuantityKind103(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ChargeNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "z", undefined);
        quantityKind.addLabel(new LangString("Charge Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ChargeNumber", quantityKind);
}
function addQuantityKind104(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ChemicalAffinity", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", "A", undefined);
        quantityKind.addLabel(new LangString("Chemical Affinity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ChemicalAffinity", quantityKind);
}
function addQuantityKind105(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ChemicalPotential", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Chemical Potential", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ChemicalPotential", quantityKind);
}
function addQuantityKind106(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Circulation", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Circulation", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Circulation", quantityKind);
}
function addQuantityKind107(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ClosestApproachRadius", undefined, "r_o", undefined);
        quantityKind.addLabel(new LangString("Closest Approach Radius", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ClosestApproachRadius", quantityKind);
}
function addQuantityKind108(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Coefficient of heat transfer", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer", quantityKind);
}
function addQuantityKind109(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Coercivity", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", "H_{c,B}", undefined);
        quantityKind.addLabel(new LangString("Coercivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Coercivity", quantityKind);
}
function addQuantityKind110(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CoherenceLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "ξ", undefined);
        quantityKind.addLabel(new LangString("Coherence Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CoherenceLength", quantityKind);
}
function addQuantityKind111(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ColdReceptorThreshold", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Cold Receptor Threshold", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ColdReceptorThreshold", quantityKind);
}
function addQuantityKind112(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CombinedNonEvaporativeHeatTransferCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", "h", undefined);
        quantityKind.addLabel(new LangString("Combined Non Evaporative Heat Transfer Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CombinedNonEvaporativeHeatTransferCoefficient", quantityKind);
}
function addQuantityKind113(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CombustionChamberTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", "T_c", undefined);
        quantityKind.addLabel(new LangString("Combustion Chamber Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CombustionChamberTemperature", quantityKind);
}
function addQuantityKind114(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ComplexPower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Complex Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ComplexPower", quantityKind);
}
function addQuantityKind115(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Compressibility", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Compressibility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Compressibility", quantityKind);
}
function addQuantityKind116(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CompressibilityFactor", undefined, "Z", undefined);
        quantityKind.addLabel(new LangString("Compressibility Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CompressibilityFactor", quantityKind);
}
function addQuantityKind117(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Concentration", "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Concentration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Concentration", quantityKind);
}
function addQuantityKind118(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Conductance", "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0", "G", undefined);
        quantityKind.addLabel(new LangString("Conductance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Conductance", quantityKind);
}
function addQuantityKind119(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ConductionSpeed", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "c", undefined);
        quantityKind.addLabel(new LangString("Conduction Speed", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ConductionSpeed", quantityKind);
}
function addQuantityKind120(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ConductiveHeatTransferRate", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Conductive Heat Transfer Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ConductiveHeatTransferRate", quantityKind);
}
function addQuantityKind121(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Conductivity", "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Conductivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Conductivity", quantityKind);
}
function addQuantityKind122(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ConvectiveHeatTransfer", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Convective Heat Transfer", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ConvectiveHeatTransfer", quantityKind);
}
function addQuantityKind123(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CorrelatedColorTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Correlated Color Temperature", "en-us"));
        quantityKind.addLabel(new LangString("Correlated Colour Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CorrelatedColorTemperature", quantityKind);
}
function addQuantityKind124(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CouplingFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "k", undefined);
        quantityKind.addLabel(new LangString("Coupling Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CouplingFactor", quantityKind);
}
function addQuantityKind125(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CrossSection", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "σ", undefined);
        quantityKind.addLabel(new LangString("Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CrossSection", quantityKind);
}
function addQuantityKind126(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CrossSectionalArea", undefined, "A", undefined);
        quantityKind.addLabel(new LangString("Cross-sectional Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CrossSectionalArea", quantityKind);
}
function addQuantityKind127(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CubicElectricDipoleMomentPerSquareEnergy", "http://qudt.org/vocab/dimensionvector/A0E3L-1I0M-2H0T7D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Cubic Electric Dipole Moment per Square Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CubicElectricDipoleMomentPerSquareEnergy", quantityKind);
}
function addQuantityKind128(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CubicExpansionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Cubic Expansion Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CubicExpansionCoefficient", quantityKind);
}
function addQuantityKind129(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CurieTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", "T_C", undefined);
        quantityKind.addLabel(new LangString("Curie Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CurieTemperature", quantityKind);
}
function addQuantityKind130(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Currency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Currency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Currency", quantityKind);
}
function addQuantityKind131(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CurrentLinkage", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Current Linkage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CurrentLinkage", quantityKind);
}
function addQuantityKind132(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Curvature", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Curvature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Curvature", quantityKind);
}
function addQuantityKind133(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CurvatureFromRadius", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Curvature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CurvatureFromRadius", quantityKind);
}
function addQuantityKind134(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/CyclotronAngularFrequency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Larmor Angular Frequency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/CyclotronAngularFrequency", quantityKind);
}
function addQuantityKind135(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DELTA-V", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Delta-V", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DELTA-V", quantityKind);
}
function addQuantityKind136(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DRY-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Dry Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DRY-MASS", quantityKind);
}
function addQuantityKind137(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DataRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Data Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DataRate", quantityKind);
}
function addQuantityKind138(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Debye-WallerFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "D, B", undefined);
        quantityKind.addLabel(new LangString("Debye-Waller Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Debye-WallerFactor", quantityKind);
}
function addQuantityKind139(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DebyeAngularFrequency", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Debye Angular Frequency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DebyeAngularFrequency", quantityKind);
}
function addQuantityKind140(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DebyeAngularWavenumber", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", "q_D", undefined);
        quantityKind.addLabel(new LangString("Debye Angular Wavenumber", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DebyeAngularWavenumber", quantityKind);
}
function addQuantityKind141(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DebyeTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Debye Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DebyeTemperature", quantityKind);
}
function addQuantityKind142(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DecayConstant", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Decay Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DecayConstant", quantityKind);
}
function addQuantityKind143(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DegreeOfDissociation", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Degree of Dissociation", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DegreeOfDissociation", quantityKind);
}
function addQuantityKind144(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Density", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Density", quantityKind);
}
function addQuantityKind145(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DensityInCombustionChamber", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Density In Combustion Chamber", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DensityInCombustionChamber", quantityKind);
}
function addQuantityKind146(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DensityOfStates", undefined, "g", undefined);
        quantityKind.addLabel(new LangString("Density of states", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DensityOfStates", quantityKind);
}
function addQuantityKind147(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DensityOfTheExhaustGases", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Density Of The Exhaust Gases", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DensityOfTheExhaustGases", quantityKind);
}
function addQuantityKind148(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Depth", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Depth", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Depth", quantityKind);
}
function addQuantityKind149(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DewPointTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", "T_d", undefined);
        quantityKind.addLabel(new LangString("Dew Point Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DewPointTemperature", quantityKind);
}
function addQuantityKind150(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Diameter", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "d", undefined);
        quantityKind.addLabel(new LangString("Diameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Diameter", quantityKind);
}
function addQuantityKind151(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DiastolicBloodPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Diastolic Blood Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DiastolicBloodPressure", quantityKind);
}
function addQuantityKind152(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DiffusionArea", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "L^2", undefined);
        quantityKind.addLabel(new LangString("Diffusion Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DiffusionArea", quantityKind);
}
function addQuantityKind153(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DiffusionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", "D", undefined);
        quantityKind.addLabel(new LangString("Diffusion Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DiffusionCoefficient", quantityKind);
}
function addQuantityKind154(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DiffusionCoefficientForFluenceRate", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "Dᵩ", undefined);
        quantityKind.addLabel(new LangString("Diffusion Coefficient for Fluence Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DiffusionCoefficientForFluenceRate", quantityKind);
}
function addQuantityKind155(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DiffusionLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "L", undefined);
        quantityKind.addLabel(new LangString("Diffusion Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DiffusionLength", quantityKind);
}
function addQuantityKind156(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Dimensionless", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "U", undefined);
        quantityKind.addLabel(new LangString("Dimensionless", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Dimensionless", quantityKind);
}
function addQuantityKind157(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DimensionlessRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Dimensionless Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DimensionlessRatio", quantityKind);
}
function addQuantityKind158(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Displacement", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Displacement", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Displacement", quantityKind);
}
function addQuantityKind159(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DisplacementCurrent", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", "I_D", undefined);
        quantityKind.addLabel(new LangString("Displacement Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DisplacementCurrent", quantityKind);
}
function addQuantityKind160(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DisplacementCurrentDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Displacement Current Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DisplacementCurrentDensity", quantityKind);
}
function addQuantityKind161(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DisplacementVectorOfIon", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "u", undefined);
        quantityKind.addLabel(new LangString("Displacement Vector of Ion", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DisplacementVectorOfIon", quantityKind);
}
function addQuantityKind162(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Dissipance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Dissipance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Dissipance", quantityKind);
}
function addQuantityKind163(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Distance", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "d", undefined);
        quantityKind.addLabel(new LangString("Distance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Distance", quantityKind);
}
function addQuantityKind164(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DistanceTraveledDuringBurn", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "s", undefined);
        quantityKind.addLabel(new LangString("Distance Traveled During a Burn", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DistanceTraveledDuringBurn", quantityKind);
}
function addQuantityKind165(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DonorDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "n_d", undefined);
        quantityKind.addLabel(new LangString("Donor Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DonorDensity", quantityKind);
}
function addQuantityKind166(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DonorIonizationEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_d", undefined);
        quantityKind.addLabel(new LangString("Donor Ionization Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DonorIonizationEnergy", quantityKind);
}
function addQuantityKind167(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DoseEquivalent", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "H", undefined);
        quantityKind.addLabel(new LangString("Dose Equivalent", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DoseEquivalent", quantityKind);
}
function addQuantityKind168(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DoseEquivalentQualityFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Q", undefined);
        quantityKind.addLabel(new LangString("Dose Equivalent Quality Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DoseEquivalentQualityFactor", quantityKind);
}
function addQuantityKind169(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DragCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "C_D", undefined);
        quantityKind.addLabel(new LangString("Drag Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DragCoefficient", quantityKind);
}
function addQuantityKind170(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DragForce", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", "D or F_D", undefined);
        quantityKind.addLabel(new LangString("Drag Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DragForce", quantityKind);
}
function addQuantityKind171(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DryVolume", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Dry Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DryVolume", quantityKind);
}
function addQuantityKind172(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DynamicFriction", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Dynamic Friction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DynamicFriction", quantityKind);
}
function addQuantityKind173(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DynamicFrictionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Dynamic Friction Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DynamicFrictionCoefficient", quantityKind);
}
function addQuantityKind174(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DynamicPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "q", undefined);
        quantityKind.addLabel(new LangString("Dynamic Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DynamicPressure", quantityKind);
}
function addQuantityKind175(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/DynamicViscosity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Dynamic Viscosity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/DynamicViscosity", quantityKind);
}
function addQuantityKind176(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EarthClosestApproachVehicleVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "V_o", undefined);
        quantityKind.addLabel(new LangString("Earth Closest Approach Vehicle Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EarthClosestApproachVehicleVelocity", quantityKind);
}
function addQuantityKind177(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EccentricityOfOrbit", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Eccentricity Of Orbit", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EccentricityOfOrbit", quantityKind);
}
function addQuantityKind178(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EffectiveExhaustVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "v_{e}", undefined);
        quantityKind.addLabel(new LangString("Effective Exhaustvelocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EffectiveExhaustVelocity", quantityKind);
}
function addQuantityKind179(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EffectiveMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "m^*", undefined);
        quantityKind.addLabel(new LangString("Effective Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EffectiveMass", quantityKind);
}
function addQuantityKind180(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EffectiveMultiplicationFactor", undefined, "k_{eff}", undefined);
        quantityKind.addLabel(new LangString("Effective Multiplication Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EffectiveMultiplicationFactor", quantityKind);
}
function addQuantityKind181(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Efficiency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Efficiency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Efficiency", quantityKind);
}
function addQuantityKind182(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EinsteinTransitionProbability", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "A_jkN_j", undefined);
        quantityKind.addLabel(new LangString("Einstein Transition Probability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EinsteinTransitionProbability", quantityKind);
}
function addQuantityKind183(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCharge", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Electric Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCharge", quantityKind);
}
function addQuantityKind184(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargeDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Charge Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargeDensity", quantityKind);
}
function addQuantityKind185(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargeLineDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Charge Line Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargeLineDensity", quantityKind);
}
function addQuantityKind186(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargeLinearDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Charge Linear Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargeLinearDensity", quantityKind);
}
function addQuantityKind187(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance", "http://qudt.org/vocab/dimensionvector/A-1E1L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric charge per amount of substance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance", quantityKind);
}
function addQuantityKind188(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargePerArea", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric charge per area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargePerArea", quantityKind);
}
function addQuantityKind189(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargePerMass", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Charge Per Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargePerMass", quantityKind);
}
function addQuantityKind190(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargeSurfaceDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Charge Surface Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargeSurfaceDensity", quantityKind);
}
function addQuantityKind191(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Charge Volume Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity", quantityKind);
}
function addQuantityKind192(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricConductivity", "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Conductivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricConductivity", quantityKind);
}
function addQuantityKind193(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrent", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", "I", undefined);
        quantityKind.addLabel(new LangString("Electric Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrent", quantityKind);
}
function addQuantityKind194(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", "J", undefined);
        quantityKind.addLabel(new LangString("Electric Current Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrentDensity", quantityKind);
}
function addQuantityKind195(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrentPerAngle", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Current per Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrentPerAngle", quantityKind);
}
function addQuantityKind196(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitEnergy", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Current per Unit Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitEnergy", quantityKind);
}
function addQuantityKind197(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitLength", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Current per Unit Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitLength", quantityKind);
}
function addQuantityKind198(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitTemperature", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Current per Unit Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitTemperature", quantityKind);
}
function addQuantityKind199(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricCurrentPhasor", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Current Phasor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricCurrentPhasor", quantityKind);
}
function addQuantityKind200(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricDipoleMoment", "http://qudt.org/vocab/dimensionvector/A0E1L1I0M0H0T1D0", "p", undefined);
        quantityKind.addLabel(new LangString("Electric Dipole Moment", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricDipoleMoment", quantityKind);
}
function addQuantityKind201(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricDisplacement", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", "D", undefined);
        quantityKind.addLabel(new LangString("Electric Displacement", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricDisplacement", quantityKind);
}
function addQuantityKind202(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricDisplacementField", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", "D", undefined);
        quantityKind.addLabel(new LangString("Electric Displacement Field", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricDisplacementField", quantityKind);
}
function addQuantityKind203(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricField", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Field", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricField", quantityKind);
}
function addQuantityKind204(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricFieldStrength", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", "E", undefined);
        quantityKind.addLabel(new LangString("Electric Field Strength", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricFieldStrength", quantityKind);
}
function addQuantityKind205(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricFlux", "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricFlux", quantityKind);
}
function addQuantityKind206(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricFluxDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricFluxDensity", quantityKind);
}
function addQuantityKind207(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricPolarizability", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Polarizability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricPolarizability", quantityKind);
}
function addQuantityKind208(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricPolarization", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", "P", undefined);
        quantityKind.addLabel(new LangString("Electric Polarization", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricPolarization", quantityKind);
}
function addQuantityKind209(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricPotential", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", "V", undefined);
        quantityKind.addLabel(new LangString("Electric Potential", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricPotential", quantityKind);
}
function addQuantityKind210(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricPotentialDifference", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", "V_{ab}", undefined);
        quantityKind.addLabel(new LangString("Electric Potential Difference", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricPotentialDifference", quantityKind);
}
function addQuantityKind211(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricPower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "P_E", undefined);
        quantityKind.addLabel(new LangString("Electric Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricPower", quantityKind);
}
function addQuantityKind212(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricPropulsionPropellantMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "M_P", undefined);
        quantityKind.addLabel(new LangString("Electric Propulsion Propellant Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricPropulsionPropellantMass", quantityKind);
}
function addQuantityKind213(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricQuadrupoleMoment", "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T1D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Electric Quadrupole Moment", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricQuadrupoleMoment", quantityKind);
}
function addQuantityKind214(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricSusceptibility", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Electric Susceptibility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricSusceptibility", quantityKind);
}
function addQuantityKind215(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectricalPowerToMassRatio", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Electrical Power To Mass Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectricalPowerToMassRatio", quantityKind);
}
function addQuantityKind216(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectrolyticConductivity", "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", "x", undefined);
        quantityKind.addLabel(new LangString("Electrolytic Conductivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectrolyticConductivity", quantityKind);
}
function addQuantityKind217(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectromagneticEnergyDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "w", undefined);
        quantityKind.addLabel(new LangString("Electromagnetic Energy Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectromagneticEnergyDensity", quantityKind);
}
function addQuantityKind218(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectromagneticPermeability", "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Permeability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectromagneticPermeability", quantityKind);
}
function addQuantityKind219(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectromagneticPermeabilityRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Electromagnetic Permeability Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectromagneticPermeabilityRatio", quantityKind);
}
function addQuantityKind220(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectromagneticWavePhaseSpeed", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "c", undefined);
        quantityKind.addLabel(new LangString("Electromagnetic Wave Phase Speed", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectromagneticWavePhaseSpeed", quantityKind);
}
function addQuantityKind221(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectromotiveForce", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", "E", undefined);
        quantityKind.addLabel(new LangString("Electromotive Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectromotiveForce", quantityKind);
}
function addQuantityKind222(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectronAffinity", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "χ", undefined);
        quantityKind.addLabel(new LangString("Electron Affinity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectronAffinity", quantityKind);
}
function addQuantityKind223(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectronDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "n", undefined);
        quantityKind.addLabel(new LangString("Electron Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectronDensity", quantityKind);
}
function addQuantityKind224(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectronMeanFreePath", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "l_e", undefined);
        quantityKind.addLabel(new LangString("Electron Mean Free Path", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectronMeanFreePath", quantityKind);
}
function addQuantityKind225(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElectronRadius", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "r_e", undefined);
        quantityKind.addLabel(new LangString("Electron Radius", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElectronRadius", quantityKind);
}
function addQuantityKind226(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ElementaryCharge", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0", "e", undefined);
        quantityKind.addLabel(new LangString("Elementary Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ElementaryCharge", quantityKind);
}
function addQuantityKind227(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EllipticalOrbitApogeeVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "V_a", undefined);
        quantityKind.addLabel(new LangString("Elliptical Orbit Apogee Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EllipticalOrbitApogeeVelocity", quantityKind);
}
function addQuantityKind228(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EllipticalOrbitPerigeeVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "V_p", undefined);
        quantityKind.addLabel(new LangString("Elliptical Orbit Perigee Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EllipticalOrbitPerigeeVelocity", quantityKind);
}
function addQuantityKind229(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Emissivity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Emissivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Emissivity", quantityKind);
}
function addQuantityKind230(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Energy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E", undefined);
        quantityKind.addLabel(new LangString("Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Energy", quantityKind);
}
function addQuantityKind231(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyDensity", quantityKind);
}
function addQuantityKind232(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyDensityOfStates", undefined, "n_E", undefined);
        quantityKind.addLabel(new LangString("Energy Density of States", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyDensityOfStates", quantityKind);
}
function addQuantityKind233(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyExpenditure", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy Expenditure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyExpenditure", quantityKind);
}
function addQuantityKind234(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyFluence", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy Fluence", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyFluence", quantityKind);
}
function addQuantityKind235(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyFluenceRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", "Ψ", undefined);
        quantityKind.addLabel(new LangString("Energy Fluence Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyFluenceRate", quantityKind);
}
function addQuantityKind236(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyImparted", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "ε", undefined);
        quantityKind.addLabel(new LangString("Energy Imparted", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyImparted", quantityKind);
}
function addQuantityKind237(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyInternal", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E", undefined);
        quantityKind.addLabel(new LangString("Internal Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyInternal", quantityKind);
}
function addQuantityKind238(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyKinetic", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Kinetic Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyKinetic", quantityKind);
}
function addQuantityKind239(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyLevel", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E", undefined);
        quantityKind.addLabel(new LangString("Energy Level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyLevel", quantityKind);
}
function addQuantityKind240(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyPerArea", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy per Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyPerArea", quantityKind);
}
function addQuantityKind241(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyPerAreaElectricCharge", "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy Per Area Electric Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyPerAreaElectricCharge", quantityKind);
}
function addQuantityKind242(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", "V", undefined);
        quantityKind.addLabel(new LangString("Energy per electric charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge", quantityKind);
}
function addQuantityKind243(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyPerMassAmountOfSubstance", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy and work per mass amount of substance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyPerMassAmountOfSubstance", quantityKind);
}
function addQuantityKind244(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyPerSquareMagneticFluxDensity", "http://qudt.org/vocab/dimensionvector/A0E2L2I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy Per Square Magnetic Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyPerSquareMagneticFluxDensity", quantityKind);
}
function addQuantityKind245(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EnergyPerTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Energy per temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EnergyPerTemperature", quantityKind);
}
function addQuantityKind246(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Enthalpy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "H", undefined);
        quantityKind.addLabel(new LangString("Enthalpy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Enthalpy", quantityKind);
}
function addQuantityKind247(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Entropy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", "S", undefined);
        quantityKind.addLabel(new LangString("Entropy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Entropy", quantityKind);
}
function addQuantityKind248(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EquilibriumConstant", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Equilibrium Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EquilibriumConstant", quantityKind);
}
function addQuantityKind249(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EquilibriumConstantOnConcentrationBasis", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Equilibrium Constant on Concentration Basis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EquilibriumConstantOnConcentrationBasis", quantityKind);
}
function addQuantityKind250(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EquilibriumConstantOnPressureBasis", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Equilibrium Constant on Pressure Basis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EquilibriumConstantOnPressureBasis", quantityKind);
}
function addQuantityKind251(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EquilibriumPositionVectorOfIon", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "R_0", undefined);
        quantityKind.addLabel(new LangString("Equilibrium Position Vector of Ion", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EquilibriumPositionVectorOfIon", quantityKind);
}
function addQuantityKind252(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EquivalentAbsorptionArea", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "A", undefined);
        quantityKind.addLabel(new LangString("Equivalent absorption area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EquivalentAbsorptionArea", quantityKind);
}
function addQuantityKind253(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EvaporativeHeatTransfer", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Evaporative Heat Transfer", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EvaporativeHeatTransfer", quantityKind);
}
function addQuantityKind254(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/EvaporativeHeatTransferCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", "h_e", undefined);
        quantityKind.addLabel(new LangString("Combined Non Evaporative Heat Transfer Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/EvaporativeHeatTransferCoefficient", quantityKind);
}
function addQuantityKind255(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExchangeIntegral", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "K", undefined);
        quantityKind.addLabel(new LangString("Exchange Integral", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExchangeIntegral", quantityKind);
}
function addQuantityKind256(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExhaustGasMeanMolecularWeight", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Exhaust Gas Mean Molecular Weight", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExhaustGasMeanMolecularWeight", quantityKind);
}
function addQuantityKind257(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExhaustGasesSpecificHeat", undefined, "c_p", undefined);
        quantityKind.addLabel(new LangString("Exhaust Gases Specific Heat", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExhaustGasesSpecificHeat", quantityKind);
}
function addQuantityKind258(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExhaustStreamPower", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Exhaust Stream Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExhaustStreamPower", quantityKind);
}
function addQuantityKind259(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExitPlaneCrossSectionalArea", undefined, "A_{e}", undefined);
        quantityKind.addLabel(new LangString("Exit Plane Cross-sectional Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExitPlaneCrossSectionalArea", quantityKind);
}
function addQuantityKind260(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExitPlanePressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "p_{e}", undefined);
        quantityKind.addLabel(new LangString("Exit Plane Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExitPlanePressure", quantityKind);
}
function addQuantityKind261(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExitPlaneTemperature", undefined, "T_e", undefined);
        quantityKind.addLabel(new LangString("Exit Plane Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExitPlaneTemperature", quantityKind);
}
function addQuantityKind262(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExpansionRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Expansion Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExpansionRatio", quantityKind);
}
function addQuantityKind263(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Exposure", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0", "X", undefined);
        quantityKind.addLabel(new LangString("Exposure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Exposure", quantityKind);
}
function addQuantityKind264(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExposureRate", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Exposure Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExposureRate", quantityKind);
}
function addQuantityKind265(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ExtentOfReaction", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Extent of Reaction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ExtentOfReaction", quantityKind);
}
function addQuantityKind266(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Flight Performance Reserve Propellant Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS", quantityKind);
}
function addQuantityKind267(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FUEL-BIAS", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Fuel Bias", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FUEL-BIAS", quantityKind);
}
function addQuantityKind268(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FastFissionFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Fast Fission Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FastFissionFactor", quantityKind);
}
function addQuantityKind269(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FermiAngularWavenumber", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", "k_F", undefined);
        quantityKind.addLabel(new LangString("Fermi Angular Wavenumber", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FermiAngularWavenumber", quantityKind);
}
function addQuantityKind270(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FermiEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_F", undefined);
        quantityKind.addLabel(new LangString("Fermi Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FermiEnergy", quantityKind);
}
function addQuantityKind271(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FermiTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", "T_F", undefined);
        quantityKind.addLabel(new LangString("Fermi Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FermiTemperature", quantityKind);
}
function addQuantityKind272(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FinalOrCurrentVehicleMass", undefined, "M", undefined);
        quantityKind.addLabel(new LangString("Final Or Current Vehicle Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FinalOrCurrentVehicleMass", quantityKind);
}
function addQuantityKind273(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FirstMomentOfArea", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("First Moment of Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FirstMomentOfArea", quantityKind);
}
function addQuantityKind274(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FirstStageMassRatio", undefined, "R_1", undefined);
        quantityKind.addLabel(new LangString("First Stage Mass Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FirstStageMassRatio", quantityKind);
}
function addQuantityKind275(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FishBiotransformationHalfLife", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Fish Biotransformation Half Life", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FishBiotransformationHalfLife", quantityKind);
}
function addQuantityKind276(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FissionCoreRadiusToHeightRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "R/H", undefined);
        quantityKind.addLabel(new LangString("Fission Core Radius To Height Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FissionCoreRadiusToHeightRatio", quantityKind);
}
function addQuantityKind277(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FissionFuelUtilizationFactor", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Fission Fuel Utilization Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FissionFuelUtilizationFactor", quantityKind);
}
function addQuantityKind278(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FissionMultiplicationFactor", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Fission Multiplication Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FissionMultiplicationFactor", quantityKind);
}
function addQuantityKind279(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FlashPoint", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Flash Point Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FlashPoint", quantityKind);
}
function addQuantityKind280(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FlightPathAngle", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Flight Path Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FlightPathAngle", quantityKind);
}
function addQuantityKind281(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Flux", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Flux", quantityKind);
}
function addQuantityKind282(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Force", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", "F", undefined);
        quantityKind.addLabel(new LangString("Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Force", quantityKind);
}
function addQuantityKind283(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ForceMagnitude", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "U", undefined);
        quantityKind.addLabel(new LangString("Force Magnitude", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ForceMagnitude", quantityKind);
}
function addQuantityKind284(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ForcePerAngle", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Force per Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ForcePerAngle", quantityKind);
}
function addQuantityKind285(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ForcePerArea", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "p", undefined);
        quantityKind.addLabel(new LangString("Force Per Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ForcePerArea", quantityKind);
}
function addQuantityKind286(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ForcePerAreaTime", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Force Per Area Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ForcePerAreaTime", quantityKind);
}
function addQuantityKind287(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ForcePerElectricCharge", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Force per Electric Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ForcePerElectricCharge", quantityKind);
}
function addQuantityKind288(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ForcePerLength", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Force per Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ForcePerLength", quantityKind);
}
function addQuantityKind289(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FractionalMass_Stage1", undefined, "A", undefined);
        quantityKind.addLabel(new LangString("Fractional Mass (Stage 1)", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FractionalMass_Stage1", quantityKind);
}
function addQuantityKind290(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FractionalMass_Stage2", undefined, "B", undefined);
        quantityKind.addLabel(new LangString("Fractional Mass (Stage 2)", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FractionalMass_Stage2", quantityKind);
}
function addQuantityKind291(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FractionalMass_Stage3", undefined, "C", undefined);
        quantityKind.addLabel(new LangString("Fractional Mass (Stage 3)", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FractionalMass_Stage3", quantityKind);
}
function addQuantityKind292(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FractionallMass_Stages1-3", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Fractional Mass (Stages 1 through 3)", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FractionallMass_Stages1-3", quantityKind);
}
function addQuantityKind293(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Frequency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Frequency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Frequency", quantityKind);
}
function addQuantityKind294(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Friction", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Friction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Friction", quantityKind);
}
function addQuantityKind295(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FrictionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Friction Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FrictionCoefficient", quantityKind);
}
function addQuantityKind296(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Fugacity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Fugacity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Fugacity", quantityKind);
}
function addQuantityKind297(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FundamentalLatticeVector", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "a_1, a_2, a_3", undefined);
        quantityKind.addLabel(new LangString("Fundamental Lattice vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FundamentalLatticeVector", quantityKind);
}
function addQuantityKind298(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/FundamentalReciprocalLatticeVector", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", "b_1, b_2, b_3", undefined);
        quantityKind.addLabel(new LangString("Fundamental Reciprocal Lattice Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/FundamentalReciprocalLatticeVector", quantityKind);
}
function addQuantityKind299(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GFactorOfNucleus", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "g", undefined);
        quantityKind.addLabel(new LangString("g-Factor of Nucleus", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GFactorOfNucleus", quantityKind);
}
function addQuantityKind300(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GROSS-LIFT-OFF-WEIGHT", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Gross Lift-Off Weight", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GROSS-LIFT-OFF-WEIGHT", quantityKind);
}
function addQuantityKind301(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Gain", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Gain", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Gain", quantityKind);
}
function addQuantityKind302(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GapEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_g", undefined);
        quantityKind.addLabel(new LangString("Gap Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GapEnergy", quantityKind);
}
function addQuantityKind303(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GeneralizedCoordinate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "q_i", undefined);
        quantityKind.addLabel(new LangString("Generalized Coordinate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GeneralizedCoordinate", quantityKind);
}
function addQuantityKind304(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GeneralizedForce", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Q_i", undefined);
        quantityKind.addLabel(new LangString("Generalized Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GeneralizedForce", quantityKind);
}
function addQuantityKind305(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GeneralizedMomentum", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "p_i", undefined);
        quantityKind.addLabel(new LangString("Generalized Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GeneralizedMomentum", quantityKind);
}
function addQuantityKind306(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GeneralizedVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Generalized Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GeneralizedVelocity", quantityKind);
}
function addQuantityKind307(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GibbsEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "G", undefined);
        quantityKind.addLabel(new LangString("Gibbs Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GibbsEnergy", quantityKind);
}
function addQuantityKind308(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GrandCanonicalPartitionFunction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Grand Canonical Partition Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GrandCanonicalPartitionFunction", quantityKind);
}
function addQuantityKind309(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GravitationalAttraction", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", "G", undefined);
        quantityKind.addLabel(new LangString("Gravitational Attraction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GravitationalAttraction", quantityKind);
}
function addQuantityKind310(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Gravity_API", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("API Gravity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Gravity_API", quantityKind);
}
function addQuantityKind311(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GroupSpeedOfSound", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "c", undefined);
        quantityKind.addLabel(new LangString("Group Speed of Sound", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GroupSpeedOfSound", quantityKind);
}
function addQuantityKind312(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GrowingDegreeDay_Cereal", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Growing Degree Days (Cereals)", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GrowingDegreeDay_Cereal", quantityKind);
}
function addQuantityKind313(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GruneisenParameter", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Gruneisen Parameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GruneisenParameter", quantityKind);
}
function addQuantityKind314(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GustatoryThreshold", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Gustatory Threshold", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GustatoryThreshold", quantityKind);
}
function addQuantityKind315(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/GyromagneticRatio", "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Gyromagnetic Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/GyromagneticRatio", quantityKind);
}
function addQuantityKind316(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Half-Life", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", "T_{1/2}", undefined);
        quantityKind.addLabel(new LangString("Half-life", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Half-Life", quantityKind);
}
function addQuantityKind317(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Half-ValueThickness", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "d_{1/2}", undefined);
        quantityKind.addLabel(new LangString("Half-Value Thickness", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Half-ValueThickness", quantityKind);
}
function addQuantityKind318(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HallCoefficient", "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M0H0T-1D0", "R_H, A_H", undefined);
        quantityKind.addLabel(new LangString("Hall Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HallCoefficient", quantityKind);
}
function addQuantityKind319(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HamiltonFunction", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "H", undefined);
        quantityKind.addLabel(new LangString("Hamilton Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HamiltonFunction", quantityKind);
}
function addQuantityKind320(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeadEndPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Head End Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeadEndPressure", quantityKind);
}
function addQuantityKind321(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeartRate", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Heart Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeartRate", quantityKind);
}
function addQuantityKind322(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Heat", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Heat", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Heat", quantityKind);
}
function addQuantityKind323(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeatCapacity", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", "C_P", undefined);
        quantityKind.addLabel(new LangString("Heat Capacity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeatCapacity", quantityKind);
}
function addQuantityKind324(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeatCapacityRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Heat Capacity Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeatCapacityRatio", quantityKind);
}
function addQuantityKind325(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeatFlowRate", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Heat Flow Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeatFlowRate", quantityKind);
}
function addQuantityKind326(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeatFlowRatePerUnitArea", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Heat Flow Rate per Unit Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeatFlowRatePerUnitArea", quantityKind);
}
function addQuantityKind327(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HeatFluxDensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Heat Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HeatFluxDensity", quantityKind);
}
function addQuantityKind328(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Height", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "h", undefined);
        quantityKind.addLabel(new LangString("Height", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Height", quantityKind);
}
function addQuantityKind329(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HelmholtzEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "A", undefined);
        quantityKind.addLabel(new LangString("Helmholtz Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HelmholtzEnergy", quantityKind);
}
function addQuantityKind330(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HenrysLawVolatilityConstant", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Henry's Law Volatility Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HenrysLawVolatilityConstant", quantityKind);
}
function addQuantityKind331(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HoleDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "p", undefined);
        quantityKind.addLabel(new LangString("Hole Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HoleDensity", quantityKind);
}
function addQuantityKind332(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HorizontalVelocity", undefined, "V_{X}", undefined);
        quantityKind.addLabel(new LangString("Horizontal Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HorizontalVelocity", quantityKind);
}
function addQuantityKind333(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/HyperfineStructureQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "F", undefined);
        quantityKind.addLabel(new LangString("Hyperfine Structure Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/HyperfineStructureQuantumNumber", quantityKind);
}
function addQuantityKind334(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/INERT-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inert Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/INERT-MASS", quantityKind);
}
function addQuantityKind335(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IgnitionIntervalTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Ignition interval time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IgnitionIntervalTime", quantityKind);
}
function addQuantityKind336(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Illuminance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Illuminance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Illuminance", quantityKind);
}
function addQuantityKind337(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Impedance", "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Impedance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Impedance", quantityKind);
}
function addQuantityKind338(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Incidence", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Incidence", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Incidence", quantityKind);
}
function addQuantityKind339(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IncidenceProportion", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Incidence Proportion", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IncidenceProportion", quantityKind);
}
function addQuantityKind340(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IncidenceRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Incidence Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IncidenceRate", quantityKind);
}
function addQuantityKind341(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Inductance", "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", "L", undefined);
        quantityKind.addLabel(new LangString("Inductance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Inductance", quantityKind);
}
function addQuantityKind342(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InfiniteMultiplicationFactor", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Infinite Multiplication Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InfiniteMultiplicationFactor", quantityKind);
}
function addQuantityKind343(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InformationEntropy", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Information Entropy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InformationEntropy", quantityKind);
}
function addQuantityKind344(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InformationFlowRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Information flow rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InformationFlowRate", quantityKind);
}
function addQuantityKind345(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InitialExpansionRatio", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Initial Expansion Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InitialExpansionRatio", quantityKind);
}
function addQuantityKind346(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InitialNozzleThroatDiameter", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Initial Nozzle Throat Diameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InitialNozzleThroatDiameter", quantityKind);
}
function addQuantityKind347(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InitialVehicleMass", undefined, "M_{o}", undefined);
        quantityKind.addLabel(new LangString("Initial Vehicle Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InitialVehicleMass", quantityKind);
}
function addQuantityKind348(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InitialVelocity", undefined, "V_{i}", undefined);
        quantityKind.addLabel(new LangString("Initial Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InitialVelocity", quantityKind);
}
function addQuantityKind349(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InstantaneousPower", undefined, "p", undefined);
        quantityKind.addLabel(new LangString("Instantaneous Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InstantaneousPower", quantityKind);
}
function addQuantityKind350(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InternalConversionFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "a", undefined);
        quantityKind.addLabel(new LangString("InternalConversionFactor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InternalConversionFactor", quantityKind);
}
function addQuantityKind351(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InternalEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "U", undefined);
        quantityKind.addLabel(new LangString("Internal Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InternalEnergy", quantityKind);
}
function addQuantityKind352(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IntinsicCarrierDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "n_i", undefined);
        quantityKind.addLabel(new LangString("Intinsic Carrier Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IntinsicCarrierDensity", quantityKind);
}
function addQuantityKind353(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseAmountOfSubstance", "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse amount of substance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseAmountOfSubstance", quantityKind);
}
function addQuantityKind354(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseEnergy", quantityKind);
}
function addQuantityKind355(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseLength", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseLength", quantityKind);
}
function addQuantityKind356(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseLengthTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Length Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseLengthTemperature", quantityKind);
}
function addQuantityKind357(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseMagneticFlux", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Magnetic Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseMagneticFlux", quantityKind);
}
function addQuantityKind358(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InversePermittivity", "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-4D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Permittivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InversePermittivity", quantityKind);
}
function addQuantityKind359(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InversePressure", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InversePressure", quantityKind);
}
function addQuantityKind360(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseSquareEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L-4I0M-2H0T4D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Square Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseSquareEnergy", quantityKind);
}
function addQuantityKind361(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseSquareMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-2H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Square Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseSquareMass", quantityKind);
}
function addQuantityKind362(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseSquareTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Square Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseSquareTime", quantityKind);
}
function addQuantityKind363(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseTemperature", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseTemperature", quantityKind);
}
function addQuantityKind364(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseTime", quantityKind);
}
function addQuantityKind365(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseTimeTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Time Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseTimeTemperature", quantityKind);
}
function addQuantityKind366(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/InverseVolume", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Inverse Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/InverseVolume", quantityKind);
}
function addQuantityKind367(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IonCurrent", undefined, "j", undefined);
        quantityKind.addLabel(new LangString("Ion Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IonCurrent", quantityKind);
}
function addQuantityKind368(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IonDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "N, n^+, n^-", undefined);
        quantityKind.addLabel(new LangString("Ion Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IonDensity", quantityKind);
}
function addQuantityKind369(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IonTransportNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "t_B", undefined);
        quantityKind.addLabel(new LangString("Ion Transport Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IonTransportNumber", quantityKind);
}
function addQuantityKind370(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IonicCharge", undefined, "q", undefined);
        quantityKind.addLabel(new LangString("Ionic Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IonicCharge", quantityKind);
}
function addQuantityKind371(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IonicStrength", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", "I", undefined);
        quantityKind.addLabel(new LangString("Ionic Strength", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IonicStrength", quantityKind);
}
function addQuantityKind372(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IonizationEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_i", undefined);
        quantityKind.addLabel(new LangString("Ionization Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IonizationEnergy", quantityKind);
}
function addQuantityKind373(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Irradiance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", "E", undefined);
        quantityKind.addLabel(new LangString("Irradiance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Irradiance", quantityKind);
}
function addQuantityKind374(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IsentropicCompressibility", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Isentropic Compressibility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IsentropicCompressibility", quantityKind);
}
function addQuantityKind375(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IsentropicExponent", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Isentropic Exponent", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IsentropicExponent", quantityKind);
}
function addQuantityKind376(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/IsothermalCompressibility", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Isothermal compressibility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/IsothermalCompressibility", quantityKind);
}
function addQuantityKind377(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Kerma", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "K", undefined);
        quantityKind.addLabel(new LangString("Kerma", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Kerma", quantityKind);
}
function addQuantityKind378(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/KermaRate", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Kerma Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/KermaRate", quantityKind);
}
function addQuantityKind379(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/KinematicViscosity", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Kinematic Viscosity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/KinematicViscosity", quantityKind);
}
function addQuantityKind380(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/KineticEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "K", undefined);
        quantityKind.addLabel(new LangString("Kinetic Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/KineticEnergy", quantityKind);
}
function addQuantityKind381(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LagrangeFunction", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "L", undefined);
        quantityKind.addLabel(new LangString("Lagrange Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LagrangeFunction", quantityKind);
}
function addQuantityKind382(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Landau-GinzburgNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Landau-Ginzburg Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Landau-GinzburgNumber", quantityKind);
}
function addQuantityKind383(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LandeGFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "g", undefined);
        quantityKind.addLabel(new LangString("Lande g-Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LandeGFactor", quantityKind);
}
function addQuantityKind384(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LarmorAngularFrequency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Larmor Angular Frequency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LarmorAngularFrequency", quantityKind);
}
function addQuantityKind385(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LatticePlaneSpacing", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "d", undefined);
        quantityKind.addLabel(new LangString("Lattice Plane Spacing", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LatticePlaneSpacing", quantityKind);
}
function addQuantityKind386(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LatticeVector", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "R", undefined);
        quantityKind.addLabel(new LangString("Lattice Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LatticeVector", quantityKind);
}
function addQuantityKind387(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LeakageFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Leakage Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LeakageFactor", quantityKind);
}
function addQuantityKind388(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Length", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "l", undefined);
        quantityKind.addLabel(new LangString("Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Length", quantityKind);
}
function addQuantityKind389(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthByForce", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Length Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthByForce", quantityKind);
}
function addQuantityKind390(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Length Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthEnergy", quantityKind);
}
function addQuantityKind391(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthMass", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Length Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthMass", quantityKind);
}
function addQuantityKind392(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthMolarEnergy", "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Length Molar Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthMolarEnergy", quantityKind);
}
function addQuantityKind393(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthPerUnitElectricCurrent", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Length per Unit Electric Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthPerUnitElectricCurrent", quantityKind);
}
function addQuantityKind394(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthPercentage", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Length Percentage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthPercentage", quantityKind);
}
function addQuantityKind395(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Length Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthTemperature", quantityKind);
}
function addQuantityKind396(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LengthTemperatureTime", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Length Temperature Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LengthTemperatureTime", quantityKind);
}
function addQuantityKind397(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Lethargy", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "u", undefined);
        quantityKind.addLabel(new LangString("Lethargy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Lethargy", quantityKind);
}
function addQuantityKind398(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LevelWidth", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Level Width", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LevelWidth", quantityKind);
}
function addQuantityKind399(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LiftCoefficient", undefined, "C_{L}", undefined);
        quantityKind.addLabel(new LangString("Lift Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LiftCoefficient", quantityKind);
}
function addQuantityKind400(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LiftForce", undefined, "L", undefined);
        quantityKind.addLabel(new LangString("Lift Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LiftForce", quantityKind);
}
function addQuantityKind401(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Absorption Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient", quantityKind);
}
function addQuantityKind402(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearAcceleration", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Acceleration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearAcceleration", quantityKind);
}
function addQuantityKind403(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Attenuation Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient", quantityKind);
}
function addQuantityKind404(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearCompressibility", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Compressibility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearCompressibility", quantityKind);
}
function addQuantityKind405(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearDensity", quantityKind);
}
function addQuantityKind406(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearElectricCurrent", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Electric Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearElectricCurrent", quantityKind);
}
function addQuantityKind407(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", "J_s", undefined);
        quantityKind.addLabel(new LangString("Linear Electric Current Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity", quantityKind);
}
function addQuantityKind408(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearEnergyTransfer", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Energy Transfer", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearEnergyTransfer", quantityKind);
}
function addQuantityKind409(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearExpansionCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Expansion Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearExpansionCoefficient", quantityKind);
}
function addQuantityKind410(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearIonization", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", "N_{il}", undefined);
        quantityKind.addLabel(new LangString("Linear Ionization", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearIonization", quantityKind);
}
function addQuantityKind411(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearMomentum", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", "p", undefined);
        quantityKind.addLabel(new LangString("Linear Momentum", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearMomentum", quantityKind);
}
function addQuantityKind412(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearStrain", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Strain", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearStrain", quantityKind);
}
function addQuantityKind413(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearThermalExpansion", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Linear Thermal Expansion", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearThermalExpansion", quantityKind);
}
function addQuantityKind414(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinearVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "v", undefined);
        quantityKind.addLabel(new LangString("Linear Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinearVelocity", quantityKind);
}
function addQuantityKind415(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LinkedFlux", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Linked Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LinkedFlux", quantityKind);
}
function addQuantityKind416(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LiquidVolume", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Liquid Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LiquidVolume", quantityKind);
}
function addQuantityKind417(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LogOctanolAirPartitionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Octanol Air Partition Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LogOctanolAirPartitionCoefficient", quantityKind);
}
function addQuantityKind418(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LogOctanolWaterPartitionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Logarithm of Octanol Water Partition Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LogOctanolWaterPartitionCoefficient", quantityKind);
}
function addQuantityKind419(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LogarithmicFrequencyInterval", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Logarithmic frequency interval", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LogarithmicFrequencyInterval", quantityKind);
}
function addQuantityKind420(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LondonPenetrationDepth", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "λₗ", undefined);
        quantityKind.addLabel(new LangString("London Penetration Depth", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LondonPenetrationDepth", quantityKind);
}
function addQuantityKind421(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Long-RangeOrderParameter", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "R, s", undefined);
        quantityKind.addLabel(new LangString("Long-Range Order Parameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Long-RangeOrderParameter", quantityKind);
}
function addQuantityKind422(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LorenzCoefficient", undefined, "L", undefined);
        quantityKind.addLabel(new LangString("Lorenz Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LorenzCoefficient", quantityKind);
}
function addQuantityKind423(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LossAngle", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Loss Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LossAngle", quantityKind);
}
function addQuantityKind424(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LossFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "d", undefined);
        quantityKind.addLabel(new LangString("Loss Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LossFactor", quantityKind);
}
function addQuantityKind425(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LowerCriticalMagneticFluxDensity", undefined, "B_{c1}", undefined);
        quantityKind.addLabel(new LangString("Lower Critical Magnetic Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LowerCriticalMagneticFluxDensity", quantityKind);
}
function addQuantityKind426(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Luminance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", "L_v", undefined);
        quantityKind.addLabel(new LangString("Luminance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Luminance", quantityKind);
}
function addQuantityKind427(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousEfficacy", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Luminous Efficacy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousEfficacy", quantityKind);
}
function addQuantityKind428(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousEmmitance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", "M_v", undefined);
        quantityKind.addLabel(new LangString("Luminous Emmitance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousEmmitance", quantityKind);
}
function addQuantityKind429(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousEnergy", undefined, "Q_v", undefined);
        quantityKind.addLabel(new LangString("Luminous Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousEnergy", quantityKind);
}
function addQuantityKind430(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousExposure", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", "H_v", undefined);
        quantityKind.addLabel(new LangString("Luminous Exposure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousExposure", quantityKind);
}
function addQuantityKind431(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousFlux", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "F", undefined);
        quantityKind.addLabel(new LangString("Luminous Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousFlux", quantityKind);
}
function addQuantityKind432(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousFluxPerArea", "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Luminous Flux per Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousFluxPerArea", quantityKind);
}
function addQuantityKind433(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/LuminousIntensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0", "J", undefined);
        quantityKind.addLabel(new LangString("Luminous Intensity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/LuminousIntensity", quantityKind);
}
function addQuantityKind434(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MASS-DELIVERED", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Delivered", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MASS-DELIVERED", quantityKind);
}
function addQuantityKind435(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MASS-GROWTH-ALLOWANCE", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Growth Allowance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MASS-GROWTH-ALLOWANCE", quantityKind);
}
function addQuantityKind436(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MASS-MARGIN", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Margin", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MASS-MARGIN", quantityKind);
}
function addQuantityKind437(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MASS-PROPERTY-UNCERTAINTY", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Property Uncertainty", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MASS-PROPERTY-UNCERTAINTY", quantityKind);
}
function addQuantityKind438(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Y", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", "I_{y}", undefined);
        quantityKind.addLabel(new LangString("Moment of Inertia in the Y axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Y", quantityKind);
}
function addQuantityKind439(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Z", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", "I_{z}", undefined);
        quantityKind.addLabel(new LangString("Moment of Inertia in the Z axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Z", quantityKind);
}
function addQuantityKind440(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MachNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Ma", undefined);
        quantityKind.addLabel(new LangString("Mach Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MachNumber", quantityKind);
}
function addQuantityKind441(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MacroscopicCrossSection", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Macroscopic Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MacroscopicCrossSection", quantityKind);
}
function addQuantityKind442(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MacroscopicTotalCrossSection", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Macroscopic Total Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MacroscopicTotalCrossSection", quantityKind);
}
function addQuantityKind443(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MadelungConstant", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Madelung Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MadelungConstant", quantityKind);
}
function addQuantityKind444(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticAreaMoment", undefined, "m", undefined);
        quantityKind.addLabel(new LangString("Magnetic Area Moment", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticAreaMoment", quantityKind);
}
function addQuantityKind445(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment", "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0", "J_m", undefined);
        quantityKind.addLabel(new LangString("Magnetic Dipole Moment", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticDipoleMoment", quantityKind);
}
function addQuantityKind446(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticField", "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", "B", undefined);
        quantityKind.addLabel(new LangString("Magnetic Field", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticField", quantityKind);
}
function addQuantityKind447(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetic Field Strength", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H", quantityKind);
}
function addQuantityKind448(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticFlux", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetic Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticFlux", quantityKind);
}
function addQuantityKind449(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticFluxDensity", "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0", "B", undefined);
        quantityKind.addLabel(new LangString("Magnetic flux density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticFluxDensity", quantityKind);
}
function addQuantityKind450(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetic flux per unit length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength", quantityKind);
}
function addQuantityKind451(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticMoment", undefined, "m", undefined);
        quantityKind.addLabel(new LangString("Magnetic Moment", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticMoment", quantityKind);
}
function addQuantityKind452(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticPolarization", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetic Polarization", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticPolarization", quantityKind);
}
function addQuantityKind453(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "m", undefined);
        quantityKind.addLabel(new LangString("Magnetic Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticQuantumNumber", quantityKind);
}
function addQuantityKind454(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticReluctivity", "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M-1H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetic Reluctivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticReluctivity", quantityKind);
}
function addQuantityKind455(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticSusceptability", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetic Susceptability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticSusceptability", quantityKind);
}
function addQuantityKind456(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticTension", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", "U_m", undefined);
        quantityKind.addLabel(new LangString("Magnetic Tension", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticTension", quantityKind);
}
function addQuantityKind457(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagneticVectorPotential", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", "A", undefined);
        quantityKind.addLabel(new LangString("Magnetic Vector Potential", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagneticVectorPotential", quantityKind);
}
function addQuantityKind458(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Magnetization", undefined, "H_i", undefined);
        quantityKind.addLabel(new LangString("Magnetization", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Magnetization", quantityKind);
}
function addQuantityKind459(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagnetizationField", undefined, "M", undefined);
        quantityKind.addLabel(new LangString("Magnetization Field", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagnetizationField", quantityKind);
}
function addQuantityKind460(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MagnetomotiveForce", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Magnetomotive Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MagnetomotiveForce", quantityKind);
}
function addQuantityKind461(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Mass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "m", undefined);
        quantityKind.addLabel(new LangString("Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Mass", quantityKind);
}
function addQuantityKind462(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassAbsorptionCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Absorption Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassAbsorptionCoefficient", quantityKind);
}
function addQuantityKind463(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassAmountOfSubstance", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Amount of Substance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassAmountOfSubstance", quantityKind);
}
function addQuantityKind464(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassAmountOfSubstanceTemperature", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Amount of Substance Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassAmountOfSubstanceTemperature", quantityKind);
}
function addQuantityKind465(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Attenuation Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient", quantityKind);
}
function addQuantityKind466(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassConcentration", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Concentration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassConcentration", quantityKind);
}
function addQuantityKind467(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassConcentrationOfWater", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", "w", undefined);
        quantityKind.addLabel(new LangString("Mass Concentration of Water", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassConcentrationOfWater", quantityKind);
}
function addQuantityKind468(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassConcentrationOfWaterVapour", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", "v", undefined);
        quantityKind.addLabel(new LangString("Mass Concentration of Water Vapour", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassConcentrationOfWaterVapour", quantityKind);
}
function addQuantityKind469(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassDefect", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "B", undefined);
        quantityKind.addLabel(new LangString("Mass Defect", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassDefect", quantityKind);
}
function addQuantityKind470(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassDensity", quantityKind);
}
function addQuantityKind471(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassEnergyTransferCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Energy Transfer Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassEnergyTransferCoefficient", quantityKind);
}
function addQuantityKind472(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassExcess", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Excess", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassExcess", quantityKind);
}
function addQuantityKind473(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassFlowRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", "q_m", undefined);
        quantityKind.addLabel(new LangString("Mass Flow Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassFlowRate", quantityKind);
}
function addQuantityKind474(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassFraction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "w_B", undefined);
        quantityKind.addLabel(new LangString("Mass Fraction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassFraction", quantityKind);
}
function addQuantityKind475(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassFractionOfDryMatter", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "w_d", undefined);
        quantityKind.addLabel(new LangString("Mass Fraction of Dry Matter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassFractionOfDryMatter", quantityKind);
}
function addQuantityKind476(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassFractionOfWater", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "w_{H_2o}", undefined);
        quantityKind.addLabel(new LangString("Mass Fraction of Water", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassFractionOfWater", quantityKind);
}
function addQuantityKind477(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "A", undefined);
        quantityKind.addLabel(new LangString("Mass Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassNumber", quantityKind);
}
function addQuantityKind478(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassOfElectricalPowerSupply", undefined, "M_{E}", undefined);
        quantityKind.addLabel(new LangString("Mass Of Electrical Power Supply", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassOfElectricalPowerSupply", quantityKind);
}
function addQuantityKind479(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassOfSolidBooster", undefined, "M_{SB}", undefined);
        quantityKind.addLabel(new LangString("Mass Of Solid Booster", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassOfSolidBooster", quantityKind);
}
function addQuantityKind480(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassOfTheEarth", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Of The Earth", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassOfTheEarth", quantityKind);
}
function addQuantityKind481(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassPerArea", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass per Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassPerArea", quantityKind);
}
function addQuantityKind482(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassPerAreaTime", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass per Area Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassPerAreaTime", quantityKind);
}
function addQuantityKind483(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassPerElectricCharge", "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass per Electric Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassPerElectricCharge", quantityKind);
}
function addQuantityKind484(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassPerLength", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass per Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassPerLength", quantityKind);
}
function addQuantityKind485(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassPerTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass per Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassPerTime", quantityKind);
}
function addQuantityKind486(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "R or M_{R}", undefined);
        quantityKind.addLabel(new LangString("Mass Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassRatio", quantityKind);
}
function addQuantityKind487(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassRatioOfWaterToDryMatter", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "u", undefined);
        quantityKind.addLabel(new LangString("Mass Concentration of Water To Dry Matter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassRatioOfWaterToDryMatter", quantityKind);
}
function addQuantityKind488(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassRatioOfWaterVapourToDryGas", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "x", undefined);
        quantityKind.addLabel(new LangString("Mass Ratio of Water Vapour to Dry Gas", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassRatioOfWaterVapourToDryGas", quantityKind);
}
function addQuantityKind489(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mass Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassTemperature", quantityKind);
}
function addQuantityKind490(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassicActivity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0", "a", undefined);
        quantityKind.addLabel(new LangString("Massic Activity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassicActivity", quantityKind);
}
function addQuantityKind491(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MassieuFunction", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", "J", undefined);
        quantityKind.addLabel(new LangString("Massieu Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MassieuFunction", quantityKind);
}
function addQuantityKind492(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MaxExpectedOperatingThrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Maximum Expected Operating Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MaxExpectedOperatingThrust", quantityKind);
}
function addQuantityKind493(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MaxOperatingThrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Max Operating Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MaxOperatingThrust", quantityKind);
}
function addQuantityKind494(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MaxSeaLevelThrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Max Sea Level Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MaxSeaLevelThrust", quantityKind);
}
function addQuantityKind495(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MaximumBeta-ParticleEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Eᵦ", undefined);
        quantityKind.addLabel(new LangString("Maximum Beta-Particle Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MaximumBeta-ParticleEnergy", quantityKind);
}
function addQuantityKind496(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MaximumExpectedOperatingPressure", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Maximum Expected Operating Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MaximumExpectedOperatingPressure", quantityKind);
}
function addQuantityKind497(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MaximumOperatingPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Maximum Operating Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MaximumOperatingPressure", quantityKind);
}
function addQuantityKind498(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MeanEnergyImparted", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "ε̅", undefined);
        quantityKind.addLabel(new LangString("Mean Energy Imparted", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MeanEnergyImparted", quantityKind);
}
function addQuantityKind499(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MeanFreePath", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "λ", undefined);
        quantityKind.addLabel(new LangString("Mean Free Path", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MeanFreePath", quantityKind);
}
function addQuantityKind500(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MeanLifetime", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mean Lifetime", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MeanLifetime", quantityKind);
}
function addQuantityKind501(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MeanLinearRange", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "R", undefined);
        quantityKind.addLabel(new LangString("Mean Linear Range", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MeanLinearRange", quantityKind);
}
function addQuantityKind502(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MeanMassRange", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mean Mass Range", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MeanMassRange", quantityKind);
}
function addQuantityKind503(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MechanicalEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E", undefined);
        quantityKind.addLabel(new LangString("Mechanical Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MechanicalEnergy", quantityKind);
}
function addQuantityKind504(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MechanicalImpedance", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mechanical Impedance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MechanicalImpedance", quantityKind);
}
function addQuantityKind505(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MechanicalMobility", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mechanical Mobility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MechanicalMobility", quantityKind);
}
function addQuantityKind506(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MechanicalSurfaceImpedance", undefined, "Z", undefined);
        quantityKind.addLabel(new LangString("Mechanical surface impedance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MechanicalSurfaceImpedance", quantityKind);
}
function addQuantityKind507(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MeltingPoint", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Melting Point Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MeltingPoint", quantityKind);
}
function addQuantityKind508(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MicroCanonicalPartitionFunction", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Micro Canonical Partition Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MicroCanonicalPartitionFunction", quantityKind);
}
function addQuantityKind509(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MicrobialFormation", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Microbial Formation", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MicrobialFormation", quantityKind);
}
function addQuantityKind510(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MigrationArea", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "M^2", undefined);
        quantityKind.addLabel(new LangString("Migration Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MigrationArea", quantityKind);
}
function addQuantityKind511(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MigrationLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "M", undefined);
        quantityKind.addLabel(new LangString("Migration Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MigrationLength", quantityKind);
}
function addQuantityKind512(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Mobility", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Mobility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Mobility", quantityKind);
}
function addQuantityKind513(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MobilityRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "b", undefined);
        quantityKind.addLabel(new LangString("Mobility Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MobilityRatio", quantityKind);
}
function addQuantityKind514(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ModulusOfAdmittance", undefined, "Y", undefined);
        quantityKind.addLabel(new LangString("Modulus Of Admittance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ModulusOfAdmittance", quantityKind);
}
function addQuantityKind515(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ModulusOfElasticity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "E", undefined);
        quantityKind.addLabel(new LangString("Modulus of Elasticity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ModulusOfElasticity", quantityKind);
}
function addQuantityKind516(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ModulusOfImpedance", "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", "Z", undefined);
        quantityKind.addLabel(new LangString("Modulus Of Impedance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ModulusOfImpedance", quantityKind);
}
function addQuantityKind517(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolalityOfSolute", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0", "b_B", undefined);
        quantityKind.addLabel(new LangString("Molality of Solute", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolalityOfSolute", quantityKind);
}
function addQuantityKind518(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarAbsorptionCoefficient", undefined, "x", undefined);
        quantityKind.addLabel(new LangString("Molar Absorption Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarAbsorptionCoefficient", quantityKind);
}
function addQuantityKind519(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarAngularMomentum", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Molar Angular Momentum", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarAngularMomentum", quantityKind);
}
function addQuantityKind520(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarAttenuationCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Molar Attenuation Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarAttenuationCoefficient", quantityKind);
}
function addQuantityKind521(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarConductivity", "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Molar Conductivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarConductivity", quantityKind);
}
function addQuantityKind522(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarEnergy", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", "U_M", undefined);
        quantityKind.addLabel(new LangString("Molar Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarEnergy", quantityKind);
}
function addQuantityKind523(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarEntropy", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0", "S_m", undefined);
        quantityKind.addLabel(new LangString("Molar Entropy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarEntropy", quantityKind);
}
function addQuantityKind524(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarFlowRate", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", "q_V", undefined);
        quantityKind.addLabel(new LangString("Molar Flow Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarFlowRate", quantityKind);
}
function addQuantityKind525(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarHeatCapacity", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0", "C_m", undefined);
        quantityKind.addLabel(new LangString("Molar Heat Capacity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarHeatCapacity", quantityKind);
}
function addQuantityKind526(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarMass", "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0", "M", undefined);
        quantityKind.addLabel(new LangString("Molar Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarMass", quantityKind);
}
function addQuantityKind527(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarOpticalRotatoryPower", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Molar Optical Rotatory Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarOpticalRotatoryPower", quantityKind);
}
function addQuantityKind528(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarRefractivity", "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Molar Refractivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarRefractivity", quantityKind);
}
function addQuantityKind529(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolarVolume", "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0", "V_m", undefined);
        quantityKind.addLabel(new LangString("Molar Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolarVolume", quantityKind);
}
function addQuantityKind530(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MoleFraction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Mole Fraction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MoleFraction", quantityKind);
}
function addQuantityKind531(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolecularConcentration", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "C_B", undefined);
        quantityKind.addLabel(new LangString("Molecular Concentration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolecularConcentration", quantityKind);
}
function addQuantityKind532(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolecularMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "M", undefined);
        quantityKind.addLabel(new LangString("Molecular Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolecularMass", quantityKind);
}
function addQuantityKind533(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MolecularViscosity", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Molecular Viscosity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MolecularViscosity", quantityKind);
}
function addQuantityKind534(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MomentOfForce", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "M", undefined);
        quantityKind.addLabel(new LangString("Moment of Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MomentOfForce", quantityKind);
}
function addQuantityKind535(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MomentOfInertia", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0", "I", undefined);
        quantityKind.addLabel(new LangString("Moment of Inertia", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MomentOfInertia", quantityKind);
}
function addQuantityKind536(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Momentum", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", "p", undefined);
        quantityKind.addLabel(new LangString("Momentum", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Momentum", quantityKind);
}
function addQuantityKind537(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MomentumPerAngle", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Momentum per Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MomentumPerAngle", quantityKind);
}
function addQuantityKind538(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MorbidityRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Morbidity Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MorbidityRate", quantityKind);
}
function addQuantityKind539(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MortalityRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Mortality Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MortalityRate", quantityKind);
}
function addQuantityKind540(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MultiplicationFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "k", undefined);
        quantityKind.addLabel(new LangString("Multiplication Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MultiplicationFactor", quantityKind);
}
function addQuantityKind541(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/MutualInductance", undefined, "L_{mn}", undefined);
        quantityKind.addLabel(new LangString("Mutual Inductance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/MutualInductance", quantityKind);
}
function addQuantityKind542(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NOMINAL-ASCENT-PROPELLANT-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Nominal Ascent Propellant Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NOMINAL-ASCENT-PROPELLANT-MASS", quantityKind);
}
function addQuantityKind543(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NapierianAbsorbance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "A_e, B", undefined);
        quantityKind.addLabel(new LangString("Napierian Absorbance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NapierianAbsorbance", quantityKind);
}
function addQuantityKind544(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NeelTemperature", undefined, "T_C", undefined);
        quantityKind.addLabel(new LangString("Neel Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NeelTemperature", quantityKind);
}
function addQuantityKind545(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NeutronDiffusionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", "D", undefined);
        quantityKind.addLabel(new LangString("Diffusion Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NeutronDiffusionCoefficient", quantityKind);
}
function addQuantityKind546(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NeutronDiffusionLength", undefined, "L_{r}", undefined);
        quantityKind.addLabel(new LangString("Neutron Diffusion Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NeutronDiffusionLength", quantityKind);
}
function addQuantityKind547(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NeutronNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "N", undefined);
        quantityKind.addLabel(new LangString("Neutron Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NeutronNumber", quantityKind);
}
function addQuantityKind548(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NeutronYieldPerAbsorption", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Neutron Yield per Absorption", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NeutronYieldPerAbsorption", quantityKind);
}
function addQuantityKind549(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NeutronYieldPerFission", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Neutron Yield per Fission", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NeutronYieldPerFission", quantityKind);
}
function addQuantityKind550(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Non-LeakageProbability", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Non-Leakage Probability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Non-LeakageProbability", quantityKind);
}
function addQuantityKind551(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NonActivePower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "Q'", undefined);
        quantityKind.addLabel(new LangString("Non-active Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NonActivePower", quantityKind);
}
function addQuantityKind552(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NormalStress", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Normal Stress", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NormalStress", quantityKind);
}
function addQuantityKind553(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NozzleThroatCrossSectionalArea", undefined, "A^*", undefined);
        quantityKind.addLabel(new LangString("Nozzle Throat Cross-sectional Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NozzleThroatCrossSectionalArea", quantityKind);
}
function addQuantityKind554(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NozzleThroatDiameter", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Nozzle Throat Diameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NozzleThroatDiameter", quantityKind);
}
function addQuantityKind555(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NozzleThroatPressure", undefined, "p^*", undefined);
        quantityKind.addLabel(new LangString("Nozzle Throat Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NozzleThroatPressure", quantityKind);
}
function addQuantityKind556(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NozzleWallsThrustReaction", undefined, "F_R", undefined);
        quantityKind.addLabel(new LangString("Nozzle Walls Thrust Reaction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NozzleWallsThrustReaction", quantityKind);
}
function addQuantityKind557(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Nuclear Quadrupole Moment", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment", quantityKind);
}
function addQuantityKind558(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NuclearRadius", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "R", undefined);
        quantityKind.addLabel(new LangString("Nuclear Radius", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NuclearRadius", quantityKind);
}
function addQuantityKind559(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NuclearSpinQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "I", undefined);
        quantityKind.addLabel(new LangString("Spin Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NuclearSpinQuantumNumber", quantityKind);
}
function addQuantityKind560(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NucleonNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "A", undefined);
        quantityKind.addLabel(new LangString("Nucleon number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NucleonNumber", quantityKind);
}
function addQuantityKind561(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NumberDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "n", undefined);
        quantityKind.addLabel(new LangString("Number Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NumberDensity", quantityKind);
}
function addQuantityKind562(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/NumberOfParticles", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "N_B", undefined);
        quantityKind.addLabel(new LangString("Number of Particles", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/NumberOfParticles", quantityKind);
}
function addQuantityKind563(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OlfactoryThreshold", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Olfactory Threshold", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OlfactoryThreshold", quantityKind);
}
function addQuantityKind564(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumPerUnitMass", undefined, "h", undefined);
        quantityKind.addLabel(new LangString("Orbital Angular Momentum per Unit Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumPerUnitMass", quantityKind);
}
function addQuantityKind565(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "l", undefined);
        quantityKind.addLabel(new LangString("Orbital Angular Momentum Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumQuantumNumber", quantityKind);
}
function addQuantityKind566(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OrbitalRadialDistance", undefined, "r", undefined);
        quantityKind.addLabel(new LangString("Orbital Radial Distance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OrbitalRadialDistance", quantityKind);
}
function addQuantityKind567(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OrderOfReflection", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "n", undefined);
        quantityKind.addLabel(new LangString("Order of Reflection", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OrderOfReflection", quantityKind);
}
function addQuantityKind568(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OsmoticCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Osmotic Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OsmoticCoefficient", quantityKind);
}
function addQuantityKind569(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OsmoticPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "Π", undefined);
        quantityKind.addLabel(new LangString("Osmotic Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OsmoticPressure", quantityKind);
}
function addQuantityKind570(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/OverRangeDistance", undefined, "s_i", undefined);
        quantityKind.addLabel(new LangString("Over-range distance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/OverRangeDistance", quantityKind);
}
function addQuantityKind571(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PREDICTED-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Predicted Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PREDICTED-MASS", quantityKind);
}
function addQuantityKind572(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Product of Inertia", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA", quantityKind);
}
function addQuantityKind573(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_X", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Product of Inertia in the X axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_X", quantityKind);
}
function addQuantityKind574(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Y", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Product of Inertia in the Y axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Y", quantityKind);
}
function addQuantityKind575(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Z", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Product of Inertia in the Z axis", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Z", quantityKind);
}
function addQuantityKind576(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PackingFraction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "f", undefined);
        quantityKind.addLabel(new LangString("Packing Fraction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PackingFraction", quantityKind);
}
function addQuantityKind577(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PartialPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "p_B", undefined);
        quantityKind.addLabel(new LangString("Partial Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PartialPressure", quantityKind);
}
function addQuantityKind578(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ParticleCurrent", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", "J", undefined);
        quantityKind.addLabel(new LangString("Particle Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ParticleCurrent", quantityKind);
}
function addQuantityKind579(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ParticleFluence", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Particle Fluence", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ParticleFluence", quantityKind);
}
function addQuantityKind580(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ParticleFluenceRate", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Particle Fluence Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ParticleFluenceRate", quantityKind);
}
function addQuantityKind581(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ParticleNumberDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0", "n", undefined);
        quantityKind.addLabel(new LangString("Particle Number Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ParticleNumberDensity", quantityKind);
}
function addQuantityKind582(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ParticlePositionVector", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "r, R", undefined);
        quantityKind.addLabel(new LangString("Particle Position Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ParticlePositionVector", quantityKind);
}
function addQuantityKind583(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ParticleSourceDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", "S", undefined);
        quantityKind.addLabel(new LangString("Particle Source Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ParticleSourceDensity", quantityKind);
}
function addQuantityKind584(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PathLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "s", undefined);
        quantityKind.addLabel(new LangString("Path Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PathLength", quantityKind);
}
function addQuantityKind585(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PayloadMass", undefined, "M_P", undefined);
        quantityKind.addLabel(new LangString("Payload Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PayloadMass", quantityKind);
}
function addQuantityKind586(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PayloadRatio", undefined, "L", undefined);
        quantityKind.addLabel(new LangString("Payload Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PayloadRatio", quantityKind);
}
function addQuantityKind587(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PeltierCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Peltier Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PeltierCoefficient", quantityKind);
}
function addQuantityKind588(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Period", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Period", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Period", quantityKind);
}
function addQuantityKind589(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Permeability", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Permeability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Permeability", quantityKind);
}
function addQuantityKind590(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PermeabilityRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Permeability Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PermeabilityRatio", quantityKind);
}
function addQuantityKind591(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Permeance", "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Permeance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Permeance", quantityKind);
}
function addQuantityKind592(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Permittivity", "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Permittivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Permittivity", quantityKind);
}
function addQuantityKind593(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PermittivityRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Permittivity Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PermittivityRatio", quantityKind);
}
function addQuantityKind594(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhaseCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Phase coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhaseCoefficient", quantityKind);
}
function addQuantityKind595(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhaseDifference", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Phase Difference", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhaseDifference", quantityKind);
}
function addQuantityKind596(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "c", undefined);
        quantityKind.addLabel(new LangString("Phase speed of sound", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound", quantityKind);
}
function addQuantityKind597(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhononMeanFreePath", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "l_{ph}", undefined);
        quantityKind.addLabel(new LangString("Phonon Mean Free Path", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhononMeanFreePath", quantityKind);
}
function addQuantityKind598(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhotoThresholdOfAwarenessFunction", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Photo Threshold of Awareness Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhotoThresholdOfAwarenessFunction", quantityKind);
}
function addQuantityKind599(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhotonIntensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Photon Intensity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhotonIntensity", quantityKind);
}
function addQuantityKind600(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhotonRadiance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Photon Radiance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhotonRadiance", quantityKind);
}
function addQuantityKind601(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFlux", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Photosynthetic Photon Flux", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFlux", quantityKind);
}
function addQuantityKind602(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFluxDensity", "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Photosynthetic Photon Flux Density", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFluxDensity", quantityKind);
}
function addQuantityKind603(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PlanckFunction", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Planck Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PlanckFunction", quantityKind);
}
function addQuantityKind604(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PlaneAngle", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Plane Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PlaneAngle", quantityKind);
}
function addQuantityKind605(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PoissonRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Poisson Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PoissonRatio", quantityKind);
}
function addQuantityKind606(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PolarMomentOfInertia", undefined, "J_{zz}", undefined);
        quantityKind.addLabel(new LangString("Polar moment of inertia", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PolarMomentOfInertia", quantityKind);
}
function addQuantityKind607(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Polarizability", "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Polarizability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Polarizability", quantityKind);
}
function addQuantityKind608(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PolarizationField", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0", "P", undefined);
        quantityKind.addLabel(new LangString("Polarization Field", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PolarizationField", quantityKind);
}
function addQuantityKind609(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Population", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Population", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Population", quantityKind);
}
function addQuantityKind610(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PositionVector", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "r", undefined);
        quantityKind.addLabel(new LangString("Position Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PositionVector", quantityKind);
}
function addQuantityKind611(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PotentialEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "PE", undefined);
        quantityKind.addLabel(new LangString("Potential Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PotentialEnergy", quantityKind);
}
function addQuantityKind612(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Power", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "P", undefined);
        quantityKind.addLabel(new LangString("Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Power", quantityKind);
}
function addQuantityKind613(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerArea", "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Power Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerArea", quantityKind);
}
function addQuantityKind614(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Power Area per Solid Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle", quantityKind);
}
function addQuantityKind615(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Power Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerFactor", quantityKind);
}
function addQuantityKind616(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerPerArea", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Power Per Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerPerArea", quantityKind);
}
function addQuantityKind617(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerPerAreaAngle", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Power per Area Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerPerAreaAngle", quantityKind);
}
function addQuantityKind618(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerPerAreaQuarticTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-4T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Power per area quartic temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerPerAreaQuarticTemperature", quantityKind);
}
function addQuantityKind619(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PowerPerElectricCharge", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Power Per Electric Charge", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PowerPerElectricCharge", quantityKind);
}
function addQuantityKind620(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PoyntingVector", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Poynting Vector", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PoyntingVector", quantityKind);
}
function addQuantityKind621(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Pressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Pressure", quantityKind);
}
function addQuantityKind622(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PressureBurningRateConstant", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Pressure Burning Rate Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PressureBurningRateConstant", quantityKind);
}
function addQuantityKind623(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PressureBurningRateIndex", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Pressure Burning Rate Index", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PressureBurningRateIndex", quantityKind);
}
function addQuantityKind624(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PressureCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Pressure Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PressureCoefficient", quantityKind);
}
function addQuantityKind625(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PressurePercentage", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Pressure Percentage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PressurePercentage", quantityKind);
}
function addQuantityKind626(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PressureRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Pressure Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PressureRatio", quantityKind);
}
function addQuantityKind627(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Prevalence", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Prevalence", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Prevalence", quantityKind);
}
function addQuantityKind628(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PrincipalQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "n", undefined);
        quantityKind.addLabel(new LangString("Principal Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PrincipalQuantumNumber", quantityKind);
}
function addQuantityKind629(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PropagationCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Propagation coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PropagationCoefficient", quantityKind);
}
function addQuantityKind630(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PropellantBurnRate", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Propellant Burn Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PropellantBurnRate", quantityKind);
}
function addQuantityKind631(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PropellantMass", undefined, "M_f", undefined);
        quantityKind.addLabel(new LangString("Propellant Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PropellantMass", quantityKind);
}
function addQuantityKind632(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PropellantMeanBulkTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Propellant Mean Bulk Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PropellantMeanBulkTemperature", quantityKind);
}
function addQuantityKind633(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/PropellantTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Propellant Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/PropellantTemperature", quantityKind);
}
function addQuantityKind634(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/QualityFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Q", undefined);
        quantityKind.addLabel(new LangString("Quality Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/QualityFactor", quantityKind);
}
function addQuantityKind635(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/QuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "n", undefined);
        quantityKind.addLabel(new LangString("Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/QuantumNumber", quantityKind);
}
function addQuantityKind636(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/QuarticElectricDipoleMomentPerCubicEnergy", "http://qudt.org/vocab/dimensionvector/A0E4L-2I0M-3H0T10D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Quartic Electric Dipole Moment per Cubic Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/QuarticElectricDipoleMomentPerCubicEnergy", quantityKind);
}
function addQuantityKind637(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RESERVE-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "M_{E}", undefined);
        quantityKind.addLabel(new LangString("Reserve Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RESERVE-MASS", quantityKind);
}
function addQuantityKind638(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RF-Power", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("RF-Power Level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RF-Power", quantityKind);
}
function addQuantityKind639(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadialDistance", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Radial Distance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadialDistance", quantityKind);
}
function addQuantityKind640(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Radiance", undefined, "L", undefined);
        quantityKind.addLabel(new LangString("Radiance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Radiance", quantityKind);
}
function addQuantityKind641(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadianceFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Radiance Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadianceFactor", quantityKind);
}
function addQuantityKind642(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantEmmitance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Radiant Emmitance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantEmmitance", quantityKind);
}
function addQuantityKind643(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Q_e", undefined);
        quantityKind.addLabel(new LangString("Radiant Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantEnergy", quantityKind);
}
function addQuantityKind644(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantEnergyDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Radiant Energy Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantEnergyDensity", quantityKind);
}
function addQuantityKind645(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantExposure", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", "H_e", undefined);
        quantityKind.addLabel(new LangString("Radiant Exposure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantExposure", quantityKind);
}
function addQuantityKind646(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantFluence", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", "H_e,0", undefined);
        quantityKind.addLabel(new LangString("Radiant Fluence", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantFluence", quantityKind);
}
function addQuantityKind647(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantFluenceRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", "E_e,0", undefined);
        quantityKind.addLabel(new LangString("Radiant Fluence Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantFluenceRate", quantityKind);
}
function addQuantityKind648(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantFlux", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Radiant Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantFlux", quantityKind);
}
function addQuantityKind649(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiantIntensity", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "I", undefined);
        quantityKind.addLabel(new LangString("Radiant Intensity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiantIntensity", quantityKind);
}
function addQuantityKind650(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiativeHeatTransfer", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Radiative Heat Transfer", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiativeHeatTransfer", quantityKind);
}
function addQuantityKind651(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Radiosity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Radiosity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Radiosity", quantityKind);
}
function addQuantityKind652(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Radius", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "r", undefined);
        quantityKind.addLabel(new LangString("Radius", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Radius", quantityKind);
}
function addQuantityKind653(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RadiusOfCurvature", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Radius of Curvature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RadiusOfCurvature", quantityKind);
}
function addQuantityKind654(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RatioOfSpecificHeatCapacities", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Ratio of Specific Heat Capacities", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RatioOfSpecificHeatCapacities", quantityKind);
}
function addQuantityKind655(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Reactance", "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", "X", undefined);
        quantityKind.addLabel(new LangString("Reactance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Reactance", quantityKind);
}
function addQuantityKind656(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ReactionEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Reaction Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ReactionEnergy", quantityKind);
}
function addQuantityKind657(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ReactivePower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Reactive Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ReactivePower", quantityKind);
}
function addQuantityKind658(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Reactivity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Reactivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Reactivity", quantityKind);
}
function addQuantityKind659(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ReactorTimeConstant", undefined, "T", undefined);
        quantityKind.addLabel(new LangString("Reactor Time Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ReactorTimeConstant", quantityKind);
}
function addQuantityKind660(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RecombinationCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", "a", undefined);
        quantityKind.addLabel(new LangString("Recombination Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RecombinationCoefficient", quantityKind);
}
function addQuantityKind661(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Refectance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Refectance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Refectance", quantityKind);
}
function addQuantityKind662(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Reflectance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "r", undefined);
        quantityKind.addLabel(new LangString("Reflectance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Reflectance", quantityKind);
}
function addQuantityKind663(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ReflectanceFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "R", undefined);
        quantityKind.addLabel(new LangString("Reflectance Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ReflectanceFactor", quantityKind);
}
function addQuantityKind664(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RefractiveIndex", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "n", undefined);
        quantityKind.addLabel(new LangString("Refractive index", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RefractiveIndex", quantityKind);
}
function addQuantityKind665(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeAtomicMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "A_r", undefined);
        quantityKind.addLabel(new LangString("Relative Atomic Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeAtomicMass", quantityKind);
}
function addQuantityKind666(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeHumidity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Humidity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeHumidity", quantityKind);
}
function addQuantityKind667(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeLuminousFlux", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Luminous Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeLuminousFlux", quantityKind);
}
function addQuantityKind668(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeMassConcentrationOfVapour", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Mass Concentration of Vapour", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeMassConcentrationOfVapour", quantityKind);
}
function addQuantityKind669(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeMassDefect", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "B_r", undefined);
        quantityKind.addLabel(new LangString("Relative Mass Defect", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeMassDefect", quantityKind);
}
function addQuantityKind670(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeMassDensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "d", undefined);
        quantityKind.addLabel(new LangString("Relative Mass Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeMassDensity", quantityKind);
}
function addQuantityKind671(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeMassExcess", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Mass Excess", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeMassExcess", quantityKind);
}
function addQuantityKind672(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeMassRatioOfVapour", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Mass Ratio of Vapour", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeMassRatioOfVapour", quantityKind);
}
function addQuantityKind673(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativeMolecularMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "M_r", undefined);
        quantityKind.addLabel(new LangString("Relative Molecular Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativeMolecularMass", quantityKind);
}
function addQuantityKind674(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativePartialPressure", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Partial Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativePartialPressure", quantityKind);
}
function addQuantityKind675(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelativePressureCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Relative Pressure Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelativePressureCoefficient", quantityKind);
}
function addQuantityKind676(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RelaxationTIme", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Relaxation TIme", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RelaxationTIme", quantityKind);
}
function addQuantityKind677(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Reluctance", undefined, "R_m", undefined);
        quantityKind.addLabel(new LangString("Reluctance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Reluctance", quantityKind);
}
function addQuantityKind678(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ResidualResistivity", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Residual Resistivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ResidualResistivity", quantityKind);
}
function addQuantityKind679(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Resistance", "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0", "R", undefined);
        quantityKind.addLabel(new LangString("Resistance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Resistance", quantityKind);
}
function addQuantityKind680(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ResistancePercentage", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Resistance Percentage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ResistancePercentage", quantityKind);
}
function addQuantityKind681(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Resistivity", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Resistivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Resistivity", quantityKind);
}
function addQuantityKind682(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ResonanceEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_r, E_{res}", undefined);
        quantityKind.addLabel(new LangString("Resonance Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ResonanceEnergy", quantityKind);
}
function addQuantityKind683(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ResonanceEscapeProbability", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "p", undefined);
        quantityKind.addLabel(new LangString("Resonance Escape Probability", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ResonanceEscapeProbability", quantityKind);
}
function addQuantityKind684(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ResonanceEscapeProbabilityForFission", undefined, "p", undefined);
        quantityKind.addLabel(new LangString("Resonance Escape Probability For Fission", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ResonanceEscapeProbabilityForFission", quantityKind);
}
function addQuantityKind685(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RespiratoryRate", undefined, "Vf, Rf or RR", undefined);
        quantityKind.addLabel(new LangString("Respiratory Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RespiratoryRate", quantityKind);
}
function addQuantityKind686(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RestEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "E_0", undefined);
        quantityKind.addLabel(new LangString("Rest Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RestEnergy", quantityKind);
}
function addQuantityKind687(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RestMass", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", "m_X", undefined);
        quantityKind.addLabel(new LangString("Rest Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RestMass", quantityKind);
}
function addQuantityKind688(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ReverberationTime", undefined, "T", undefined);
        quantityKind.addLabel(new LangString("Reverberation Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ReverberationTime", quantityKind);
}
function addQuantityKind689(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ReynoldsNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "Re", undefined);
        quantityKind.addLabel(new LangString("Reynolds Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ReynoldsNumber", quantityKind);
}
function addQuantityKind690(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RichardsonConstant", undefined, "A", undefined);
        quantityKind.addLabel(new LangString("Richardson Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RichardsonConstant", quantityKind);
}
function addQuantityKind691(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/RocketAtmosphericTransverseForce", undefined, "T", undefined);
        quantityKind.addLabel(new LangString("Rocket Atmospheric Transverse Force", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/RocketAtmosphericTransverseForce", quantityKind);
}
function addQuantityKind692(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ScalarMagneticPotential", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0", "V_m", undefined);
        quantityKind.addLabel(new LangString("Scalar Magnetic Potential", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ScalarMagneticPotential", quantityKind);
}
function addQuantityKind693(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea", "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0", "I", undefined);
        quantityKind.addLabel(new LangString("Second Axial Moment of Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea", quantityKind);
}
function addQuantityKind694(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SecondMomentOfArea", undefined, "J", undefined);
        quantityKind.addLabel(new LangString("Second Moment of Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SecondMomentOfArea", quantityKind);
}
function addQuantityKind695(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant", "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Reaction Rate Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant", quantityKind);
}
function addQuantityKind696(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea", "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0", "I", undefined);
        quantityKind.addLabel(new LangString("Second Polar Moment of Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea", quantityKind);
}
function addQuantityKind697(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SecondStageMassRatio", undefined, "R_2", undefined);
        quantityKind.addLabel(new LangString("Second Stage Mass Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SecondStageMassRatio", quantityKind);
}
function addQuantityKind698(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SectionModulus", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", "Z", undefined);
        quantityKind.addLabel(new LangString("Section Modulus", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SectionModulus", quantityKind);
}
function addQuantityKind699(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SeebeckCoefficient", undefined, "S_{ab}", undefined);
        quantityKind.addLabel(new LangString("Seebeck Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SeebeckCoefficient", quantityKind);
}
function addQuantityKind700(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SerumOrPlasmaLevel", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Serum or Plasma Level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SerumOrPlasmaLevel", quantityKind);
}
function addQuantityKind701(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ShannonDiversityIndex", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Shannon Diversity Index", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ShannonDiversityIndex", quantityKind);
}
function addQuantityKind702(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ShearModulus", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "G", undefined);
        quantityKind.addLabel(new LangString("Shear Modulus", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ShearModulus", quantityKind);
}
function addQuantityKind703(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ShearStrain", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Shear Strain", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ShearStrain", quantityKind);
}
function addQuantityKind704(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ShearStress", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Shear Stress", undefined));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ShearStress", quantityKind);
}
function addQuantityKind705(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Short-RangeOrderParameter", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Short-Range Order Parameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Short-RangeOrderParameter", quantityKind);
}
function addQuantityKind706(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SignalDetectionThreshold", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Signal Detection Threshold", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SignalDetectionThreshold", quantityKind);
}
function addQuantityKind707(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SignalStrength", "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Signal Strength", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SignalStrength", quantityKind);
}
function addQuantityKind708(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SingleStageLauncherMassRatio", undefined, "R_o", undefined);
        quantityKind.addLabel(new LangString("Single Stage Launcher Mass Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SingleStageLauncherMassRatio", quantityKind);
}
function addQuantityKind709(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Slowing-DownArea", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "L_s^2", undefined);
        quantityKind.addLabel(new LangString("Slowing-Down Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Slowing-DownArea", quantityKind);
}
function addQuantityKind710(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Slowing-DownDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0", "q", undefined);
        quantityKind.addLabel(new LangString("Slowing-Down Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Slowing-DownDensity", quantityKind);
}
function addQuantityKind711(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Slowing-DownLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "L_s", undefined);
        quantityKind.addLabel(new LangString("Slowing-Down Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Slowing-DownLength", quantityKind);
}
function addQuantityKind712(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoilAdsorptionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Soil Adsorption Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoilAdsorptionCoefficient", quantityKind);
}
function addQuantityKind713(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SolidAngle", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Solid Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SolidAngle", quantityKind);
}
function addQuantityKind714(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SolidStateDiffusionLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "L, L_n, L_p", undefined);
        quantityKind.addLabel(new LangString("Diffusion Length (Solid State Physics)", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SolidStateDiffusionLength", quantityKind);
}
function addQuantityKind715(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Solubility_Water", "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Water Solubility", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Solubility_Water", quantityKind);
}
function addQuantityKind716(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundEnergyDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "E", undefined);
        quantityKind.addLabel(new LangString("Sound energy density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundEnergyDensity", quantityKind);
}
function addQuantityKind717(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundExposure", undefined, "E", undefined);
        quantityKind.addLabel(new LangString("Sound exposure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundExposure", quantityKind);
}
function addQuantityKind718(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundExposureLevel", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "L", undefined);
        quantityKind.addLabel(new LangString("Sound exposure level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundExposureLevel", quantityKind);
}
function addQuantityKind719(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundIntensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", "I", undefined);
        quantityKind.addLabel(new LangString("Sound intensity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundIntensity", quantityKind);
}
function addQuantityKind720(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundParticleAcceleration", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", "a", undefined);
        quantityKind.addLabel(new LangString("Sound particle acceleration", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundParticleAcceleration", quantityKind);
}
function addQuantityKind721(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundParticleDisplacement", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "ξ", undefined);
        quantityKind.addLabel(new LangString("Sound Particle Displacement", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundParticleDisplacement", quantityKind);
}
function addQuantityKind722(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundParticleVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "v", undefined);
        quantityKind.addLabel(new LangString("Sound particle velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundParticleVelocity", quantityKind);
}
function addQuantityKind723(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundPower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", "P", undefined);
        quantityKind.addLabel(new LangString("Sound power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundPower", quantityKind);
}
function addQuantityKind724(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundPowerLevel", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "L", undefined);
        quantityKind.addLabel(new LangString("Sound power level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundPowerLevel", quantityKind);
}
function addQuantityKind725(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "p", undefined);
        quantityKind.addLabel(new LangString("Sound pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundPressure", quantityKind);
}
function addQuantityKind726(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundPressureLevel", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "L", undefined);
        quantityKind.addLabel(new LangString("Sound pressure level", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundPressureLevel", quantityKind);
}
function addQuantityKind727(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundReductionIndex", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "R", undefined);
        quantityKind.addLabel(new LangString("Sound reduction index", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundReductionIndex", quantityKind);
}
function addQuantityKind728(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SoundVolumeVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", "q", undefined);
        quantityKind.addLabel(new LangString("Sound volume velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SoundVolumeVelocity", quantityKind);
}
function addQuantityKind729(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SourceVoltage", undefined, "U_s", undefined);
        quantityKind.addLabel(new LangString("Source Voltage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SourceVoltage", quantityKind);
}
function addQuantityKind730(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SourceVoltageBetweenSubstances", undefined, "E_{ab}", undefined);
        quantityKind.addLabel(new LangString("Source Voltage Between Substances", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SourceVoltageBetweenSubstances", quantityKind);
}
function addQuantityKind731(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpatialSummationFunction", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Spatial Summation Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpatialSummationFunction", quantityKind);
}
function addQuantityKind732(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Acoustic Impedance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance", quantityKind);
}
function addQuantityKind733(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificActivity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0", "a", undefined);
        quantityKind.addLabel(new LangString("Specific Activity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificActivity", quantityKind);
}
function addQuantityKind734(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "e", undefined);
        quantityKind.addLabel(new LangString("Specific Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificEnergy", quantityKind);
}
function addQuantityKind735(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificEnergyImparted", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "z", undefined);
        quantityKind.addLabel(new LangString("Specific Energy Imparted", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificEnergyImparted", quantityKind);
}
function addQuantityKind736(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificEnthalpy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "h", undefined);
        quantityKind.addLabel(new LangString("Specific Enthalpy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificEnthalpy", quantityKind);
}
function addQuantityKind737(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificEntropy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", "s", undefined);
        quantityKind.addLabel(new LangString("Specific Entropy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificEntropy", quantityKind);
}
function addQuantityKind738(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificGibbsEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "g", undefined);
        quantityKind.addLabel(new LangString("Specific Gibbs Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificGibbsEnergy", quantityKind);
}
function addQuantityKind739(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", "c", undefined);
        quantityKind.addLabel(new LangString("Specific Heat Capacity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatCapacity", quantityKind);
}
function addQuantityKind740(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", "c_p", undefined);
        quantityKind.addLabel(new LangString("Specific heat capacity at constant pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure", quantityKind);
}
function addQuantityKind741(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", "c_v", undefined);
        quantityKind.addLabel(new LangString("Specific heat capacity at constant volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume", quantityKind);
}
function addQuantityKind742(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtSaturation", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", "c_{sat}", undefined);
        quantityKind.addLabel(new LangString("Specific Heat Capacity at Saturation", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtSaturation", quantityKind);
}
function addQuantityKind743(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatPressure", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Heat Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatPressure", quantityKind);
}
function addQuantityKind744(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatVolume", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Heat Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatVolume", quantityKind);
}
function addQuantityKind745(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHeatsRatio", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Heats Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHeatsRatio", quantityKind);
}
function addQuantityKind746(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificHelmholtzEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "a", undefined);
        quantityKind.addLabel(new LangString("Specific Helmholtz Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificHelmholtzEnergy", quantityKind);
}
function addQuantityKind747(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificImpulse", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Impulse", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificImpulse", quantityKind);
}
function addQuantityKind748(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificImpulseByMass", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Impulse by Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificImpulseByMass", quantityKind);
}
function addQuantityKind749(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificImpulseByWeight", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Impulse by Weight", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificImpulseByWeight", quantityKind);
}
function addQuantityKind750(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificInternalEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0", "u", undefined);
        quantityKind.addLabel(new LangString("Specific Internal Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificInternalEnergy", quantityKind);
}
function addQuantityKind751(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificOpticalRotatoryPower", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Optical Rotatory Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificOpticalRotatoryPower", quantityKind);
}
function addQuantityKind752(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificThrust", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Specific thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificThrust", quantityKind);
}
function addQuantityKind753(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpecificVolume", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Specific Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpecificVolume", quantityKind);
}
function addQuantityKind754(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpectralAngularCrossSection", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Spectral Angular Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpectralAngularCrossSection", quantityKind);
}
function addQuantityKind755(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpectralCrossSection", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Spectral Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpectralCrossSection", quantityKind);
}
function addQuantityKind756(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpectralLuminousEfficiency", undefined, "V", undefined);
        quantityKind.addLabel(new LangString("Spectral Luminous Efficiency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpectralLuminousEfficiency", quantityKind);
}
function addQuantityKind757(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Spectral Radiant Energy Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity", quantityKind);
}
function addQuantityKind758(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Speed", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Speed", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Speed", quantityKind);
}
function addQuantityKind759(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpeedOfLight", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Speed of Light", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpeedOfLight", quantityKind);
}
function addQuantityKind760(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpeedOfSound", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "c", undefined);
        quantityKind.addLabel(new LangString("Speed of sound", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpeedOfSound", quantityKind);
}
function addQuantityKind761(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SphericalIlluminance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Illuminance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SphericalIlluminance", quantityKind);
}
function addQuantityKind762(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Spin", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", "s", undefined);
        quantityKind.addLabel(new LangString("Spin", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Spin", quantityKind);
}
function addQuantityKind763(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SpinQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "s", undefined);
        quantityKind.addLabel(new LangString("Spin Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SpinQuantumNumber", quantityKind);
}
function addQuantityKind764(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SquareEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L4I0M2H0T-4D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Square Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SquareEnergy", quantityKind);
}
function addQuantityKind765(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StagePropellantMass", undefined, "M_F", undefined);
        quantityKind.addLabel(new LangString("Stage Propellant Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StagePropellantMass", quantityKind);
}
function addQuantityKind766(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StageStructuralMass", undefined, "M_S", undefined);
        quantityKind.addLabel(new LangString("Stage Structure Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StageStructuralMass", quantityKind);
}
function addQuantityKind767(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StandardAbsoluteActivity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Standard Absolute Activity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StandardAbsoluteActivity", quantityKind);
}
function addQuantityKind768(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StandardChemicalPotential", "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Standard Chemical Potential", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StandardChemicalPotential", quantityKind);
}
function addQuantityKind769(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StandardGravitationalParameter", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Standard Gravitational Parameter", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StandardGravitationalParameter", quantityKind);
}
function addQuantityKind770(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StaticFriction", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Static Friction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StaticFriction", quantityKind);
}
function addQuantityKind771(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StaticFrictionCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Static Friction Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StaticFrictionCoefficient", quantityKind);
}
function addQuantityKind772(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StaticPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "p", undefined);
        quantityKind.addLabel(new LangString("Static pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StaticPressure", quantityKind);
}
function addQuantityKind773(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StatisticalWeight", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "g", undefined);
        quantityKind.addLabel(new LangString("Statistical Weight", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StatisticalWeight", quantityKind);
}
function addQuantityKind774(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StochasticProcess", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", "X", undefined);
        quantityKind.addLabel(new LangString("Stochastic Process", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StochasticProcess", quantityKind);
}
function addQuantityKind775(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StoichiometricNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Stoichiometric Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StoichiometricNumber", quantityKind);
}
function addQuantityKind776(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Strain", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Strain", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Strain", quantityKind);
}
function addQuantityKind777(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StrainEnergyDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "u", undefined);
        quantityKind.addLabel(new LangString("Strain Energy Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StrainEnergyDensity", quantityKind);
}
function addQuantityKind778(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Stress", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Stress", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Stress", quantityKind);
}
function addQuantityKind779(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StructuralEfficiency", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Structural Efficiency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StructuralEfficiency", quantityKind);
}
function addQuantityKind780(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/StructureFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "F(h, k, l)", undefined);
        quantityKind.addLabel(new LangString("Structure Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/StructureFactor", quantityKind);
}
function addQuantityKind781(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SuperconductionTransitionTemperature", undefined, "T_c", undefined);
        quantityKind.addLabel(new LangString("Superconduction Transition Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SuperconductionTransitionTemperature", quantityKind);
}
function addQuantityKind782(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SuperconductorEnergyGap", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Δ", undefined);
        quantityKind.addLabel(new LangString("Superconductor Energy Gap", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SuperconductorEnergyGap", quantityKind);
}
function addQuantityKind783(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SurfaceActivityDensity", undefined, "a_s", undefined);
        quantityKind.addLabel(new LangString("Surface Activity Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SurfaceActivityDensity", quantityKind);
}
function addQuantityKind784(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SurfaceCoefficientOfHeatTransfer", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Surface Coefficient of Heat Transfer", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SurfaceCoefficientOfHeatTransfer", quantityKind);
}
function addQuantityKind785(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SurfaceDensity", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Surface Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SurfaceDensity", quantityKind);
}
function addQuantityKind786(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SurfaceTension", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0", "γ", undefined);
        quantityKind.addLabel(new LangString("Surface Tension", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SurfaceTension", quantityKind);
}
function addQuantityKind787(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Susceptance", undefined, "B", undefined);
        quantityKind.addLabel(new LangString("Susceptance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Susceptance", quantityKind);
}
function addQuantityKind788(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/SystolicBloodPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Systolic Blood Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/SystolicBloodPressure", quantityKind);
}
function addQuantityKind789(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TARGET-BOGIE-MASS", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Target Bogie Mass", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TARGET-BOGIE-MASS", quantityKind);
}
function addQuantityKind790(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Temperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Temperature", quantityKind);
}
function addQuantityKind791(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance", "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Temperature Amount of Substance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance", quantityKind);
}
function addQuantityKind792(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TemperaturePerMagneticFluxDensity", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H1T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Temperature per Magnetic Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TemperaturePerMagneticFluxDensity", quantityKind);
}
function addQuantityKind793(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TemperaturePerTime", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Temperature per Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TemperaturePerTime", quantityKind);
}
function addQuantityKind794(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TemperatureRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Temperature Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TemperatureRatio", quantityKind);
}
function addQuantityKind795(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TemporalSummationFunction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Temporal Summation Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TemporalSummationFunction", quantityKind);
}
function addQuantityKind796(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Tension", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Tension", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Tension", quantityKind);
}
function addQuantityKind797(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalConductance", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-3D0", "G", undefined);
        quantityKind.addLabel(new LangString("Thermal Conductance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalConductance", quantityKind);
}
function addQuantityKind798(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalConductivity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermal Conductivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalConductivity", quantityKind);
}
function addQuantityKind799(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalDiffusionFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermal Diffusion Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalDiffusionFactor", quantityKind);
}
function addQuantityKind800(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalDiffusionRatio", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "k_T", undefined);
        quantityKind.addLabel(new LangString("Thermal Diffusion Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalDiffusionRatio", quantityKind);
}
function addQuantityKind801(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalDiffusionRatioCoefficient", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", "D_T", undefined);
        quantityKind.addLabel(new LangString("Thermal Diffusion Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalDiffusionRatioCoefficient", quantityKind);
}
function addQuantityKind802(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalDiffusivity", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0", "a", undefined);
        quantityKind.addLabel(new LangString("Thermal Diffusivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalDiffusivity", quantityKind);
}
function addQuantityKind803(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalEfficiency", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermal Efficiency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalEfficiency", quantityKind);
}
function addQuantityKind804(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermal Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalEnergy", quantityKind);
}
function addQuantityKind805(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalEnergyLength", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermal Energy Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalEnergyLength", quantityKind);
}
function addQuantityKind806(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalInsulance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0", "M", undefined);
        quantityKind.addLabel(new LangString("Thermal Insulance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalInsulance", quantityKind);
}
function addQuantityKind807(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalResistance", "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H1T3D0", "R", undefined);
        quantityKind.addLabel(new LangString("Thermal Resistance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalResistance", quantityKind);
}
function addQuantityKind808(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalResistivity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermal Resistivity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalResistivity", quantityKind);
}
function addQuantityKind809(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalUtilizationFactor", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "f", undefined);
        quantityKind.addLabel(new LangString("Thermal Utilization Factor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalUtilizationFactor", quantityKind);
}
function addQuantityKind810(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermalUtilizationFactorForFission", undefined, "f", undefined);
        quantityKind.addLabel(new LangString("Thermal Utilization Factor For Fission", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermalUtilizationFactorForFission", quantityKind);
}
function addQuantityKind811(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermodynamicCriticalMagneticFluxDensity", undefined, "B_c", undefined);
        quantityKind.addLabel(new LangString("Thermodynamic Critical Magnetic Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermodynamicCriticalMagneticFluxDensity", quantityKind);
}
function addQuantityKind812(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermodynamicEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "U", undefined);
        quantityKind.addLabel(new LangString("Thermodynamic Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermodynamicEnergy", quantityKind);
}
function addQuantityKind813(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermodynamicEntropy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thermodynamic Entropy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermodynamicEntropy", quantityKind);
}
function addQuantityKind814(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThermodynamicTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0", "T", undefined);
        quantityKind.addLabel(new LangString("Thermodynamic Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThermodynamicTemperature", quantityKind);
}
function addQuantityKind815(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Thickness", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "d", undefined);
        quantityKind.addLabel(new LangString("Thickness", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Thickness", quantityKind);
}
function addQuantityKind816(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThomsonCoefficient", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Thomson Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThomsonCoefficient", quantityKind);
}
function addQuantityKind817(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Thrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Thrust", quantityKind);
}
function addQuantityKind818(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThrustCoefficient", undefined, "C_{F}", undefined);
        quantityKind.addLabel(new LangString("Thrust Coefficient", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThrustCoefficient", quantityKind);
}
function addQuantityKind819(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThrustToMassRatio", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Thrust To Mass Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThrustToMassRatio", quantityKind);
}
function addQuantityKind820(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThrustToWeightRatio", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Thrust To Weight Ratio", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThrustToWeightRatio", quantityKind);
}
function addQuantityKind821(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/ThrusterPowerToThrustEfficiency", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Thruster Power To Thrust Efficiency", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/ThrusterPowerToThrustEfficiency", quantityKind);
}
function addQuantityKind822(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Time", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0", "t", undefined);
        quantityKind.addLabel(new LangString("Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Time", quantityKind);
}
function addQuantityKind823(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TimeAveragedSoundIntensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0", "I", undefined);
        quantityKind.addLabel(new LangString("Time averaged sound intensity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TimeAveragedSoundIntensity", quantityKind);
}
function addQuantityKind824(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TimePercentage", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Time Percentage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TimePercentage", quantityKind);
}
function addQuantityKind825(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TimeSquared", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Time Squared", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TimeSquared", quantityKind);
}
function addQuantityKind826(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TimeTemperature", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Time Temperature", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TimeTemperature", quantityKind);
}
function addQuantityKind827(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Torque", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Torque", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Torque", quantityKind);
}
function addQuantityKind828(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TorquePerAngle", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Torque per Angle", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TorquePerAngle", quantityKind);
}
function addQuantityKind829(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TorquePerLength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Torque per Length", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TorquePerLength", quantityKind);
}
function addQuantityKind830(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalAngularMomentum", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0", "J", undefined);
        quantityKind.addLabel(new LangString("Total Angular Momentum", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalAngularMomentum", quantityKind);
}
function addQuantityKind831(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalAngularMomentumQuantumNumber", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "j", undefined);
        quantityKind.addLabel(new LangString("Total Angular Momentum Quantum Number", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalAngularMomentumQuantumNumber", quantityKind);
}
function addQuantityKind832(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalAtomicStoppingPower", undefined, "S_a", undefined);
        quantityKind.addLabel(new LangString("Total Atomic Stopping Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalAtomicStoppingPower", quantityKind);
}
function addQuantityKind833(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalCrossSection", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0", "σₜ", undefined);
        quantityKind.addLabel(new LangString("Total Cross-section", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalCrossSection", quantityKind);
}
function addQuantityKind834(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalCurrent", "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0", "I_t", undefined);
        quantityKind.addLabel(new LangString("Total Current", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalCurrent", quantityKind);
}
function addQuantityKind835(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalCurrentDensity", "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Total Current Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalCurrentDensity", quantityKind);
}
function addQuantityKind836(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalIonization", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "N_i", undefined);
        quantityKind.addLabel(new LangString("Total Ionization", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalIonization", quantityKind);
}
function addQuantityKind837(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower", undefined, "S", undefined);
        quantityKind.addLabel(new LangString("Total Linear Stopping Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower", quantityKind);
}
function addQuantityKind838(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalMassStoppingPower", undefined, "S_m", undefined);
        quantityKind.addLabel(new LangString("Total Mass Stopping Power", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalMassStoppingPower", quantityKind);
}
function addQuantityKind839(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TotalPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", "P_0", undefined);
        quantityKind.addLabel(new LangString("Total Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TotalPressure", quantityKind);
}
function addQuantityKind840(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TouchThresholds", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Touch Thresholds", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TouchThresholds", quantityKind);
}
function addQuantityKind841(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Transmittance", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Transmittance", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Transmittance", quantityKind);
}
function addQuantityKind842(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TransmittanceDensity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "A_10, D", undefined);
        quantityKind.addLabel(new LangString("Transmittance Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TransmittanceDensity", quantityKind);
}
function addQuantityKind843(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/TrueExhaustVelocity", undefined, "u_{e}", undefined);
        quantityKind.addLabel(new LangString("True Exhaust Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/TrueExhaustVelocity", quantityKind);
}
function addQuantityKind844(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Turbidity", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Turbidity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Turbidity", quantityKind);
}
function addQuantityKind845(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Turns", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", "N", undefined);
        quantityKind.addLabel(new LangString("Turns", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Turns", quantityKind);
}
function addQuantityKind846(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/UniversalGasConstant", undefined, "R", undefined);
        quantityKind.addLabel(new LangString("Universal Gas Constant", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/UniversalGasConstant", quantityKind);
}
function addQuantityKind847(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/UpperCriticalMagneticFluxDensity", undefined, "B_{c2}", undefined);
        quantityKind.addLabel(new LangString("Upper Critical Magnetic Flux Density", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/UpperCriticalMagneticFluxDensity", quantityKind);
}
function addQuantityKind848(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VacuumThrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Vacuum Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VacuumThrust", quantityKind);
}
function addQuantityKind849(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VaporPressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Vapor Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VaporPressure", quantityKind);
}
function addQuantityKind850(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VehicleVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "V", undefined);
        quantityKind.addLabel(new LangString("Vehicle Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VehicleVelocity", quantityKind);
}
function addQuantityKind851(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Velocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "v", undefined);
        quantityKind.addLabel(new LangString("Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Velocity", quantityKind);
}
function addQuantityKind852(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VentilationRatePerFloorArea", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Ventilation Rate per Floor Area", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VentilationRatePerFloorArea", quantityKind);
}
function addQuantityKind853(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VerticalVelocity", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", "V_{Z}", undefined);
        quantityKind.addLabel(new LangString("Vertical Velocity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VerticalVelocity", quantityKind);
}
function addQuantityKind854(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VideoFrameRate", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Video Frame Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VideoFrameRate", quantityKind);
}
function addQuantityKind855(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Viscosity", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Viscosity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Viscosity", quantityKind);
}
function addQuantityKind856(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VisibleRadiantEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "Q", undefined);
        quantityKind.addLabel(new LangString("Visible Radiant Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VisibleRadiantEnergy", quantityKind);
}
function addQuantityKind857(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VisionThreshods", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Vision Threshods", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VisionThreshods", quantityKind);
}
function addQuantityKind858(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Voltage", "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0", "U", undefined);
        quantityKind.addLabel(new LangString("Voltage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Voltage", quantityKind);
}
function addQuantityKind859(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VoltagePercentage", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Voltage Percentage", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VoltagePercentage", quantityKind);
}
function addQuantityKind860(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VoltagePhasor", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Voltage Phasor", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VoltagePhasor", quantityKind);
}
function addQuantityKind861(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Volume", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Volume", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Volume", quantityKind);
}
function addQuantityKind862(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumeFlowRate", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", "q_V", undefined);
        quantityKind.addLabel(new LangString("Volume Flow Rate", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumeFlowRate", quantityKind);
}
function addQuantityKind863(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumeFraction", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Volume Fraction", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumeFraction", quantityKind);
}
function addQuantityKind864(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumePerUnitTime", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Volume per Unit Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumePerUnitTime", quantityKind);
}
function addQuantityKind865(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumeStrain", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1", undefined, undefined);
        quantityKind.addLabel(new LangString("Volume Strain", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumeStrain", quantityKind);
}
function addQuantityKind866(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion", "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Volume Thermal Expansion", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumeThermalExpansion", quantityKind);
}
function addQuantityKind867(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumetricFlux", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Volumetric Flux", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumetricFlux", quantityKind);
}
function addQuantityKind868(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Volumetric Heat Capacity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity", quantityKind);
}
function addQuantityKind869(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/VolumicElectromagneticEnergy", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Volumic Electromagnetic Energy", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/VolumicElectromagneticEnergy", quantityKind);
}
function addQuantityKind870(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Vorticity", "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Vorticity", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Vorticity", quantityKind);
}
function addQuantityKind871(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/WarmReceptorThreshold", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Warm Receptor Threshold", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/WarmReceptorThreshold", quantityKind);
}
function addQuantityKind872(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/WaterHorsepower", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Water Horsepower", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/WaterHorsepower", quantityKind);
}
function addQuantityKind873(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Wavelength", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", "λ", undefined);
        quantityKind.addLabel(new LangString("Wavelength", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Wavelength", quantityKind);
}
function addQuantityKind874(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Wavenumber", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Wavenumber", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Wavenumber", quantityKind);
}
function addQuantityKind875(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/WebTime", undefined, undefined, undefined);
        quantityKind.addLabel(new LangString("Web Time", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/WebTime", quantityKind);
}
function addQuantityKind876(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/WebTimeAveragePressure", "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Web Time Average Pressure", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/WebTimeAveragePressure", quantityKind);
}
function addQuantityKind877(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/WebTimeAverageThrust", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Web Time Average Thrust", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/WebTimeAverageThrust", quantityKind);
}
function addQuantityKind878(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Weight", undefined, "bold letter W", undefined);
        quantityKind.addLabel(new LangString("Weight", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Weight", quantityKind);
}
function addQuantityKind879(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Width", "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Width", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Width", quantityKind);
}
function addQuantityKind880(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/Work", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", "A", undefined);
        quantityKind.addLabel(new LangString("Work", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/Work", quantityKind);
}
function addQuantityKind881(config: QudtlibConfig) {
    let quantityKind: QuantityKind;
    quantityKind = new QuantityKind("http://qudt.org/vocab/quantitykind/WorkFunction", "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0", undefined, undefined);
        quantityKind.addLabel(new LangString("Work Function", "en"));
    config.quantityKinds.set("http://qudt.org/vocab/quantitykind/WorkFunction", quantityKind);
}

addQuantityKind0(config);
addQuantityKind1(config);
addQuantityKind2(config);
addQuantityKind3(config);
addQuantityKind4(config);
addQuantityKind5(config);
addQuantityKind6(config);
addQuantityKind7(config);
addQuantityKind8(config);
addQuantityKind9(config);
addQuantityKind10(config);
addQuantityKind11(config);
addQuantityKind12(config);
addQuantityKind13(config);
addQuantityKind14(config);
addQuantityKind15(config);
addQuantityKind16(config);
addQuantityKind17(config);
addQuantityKind18(config);
addQuantityKind19(config);
addQuantityKind20(config);
addQuantityKind21(config);
addQuantityKind22(config);
addQuantityKind23(config);
addQuantityKind24(config);
addQuantityKind25(config);
addQuantityKind26(config);
addQuantityKind27(config);
addQuantityKind28(config);
addQuantityKind29(config);
addQuantityKind30(config);
addQuantityKind31(config);
addQuantityKind32(config);
addQuantityKind33(config);
addQuantityKind34(config);
addQuantityKind35(config);
addQuantityKind36(config);
addQuantityKind37(config);
addQuantityKind38(config);
addQuantityKind39(config);
addQuantityKind40(config);
addQuantityKind41(config);
addQuantityKind42(config);
addQuantityKind43(config);
addQuantityKind44(config);
addQuantityKind45(config);
addQuantityKind46(config);
addQuantityKind47(config);
addQuantityKind48(config);
addQuantityKind49(config);
addQuantityKind50(config);
addQuantityKind51(config);
addQuantityKind52(config);
addQuantityKind53(config);
addQuantityKind54(config);
addQuantityKind55(config);
addQuantityKind56(config);
addQuantityKind57(config);
addQuantityKind58(config);
addQuantityKind59(config);
addQuantityKind60(config);
addQuantityKind61(config);
addQuantityKind62(config);
addQuantityKind63(config);
addQuantityKind64(config);
addQuantityKind65(config);
addQuantityKind66(config);
addQuantityKind67(config);
addQuantityKind68(config);
addQuantityKind69(config);
addQuantityKind70(config);
addQuantityKind71(config);
addQuantityKind72(config);
addQuantityKind73(config);
addQuantityKind74(config);
addQuantityKind75(config);
addQuantityKind76(config);
addQuantityKind77(config);
addQuantityKind78(config);
addQuantityKind79(config);
addQuantityKind80(config);
addQuantityKind81(config);
addQuantityKind82(config);
addQuantityKind83(config);
addQuantityKind84(config);
addQuantityKind85(config);
addQuantityKind86(config);
addQuantityKind87(config);
addQuantityKind88(config);
addQuantityKind89(config);
addQuantityKind90(config);
addQuantityKind91(config);
addQuantityKind92(config);
addQuantityKind93(config);
addQuantityKind94(config);
addQuantityKind95(config);
addQuantityKind96(config);
addQuantityKind97(config);
addQuantityKind98(config);
addQuantityKind99(config);
addQuantityKind100(config);
addQuantityKind101(config);
addQuantityKind102(config);
addQuantityKind103(config);
addQuantityKind104(config);
addQuantityKind105(config);
addQuantityKind106(config);
addQuantityKind107(config);
addQuantityKind108(config);
addQuantityKind109(config);
addQuantityKind110(config);
addQuantityKind111(config);
addQuantityKind112(config);
addQuantityKind113(config);
addQuantityKind114(config);
addQuantityKind115(config);
addQuantityKind116(config);
addQuantityKind117(config);
addQuantityKind118(config);
addQuantityKind119(config);
addQuantityKind120(config);
addQuantityKind121(config);
addQuantityKind122(config);
addQuantityKind123(config);
addQuantityKind124(config);
addQuantityKind125(config);
addQuantityKind126(config);
addQuantityKind127(config);
addQuantityKind128(config);
addQuantityKind129(config);
addQuantityKind130(config);
addQuantityKind131(config);
addQuantityKind132(config);
addQuantityKind133(config);
addQuantityKind134(config);
addQuantityKind135(config);
addQuantityKind136(config);
addQuantityKind137(config);
addQuantityKind138(config);
addQuantityKind139(config);
addQuantityKind140(config);
addQuantityKind141(config);
addQuantityKind142(config);
addQuantityKind143(config);
addQuantityKind144(config);
addQuantityKind145(config);
addQuantityKind146(config);
addQuantityKind147(config);
addQuantityKind148(config);
addQuantityKind149(config);
addQuantityKind150(config);
addQuantityKind151(config);
addQuantityKind152(config);
addQuantityKind153(config);
addQuantityKind154(config);
addQuantityKind155(config);
addQuantityKind156(config);
addQuantityKind157(config);
addQuantityKind158(config);
addQuantityKind159(config);
addQuantityKind160(config);
addQuantityKind161(config);
addQuantityKind162(config);
addQuantityKind163(config);
addQuantityKind164(config);
addQuantityKind165(config);
addQuantityKind166(config);
addQuantityKind167(config);
addQuantityKind168(config);
addQuantityKind169(config);
addQuantityKind170(config);
addQuantityKind171(config);
addQuantityKind172(config);
addQuantityKind173(config);
addQuantityKind174(config);
addQuantityKind175(config);
addQuantityKind176(config);
addQuantityKind177(config);
addQuantityKind178(config);
addQuantityKind179(config);
addQuantityKind180(config);
addQuantityKind181(config);
addQuantityKind182(config);
addQuantityKind183(config);
addQuantityKind184(config);
addQuantityKind185(config);
addQuantityKind186(config);
addQuantityKind187(config);
addQuantityKind188(config);
addQuantityKind189(config);
addQuantityKind190(config);
addQuantityKind191(config);
addQuantityKind192(config);
addQuantityKind193(config);
addQuantityKind194(config);
addQuantityKind195(config);
addQuantityKind196(config);
addQuantityKind197(config);
addQuantityKind198(config);
addQuantityKind199(config);
addQuantityKind200(config);
addQuantityKind201(config);
addQuantityKind202(config);
addQuantityKind203(config);
addQuantityKind204(config);
addQuantityKind205(config);
addQuantityKind206(config);
addQuantityKind207(config);
addQuantityKind208(config);
addQuantityKind209(config);
addQuantityKind210(config);
addQuantityKind211(config);
addQuantityKind212(config);
addQuantityKind213(config);
addQuantityKind214(config);
addQuantityKind215(config);
addQuantityKind216(config);
addQuantityKind217(config);
addQuantityKind218(config);
addQuantityKind219(config);
addQuantityKind220(config);
addQuantityKind221(config);
addQuantityKind222(config);
addQuantityKind223(config);
addQuantityKind224(config);
addQuantityKind225(config);
addQuantityKind226(config);
addQuantityKind227(config);
addQuantityKind228(config);
addQuantityKind229(config);
addQuantityKind230(config);
addQuantityKind231(config);
addQuantityKind232(config);
addQuantityKind233(config);
addQuantityKind234(config);
addQuantityKind235(config);
addQuantityKind236(config);
addQuantityKind237(config);
addQuantityKind238(config);
addQuantityKind239(config);
addQuantityKind240(config);
addQuantityKind241(config);
addQuantityKind242(config);
addQuantityKind243(config);
addQuantityKind244(config);
addQuantityKind245(config);
addQuantityKind246(config);
addQuantityKind247(config);
addQuantityKind248(config);
addQuantityKind249(config);
addQuantityKind250(config);
addQuantityKind251(config);
addQuantityKind252(config);
addQuantityKind253(config);
addQuantityKind254(config);
addQuantityKind255(config);
addQuantityKind256(config);
addQuantityKind257(config);
addQuantityKind258(config);
addQuantityKind259(config);
addQuantityKind260(config);
addQuantityKind261(config);
addQuantityKind262(config);
addQuantityKind263(config);
addQuantityKind264(config);
addQuantityKind265(config);
addQuantityKind266(config);
addQuantityKind267(config);
addQuantityKind268(config);
addQuantityKind269(config);
addQuantityKind270(config);
addQuantityKind271(config);
addQuantityKind272(config);
addQuantityKind273(config);
addQuantityKind274(config);
addQuantityKind275(config);
addQuantityKind276(config);
addQuantityKind277(config);
addQuantityKind278(config);
addQuantityKind279(config);
addQuantityKind280(config);
addQuantityKind281(config);
addQuantityKind282(config);
addQuantityKind283(config);
addQuantityKind284(config);
addQuantityKind285(config);
addQuantityKind286(config);
addQuantityKind287(config);
addQuantityKind288(config);
addQuantityKind289(config);
addQuantityKind290(config);
addQuantityKind291(config);
addQuantityKind292(config);
addQuantityKind293(config);
addQuantityKind294(config);
addQuantityKind295(config);
addQuantityKind296(config);
addQuantityKind297(config);
addQuantityKind298(config);
addQuantityKind299(config);
addQuantityKind300(config);
addQuantityKind301(config);
addQuantityKind302(config);
addQuantityKind303(config);
addQuantityKind304(config);
addQuantityKind305(config);
addQuantityKind306(config);
addQuantityKind307(config);
addQuantityKind308(config);
addQuantityKind309(config);
addQuantityKind310(config);
addQuantityKind311(config);
addQuantityKind312(config);
addQuantityKind313(config);
addQuantityKind314(config);
addQuantityKind315(config);
addQuantityKind316(config);
addQuantityKind317(config);
addQuantityKind318(config);
addQuantityKind319(config);
addQuantityKind320(config);
addQuantityKind321(config);
addQuantityKind322(config);
addQuantityKind323(config);
addQuantityKind324(config);
addQuantityKind325(config);
addQuantityKind326(config);
addQuantityKind327(config);
addQuantityKind328(config);
addQuantityKind329(config);
addQuantityKind330(config);
addQuantityKind331(config);
addQuantityKind332(config);
addQuantityKind333(config);
addQuantityKind334(config);
addQuantityKind335(config);
addQuantityKind336(config);
addQuantityKind337(config);
addQuantityKind338(config);
addQuantityKind339(config);
addQuantityKind340(config);
addQuantityKind341(config);
addQuantityKind342(config);
addQuantityKind343(config);
addQuantityKind344(config);
addQuantityKind345(config);
addQuantityKind346(config);
addQuantityKind347(config);
addQuantityKind348(config);
addQuantityKind349(config);
addQuantityKind350(config);
addQuantityKind351(config);
addQuantityKind352(config);
addQuantityKind353(config);
addQuantityKind354(config);
addQuantityKind355(config);
addQuantityKind356(config);
addQuantityKind357(config);
addQuantityKind358(config);
addQuantityKind359(config);
addQuantityKind360(config);
addQuantityKind361(config);
addQuantityKind362(config);
addQuantityKind363(config);
addQuantityKind364(config);
addQuantityKind365(config);
addQuantityKind366(config);
addQuantityKind367(config);
addQuantityKind368(config);
addQuantityKind369(config);
addQuantityKind370(config);
addQuantityKind371(config);
addQuantityKind372(config);
addQuantityKind373(config);
addQuantityKind374(config);
addQuantityKind375(config);
addQuantityKind376(config);
addQuantityKind377(config);
addQuantityKind378(config);
addQuantityKind379(config);
addQuantityKind380(config);
addQuantityKind381(config);
addQuantityKind382(config);
addQuantityKind383(config);
addQuantityKind384(config);
addQuantityKind385(config);
addQuantityKind386(config);
addQuantityKind387(config);
addQuantityKind388(config);
addQuantityKind389(config);
addQuantityKind390(config);
addQuantityKind391(config);
addQuantityKind392(config);
addQuantityKind393(config);
addQuantityKind394(config);
addQuantityKind395(config);
addQuantityKind396(config);
addQuantityKind397(config);
addQuantityKind398(config);
addQuantityKind399(config);
addQuantityKind400(config);
addQuantityKind401(config);
addQuantityKind402(config);
addQuantityKind403(config);
addQuantityKind404(config);
addQuantityKind405(config);
addQuantityKind406(config);
addQuantityKind407(config);
addQuantityKind408(config);
addQuantityKind409(config);
addQuantityKind410(config);
addQuantityKind411(config);
addQuantityKind412(config);
addQuantityKind413(config);
addQuantityKind414(config);
addQuantityKind415(config);
addQuantityKind416(config);
addQuantityKind417(config);
addQuantityKind418(config);
addQuantityKind419(config);
addQuantityKind420(config);
addQuantityKind421(config);
addQuantityKind422(config);
addQuantityKind423(config);
addQuantityKind424(config);
addQuantityKind425(config);
addQuantityKind426(config);
addQuantityKind427(config);
addQuantityKind428(config);
addQuantityKind429(config);
addQuantityKind430(config);
addQuantityKind431(config);
addQuantityKind432(config);
addQuantityKind433(config);
addQuantityKind434(config);
addQuantityKind435(config);
addQuantityKind436(config);
addQuantityKind437(config);
addQuantityKind438(config);
addQuantityKind439(config);
addQuantityKind440(config);
addQuantityKind441(config);
addQuantityKind442(config);
addQuantityKind443(config);
addQuantityKind444(config);
addQuantityKind445(config);
addQuantityKind446(config);
addQuantityKind447(config);
addQuantityKind448(config);
addQuantityKind449(config);
addQuantityKind450(config);
addQuantityKind451(config);
addQuantityKind452(config);
addQuantityKind453(config);
addQuantityKind454(config);
addQuantityKind455(config);
addQuantityKind456(config);
addQuantityKind457(config);
addQuantityKind458(config);
addQuantityKind459(config);
addQuantityKind460(config);
addQuantityKind461(config);
addQuantityKind462(config);
addQuantityKind463(config);
addQuantityKind464(config);
addQuantityKind465(config);
addQuantityKind466(config);
addQuantityKind467(config);
addQuantityKind468(config);
addQuantityKind469(config);
addQuantityKind470(config);
addQuantityKind471(config);
addQuantityKind472(config);
addQuantityKind473(config);
addQuantityKind474(config);
addQuantityKind475(config);
addQuantityKind476(config);
addQuantityKind477(config);
addQuantityKind478(config);
addQuantityKind479(config);
addQuantityKind480(config);
addQuantityKind481(config);
addQuantityKind482(config);
addQuantityKind483(config);
addQuantityKind484(config);
addQuantityKind485(config);
addQuantityKind486(config);
addQuantityKind487(config);
addQuantityKind488(config);
addQuantityKind489(config);
addQuantityKind490(config);
addQuantityKind491(config);
addQuantityKind492(config);
addQuantityKind493(config);
addQuantityKind494(config);
addQuantityKind495(config);
addQuantityKind496(config);
addQuantityKind497(config);
addQuantityKind498(config);
addQuantityKind499(config);
addQuantityKind500(config);
addQuantityKind501(config);
addQuantityKind502(config);
addQuantityKind503(config);
addQuantityKind504(config);
addQuantityKind505(config);
addQuantityKind506(config);
addQuantityKind507(config);
addQuantityKind508(config);
addQuantityKind509(config);
addQuantityKind510(config);
addQuantityKind511(config);
addQuantityKind512(config);
addQuantityKind513(config);
addQuantityKind514(config);
addQuantityKind515(config);
addQuantityKind516(config);
addQuantityKind517(config);
addQuantityKind518(config);
addQuantityKind519(config);
addQuantityKind520(config);
addQuantityKind521(config);
addQuantityKind522(config);
addQuantityKind523(config);
addQuantityKind524(config);
addQuantityKind525(config);
addQuantityKind526(config);
addQuantityKind527(config);
addQuantityKind528(config);
addQuantityKind529(config);
addQuantityKind530(config);
addQuantityKind531(config);
addQuantityKind532(config);
addQuantityKind533(config);
addQuantityKind534(config);
addQuantityKind535(config);
addQuantityKind536(config);
addQuantityKind537(config);
addQuantityKind538(config);
addQuantityKind539(config);
addQuantityKind540(config);
addQuantityKind541(config);
addQuantityKind542(config);
addQuantityKind543(config);
addQuantityKind544(config);
addQuantityKind545(config);
addQuantityKind546(config);
addQuantityKind547(config);
addQuantityKind548(config);
addQuantityKind549(config);
addQuantityKind550(config);
addQuantityKind551(config);
addQuantityKind552(config);
addQuantityKind553(config);
addQuantityKind554(config);
addQuantityKind555(config);
addQuantityKind556(config);
addQuantityKind557(config);
addQuantityKind558(config);
addQuantityKind559(config);
addQuantityKind560(config);
addQuantityKind561(config);
addQuantityKind562(config);
addQuantityKind563(config);
addQuantityKind564(config);
addQuantityKind565(config);
addQuantityKind566(config);
addQuantityKind567(config);
addQuantityKind568(config);
addQuantityKind569(config);
addQuantityKind570(config);
addQuantityKind571(config);
addQuantityKind572(config);
addQuantityKind573(config);
addQuantityKind574(config);
addQuantityKind575(config);
addQuantityKind576(config);
addQuantityKind577(config);
addQuantityKind578(config);
addQuantityKind579(config);
addQuantityKind580(config);
addQuantityKind581(config);
addQuantityKind582(config);
addQuantityKind583(config);
addQuantityKind584(config);
addQuantityKind585(config);
addQuantityKind586(config);
addQuantityKind587(config);
addQuantityKind588(config);
addQuantityKind589(config);
addQuantityKind590(config);
addQuantityKind591(config);
addQuantityKind592(config);
addQuantityKind593(config);
addQuantityKind594(config);
addQuantityKind595(config);
addQuantityKind596(config);
addQuantityKind597(config);
addQuantityKind598(config);
addQuantityKind599(config);
addQuantityKind600(config);
addQuantityKind601(config);
addQuantityKind602(config);
addQuantityKind603(config);
addQuantityKind604(config);
addQuantityKind605(config);
addQuantityKind606(config);
addQuantityKind607(config);
addQuantityKind608(config);
addQuantityKind609(config);
addQuantityKind610(config);
addQuantityKind611(config);
addQuantityKind612(config);
addQuantityKind613(config);
addQuantityKind614(config);
addQuantityKind615(config);
addQuantityKind616(config);
addQuantityKind617(config);
addQuantityKind618(config);
addQuantityKind619(config);
addQuantityKind620(config);
addQuantityKind621(config);
addQuantityKind622(config);
addQuantityKind623(config);
addQuantityKind624(config);
addQuantityKind625(config);
addQuantityKind626(config);
addQuantityKind627(config);
addQuantityKind628(config);
addQuantityKind629(config);
addQuantityKind630(config);
addQuantityKind631(config);
addQuantityKind632(config);
addQuantityKind633(config);
addQuantityKind634(config);
addQuantityKind635(config);
addQuantityKind636(config);
addQuantityKind637(config);
addQuantityKind638(config);
addQuantityKind639(config);
addQuantityKind640(config);
addQuantityKind641(config);
addQuantityKind642(config);
addQuantityKind643(config);
addQuantityKind644(config);
addQuantityKind645(config);
addQuantityKind646(config);
addQuantityKind647(config);
addQuantityKind648(config);
addQuantityKind649(config);
addQuantityKind650(config);
addQuantityKind651(config);
addQuantityKind652(config);
addQuantityKind653(config);
addQuantityKind654(config);
addQuantityKind655(config);
addQuantityKind656(config);
addQuantityKind657(config);
addQuantityKind658(config);
addQuantityKind659(config);
addQuantityKind660(config);
addQuantityKind661(config);
addQuantityKind662(config);
addQuantityKind663(config);
addQuantityKind664(config);
addQuantityKind665(config);
addQuantityKind666(config);
addQuantityKind667(config);
addQuantityKind668(config);
addQuantityKind669(config);
addQuantityKind670(config);
addQuantityKind671(config);
addQuantityKind672(config);
addQuantityKind673(config);
addQuantityKind674(config);
addQuantityKind675(config);
addQuantityKind676(config);
addQuantityKind677(config);
addQuantityKind678(config);
addQuantityKind679(config);
addQuantityKind680(config);
addQuantityKind681(config);
addQuantityKind682(config);
addQuantityKind683(config);
addQuantityKind684(config);
addQuantityKind685(config);
addQuantityKind686(config);
addQuantityKind687(config);
addQuantityKind688(config);
addQuantityKind689(config);
addQuantityKind690(config);
addQuantityKind691(config);
addQuantityKind692(config);
addQuantityKind693(config);
addQuantityKind694(config);
addQuantityKind695(config);
addQuantityKind696(config);
addQuantityKind697(config);
addQuantityKind698(config);
addQuantityKind699(config);
addQuantityKind700(config);
addQuantityKind701(config);
addQuantityKind702(config);
addQuantityKind703(config);
addQuantityKind704(config);
addQuantityKind705(config);
addQuantityKind706(config);
addQuantityKind707(config);
addQuantityKind708(config);
addQuantityKind709(config);
addQuantityKind710(config);
addQuantityKind711(config);
addQuantityKind712(config);
addQuantityKind713(config);
addQuantityKind714(config);
addQuantityKind715(config);
addQuantityKind716(config);
addQuantityKind717(config);
addQuantityKind718(config);
addQuantityKind719(config);
addQuantityKind720(config);
addQuantityKind721(config);
addQuantityKind722(config);
addQuantityKind723(config);
addQuantityKind724(config);
addQuantityKind725(config);
addQuantityKind726(config);
addQuantityKind727(config);
addQuantityKind728(config);
addQuantityKind729(config);
addQuantityKind730(config);
addQuantityKind731(config);
addQuantityKind732(config);
addQuantityKind733(config);
addQuantityKind734(config);
addQuantityKind735(config);
addQuantityKind736(config);
addQuantityKind737(config);
addQuantityKind738(config);
addQuantityKind739(config);
addQuantityKind740(config);
addQuantityKind741(config);
addQuantityKind742(config);
addQuantityKind743(config);
addQuantityKind744(config);
addQuantityKind745(config);
addQuantityKind746(config);
addQuantityKind747(config);
addQuantityKind748(config);
addQuantityKind749(config);
addQuantityKind750(config);
addQuantityKind751(config);
addQuantityKind752(config);
addQuantityKind753(config);
addQuantityKind754(config);
addQuantityKind755(config);
addQuantityKind756(config);
addQuantityKind757(config);
addQuantityKind758(config);
addQuantityKind759(config);
addQuantityKind760(config);
addQuantityKind761(config);
addQuantityKind762(config);
addQuantityKind763(config);
addQuantityKind764(config);
addQuantityKind765(config);
addQuantityKind766(config);
addQuantityKind767(config);
addQuantityKind768(config);
addQuantityKind769(config);
addQuantityKind770(config);
addQuantityKind771(config);
addQuantityKind772(config);
addQuantityKind773(config);
addQuantityKind774(config);
addQuantityKind775(config);
addQuantityKind776(config);
addQuantityKind777(config);
addQuantityKind778(config);
addQuantityKind779(config);
addQuantityKind780(config);
addQuantityKind781(config);
addQuantityKind782(config);
addQuantityKind783(config);
addQuantityKind784(config);
addQuantityKind785(config);
addQuantityKind786(config);
addQuantityKind787(config);
addQuantityKind788(config);
addQuantityKind789(config);
addQuantityKind790(config);
addQuantityKind791(config);
addQuantityKind792(config);
addQuantityKind793(config);
addQuantityKind794(config);
addQuantityKind795(config);
addQuantityKind796(config);
addQuantityKind797(config);
addQuantityKind798(config);
addQuantityKind799(config);
addQuantityKind800(config);
addQuantityKind801(config);
addQuantityKind802(config);
addQuantityKind803(config);
addQuantityKind804(config);
addQuantityKind805(config);
addQuantityKind806(config);
addQuantityKind807(config);
addQuantityKind808(config);
addQuantityKind809(config);
addQuantityKind810(config);
addQuantityKind811(config);
addQuantityKind812(config);
addQuantityKind813(config);
addQuantityKind814(config);
addQuantityKind815(config);
addQuantityKind816(config);
addQuantityKind817(config);
addQuantityKind818(config);
addQuantityKind819(config);
addQuantityKind820(config);
addQuantityKind821(config);
addQuantityKind822(config);
addQuantityKind823(config);
addQuantityKind824(config);
addQuantityKind825(config);
addQuantityKind826(config);
addQuantityKind827(config);
addQuantityKind828(config);
addQuantityKind829(config);
addQuantityKind830(config);
addQuantityKind831(config);
addQuantityKind832(config);
addQuantityKind833(config);
addQuantityKind834(config);
addQuantityKind835(config);
addQuantityKind836(config);
addQuantityKind837(config);
addQuantityKind838(config);
addQuantityKind839(config);
addQuantityKind840(config);
addQuantityKind841(config);
addQuantityKind842(config);
addQuantityKind843(config);
addQuantityKind844(config);
addQuantityKind845(config);
addQuantityKind846(config);
addQuantityKind847(config);
addQuantityKind848(config);
addQuantityKind849(config);
addQuantityKind850(config);
addQuantityKind851(config);
addQuantityKind852(config);
addQuantityKind853(config);
addQuantityKind854(config);
addQuantityKind855(config);
addQuantityKind856(config);
addQuantityKind857(config);
addQuantityKind858(config);
addQuantityKind859(config);
addQuantityKind860(config);
addQuantityKind861(config);
addQuantityKind862(config);
addQuantityKind863(config);
addQuantityKind864(config);
addQuantityKind865(config);
addQuantityKind866(config);
addQuantityKind867(config);
addQuantityKind868(config);
addQuantityKind869(config);
addQuantityKind870(config);
addQuantityKind871(config);
addQuantityKind872(config);
addQuantityKind873(config);
addQuantityKind874(config);
addQuantityKind875(config);
addQuantityKind876(config);
addQuantityKind877(config);
addQuantityKind878(config);
addQuantityKind879(config);
addQuantityKind880(config);
addQuantityKind881(config);

export const QuantityKinds = {
    // Power Area per Solid Angle
    PowerAreaPerSolidAngle: Qudt.quantityKindFromLocalname("PowerAreaPerSolidAngle"),
    // Inverse amount of substance
    InverseAmountOfSubstance: Qudt.quantityKindFromLocalname("InverseAmountOfSubstance"),
    // Logarithm of Octanol Water Partition Coefficient
    LogOctanolWaterPartitionCoefficient: Qudt.quantityKindFromLocalname("LogOctanolWaterPartitionCoefficient"),
    // Total Atomic Stopping Power
    TotalAtomicStoppingPower: Qudt.quantityKindFromLocalname("TotalAtomicStoppingPower"),
    // Thrust Coefficient
    ThrustCoefficient: Qudt.quantityKindFromLocalname("ThrustCoefficient"),
    // Specific Impulse
    SpecificImpulse: Qudt.quantityKindFromLocalname("SpecificImpulse"),
    // Total Current
    TotalCurrent: Qudt.quantityKindFromLocalname("TotalCurrent"),
    // Mass Concentration of Water
    MassConcentrationOfWater: Qudt.quantityKindFromLocalname("MassConcentrationOfWater"),
    // Efficiency
    Efficiency: Qudt.quantityKindFromLocalname("Efficiency"),
    // Contract End Item (CEI) Specification Mass.
    CONTRACT__END__ITEM__SPECIFICATION__MASS: Qudt.quantityKindFromLocalname("CONTRACT-END-ITEM-SPECIFICATION-MASS"),
    // Lift Force
    LiftForce: Qudt.quantityKindFromLocalname("LiftForce"),
    // Dissipance
    Dissipance: Qudt.quantityKindFromLocalname("Dissipance"),
    // Dynamic Friction
    DynamicFriction: Qudt.quantityKindFromLocalname("DynamicFriction"),
    // Phase Difference
    PhaseDifference: Qudt.quantityKindFromLocalname("PhaseDifference"),
    // Octanol Air Partition Coefficient
    LogOctanolAirPartitionCoefficient: Qudt.quantityKindFromLocalname("LogOctanolAirPartitionCoefficient"),
    // Specific Volume
    SpecificVolume: Qudt.quantityKindFromLocalname("SpecificVolume"),
    // Stoichiometric Number
    StoichiometricNumber: Qudt.quantityKindFromLocalname("StoichiometricNumber"),
    // Linear Acceleration
    LinearAcceleration: Qudt.quantityKindFromLocalname("LinearAcceleration"),
    // Electromotive Force
    ElectromotiveForce: Qudt.quantityKindFromLocalname("ElectromotiveForce"),
    // Richardson Constant
    RichardsonConstant: Qudt.quantityKindFromLocalname("RichardsonConstant"),
    // Warm Receptor Threshold
    WarmReceptorThreshold: Qudt.quantityKindFromLocalname("WarmReceptorThreshold"),
    // Product of Inertia in the Z axis
    PRODUCT__OF__INERTIA_Z: Qudt.quantityKindFromLocalname("PRODUCT-OF-INERTIA_Z"),
    // Packing Fraction
    PackingFraction: Qudt.quantityKindFromLocalname("PackingFraction"),
    // Shear Strain
    ShearStrain: Qudt.quantityKindFromLocalname("ShearStrain"),
    // Admittance
    Admittance: Qudt.quantityKindFromLocalname("Admittance"),
    // Height
    Height: Qudt.quantityKindFromLocalname("Height"),
    // Moment of Inertia
    MomentOfInertia: Qudt.quantityKindFromLocalname("MomentOfInertia"),
    // Asset
    Asset: Qudt.quantityKindFromLocalname("Asset"),
    // Absolute Humidity
    AbsoluteHumidity: Qudt.quantityKindFromLocalname("AbsoluteHumidity"),
    // Fractional Mass (Stage 2)
    FractionalMass_Stage2: Qudt.quantityKindFromLocalname("FractionalMass_Stage2"),
    // Average Vacuum Thrust
    AverageVacuumThrust: Qudt.quantityKindFromLocalname("AverageVacuumThrust"),
    // Linear Velocity
    LinearVelocity: Qudt.quantityKindFromLocalname("LinearVelocity"),
    // Mass per Electric Charge
    MassPerElectricCharge: Qudt.quantityKindFromLocalname("MassPerElectricCharge"),
    // Diastolic Blood Pressure
    DiastolicBloodPressure: Qudt.quantityKindFromLocalname("DiastolicBloodPressure"),
    // Heart Rate
    HeartRate: Qudt.quantityKindFromLocalname("HeartRate"),
    // Shear Stress
    ShearStress: Qudt.quantityKindFromLocalname("ShearStress"),
    // Half-life
    Half__Life: Qudt.quantityKindFromLocalname("Half-Life"),
    // Conductivity
    Conductivity: Qudt.quantityKindFromLocalname("Conductivity"),
    // Grand Canonical Partition Function
    GrandCanonicalPartitionFunction: Qudt.quantityKindFromLocalname("GrandCanonicalPartitionFunction"),
    // Angle Of Attack
    AngleOfAttack: Qudt.quantityKindFromLocalname("AngleOfAttack"),
    // Exchange Integral
    ExchangeIntegral: Qudt.quantityKindFromLocalname("ExchangeIntegral"),
    // Information flow rate
    InformationFlowRate: Qudt.quantityKindFromLocalname("InformationFlowRate"),
    // Molar Mass
    MolarMass: Qudt.quantityKindFromLocalname("MolarMass"),
    // Signal Detection Threshold
    SignalDetectionThreshold: Qudt.quantityKindFromLocalname("SignalDetectionThreshold"),
    // Mean Energy Imparted
    MeanEnergyImparted: Qudt.quantityKindFromLocalname("MeanEnergyImparted"),
    // Fractional Mass (Stage 1)
    FractionalMass_Stage1: Qudt.quantityKindFromLocalname("FractionalMass_Stage1"),
    // g-Factor of Nucleus
    GFactorOfNucleus: Qudt.quantityKindFromLocalname("GFactorOfNucleus"),
    // Molar Volume
    MolarVolume: Qudt.quantityKindFromLocalname("MolarVolume"),
    // Atomic Charge
    AtomicCharge: Qudt.quantityKindFromLocalname("AtomicCharge"),
    // Osmotic Pressure
    OsmoticPressure: Qudt.quantityKindFromLocalname("OsmoticPressure"),
    // Coherence Length
    CoherenceLength: Qudt.quantityKindFromLocalname("CoherenceLength"),
    // Chemical Affinity
    ChemicalAffinity: Qudt.quantityKindFromLocalname("ChemicalAffinity"),
    // Mass Amount of Substance Temperature
    MassAmountOfSubstanceTemperature: Qudt.quantityKindFromLocalname("MassAmountOfSubstanceTemperature"),
    // Molar Conductivity
    MolarConductivity: Qudt.quantityKindFromLocalname("MolarConductivity"),
    // Inverse Square Time
    InverseSquareTime: Qudt.quantityKindFromLocalname("InverseSquareTime"),
    // Neutron Diffusion Length
    NeutronDiffusionLength: Qudt.quantityKindFromLocalname("NeutronDiffusionLength"),
    // Compressibility
    Compressibility: Qudt.quantityKindFromLocalname("Compressibility"),
    // Torque per Length
    TorquePerLength: Qudt.quantityKindFromLocalname("TorquePerLength"),
    // Density of states
    DensityOfStates: Qudt.quantityKindFromLocalname("DensityOfStates"),
    // Pressure Burning Rate Constant
    PressureBurningRateConstant: Qudt.quantityKindFromLocalname("PressureBurningRateConstant"),
    // Tension
    Tension: Qudt.quantityKindFromLocalname("Tension"),
    // Energy per electric charge
    EnergyPerElectricCharge: Qudt.quantityKindFromLocalname("EnergyPerElectricCharge"),
    // Energy Fluence Rate
    EnergyFluenceRate: Qudt.quantityKindFromLocalname("EnergyFluenceRate"),
    // Molar Heat Capacity
    MolarHeatCapacity: Qudt.quantityKindFromLocalname("MolarHeatCapacity"),
    // Time Percentage
    TimePercentage: Qudt.quantityKindFromLocalname("TimePercentage"),
    // Reactance
    Reactance: Qudt.quantityKindFromLocalname("Reactance"),
    // Growing Degree Days (Cereals)
    GrowingDegreeDay_Cereal: Qudt.quantityKindFromLocalname("GrowingDegreeDay_Cereal"),
    // Conduction Speed
    ConductionSpeed: Qudt.quantityKindFromLocalname("ConductionSpeed"),
    // Electric Current per Unit Energy
    ElectricCurrentPerUnitEnergy: Qudt.quantityKindFromLocalname("ElectricCurrentPerUnitEnergy"),
    // Diffusion Area
    DiffusionArea: Qudt.quantityKindFromLocalname("DiffusionArea"),
    // Micro Canonical Partition Function
    MicroCanonicalPartitionFunction: Qudt.quantityKindFromLocalname("MicroCanonicalPartitionFunction"),
    // Luminance
    Luminance: Qudt.quantityKindFromLocalname("Luminance"),
    // Specific Heat Capacity at Saturation
    SpecificHeatCapacityAtSaturation: Qudt.quantityKindFromLocalname("SpecificHeatCapacityAtSaturation"),
    // Hole Density
    HoleDensity: Qudt.quantityKindFromLocalname("HoleDensity"),
    // Absorptance
    Absorptance: Qudt.quantityKindFromLocalname("Absorptance"),
    // Specific Energy Imparted
    SpecificEnergyImparted: Qudt.quantityKindFromLocalname("SpecificEnergyImparted"),
    // Specific heat capacity at constant pressure
    SpecificHeatCapacityAtConstantPressure: Qudt.quantityKindFromLocalname("SpecificHeatCapacityAtConstantPressure"),
    // Magnetic flux per unit length
    MagneticFluxPerUnitLength: Qudt.quantityKindFromLocalname("MagneticFluxPerUnitLength"),
    // Energy Per Square Magnetic Flux Density
    EnergyPerSquareMagneticFluxDensity: Qudt.quantityKindFromLocalname("EnergyPerSquareMagneticFluxDensity"),
    // Non-active Power
    NonActivePower: Qudt.quantityKindFromLocalname("NonActivePower"),
    // Spin
    Spin: Qudt.quantityKindFromLocalname("Spin"),
    // Drag Coefficient
    DragCoefficient: Qudt.quantityKindFromLocalname("DragCoefficient"),
    // Head End Pressure
    HeadEndPressure: Qudt.quantityKindFromLocalname("HeadEndPressure"),
    // Sound power level
    SoundPowerLevel: Qudt.quantityKindFromLocalname("SoundPowerLevel"),
    // Radial Distance
    RadialDistance: Qudt.quantityKindFromLocalname("RadialDistance"),
    // Luminous Intensity
    LuminousIntensity: Qudt.quantityKindFromLocalname("LuminousIntensity"),
    // Displacement Vector of Ion
    DisplacementVectorOfIon: Qudt.quantityKindFromLocalname("DisplacementVectorOfIon"),
    // Amount of Substance of Fraction of B
    AmountOfSubstanceFractionOfB: Qudt.quantityKindFromLocalname("AmountOfSubstanceFractionOfB"),
    // Surface Tension
    SurfaceTension: Qudt.quantityKindFromLocalname("SurfaceTension"),
    // Turbidity
    Turbidity: Qudt.quantityKindFromLocalname("Turbidity"),
    // Lattice Vector
    LatticeVector: Qudt.quantityKindFromLocalname("LatticeVector"),
    // Spectral Cross-section
    SpectralCrossSection: Qudt.quantityKindFromLocalname("SpectralCrossSection"),
    // Friction
    Friction: Qudt.quantityKindFromLocalname("Friction"),
    // Evaporative Heat Transfer
    EvaporativeHeatTransfer: Qudt.quantityKindFromLocalname("EvaporativeHeatTransfer"),
    // Transmittance Density
    TransmittanceDensity: Qudt.quantityKindFromLocalname("TransmittanceDensity"),
    // Area per Time
    AreaPerTime: Qudt.quantityKindFromLocalname("AreaPerTime"),
    // Square Energy
    SquareEnergy: Qudt.quantityKindFromLocalname("SquareEnergy"),
    // Molar Attenuation Coefficient
    MolarAttenuationCoefficient: Qudt.quantityKindFromLocalname("MolarAttenuationCoefficient"),
    // Combined Non Evaporative Heat Transfer Coefficient
    CombinedNonEvaporativeHeatTransferCoefficient: Qudt.quantityKindFromLocalname("CombinedNonEvaporativeHeatTransferCoefficient"),
    // Relative Mass Excess
    RelativeMassExcess: Qudt.quantityKindFromLocalname("RelativeMassExcess"),
    // Maximum Operating Pressure
    MaximumOperatingPressure: Qudt.quantityKindFromLocalname("MaximumOperatingPressure"),
    // Magnetic Tension
    MagneticTension: Qudt.quantityKindFromLocalname("MagneticTension"),
    // Maximum Beta-Particle Energy
    MaximumBeta__ParticleEnergy: Qudt.quantityKindFromLocalname("MaximumBeta-ParticleEnergy"),
    // Characteristic Acoustic Impedance
    CharacteristicAcousticImpedance: Qudt.quantityKindFromLocalname("CharacteristicAcousticImpedance"),
    // Soil Adsorption Coefficient
    SoilAdsorptionCoefficient: Qudt.quantityKindFromLocalname("SoilAdsorptionCoefficient"),
    // Incidence Proportion
    IncidenceProportion: Qudt.quantityKindFromLocalname("IncidenceProportion"),
    // Resistance Percentage
    ResistancePercentage: Qudt.quantityKindFromLocalname("ResistancePercentage"),
    // Boiling Point Temperature
    BoilingPoint: Qudt.quantityKindFromLocalname("BoilingPoint"),
    // Extent of Reaction
    ExtentOfReaction: Qudt.quantityKindFromLocalname("ExtentOfReaction"),
    // Volume
    CartesianVolume: Qudt.quantityKindFromLocalname("CartesianVolume"),
    // Torque per Angle
    TorquePerAngle: Qudt.quantityKindFromLocalname("TorquePerAngle"),
    // Bioconcentration Factor
    BioconcentrationFactor: Qudt.quantityKindFromLocalname("BioconcentrationFactor"),
    // Thermal Diffusion Coefficient
    ThermalDiffusionRatioCoefficient: Qudt.quantityKindFromLocalname("ThermalDiffusionRatioCoefficient"),
    // Generalized Force
    GeneralizedMomentum: Qudt.quantityKindFromLocalname("GeneralizedMomentum"),
    // Kinematic Viscosity
    KinematicViscosity: Qudt.quantityKindFromLocalname("KinematicViscosity"),
    // Modulus Of Admittance
    ModulusOfAdmittance: Qudt.quantityKindFromLocalname("ModulusOfAdmittance"),
    // Energy
    Energy: Qudt.quantityKindFromLocalname("Energy"),
    // Eccentricity Of Orbit
    EccentricityOfOrbit: Qudt.quantityKindFromLocalname("EccentricityOfOrbit"),
    // Combined Non Evaporative Heat Transfer Coefficient
    EvaporativeHeatTransferCoefficient: Qudt.quantityKindFromLocalname("EvaporativeHeatTransferCoefficient"),
    // Ion Density
    IonDensity: Qudt.quantityKindFromLocalname("IonDensity"),
    // Sound exposure level
    SoundExposureLevel: Qudt.quantityKindFromLocalname("SoundExposureLevel"),
    // Volume per Unit Time
    VolumePerUnitTime: Qudt.quantityKindFromLocalname("VolumePerUnitTime"),
    // Thermal Conductivity
    ThermalConductivity: Qudt.quantityKindFromLocalname("ThermalConductivity"),
    // Length Temperature
    LengthTemperature: Qudt.quantityKindFromLocalname("LengthTemperature"),
    // Exit Plane Cross-sectional Area
    ExitPlaneCrossSectionalArea: Qudt.quantityKindFromLocalname("ExitPlaneCrossSectionalArea"),
    // Debye Angular Frequency
    DebyeAngularFrequency: Qudt.quantityKindFromLocalname("DebyeAngularFrequency"),
    // Diffusion Length (Solid State Physics)
    SolidStateDiffusionLength: Qudt.quantityKindFromLocalname("SolidStateDiffusionLength"),
    // Solid Angle
    SolidAngle: Qudt.quantityKindFromLocalname("SolidAngle"),
    // Electric Current Density
    ElectricCurrentDensity: Qudt.quantityKindFromLocalname("ElectricCurrentDensity"),
    // Debye-Waller Factor
    Debye__WallerFactor: Qudt.quantityKindFromLocalname("Debye-WallerFactor"),
    // Second Moment of Area
    SecondMomentOfArea: Qudt.quantityKindFromLocalname("SecondMomentOfArea"),
    // Electric Flux Density
    ElectricFluxDensity: Qudt.quantityKindFromLocalname("ElectricFluxDensity"),
    // Acceptor Ionization Energy
    AcceptorIonizationEnergy: Qudt.quantityKindFromLocalname("AcceptorIonizationEnergy"),
    // Center of Gravity in the Y axis
    CENTER__OF__GRAVITY_Y: Qudt.quantityKindFromLocalname("CENTER-OF-GRAVITY_Y"),
    // Horizontal Velocity
    HorizontalVelocity: Qudt.quantityKindFromLocalname("HorizontalVelocity"),
    // Dry Volume
    DryVolume: Qudt.quantityKindFromLocalname("DryVolume"),
    // Flight Path Angle
    FlightPathAngle: Qudt.quantityKindFromLocalname("FlightPathAngle"),
    // Logarithmic frequency interval
    LogarithmicFrequencyInterval: Qudt.quantityKindFromLocalname("LogarithmicFrequencyInterval"),
    // Heat
    Heat: Qudt.quantityKindFromLocalname("Heat"),
    // Specific Internal Energy
    SpecificInternalEnergy: Qudt.quantityKindFromLocalname("SpecificInternalEnergy"),
    // Reaction Rate Constant
    SecondOrderReactionRateConstant: Qudt.quantityKindFromLocalname("SecondOrderReactionRateConstant"),
    // Exposure Rate
    ExposureRate: Qudt.quantityKindFromLocalname("ExposureRate"),
    // Attenuation Coefficient
    AttenuationCoefficient: Qudt.quantityKindFromLocalname("AttenuationCoefficient"),
    // Apogee Radius
    ApogeeRadius: Qudt.quantityKindFromLocalname("ApogeeRadius"),
    // Thrust To Mass Ratio
    ThrustToMassRatio: Qudt.quantityKindFromLocalname("ThrustToMassRatio"),
    // Thomson Coefficient
    ThomsonCoefficient: Qudt.quantityKindFromLocalname("ThomsonCoefficient"),
    // Thermal Energy Length
    ThermalEnergyLength: Qudt.quantityKindFromLocalname("ThermalEnergyLength"),
    // Phonon Mean Free Path
    PhononMeanFreePath: Qudt.quantityKindFromLocalname("PhononMeanFreePath"),
    // Action Time
    ActionTime: Qudt.quantityKindFromLocalname("ActionTime"),
    // Strain
    Strain: Qudt.quantityKindFromLocalname("Strain"),
    // Osmotic Coefficient
    OsmoticCoefficient: Qudt.quantityKindFromLocalname("OsmoticCoefficient"),
    // Total Pressure
    TotalPressure: Qudt.quantityKindFromLocalname("TotalPressure"),
    // Bevel Gear Pitch Angle
    BevelGearPitchAngle: Qudt.quantityKindFromLocalname("BevelGearPitchAngle"),
    // Mechanical surface impedance
    MechanicalSurfaceImpedance: Qudt.quantityKindFromLocalname("MechanicalSurfaceImpedance"),
    // Speed
    Speed: Qudt.quantityKindFromLocalname("Speed"),
    // Active Energy
    ActiveEnergy: Qudt.quantityKindFromLocalname("ActiveEnergy"),
    // Sound volume velocity
    SoundVolumeVelocity: Qudt.quantityKindFromLocalname("SoundVolumeVelocity"),
    // Napierian Absorbance
    NapierianAbsorbance: Qudt.quantityKindFromLocalname("NapierianAbsorbance"),
    // Shannon Diversity Index
    ShannonDiversityIndex: Qudt.quantityKindFromLocalname("ShannonDiversityIndex"),
    // Conductive Heat Transfer Rate
    ConductiveHeatTransferRate: Qudt.quantityKindFromLocalname("ConductiveHeatTransferRate"),
    // Blood Glucose Level
    BloodGlucoseLevel: Qudt.quantityKindFromLocalname("BloodGlucoseLevel"),
    // Time Squared
    TimeSquared: Qudt.quantityKindFromLocalname("TimeSquared"),
    // London Penetration Depth
    LondonPenetrationDepth: Qudt.quantityKindFromLocalname("LondonPenetrationDepth"),
    // Absorbed Dose Rate
    AbsorbedDoseRate: Qudt.quantityKindFromLocalname("AbsorbedDoseRate"),
    // Molar Flow Rate
    MolarFlowRate: Qudt.quantityKindFromLocalname("MolarFlowRate"),
    // Specific Energy
    SpecificEnergy: Qudt.quantityKindFromLocalname("SpecificEnergy"),
    // Electric Polarizability
    ElectricPolarizability: Qudt.quantityKindFromLocalname("ElectricPolarizability"),
    // Temperature
    Temperature: Qudt.quantityKindFromLocalname("Temperature"),
    // Radiative Heat Transfer
    RadiativeHeatTransfer: Qudt.quantityKindFromLocalname("RadiativeHeatTransfer"),
    // Energy per temperature
    EnergyPerTemperature: Qudt.quantityKindFromLocalname("EnergyPerTemperature"),
    // Electromagnetic Wave Phase Speed
    ElectromagneticWavePhaseSpeed: Qudt.quantityKindFromLocalname("ElectromagneticWavePhaseSpeed"),
    // Thickness
    Thickness: Qudt.quantityKindFromLocalname("Thickness"),
    // Stochastic Process
    StochasticProcess: Qudt.quantityKindFromLocalname("StochasticProcess"),
    // Electric charge per amount of substance
    ElectricChargePerAmountOfSubstance: Qudt.quantityKindFromLocalname("ElectricChargePerAmountOfSubstance"),
    // Molecular Viscosity
    MolecularViscosity: Qudt.quantityKindFromLocalname("MolecularViscosity"),
    // Leakage Factor
    LeakageFactor: Qudt.quantityKindFromLocalname("LeakageFactor"),
    // Specific Entropy
    SpecificEntropy: Qudt.quantityKindFromLocalname("SpecificEntropy"),
    // Electric Field
    ElectricField: Qudt.quantityKindFromLocalname("ElectricField"),
    // Volume Strain
    VolumeStrain: Qudt.quantityKindFromLocalname("VolumeStrain"),
    // Specific Heat Capacity
    SpecificHeatCapacity: Qudt.quantityKindFromLocalname("SpecificHeatCapacity"),
    // Dimensionless
    Dimensionless: Qudt.quantityKindFromLocalname("Dimensionless"),
    // Mass Energy Transfer Coefficient
    MassEnergyTransferCoefficient: Qudt.quantityKindFromLocalname("MassEnergyTransferCoefficient"),
    // Permittivity
    Permittivity: Qudt.quantityKindFromLocalname("Permittivity"),
    // Electric Quadrupole Moment
    ElectricQuadrupoleMoment: Qudt.quantityKindFromLocalname("ElectricQuadrupoleMoment"),
    // Specific Heat Pressure
    SpecificHeatPressure: Qudt.quantityKindFromLocalname("SpecificHeatPressure"),
    // Resonance Energy
    ResonanceEnergy: Qudt.quantityKindFromLocalname("ResonanceEnergy"),
    // Internal Energy
    EnergyInternal: Qudt.quantityKindFromLocalname("EnergyInternal"),
    // Angular Cross-section
    AngularCrossSection: Qudt.quantityKindFromLocalname("AngularCrossSection"),
    // Population
    Population: Qudt.quantityKindFromLocalname("Population"),
    // Orbital Radial Distance
    OrbitalRadialDistance: Qudt.quantityKindFromLocalname("OrbitalRadialDistance"),
    // Data Rate
    DataRate: Qudt.quantityKindFromLocalname("DataRate"),
    // Inverse Time
    InverseTime: Qudt.quantityKindFromLocalname("InverseTime"),
    // Density
    Density: Qudt.quantityKindFromLocalname("Density"),
    // Migration Area
    MigrationArea: Qudt.quantityKindFromLocalname("MigrationArea"),
    // API Gravity
    Gravity_API: Qudt.quantityKindFromLocalname("Gravity_API"),
    // Sound particle acceleration
    SoundParticleAcceleration: Qudt.quantityKindFromLocalname("SoundParticleAcceleration"),
    // Gross Lift-Off Weight
    GROSS__LIFT__OFF__WEIGHT: Qudt.quantityKindFromLocalname("GROSS-LIFT-OFF-WEIGHT"),
    // Relative Luminous Flux
    RelativeLuminousFlux: Qudt.quantityKindFromLocalname("RelativeLuminousFlux"),
    // Generalized Velocity
    GeneralizedVelocity: Qudt.quantityKindFromLocalname("GeneralizedVelocity"),
    // Electron Density
    ElectronDensity: Qudt.quantityKindFromLocalname("ElectronDensity"),
    // Radiance Factor
    RadianceFactor: Qudt.quantityKindFromLocalname("RadianceFactor"),
    // Radiant Emmitance
    RadiantEmmitance: Qudt.quantityKindFromLocalname("RadiantEmmitance"),
    // Maximum Expected Operating Pressure
    MaximumExpectedOperatingPressure: Qudt.quantityKindFromLocalname("MaximumExpectedOperatingPressure"),
    // Resistivity
    Resistivity: Qudt.quantityKindFromLocalname("Resistivity"),
    // Mobility
    Mobility: Qudt.quantityKindFromLocalname("Mobility"),
    // Principal Quantum Number
    PrincipalQuantumNumber: Qudt.quantityKindFromLocalname("PrincipalQuantumNumber"),
    // Static Friction Coefficient
    StaticFrictionCoefficient: Qudt.quantityKindFromLocalname("StaticFrictionCoefficient"),
    // Entropy
    Entropy: Qudt.quantityKindFromLocalname("Entropy"),
    // Specific Gibbs Energy
    SpecificGibbsEnergy: Qudt.quantityKindFromLocalname("SpecificGibbsEnergy"),
    // Combustion Chamber Temperature
    CombustionChamberTemperature: Qudt.quantityKindFromLocalname("CombustionChamberTemperature"),
    // Mass Density
    MassDensity: Qudt.quantityKindFromLocalname("MassDensity"),
    // Conductance
    Conductance: Qudt.quantityKindFromLocalname("Conductance"),
    // Inverse Volume
    InverseVolume: Qudt.quantityKindFromLocalname("InverseVolume"),
    // Mass per Length
    MassPerLength: Qudt.quantityKindFromLocalname("MassPerLength"),
    // Force per Length
    ForcePerLength: Qudt.quantityKindFromLocalname("ForcePerLength"),
    // Photosynthetic Photon Flux
    PhotosyntheticPhotonFlux: Qudt.quantityKindFromLocalname("PhotosyntheticPhotonFlux"),
    // Dynamic Friction Coefficient
    DynamicFrictionCoefficient: Qudt.quantityKindFromLocalname("DynamicFrictionCoefficient"),
    // Lattice Plane Spacing
    LatticePlaneSpacing: Qudt.quantityKindFromLocalname("LatticePlaneSpacing"),
    // Specific Impulse by Weight
    SpecificImpulseByWeight: Qudt.quantityKindFromLocalname("SpecificImpulseByWeight"),
    // Debye Temperature
    DebyeTemperature: Qudt.quantityKindFromLocalname("DebyeTemperature"),
    // Reflectance Factor
    ReflectanceFactor: Qudt.quantityKindFromLocalname("ReflectanceFactor"),
    // Activity Thresholds
    ActivityThresholds: Qudt.quantityKindFromLocalname("ActivityThresholds"),
    // Thermodynamic Critical Magnetic Flux Density
    ThermodynamicCriticalMagneticFluxDensity: Qudt.quantityKindFromLocalname("ThermodynamicCriticalMagneticFluxDensity"),
    // Luminous Exposure
    LuminousExposure: Qudt.quantityKindFromLocalname("LuminousExposure"),
    // Hyperfine Structure Quantum Number
    HyperfineStructureQuantumNumber: Qudt.quantityKindFromLocalname("HyperfineStructureQuantumNumber"),
    // Energy Density of States
    EnergyDensityOfStates: Qudt.quantityKindFromLocalname("EnergyDensityOfStates"),
    // Radiant Fluence
    RadiantFluence: Qudt.quantityKindFromLocalname("RadiantFluence"),
    // Specific Heat Volume
    SpecificHeatVolume: Qudt.quantityKindFromLocalname("SpecificHeatVolume"),
    // Closest Approach Radius
    ClosestApproachRadius: Qudt.quantityKindFromLocalname("ClosestApproachRadius"),
    // True Exhaust Velocity
    TrueExhaustVelocity: Qudt.quantityKindFromLocalname("TrueExhaustVelocity"),
    // Angular Momentum
    AngularMomentum: Qudt.quantityKindFromLocalname("AngularMomentum"),
    // Currency
    Currency: Qudt.quantityKindFromLocalname("Currency"),
    // Orbital Angular Momentum per Unit Mass
    OrbitalAngularMomentumPerUnitMass: Qudt.quantityKindFromLocalname("OrbitalAngularMomentumPerUnitMass"),
    // Lower Critical Magnetic Flux Density
    LowerCriticalMagneticFluxDensity: Qudt.quantityKindFromLocalname("LowerCriticalMagneticFluxDensity"),
    // Bragg Angle
    BraggAngle: Qudt.quantityKindFromLocalname("BraggAngle"),
    // Potential Energy
    PotentialEnergy: Qudt.quantityKindFromLocalname("PotentialEnergy"),
    // Residual Resistivity
    ResidualResistivity: Qudt.quantityKindFromLocalname("ResidualResistivity"),
    // Propellant Temperature
    PropellantTemperature: Qudt.quantityKindFromLocalname("PropellantTemperature"),
    // Mass
    Mass: Qudt.quantityKindFromLocalname("Mass"),
    // Intinsic Carrier Density
    IntinsicCarrierDensity: Qudt.quantityKindFromLocalname("IntinsicCarrierDensity"),
    // Magnetomotive Force
    MagnetomotiveForce: Qudt.quantityKindFromLocalname("MagnetomotiveForce"),
    // Exhaust Gases Specific Heat
    ExhaustGasesSpecificHeat: Qudt.quantityKindFromLocalname("ExhaustGasesSpecificHeat"),
    // Massieu Function
    MassieuFunction: Qudt.quantityKindFromLocalname("MassieuFunction"),
    // Dry Mass
    DRY__MASS: Qudt.quantityKindFromLocalname("DRY-MASS"),
    // Luminous Emmitance
    LuminousEmmitance: Qudt.quantityKindFromLocalname("LuminousEmmitance"),
    // Superconduction Transition Temperature
    SuperconductionTransitionTemperature: Qudt.quantityKindFromLocalname("SuperconductionTransitionTemperature"),
    // Macroscopic Total Cross-section
    MacroscopicTotalCrossSection: Qudt.quantityKindFromLocalname("MacroscopicTotalCrossSection"),
    // Time
    Time: Qudt.quantityKindFromLocalname("Time"),
    // Electric Susceptibility
    ElectricSusceptibility: Qudt.quantityKindFromLocalname("ElectricSusceptibility"),
    // Electric Charge Surface Density
    ElectricChargeSurfaceDensity: Qudt.quantityKindFromLocalname("ElectricChargeSurfaceDensity"),
    // Active Power
    ActivePower: Qudt.quantityKindFromLocalname("ActivePower"),
    // Web Time
    WebTime: Qudt.quantityKindFromLocalname("WebTime"),
    // Quantum Number
    QuantumNumber: Qudt.quantityKindFromLocalname("QuantumNumber"),
    // Initial Vehicle Mass
    InitialVehicleMass: Qudt.quantityKindFromLocalname("InitialVehicleMass"),
    // Relative Mass Density
    RelativeMassDensity: Qudt.quantityKindFromLocalname("RelativeMassDensity"),
    // Quartic Electric Dipole Moment per Cubic Energy
    QuarticElectricDipoleMomentPerCubicEnergy: Qudt.quantityKindFromLocalname("QuarticElectricDipoleMomentPerCubicEnergy"),
    // Over-range distance
    OverRangeDistance: Qudt.quantityKindFromLocalname("OverRangeDistance"),
    // Linear Density
    LinearDensity: Qudt.quantityKindFromLocalname("LinearDensity"),
    // Relative Partial Pressure
    RelativePartialPressure: Qudt.quantityKindFromLocalname("RelativePartialPressure"),
    // Coefficient of heat transfer
    CoefficientOfHeatTransfer: Qudt.quantityKindFromLocalname("CoefficientOfHeatTransfer"),
    // Acceleration
    Acceleration: Qudt.quantityKindFromLocalname("Acceleration"),
    // Incidence
    Incidence: Qudt.quantityKindFromLocalname("Incidence"),
    // Payload Mass
    PayloadMass: Qudt.quantityKindFromLocalname("PayloadMass"),
    // Sound pressure level
    SoundPressureLevel: Qudt.quantityKindFromLocalname("SoundPressureLevel"),
    // Elliptical Orbit Apogee Velocity
    EllipticalOrbitApogeeVelocity: Qudt.quantityKindFromLocalname("EllipticalOrbitApogeeVelocity"),
    // Electric Charge Line Density
    ElectricChargeLineDensity: Qudt.quantityKindFromLocalname("ElectricChargeLineDensity"),
    // Modulus Of Impedance
    ModulusOfImpedance: Qudt.quantityKindFromLocalname("ModulusOfImpedance"),
    // Reluctance
    Reluctance: Qudt.quantityKindFromLocalname("Reluctance"),
    // Magnetic Polarization
    MagneticPolarization: Qudt.quantityKindFromLocalname("MagneticPolarization"),
    // Refractive index
    RefractiveIndex: Qudt.quantityKindFromLocalname("RefractiveIndex"),
    // Linear Electric Current Density
    LinearElectricCurrentDensity: Qudt.quantityKindFromLocalname("LinearElectricCurrentDensity"),
    // Molar Optical Rotatory Power
    MolarOpticalRotatoryPower: Qudt.quantityKindFromLocalname("MolarOpticalRotatoryPower"),
    // Neutron Number
    NeutronNumber: Qudt.quantityKindFromLocalname("NeutronNumber"),
    // Polarizability
    Polarizability: Qudt.quantityKindFromLocalname("Polarizability"),
    // Buckling Factor
    BucklingFactor: Qudt.quantityKindFromLocalname("BucklingFactor"),
    // Spectral Angular Cross-section
    SpectralAngularCrossSection: Qudt.quantityKindFromLocalname("SpectralAngularCrossSection"),
    // Mass per Area Time
    MassPerAreaTime: Qudt.quantityKindFromLocalname("MassPerAreaTime"),
    // Length per Unit Electric Current
    LengthPerUnitElectricCurrent: Qudt.quantityKindFromLocalname("LengthPerUnitElectricCurrent"),
    // Source Voltage
    SourceVoltage: Qudt.quantityKindFromLocalname("SourceVoltage"),
    // Heat Flow Rate
    HeatFlowRate: Qudt.quantityKindFromLocalname("HeatFlowRate"),
    // Molar Absorption Coefficient
    MolarAbsorptionCoefficient: Qudt.quantityKindFromLocalname("MolarAbsorptionCoefficient"),
    // Spatial Summation Function
    SpatialSummationFunction: Qudt.quantityKindFromLocalname("SpatialSummationFunction"),
    // Fermi Temperature
    FermiTemperature: Qudt.quantityKindFromLocalname("FermiTemperature"),
    // Effective Exhaustvelocity
    EffectiveExhaustVelocity: Qudt.quantityKindFromLocalname("EffectiveExhaustVelocity"),
    // Gap Energy
    GapEnergy: Qudt.quantityKindFromLocalname("GapEnergy"),
    // Electric Charge Linear Density
    ElectricChargeLinearDensity: Qudt.quantityKindFromLocalname("ElectricChargeLinearDensity"),
    // Electromagnetic Permeability Ratio
    ElectromagneticPermeabilityRatio: Qudt.quantityKindFromLocalname("ElectromagneticPermeabilityRatio"),
    // Energy Level
    EnergyLevel: Qudt.quantityKindFromLocalname("EnergyLevel"),
    // Linear Thermal Expansion
    LinearThermalExpansion: Qudt.quantityKindFromLocalname("LinearThermalExpansion"),
    // Nozzle Throat Diameter
    NozzleThroatDiameter: Qudt.quantityKindFromLocalname("NozzleThroatDiameter"),
    // Turns
    Turns: Qudt.quantityKindFromLocalname("Turns"),
    // Quality Factor
    QualityFactor: Qudt.quantityKindFromLocalname("QualityFactor"),
    // Diffusion Coefficient
    DiffusionCoefficient: Qudt.quantityKindFromLocalname("DiffusionCoefficient"),
    // Fuel Bias
    FUEL__BIAS: Qudt.quantityKindFromLocalname("FUEL-BIAS"),
    // Nuclear Radius
    NuclearRadius: Qudt.quantityKindFromLocalname("NuclearRadius"),
    // Mass Excess
    MassExcess: Qudt.quantityKindFromLocalname("MassExcess"),
    // First Stage Mass Ratio
    FirstStageMassRatio: Qudt.quantityKindFromLocalname("FirstStageMassRatio"),
    // Aeric Heat Flow Rate
    AreicHeatFlowRate: Qudt.quantityKindFromLocalname("AreicHeatFlowRate"),
    // Average Logarithmic Energy Decrement
    AverageLogarithmicEnergyDecrement: Qudt.quantityKindFromLocalname("AverageLogarithmicEnergyDecrement"),
    // Period
    Period: Qudt.quantityKindFromLocalname("Period"),
    // Non-Leakage Probability
    Non__LeakageProbability: Qudt.quantityKindFromLocalname("Non-LeakageProbability"),
    // Radiance
    Radiance: Qudt.quantityKindFromLocalname("Radiance"),
    // Sound reduction index
    SoundReductionIndex: Qudt.quantityKindFromLocalname("SoundReductionIndex"),
    // Molecular Concentration
    MolecularConcentration: Qudt.quantityKindFromLocalname("MolecularConcentration"),
    // Weight
    Weight: Qudt.quantityKindFromLocalname("Weight"),
    // Permeability Ratio
    PermeabilityRatio: Qudt.quantityKindFromLocalname("PermeabilityRatio"),
    // Diffusion Coefficient
    NeutronDiffusionCoefficient: Qudt.quantityKindFromLocalname("NeutronDiffusionCoefficient"),
    // Radiant Fluence Rate
    RadiantFluenceRate: Qudt.quantityKindFromLocalname("RadiantFluenceRate"),
    // Relative Pressure Coefficient
    RelativePressureCoefficient: Qudt.quantityKindFromLocalname("RelativePressureCoefficient"),
    // Magnetic Susceptability
    MagneticSusceptability: Qudt.quantityKindFromLocalname("MagneticSusceptability"),
    // Inverse Time Temperature
    InverseTimeTemperature: Qudt.quantityKindFromLocalname("InverseTimeTemperature"),
    // Delta-V
    DELTA__V: Qudt.quantityKindFromLocalname("DELTA-V"),
    // Frequency
    Frequency: Qudt.quantityKindFromLocalname("Frequency"),
    // Moment of Inertia in the Y axis
    MOMENT__OF__INERTIA_Y: Qudt.quantityKindFromLocalname("MOMENT-OF-INERTIA_Y"),
    // Specific heat capacity at constant volume
    SpecificHeatCapacityAtConstantVolume: Qudt.quantityKindFromLocalname("SpecificHeatCapacityAtConstantVolume"),
    // Fractional Mass (Stages 1 through 3)
    FractionallMass_Stages1__3: Qudt.quantityKindFromLocalname("FractionallMass_Stages1-3"),
    // Water Solubility
    Solubility_Water: Qudt.quantityKindFromLocalname("Solubility_Water"),
    // Center of Gravity in the X axis
    CENTER__OF__GRAVITY_Z: Qudt.quantityKindFromLocalname("CENTER-OF-GRAVITY_Z"),
    // Position Vector
    PositionVector: Qudt.quantityKindFromLocalname("PositionVector"),
    // Mass Concentration of Water To Dry Matter
    MassRatioOfWaterToDryMatter: Qudt.quantityKindFromLocalname("MassRatioOfWaterToDryMatter"),
    // Flash Point Temperature
    FlashPoint: Qudt.quantityKindFromLocalname("FlashPoint"),
    // Thermal Insulance
    ThermalInsulance: Qudt.quantityKindFromLocalname("ThermalInsulance"),
    // Viscosity
    Viscosity: Qudt.quantityKindFromLocalname("Viscosity"),
    // Energy per Area
    EnergyPerArea: Qudt.quantityKindFromLocalname("EnergyPerArea"),
    // Mean Mass Range
    MeanMassRange: Qudt.quantityKindFromLocalname("MeanMassRange"),
    // Helmholtz Energy
    HelmholtzEnergy: Qudt.quantityKindFromLocalname("HelmholtzEnergy"),
    // Path Length
    PathLength: Qudt.quantityKindFromLocalname("PathLength"),
    // Circulation
    Circulation: Qudt.quantityKindFromLocalname("Circulation"),
    // Time averaged sound intensity
    TimeAveragedSoundIntensity: Qudt.quantityKindFromLocalname("TimeAveragedSoundIntensity"),
    // Polarization Field
    PolarizationField: Qudt.quantityKindFromLocalname("PolarizationField"),
    // Prevalence
    Prevalence: Qudt.quantityKindFromLocalname("Prevalence"),
    // Standard Chemical Potential
    StandardChemicalPotential: Qudt.quantityKindFromLocalname("StandardChemicalPotential"),
    // Exposure
    Exposure: Qudt.quantityKindFromLocalname("Exposure"),
    // Degree of Dissociation
    DegreeOfDissociation: Qudt.quantityKindFromLocalname("DegreeOfDissociation"),
    // Binding Fraction
    BindingFraction: Qudt.quantityKindFromLocalname("BindingFraction"),
    // Payload Ratio
    PayloadRatio: Qudt.quantityKindFromLocalname("PayloadRatio"),
    // Magnetization
    Magnetization: Qudt.quantityKindFromLocalname("Magnetization"),
    // Electromagnetic Energy Density
    ElectromagneticEnergyDensity: Qudt.quantityKindFromLocalname("ElectromagneticEnergyDensity"),
    // Exhaust Stream Power
    ExhaustStreamPower: Qudt.quantityKindFromLocalname("ExhaustStreamPower"),
    // Linear Attenuation Coefficient
    LinearAttenuationCoefficient: Qudt.quantityKindFromLocalname("LinearAttenuationCoefficient"),
    // Inverse Length
    InverseLength: Qudt.quantityKindFromLocalname("InverseLength"),
    // Dew Point Temperature
    DewPointTemperature: Qudt.quantityKindFromLocalname("DewPointTemperature"),
    // Radiant Energy
    RadiantEnergy: Qudt.quantityKindFromLocalname("RadiantEnergy"),
    // Inverse Energy
    InverseEnergy: Qudt.quantityKindFromLocalname("InverseEnergy"),
    // Elementary Charge
    ElementaryCharge: Qudt.quantityKindFromLocalname("ElementaryCharge"),
    // Melting Point Temperature
    MeltingPoint: Qudt.quantityKindFromLocalname("MeltingPoint"),
    // Normal Stress
    NormalStress: Qudt.quantityKindFromLocalname("NormalStress"),
    // InternalConversionFactor
    InternalConversionFactor: Qudt.quantityKindFromLocalname("InternalConversionFactor"),
    // Magnetic Field
    MagneticField: Qudt.quantityKindFromLocalname("MagneticField"),
    // Cross-sectional Area
    CrossSectionalArea: Qudt.quantityKindFromLocalname("CrossSectionalArea"),
    // Inverse Length Temperature
    InverseLengthTemperature: Qudt.quantityKindFromLocalname("InverseLengthTemperature"),
    // Absorbed Dose
    AbsorbedDose: Qudt.quantityKindFromLocalname("AbsorbedDose"),
    // Effective Multiplication Factor
    EffectiveMultiplicationFactor: Qudt.quantityKindFromLocalname("EffectiveMultiplicationFactor"),
    // Electric Charge
    ElectricCharge: Qudt.quantityKindFromLocalname("ElectricCharge"),
    // Irradiance
    Irradiance: Qudt.quantityKindFromLocalname("Irradiance"),
    // Luminous Flux
    LuminousFlux: Qudt.quantityKindFromLocalname("LuminousFlux"),
    // Cartesian Area
    CartesianArea: Qudt.quantityKindFromLocalname("CartesianArea"),
    // Half-Value Thickness
    Half__ValueThickness: Qudt.quantityKindFromLocalname("Half-ValueThickness"),
    // Energy Fluence
    EnergyFluence: Qudt.quantityKindFromLocalname("EnergyFluence"),
    // Mass Fraction of Water
    MassFractionOfWater: Qudt.quantityKindFromLocalname("MassFractionOfWater"),
    // Magnetic Quantum Number
    MagneticQuantumNumber: Qudt.quantityKindFromLocalname("MagneticQuantumNumber"),
    // Standard Gravitational Parameter
    StandardGravitationalParameter: Qudt.quantityKindFromLocalname("StandardGravitationalParameter"),
    // Electric Field Strength
    ElectricFieldStrength: Qudt.quantityKindFromLocalname("ElectricFieldStrength"),
    // Sound power
    SoundPower: Qudt.quantityKindFromLocalname("SoundPower"),
    // Enthalpy
    Enthalpy: Qudt.quantityKindFromLocalname("Enthalpy"),
    // Impedance
    Impedance: Qudt.quantityKindFromLocalname("Impedance"),
    // Moment of Force
    MomentOfForce: Qudt.quantityKindFromLocalname("MomentOfForce"),
    // Linear Compressibility
    LinearCompressibility: Qudt.quantityKindFromLocalname("LinearCompressibility"),
    // Electric Flux
    ElectricFlux: Qudt.quantityKindFromLocalname("ElectricFlux"),
    // Angle
    Angle: Qudt.quantityKindFromLocalname("Angle"),
    // Level Width
    LevelWidth: Qudt.quantityKindFromLocalname("LevelWidth"),
    // Reynolds Number
    ReynoldsNumber: Qudt.quantityKindFromLocalname("ReynoldsNumber"),
    // Resistance
    Resistance: Qudt.quantityKindFromLocalname("Resistance"),
    // Nozzle Throat Pressure
    NozzleThroatPressure: Qudt.quantityKindFromLocalname("NozzleThroatPressure"),
    // Exit Plane Pressure
    ExitPlanePressure: Qudt.quantityKindFromLocalname("ExitPlanePressure"),
    // Angle of Optical Rotation
    AngleOfOpticalRotation: Qudt.quantityKindFromLocalname("AngleOfOpticalRotation"),
    // Fission Core Radius To Height Ratio
    FissionCoreRadiusToHeightRatio: Qudt.quantityKindFromLocalname("FissionCoreRadiusToHeightRatio"),
    // Sound Particle Displacement
    SoundParticleDisplacement: Qudt.quantityKindFromLocalname("SoundParticleDisplacement"),
    // Relaxation TIme
    RelaxationTIme: Qudt.quantityKindFromLocalname("RelaxationTIme"),
    // Nozzle Walls Thrust Reaction
    NozzleWallsThrustReaction: Qudt.quantityKindFromLocalname("NozzleWallsThrustReaction"),
    // Surface Activity Density
    SurfaceActivityDensity: Qudt.quantityKindFromLocalname("SurfaceActivityDensity"),
    // Neutron Yield per Fission
    NeutronYieldPerFission: Qudt.quantityKindFromLocalname("NeutronYieldPerFission"),
    // Refectance
    Refectance: Qudt.quantityKindFromLocalname("Refectance"),
    // Reactive Power
    ReactivePower: Qudt.quantityKindFromLocalname("ReactivePower"),
    // Mass Of Electrical Power Supply
    MassOfElectricalPowerSupply: Qudt.quantityKindFromLocalname("MassOfElectricalPowerSupply"),
    // Mass Concentration of Water Vapour
    MassConcentrationOfWaterVapour: Qudt.quantityKindFromLocalname("MassConcentrationOfWaterVapour"),
    // Photosynthetic Photon Flux Density
    PhotosyntheticPhotonFluxDensity: Qudt.quantityKindFromLocalname("PhotosyntheticPhotonFluxDensity"),
    // Energy and work per mass amount of substance
    EnergyPerMassAmountOfSubstance: Qudt.quantityKindFromLocalname("EnergyPerMassAmountOfSubstance"),
    // Correlated Color Temperature
    CorrelatedColorTemperature: Qudt.quantityKindFromLocalname("CorrelatedColorTemperature"),
    // Mass Of The Earth
    MassOfTheEarth: Qudt.quantityKindFromLocalname("MassOfTheEarth"),
    // Capacitance
    Capacitance: Qudt.quantityKindFromLocalname("Capacitance"),
    // Absolute Activity
    AbsoluteActivity: Qudt.quantityKindFromLocalname("AbsoluteActivity"),
    // Slowing-Down Density
    Slowing__DownDensity: Qudt.quantityKindFromLocalname("Slowing-DownDensity"),
    // Power Per Area
    PowerPerArea: Qudt.quantityKindFromLocalname("PowerPerArea"),
    // Area Angle
    AreaAngle: Qudt.quantityKindFromLocalname("AreaAngle"),
    // Beta Disintegration Energy
    BetaDisintegrationEnergy: Qudt.quantityKindFromLocalname("BetaDisintegrationEnergy"),
    // Scalar Magnetic Potential
    ScalarMagneticPotential: Qudt.quantityKindFromLocalname("ScalarMagneticPotential"),
    // Momentum per Angle
    MomentumPerAngle: Qudt.quantityKindFromLocalname("MomentumPerAngle"),
    // Curvature
    Curvature: Qudt.quantityKindFromLocalname("Curvature"),
    // Final Or Current Vehicle Mass
    FinalOrCurrentVehicleMass: Qudt.quantityKindFromLocalname("FinalOrCurrentVehicleMass"),
    // Molar Entropy
    MolarEntropy: Qudt.quantityKindFromLocalname("MolarEntropy"),
    // Rest Energy
    RestEnergy: Qudt.quantityKindFromLocalname("RestEnergy"),
    // Magnetic Vector Potential
    MagneticVectorPotential: Qudt.quantityKindFromLocalname("MagneticVectorPotential"),
    // Linked Flux
    LinkedFlux: Qudt.quantityKindFromLocalname("LinkedFlux"),
    // Adaptation
    Adaptation: Qudt.quantityKindFromLocalname("Adaptation"),
    // Liquid Volume
    LiquidVolume: Qudt.quantityKindFromLocalname("LiquidVolume"),
    // Particle Position Vector
    ParticlePositionVector: Qudt.quantityKindFromLocalname("ParticlePositionVector"),
    // Electric Conductivity
    ElectricConductivity: Qudt.quantityKindFromLocalname("ElectricConductivity"),
    // Average Energy Loss per Elementary Charge Produced
    AverageEnergyLossPerElementaryChargeProduced: Qudt.quantityKindFromLocalname("AverageEnergyLossPerElementaryChargeProduced"),
    // Fundamental Reciprocal Lattice Vector
    FundamentalReciprocalLatticeVector: Qudt.quantityKindFromLocalname("FundamentalReciprocalLatticeVector"),
    // Nominal Ascent Propellant Mass
    NOMINAL__ASCENT__PROPELLANT__MASS: Qudt.quantityKindFromLocalname("NOMINAL-ASCENT-PROPELLANT-MASS"),
    // Ionic Strength
    IonicStrength: Qudt.quantityKindFromLocalname("IonicStrength"),
    // Planck Function
    PlanckFunction: Qudt.quantityKindFromLocalname("PlanckFunction"),
    // Thermal Utilization Factor For Fission
    ThermalUtilizationFactorForFission: Qudt.quantityKindFromLocalname("ThermalUtilizationFactorForFission"),
    // Ventilation Rate per Floor Area
    VentilationRatePerFloorArea: Qudt.quantityKindFromLocalname("VentilationRatePerFloorArea"),
    // Mutual Inductance
    MutualInductance: Qudt.quantityKindFromLocalname("MutualInductance"),
    // Area Temperature
    AreaTemperature: Qudt.quantityKindFromLocalname("AreaTemperature"),
    // Systolic Blood Pressure
    SystolicBloodPressure: Qudt.quantityKindFromLocalname("SystolicBloodPressure"),
    // Molality of Solute
    MolalityOfSolute: Qudt.quantityKindFromLocalname("MolalityOfSolute"),
    // Heat Capacity
    HeatCapacity: Qudt.quantityKindFromLocalname("HeatCapacity"),
    // Electric Charge Per Mass
    ElectricChargePerMass: Qudt.quantityKindFromLocalname("ElectricChargePerMass"),
    // Ion Transport Number
    IonTransportNumber: Qudt.quantityKindFromLocalname("IonTransportNumber"),
    // Molecular Mass
    MolecularMass: Qudt.quantityKindFromLocalname("MolecularMass"),
    // Luminous Flux per Area
    LuminousFluxPerArea: Qudt.quantityKindFromLocalname("LuminousFluxPerArea"),
    // Biodegredation Half Life
    BiodegredationHalfLife: Qudt.quantityKindFromLocalname("BiodegredationHalfLife"),
    // Sound particle velocity
    SoundParticleVelocity: Qudt.quantityKindFromLocalname("SoundParticleVelocity"),
    // Length
    Length: Qudt.quantityKindFromLocalname("Length"),
    // Fractional Mass (Stage 3)
    FractionalMass_Stage3: Qudt.quantityKindFromLocalname("FractionalMass_Stage3"),
    // Pressure Percentage
    PressurePercentage: Qudt.quantityKindFromLocalname("PressurePercentage"),
    // Hamilton Function
    HamiltonFunction: Qudt.quantityKindFromLocalname("HamiltonFunction"),
    // Compressibility Factor
    CompressibilityFactor: Qudt.quantityKindFromLocalname("CompressibilityFactor"),
    // Total Angular Momentum
    TotalAngularMomentum: Qudt.quantityKindFromLocalname("TotalAngularMomentum"),
    // Momentum
    Momentum: Qudt.quantityKindFromLocalname("Momentum"),
    // Pressure Coefficient
    PressureCoefficient: Qudt.quantityKindFromLocalname("PressureCoefficient"),
    // Donor Density
    DonorDensity: Qudt.quantityKindFromLocalname("DonorDensity"),
    // Product of Inertia in the Y axis
    PRODUCT__OF__INERTIA_Y: Qudt.quantityKindFromLocalname("PRODUCT-OF-INERTIA_Y"),
    // Gruneisen Parameter
    GruneisenParameter: Qudt.quantityKindFromLocalname("GruneisenParameter"),
    // Permittivity Ratio
    PermittivityRatio: Qudt.quantityKindFromLocalname("PermittivityRatio"),
    // Specific Activity
    SpecificActivity: Qudt.quantityKindFromLocalname("SpecificActivity"),
    // Luminous Energy
    LuminousEnergy: Qudt.quantityKindFromLocalname("LuminousEnergy"),
    // Diffusion Length
    DiffusionLength: Qudt.quantityKindFromLocalname("DiffusionLength"),
    // Energy Expenditure
    EnergyExpenditure: Qudt.quantityKindFromLocalname("EnergyExpenditure"),
    // Bending Moment of Force
    BendingMomentOfForce: Qudt.quantityKindFromLocalname("BendingMomentOfForce"),
    // Body Mass Index
    BodyMassIndex: Qudt.quantityKindFromLocalname("BodyMassIndex"),
    // Lethargy
    Lethargy: Qudt.quantityKindFromLocalname("Lethargy"),
    // Torque
    Torque: Qudt.quantityKindFromLocalname("Torque"),
    // Resonance Escape Probability
    ResonanceEscapeProbability: Qudt.quantityKindFromLocalname("ResonanceEscapeProbability"),
    // Relative Mass Ratio of Vapour
    RelativeMassRatioOfVapour: Qudt.quantityKindFromLocalname("RelativeMassRatioOfVapour"),
    // Hall Coefficient
    HallCoefficient: Qudt.quantityKindFromLocalname("HallCoefficient"),
    // Length Energy
    LengthEnergy: Qudt.quantityKindFromLocalname("LengthEnergy"),
    // Massic Activity
    MassicActivity: Qudt.quantityKindFromLocalname("MassicActivity"),
    // Length Mass
    LengthMass: Qudt.quantityKindFromLocalname("LengthMass"),
    // Activity
    Activity: Qudt.quantityKindFromLocalname("Activity"),
    // Mobility Ratio
    MobilityRatio: Qudt.quantityKindFromLocalname("MobilityRatio"),
    // Luminous Efficacy
    LuminousEfficacy: Qudt.quantityKindFromLocalname("LuminousEfficacy"),
    // Thruster Power To Thrust Efficiency
    ThrusterPowerToThrustEfficiency: Qudt.quantityKindFromLocalname("ThrusterPowerToThrustEfficiency"),
    // Phase speed of sound
    PhaseSpeedOfSound: Qudt.quantityKindFromLocalname("PhaseSpeedOfSound"),
    // Breadth
    Breadth: Qudt.quantityKindFromLocalname("Breadth"),
    // Susceptance
    Susceptance: Qudt.quantityKindFromLocalname("Susceptance"),
    // Short-Range Order Parameter
    Short__RangeOrderParameter: Qudt.quantityKindFromLocalname("Short-RangeOrderParameter"),
    // Resonance Escape Probability For Fission
    ResonanceEscapeProbabilityForFission: Qudt.quantityKindFromLocalname("ResonanceEscapeProbabilityForFission"),
    // Radius
    Radius: Qudt.quantityKindFromLocalname("Radius"),
    // Length Temperature Time
    LengthTemperatureTime: Qudt.quantityKindFromLocalname("LengthTemperatureTime"),
    // Dynamic Viscosity
    DynamicViscosity: Qudt.quantityKindFromLocalname("DynamicViscosity"),
    // Linear Electric Current
    LinearElectricCurrent: Qudt.quantityKindFromLocalname("LinearElectricCurrent"),
    // Fast Fission Factor
    FastFissionFactor: Qudt.quantityKindFromLocalname("FastFissionFactor"),
    // Voltage
    Voltage: Qudt.quantityKindFromLocalname("Voltage"),
    // Stage Structure Mass
    StageStructuralMass: Qudt.quantityKindFromLocalname("StageStructuralMass"),
    // Spin Quantum Number
    SpinQuantumNumber: Qudt.quantityKindFromLocalname("SpinQuantumNumber"),
    // Vacuum Thrust
    VacuumThrust: Qudt.quantityKindFromLocalname("VacuumThrust"),
    // Initial Velocity
    InitialVelocity: Qudt.quantityKindFromLocalname("InitialVelocity"),
    // Mean Lifetime
    MeanLifetime: Qudt.quantityKindFromLocalname("MeanLifetime"),
    // Mechanical Impedance
    MechanicalImpedance: Qudt.quantityKindFromLocalname("MechanicalImpedance"),
    // Spin Quantum Number
    NuclearSpinQuantumNumber: Qudt.quantityKindFromLocalname("NuclearSpinQuantumNumber"),
    // Particle Fluence
    ParticleFluence: Qudt.quantityKindFromLocalname("ParticleFluence"),
    // Larmor Angular Frequency
    CyclotronAngularFrequency: Qudt.quantityKindFromLocalname("CyclotronAngularFrequency"),
    // Magnetic Reluctivity
    MagneticReluctivity: Qudt.quantityKindFromLocalname("MagneticReluctivity"),
    // Electric Displacement Field
    ElectricDisplacementField: Qudt.quantityKindFromLocalname("ElectricDisplacementField"),
    // Alpha Disintegration Energy
    AlphaDisintegrationEnergy: Qudt.quantityKindFromLocalname("AlphaDisintegrationEnergy"),
    // Nozzle Throat Cross-sectional Area
    NozzleThroatCrossSectionalArea: Qudt.quantityKindFromLocalname("NozzleThroatCrossSectionalArea"),
    // Partial Pressure
    PartialPressure: Qudt.quantityKindFromLocalname("PartialPressure"),
    // Transmittance
    Transmittance: Qudt.quantityKindFromLocalname("Transmittance"),
    // Power per Area Angle
    PowerPerAreaAngle: Qudt.quantityKindFromLocalname("PowerPerAreaAngle"),
    // Vorticity
    Vorticity: Qudt.quantityKindFromLocalname("Vorticity"),
    // Carrier LifetIme
    CarrierLifetime: Qudt.quantityKindFromLocalname("CarrierLifetime"),
    // Displacement Current
    DisplacementCurrent: Qudt.quantityKindFromLocalname("DisplacementCurrent"),
    // Spectral Luminous Efficiency
    SpectralLuminousEfficiency: Qudt.quantityKindFromLocalname("SpectralLuminousEfficiency"),
    // RF-Power Level
    RF__Power: Qudt.quantityKindFromLocalname("RF-Power"),
    // Poynting Vector
    PoyntingVector: Qudt.quantityKindFromLocalname("PoyntingVector"),
    // Blood Glucose Level by Mass
    BloodGlucoseLevel_Mass: Qudt.quantityKindFromLocalname("BloodGlucoseLevel_Mass"),
    // Charge Number
    ChargeNumber: Qudt.quantityKindFromLocalname("ChargeNumber"),
    // Second Axial Moment of Area
    SecondAxialMomentOfArea: Qudt.quantityKindFromLocalname("SecondAxialMomentOfArea"),
    // Angular Momentum per Angle
    AngularMomentumPerAngle: Qudt.quantityKindFromLocalname("AngularMomentumPerAngle"),
    // Atomic Mass
    AtomicMass: Qudt.quantityKindFromLocalname("AtomicMass"),
    // Length Molar Energy
    LengthMolarEnergy: Qudt.quantityKindFromLocalname("LengthMolarEnergy"),
    // Mechanical Mobility
    MechanicalMobility: Qudt.quantityKindFromLocalname("MechanicalMobility"),
    // Reactor Time Constant
    ReactorTimeConstant: Qudt.quantityKindFromLocalname("ReactorTimeConstant"),
    // Mass Margin
    MASS__MARGIN: Qudt.quantityKindFromLocalname("MASS-MARGIN"),
    // Magnetization Field
    MagnetizationField: Qudt.quantityKindFromLocalname("MagnetizationField"),
    // Vehicle Velocity
    VehicleVelocity: Qudt.quantityKindFromLocalname("VehicleVelocity"),
    // Visible Radiant Energy
    VisibleRadiantEnergy: Qudt.quantityKindFromLocalname("VisibleRadiantEnergy"),
    // Dose Equivalent Quality Factor
    DoseEquivalentQualityFactor: Qudt.quantityKindFromLocalname("DoseEquivalentQualityFactor"),
    // Power Per Electric Charge
    PowerPerElectricCharge: Qudt.quantityKindFromLocalname("PowerPerElectricCharge"),
    // Force Magnitude
    ForceMagnitude: Qudt.quantityKindFromLocalname("ForceMagnitude"),
    // Specific Optical Rotatory Power
    SpecificOpticalRotatoryPower: Qudt.quantityKindFromLocalname("SpecificOpticalRotatoryPower"),
    // Thermal Diffusion Factor
    ThermalDiffusionFactor: Qudt.quantityKindFromLocalname("ThermalDiffusionFactor"),
    // Linear Expansion Coefficient
    LinearExpansionCoefficient: Qudt.quantityKindFromLocalname("LinearExpansionCoefficient"),
    // Initial Expansion Ratio
    InitialExpansionRatio: Qudt.quantityKindFromLocalname("InitialExpansionRatio"),
    // Electric Polarization
    ElectricPolarization: Qudt.quantityKindFromLocalname("ElectricPolarization"),
    // Action
    Action: Qudt.quantityKindFromLocalname("Action"),
    // Amount of Substance per Unit Volume
    AmountOfSubstancePerUnitVolume: Qudt.quantityKindFromLocalname("AmountOfSubstancePerUnitVolume"),
    // Microbial Formation
    MicrobialFormation: Qudt.quantityKindFromLocalname("MicrobialFormation"),
    // Power Factor
    PowerFactor: Qudt.quantityKindFromLocalname("PowerFactor"),
    // Fugacity
    Fugacity: Qudt.quantityKindFromLocalname("Fugacity"),
    // Cold Receptor Threshold
    ColdReceptorThreshold: Qudt.quantityKindFromLocalname("ColdReceptorThreshold"),
    // Distance Traveled During a Burn
    DistanceTraveledDuringBurn: Qudt.quantityKindFromLocalname("DistanceTraveledDuringBurn"),
    // Altitude
    Altitude: Qudt.quantityKindFromLocalname("Altitude"),
    // Molar Energy
    MolarEnergy: Qudt.quantityKindFromLocalname("MolarEnergy"),
    // Poisson Ratio
    PoissonRatio: Qudt.quantityKindFromLocalname("PoissonRatio"),
    // Coupling Factor
    CouplingFactor: Qudt.quantityKindFromLocalname("CouplingFactor"),
    // Inverse Pressure
    InversePressure: Qudt.quantityKindFromLocalname("InversePressure"),
    // Mass Attenuation Coefficient
    MassAttenuationCoefficient: Qudt.quantityKindFromLocalname("MassAttenuationCoefficient"),
    // Linear Momentum
    LinearMomentum: Qudt.quantityKindFromLocalname("LinearMomentum"),
    // Instantaneous Power
    InstantaneousPower: Qudt.quantityKindFromLocalname("InstantaneousPower"),
    // Number Density
    NumberDensity: Qudt.quantityKindFromLocalname("NumberDensity"),
    // Electric charge per area
    ElectricChargePerArea: Qudt.quantityKindFromLocalname("ElectricChargePerArea"),
    // Fission Multiplication Factor
    FissionMultiplicationFactor: Qudt.quantityKindFromLocalname("FissionMultiplicationFactor"),
    // Universal Gas Constant
    UniversalGasConstant: Qudt.quantityKindFromLocalname("UniversalGasConstant"),
    // Long-Range Order Parameter
    Long__RangeOrderParameter: Qudt.quantityKindFromLocalname("Long-RangeOrderParameter"),
    // Particle Current
    ParticleCurrent: Qudt.quantityKindFromLocalname("ParticleCurrent"),
    // Force per Electric Charge
    ForcePerElectricCharge: Qudt.quantityKindFromLocalname("ForcePerElectricCharge"),
    // Molar Angular Momentum
    MolarAngularMomentum: Qudt.quantityKindFromLocalname("MolarAngularMomentum"),
    // Morbidity Rate
    MorbidityRate: Qudt.quantityKindFromLocalname("MorbidityRate"),
    // Rocket Atmospheric Transverse Force
    RocketAtmosphericTransverseForce: Qudt.quantityKindFromLocalname("RocketAtmosphericTransverseForce"),
    // Particle Fluence Rate
    ParticleFluenceRate: Qudt.quantityKindFromLocalname("ParticleFluenceRate"),
    // Displacement Current Density
    DisplacementCurrentDensity: Qudt.quantityKindFromLocalname("DisplacementCurrentDensity"),
    // Fundamental Lattice vector
    FundamentalLatticeVector: Qudt.quantityKindFromLocalname("FundamentalLatticeVector"),
    // Mach Number
    MachNumber: Qudt.quantityKindFromLocalname("MachNumber"),
    // Macroscopic Cross-section
    MacroscopicCrossSection: Qudt.quantityKindFromLocalname("MacroscopicCrossSection"),
    // Thermal Conductance
    ThermalConductance: Qudt.quantityKindFromLocalname("ThermalConductance"),
    // Mass per Area
    MassPerArea: Qudt.quantityKindFromLocalname("MassPerArea"),
    // Dynamic Pressure
    DynamicPressure: Qudt.quantityKindFromLocalname("DynamicPressure"),
    // Sound energy density
    SoundEnergyDensity: Qudt.quantityKindFromLocalname("SoundEnergyDensity"),
    // Recombination Coefficient
    RecombinationCoefficient: Qudt.quantityKindFromLocalname("RecombinationCoefficient"),
    // Initial Nozzle Throat Diameter
    InitialNozzleThroatDiameter: Qudt.quantityKindFromLocalname("InitialNozzleThroatDiameter"),
    // Photon Intensity
    PhotonIntensity: Qudt.quantityKindFromLocalname("PhotonIntensity"),
    // Standard Absolute Activity
    StandardAbsoluteActivity: Qudt.quantityKindFromLocalname("StandardAbsoluteActivity"),
    // Gyromagnetic Ratio
    GyromagneticRatio: Qudt.quantityKindFromLocalname("GyromagneticRatio"),
    // Relative Mass Concentration of Vapour
    RelativeMassConcentrationOfVapour: Qudt.quantityKindFromLocalname("RelativeMassConcentrationOfVapour"),
    // Mass Ratio of Water Vapour to Dry Gas
    MassRatioOfWaterVapourToDryGas: Qudt.quantityKindFromLocalname("MassRatioOfWaterVapourToDryGas"),
    // Isentropic Compressibility
    IsentropicCompressibility: Qudt.quantityKindFromLocalname("IsentropicCompressibility"),
    // Cubic Electric Dipole Moment per Square Energy
    CubicElectricDipoleMomentPerSquareEnergy: Qudt.quantityKindFromLocalname("CubicElectricDipoleMomentPerSquareEnergy"),
    // Electrical Power To Mass Ratio
    ElectricalPowerToMassRatio: Qudt.quantityKindFromLocalname("ElectricalPowerToMassRatio"),
    // Structural Efficiency
    StructuralEfficiency: Qudt.quantityKindFromLocalname("StructuralEfficiency"),
    // Particle Source Density
    ParticleSourceDensity: Qudt.quantityKindFromLocalname("ParticleSourceDensity"),
    // Isothermal compressibility
    IsothermalCompressibility: Qudt.quantityKindFromLocalname("IsothermalCompressibility"),
    // Thermal Diffusivity
    ThermalDiffusivity: Qudt.quantityKindFromLocalname("ThermalDiffusivity"),
    // Inverse Temperature
    InverseTemperature: Qudt.quantityKindFromLocalname("InverseTemperature"),
    // Inverse Square Energy
    InverseSquareEnergy: Qudt.quantityKindFromLocalname("InverseSquareEnergy"),
    // Electric Current per Unit Length
    ElectricCurrentPerUnitLength: Qudt.quantityKindFromLocalname("ElectricCurrentPerUnitLength"),
    // Magnetic flux density
    MagneticFluxDensity: Qudt.quantityKindFromLocalname("MagneticFluxDensity"),
    // Inductance
    Inductance: Qudt.quantityKindFromLocalname("Inductance"),
    // Neel Temperature
    NeelTemperature: Qudt.quantityKindFromLocalname("NeelTemperature"),
    // Elliptical Orbit Perigee Velocity
    EllipticalOrbitPerigeeVelocity: Qudt.quantityKindFromLocalname("EllipticalOrbitPerigeeVelocity"),
    // Temporal Summation Function
    TemporalSummationFunction: Qudt.quantityKindFromLocalname("TemporalSummationFunction"),
    // Magnetic Moment
    MagneticMoment: Qudt.quantityKindFromLocalname("MagneticMoment"),
    // Thermal Energy
    ThermalEnergy: Qudt.quantityKindFromLocalname("ThermalEnergy"),
    // Thermodynamic Temperature
    ThermodynamicTemperature: Qudt.quantityKindFromLocalname("ThermodynamicTemperature"),
    // Bulk Modulus
    BulkModulus: Qudt.quantityKindFromLocalname("BulkModulus"),
    // Length Force
    LengthByForce: Qudt.quantityKindFromLocalname("LengthByForce"),
    // Larmor Angular Frequency
    LarmorAngularFrequency: Qudt.quantityKindFromLocalname("LarmorAngularFrequency"),
    // Fermi Energy
    FermiEnergy: Qudt.quantityKindFromLocalname("FermiEnergy"),
    // Angular Velocity
    AngularVelocity: Qudt.quantityKindFromLocalname("AngularVelocity"),
    // Mass Delivered
    MASS__DELIVERED: Qudt.quantityKindFromLocalname("MASS-DELIVERED"),
    // Kerma
    Kerma: Qudt.quantityKindFromLocalname("Kerma"),
    // Electron Affinity
    ElectronAffinity: Qudt.quantityKindFromLocalname("ElectronAffinity"),
    // Mass Growth Allowance
    MASS__GROWTH__ALLOWANCE: Qudt.quantityKindFromLocalname("MASS-GROWTH-ALLOWANCE"),
    // Equilibrium Constant on Pressure Basis
    EquilibriumConstantOnPressureBasis: Qudt.quantityKindFromLocalname("EquilibriumConstantOnPressureBasis"),
    // Capacity
    Capacity: Qudt.quantityKindFromLocalname("Capacity"),
    // Area Time
    AreaTime: Qudt.quantityKindFromLocalname("AreaTime"),
    // Inverse Permittivity
    InversePermittivity: Qudt.quantityKindFromLocalname("InversePermittivity"),
    // Center of Mass (CoM)
    CENTER__OF__MASS: Qudt.quantityKindFromLocalname("CENTER-OF-MASS"),
    // Density In Combustion Chamber
    DensityInCombustionChamber: Qudt.quantityKindFromLocalname("DensityInCombustionChamber"),
    // Surface Density
    SurfaceDensity: Qudt.quantityKindFromLocalname("SurfaceDensity"),
    // Web Time Average Thrust
    WebTimeAverageThrust: Qudt.quantityKindFromLocalname("WebTimeAverageThrust"),
    // Force Per Area
    ForcePerArea: Qudt.quantityKindFromLocalname("ForcePerArea"),
    // Relative Atomic Mass
    RelativeAtomicMass: Qudt.quantityKindFromLocalname("RelativeAtomicMass"),
    // Length Percentage
    LengthPercentage: Qudt.quantityKindFromLocalname("LengthPercentage"),
    // Slowing-Down Area
    Slowing__DownArea: Qudt.quantityKindFromLocalname("Slowing-DownArea"),
    // Plane Angle
    PlaneAngle: Qudt.quantityKindFromLocalname("PlaneAngle"),
    // Equivalent absorption area
    EquivalentAbsorptionArea: Qudt.quantityKindFromLocalname("EquivalentAbsorptionArea"),
    // Particle Number Density
    ParticleNumberDensity: Qudt.quantityKindFromLocalname("ParticleNumberDensity"),
    // Energy Imparted
    EnergyImparted: Qudt.quantityKindFromLocalname("EnergyImparted"),
    // Temperature per Magnetic Flux Density
    TemperaturePerMagneticFluxDensity: Qudt.quantityKindFromLocalname("TemperaturePerMagneticFluxDensity"),
    // Section Modulus
    SectionModulus: Qudt.quantityKindFromLocalname("SectionModulus"),
    // Temperature per Time
    TemperaturePerTime: Qudt.quantityKindFromLocalname("TemperaturePerTime"),
    // Surface Coefficient of Heat Transfer
    SurfaceCoefficientOfHeatTransfer: Qudt.quantityKindFromLocalname("SurfaceCoefficientOfHeatTransfer"),
    // Olfactory Threshold
    OlfactoryThreshold: Qudt.quantityKindFromLocalname("OlfactoryThreshold"),
    // Electrolytic Conductivity
    ElectrolyticConductivity: Qudt.quantityKindFromLocalname("ElectrolyticConductivity"),
    // Stage Propellant Mass
    StagePropellantMass: Qudt.quantityKindFromLocalname("StagePropellantMass"),
    // Exit Plane Temperature
    ExitPlaneTemperature: Qudt.quantityKindFromLocalname("ExitPlaneTemperature"),
    // Einstein Transition Probability
    EinsteinTransitionProbability: Qudt.quantityKindFromLocalname("EinsteinTransitionProbability"),
    // Inert Mass
    INERT__MASS: Qudt.quantityKindFromLocalname("INERT-MASS"),
    // Relative Molecular Mass
    RelativeMolecularMass: Qudt.quantityKindFromLocalname("RelativeMolecularMass"),
    // Reactivity
    Reactivity: Qudt.quantityKindFromLocalname("Reactivity"),
    // Propellant Burn Rate
    PropellantBurnRate: Qudt.quantityKindFromLocalname("PropellantBurnRate"),
    // Molar Refractivity
    MolarRefractivity: Qudt.quantityKindFromLocalname("MolarRefractivity"),
    // Celsius temperature
    CelsiusTemperature: Qudt.quantityKindFromLocalname("CelsiusTemperature"),
    // Concentration
    Concentration: Qudt.quantityKindFromLocalname("Concentration"),
    // Relative Mass Defect
    RelativeMassDefect: Qudt.quantityKindFromLocalname("RelativeMassDefect"),
    // Incidence Rate
    IncidenceRate: Qudt.quantityKindFromLocalname("IncidenceRate"),
    // Landau-Ginzburg Number
    Landau__GinzburgNumber: Qudt.quantityKindFromLocalname("Landau-GinzburgNumber"),
    // Angular Reciprocal Lattice Vector
    AngularReciprocalLatticeVector: Qudt.quantityKindFromLocalname("AngularReciprocalLatticeVector"),
    // Auxillary Magnetic Field
    AuxillaryMagneticField: Qudt.quantityKindFromLocalname("AuxillaryMagneticField"),
    // Acceleration Of Gravity
    AccelerationOfGravity: Qudt.quantityKindFromLocalname("AccelerationOfGravity"),
    // Photon Radiance
    PhotonRadiance: Qudt.quantityKindFromLocalname("PhotonRadiance"),
    // Fish Biotransformation Half Life
    FishBiotransformationHalfLife: Qudt.quantityKindFromLocalname("FishBiotransformationHalfLife"),
    // Number of Particles
    NumberOfParticles: Qudt.quantityKindFromLocalname("NumberOfParticles"),
    // Gibbs Energy
    GibbsEnergy: Qudt.quantityKindFromLocalname("GibbsEnergy"),
    // Dose Equivalent
    DoseEquivalent: Qudt.quantityKindFromLocalname("DoseEquivalent"),
    // Lande g-Factor
    LandeGFactor: Qudt.quantityKindFromLocalname("LandeGFactor"),
    // Angular Acceleration
    AngularAcceleration: Qudt.quantityKindFromLocalname("AngularAcceleration"),
    // Work
    Work: Qudt.quantityKindFromLocalname("Work"),
    // Ignition interval time
    IgnitionIntervalTime: Qudt.quantityKindFromLocalname("IgnitionIntervalTime"),
    // Linear Energy Transfer
    LinearEnergyTransfer: Qudt.quantityKindFromLocalname("LinearEnergyTransfer"),
    // Vision Threshods
    VisionThreshods: Qudt.quantityKindFromLocalname("VisionThreshods"),
    // Total Angular Momentum Quantum Number
    TotalAngularMomentumQuantumNumber: Qudt.quantityKindFromLocalname("TotalAngularMomentumQuantumNumber"),
    // Time Temperature
    TimeTemperature: Qudt.quantityKindFromLocalname("TimeTemperature"),
    // Loss Angle
    LossAngle: Qudt.quantityKindFromLocalname("LossAngle"),
    // Specific Helmholtz Energy
    SpecificHelmholtzEnergy: Qudt.quantityKindFromLocalname("SpecificHelmholtzEnergy"),
    // Electric Power
    ElectricPower: Qudt.quantityKindFromLocalname("ElectricPower"),
    // Depth
    Depth: Qudt.quantityKindFromLocalname("Depth"),
    // Canonical Partition Function
    CanonicalPartitionFunction: Qudt.quantityKindFromLocalname("CanonicalPartitionFunction"),
    // Thermodynamic Energy
    ThermodynamicEnergy: Qudt.quantityKindFromLocalname("ThermodynamicEnergy"),
    // Reserve Mass
    RESERVE__MASS: Qudt.quantityKindFromLocalname("RESERVE-MASS"),
    // Area Thermal Expansion
    AreaThermalExpansion: Qudt.quantityKindFromLocalname("AreaThermalExpansion"),
    // First Moment of Area
    FirstMomentOfArea: Qudt.quantityKindFromLocalname("FirstMomentOfArea"),
    // Structure Factor
    StructureFactor: Qudt.quantityKindFromLocalname("StructureFactor"),
    // Area Time Temperature
    AreaTimeTemperature: Qudt.quantityKindFromLocalname("AreaTimeTemperature"),
    // Lorenz Coefficient
    LorenzCoefficient: Qudt.quantityKindFromLocalname("LorenzCoefficient"),
    // Stress
    Stress: Qudt.quantityKindFromLocalname("Stress"),
    // Distance
    Distance: Qudt.quantityKindFromLocalname("Distance"),
    // Apparent Power
    ApparentPower: Qudt.quantityKindFromLocalname("ApparentPower"),
    // Ambient Pressure
    AmbientPressure: Qudt.quantityKindFromLocalname("AmbientPressure"),
    // Specific thrust
    SpecificThrust: Qudt.quantityKindFromLocalname("SpecificThrust"),
    // Linear Ionization
    LinearIonization: Qudt.quantityKindFromLocalname("LinearIonization"),
    // Power Area
    PowerArea: Qudt.quantityKindFromLocalname("PowerArea"),
    // Acoustic Impediance
    AcousticImpedance: Qudt.quantityKindFromLocalname("AcousticImpedance"),
    // Auditory Thresholds
    AuditoryThresholds: Qudt.quantityKindFromLocalname("AuditoryThresholds"),
    // Catalytic Activity
    CatalyticActivity: Qudt.quantityKindFromLocalname("CatalyticActivity"),
    // Radius of Curvature
    RadiusOfCurvature: Qudt.quantityKindFromLocalname("RadiusOfCurvature"),
    // Radiosity
    Radiosity: Qudt.quantityKindFromLocalname("Radiosity"),
    // Electric Potential Difference
    ElectricPotentialDifference: Qudt.quantityKindFromLocalname("ElectricPotentialDifference"),
    // Radiant Flux
    RadiantFlux: Qudt.quantityKindFromLocalname("RadiantFlux"),
    // Donor Ionization Energy
    DonorIonizationEnergy: Qudt.quantityKindFromLocalname("DonorIonizationEnergy"),
    // Mean Linear Range
    MeanLinearRange: Qudt.quantityKindFromLocalname("MeanLinearRange"),
    // Activity Coefficient
    ActivityCoefficient: Qudt.quantityKindFromLocalname("ActivityCoefficient"),
    // Total Ionization
    TotalIonization: Qudt.quantityKindFromLocalname("TotalIonization"),
    // Equilibrium Position Vector of Ion
    EquilibriumPositionVectorOfIon: Qudt.quantityKindFromLocalname("EquilibriumPositionVectorOfIon"),
    // Burgers Vector
    BurgersVector: Qudt.quantityKindFromLocalname("BurgersVector"),
    // Loss Factor
    LossFactor: Qudt.quantityKindFromLocalname("LossFactor"),
    // Atmospheric Hydroxylation Rate
    AtmosphericHydroxylationRate: Qudt.quantityKindFromLocalname("AtmosphericHydroxylationRate"),
    // Power per area quartic temperature
    PowerPerAreaQuarticTemperature: Qudt.quantityKindFromLocalname("PowerPerAreaQuarticTemperature"),
    // Cartesian Coordinates
    CartesianCoordinates: Qudt.quantityKindFromLocalname("CartesianCoordinates"),
    // Sound exposure
    SoundExposure: Qudt.quantityKindFromLocalname("SoundExposure"),
    // Water Horsepower
    WaterHorsepower: Qudt.quantityKindFromLocalname("WaterHorsepower"),
    // Thrust To Weight Ratio
    ThrustToWeightRatio: Qudt.quantityKindFromLocalname("ThrustToWeightRatio"),
    // Exhaust Gas Mean Molecular Weight
    ExhaustGasMeanMolecularWeight: Qudt.quantityKindFromLocalname("ExhaustGasMeanMolecularWeight"),
    // Magnetic Flux
    MagneticFlux: Qudt.quantityKindFromLocalname("MagneticFlux"),
    // Polar moment of inertia
    PolarMomentOfInertia: Qudt.quantityKindFromLocalname("PolarMomentOfInertia"),
    // Specific Heats Ratio
    SpecificHeatsRatio: Qudt.quantityKindFromLocalname("SpecificHeatsRatio"),
    // Mass per Time
    MassPerTime: Qudt.quantityKindFromLocalname("MassPerTime"),
    // Center of Gravity in the X axis
    CENTER__OF__GRAVITY_X: Qudt.quantityKindFromLocalname("CENTER-OF-GRAVITY_X"),
    // Reflectance
    Reflectance: Qudt.quantityKindFromLocalname("Reflectance"),
    // Electric Dipole Moment
    ElectricDipoleMoment: Qudt.quantityKindFromLocalname("ElectricDipoleMoment"),
    // Linear Absorption Coefficient
    LinearAbsorptionCoefficient: Qudt.quantityKindFromLocalname("LinearAbsorptionCoefficient"),
    // Mass Amount of Substance
    MassAmountOfSubstance: Qudt.quantityKindFromLocalname("MassAmountOfSubstance"),
    // Specific Impulse by Mass
    SpecificImpulseByMass: Qudt.quantityKindFromLocalname("SpecificImpulseByMass"),
    // Web Time Average Pressure
    WebTimeAveragePressure: Qudt.quantityKindFromLocalname("WebTimeAveragePressure"),
    // Mass Absorption Coefficient
    MassAbsorptionCoefficient: Qudt.quantityKindFromLocalname("MassAbsorptionCoefficient"),
    // Isentropic Exponent
    IsentropicExponent: Qudt.quantityKindFromLocalname("IsentropicExponent"),
    // Width
    Width: Qudt.quantityKindFromLocalname("Width"),
    // Electric Displacement
    ElectricDisplacement: Qudt.quantityKindFromLocalname("ElectricDisplacement"),
    // Electric Potential
    ElectricPotential: Qudt.quantityKindFromLocalname("ElectricPotential"),
    // Thermal Diffusion Ratio
    ThermalDiffusionRatio: Qudt.quantityKindFromLocalname("ThermalDiffusionRatio"),
    // Density Of The Exhaust Gases
    DensityOfTheExhaustGases: Qudt.quantityKindFromLocalname("DensityOfTheExhaustGases"),
    // Dimensionless Ratio
    DimensionlessRatio: Qudt.quantityKindFromLocalname("DimensionlessRatio"),
    // Electric Current per Unit Temperature
    ElectricCurrentPerUnitTemperature: Qudt.quantityKindFromLocalname("ElectricCurrentPerUnitTemperature"),
    // Pressure Ratio
    PressureRatio: Qudt.quantityKindFromLocalname("PressureRatio"),
    // Signal Strength
    SignalStrength: Qudt.quantityKindFromLocalname("SignalStrength"),
    // Electric Current per Angle
    ElectricCurrentPerAngle: Qudt.quantityKindFromLocalname("ElectricCurrentPerAngle"),
    // Linear Strain
    LinearStrain: Qudt.quantityKindFromLocalname("LinearStrain"),
    // Kinetic Energy
    KineticEnergy: Qudt.quantityKindFromLocalname("KineticEnergy"),
    // Speed of sound
    SpeedOfSound: Qudt.quantityKindFromLocalname("SpeedOfSound"),
    // Propellant Mass
    PropellantMass: Qudt.quantityKindFromLocalname("PropellantMass"),
    // Permeance
    Permeance: Qudt.quantityKindFromLocalname("Permeance"),
    // Mass Ratio
    MassRatio: Qudt.quantityKindFromLocalname("MassRatio"),
    // Displacement
    Displacement: Qudt.quantityKindFromLocalname("Displacement"),
    // Single Stage Launcher Mass Ratio
    SingleStageLauncherMassRatio: Qudt.quantityKindFromLocalname("SingleStageLauncherMassRatio"),
    // Mass Flow Rate
    MassFlowRate: Qudt.quantityKindFromLocalname("MassFlowRate"),
    // Total Mass Stopping Power
    TotalMassStoppingPower: Qudt.quantityKindFromLocalname("TotalMassStoppingPower"),
    // Fission Fuel Utilization Factor
    FissionFuelUtilizationFactor: Qudt.quantityKindFromLocalname("FissionFuelUtilizationFactor"),
    // Ionic Charge
    IonicCharge: Qudt.quantityKindFromLocalname("IonicCharge"),
    // Temperature Ratio
    TemperatureRatio: Qudt.quantityKindFromLocalname("TemperatureRatio"),
    // Superconductor Energy Gap
    SuperconductorEnergyGap: Qudt.quantityKindFromLocalname("SuperconductorEnergyGap"),
    // Mass Defect
    MassDefect: Qudt.quantityKindFromLocalname("MassDefect"),
    // Mass Number
    MassNumber: Qudt.quantityKindFromLocalname("MassNumber"),
    // Inverse Square Mass
    InverseSquareMass: Qudt.quantityKindFromLocalname("InverseSquareMass"),
    // Thrust
    Thrust: Qudt.quantityKindFromLocalname("Thrust"),
    // Area
    Area: Qudt.quantityKindFromLocalname("Area"),
    // Average Head End Pressure
    AverageHeadEndPressure: Qudt.quantityKindFromLocalname("AverageHeadEndPressure"),
    // Diameter
    Diameter: Qudt.quantityKindFromLocalname("Diameter"),
    // Angular Distance
    AngularDistance: Qudt.quantityKindFromLocalname("AngularDistance"),
    // Characteristic Velocity
    CharacteristicVelocity: Qudt.quantityKindFromLocalname("CharacteristicVelocity"),
    // Generalized Coordinate
    GeneralizedCoordinate: Qudt.quantityKindFromLocalname("GeneralizedCoordinate"),
    // Mass Temperature
    MassTemperature: Qudt.quantityKindFromLocalname("MassTemperature"),
    // Chemical Potential
    ChemicalPotential: Qudt.quantityKindFromLocalname("ChemicalPotential"),
    // Vapor Pressure
    VaporPressure: Qudt.quantityKindFromLocalname("VaporPressure"),
    // Illuminance
    SphericalIlluminance: Qudt.quantityKindFromLocalname("SphericalIlluminance"),
    // Static pressure
    StaticPressure: Qudt.quantityKindFromLocalname("StaticPressure"),
    // Heat Capacity Ratio
    HeatCapacityRatio: Qudt.quantityKindFromLocalname("HeatCapacityRatio"),
    // Convective Heat Transfer
    ConvectiveHeatTransfer: Qudt.quantityKindFromLocalname("ConvectiveHeatTransfer"),
    // Wavenumber
    Wavenumber: Qudt.quantityKindFromLocalname("Wavenumber"),
    // Propagation coefficient
    PropagationCoefficient: Qudt.quantityKindFromLocalname("PropagationCoefficient"),
    // Temperature Amount of Substance
    TemperatureAmountOfSubstance: Qudt.quantityKindFromLocalname("TemperatureAmountOfSubstance"),
    // Thermal Resistivity
    ThermalResistivity: Qudt.quantityKindFromLocalname("ThermalResistivity"),
    // Respiratory Rate
    RespiratoryRate: Qudt.quantityKindFromLocalname("RespiratoryRate"),
    // Source Voltage Between Substances
    SourceVoltageBetweenSubstances: Qudt.quantityKindFromLocalname("SourceVoltageBetweenSubstances"),
    // Shear Modulus
    ShearModulus: Qudt.quantityKindFromLocalname("ShearModulus"),
    // Neutron Yield per Absorption
    NeutronYieldPerAbsorption: Qudt.quantityKindFromLocalname("NeutronYieldPerAbsorption"),
    // Mechanical Energy
    MechanicalEnergy: Qudt.quantityKindFromLocalname("MechanicalEnergy"),
    // Ion Current
    IonCurrent: Qudt.quantityKindFromLocalname("IonCurrent"),
    // Speed of Light
    SpeedOfLight: Qudt.quantityKindFromLocalname("SpeedOfLight"),
    // Radiant Exposure
    RadiantExposure: Qudt.quantityKindFromLocalname("RadiantExposure"),
    // Max Sea Level Thrust
    MaxSeaLevelThrust: Qudt.quantityKindFromLocalname("MaxSeaLevelThrust"),
    // Electric Charge Volume Density
    ElectricChargeVolumeDensity: Qudt.quantityKindFromLocalname("ElectricChargeVolumeDensity"),
    // Power
    Power: Qudt.quantityKindFromLocalname("Power"),
    // Magnetic Area Moment
    MagneticAreaMoment: Qudt.quantityKindFromLocalname("MagneticAreaMoment"),
    // Equilibrium Constant on Concentration Basis
    EquilibriumConstantOnConcentrationBasis: Qudt.quantityKindFromLocalname("EquilibriumConstantOnConcentrationBasis"),
    // Gain
    Gain: Qudt.quantityKindFromLocalname("Gain"),
    // Energy Density
    EnergyDensity: Qudt.quantityKindFromLocalname("EnergyDensity"),
    // Cubic Expansion Coefficient
    CubicExpansionCoefficient: Qudt.quantityKindFromLocalname("CubicExpansionCoefficient"),
    // Angular Wavenumber
    AngularWavenumber: Qudt.quantityKindFromLocalname("AngularWavenumber"),
    // Mass Fraction of Dry Matter
    MassFractionOfDryMatter: Qudt.quantityKindFromLocalname("MassFractionOfDryMatter"),
    // Volume Flow Rate
    VolumeFlowRate: Qudt.quantityKindFromLocalname("VolumeFlowRate"),
    // Nucleon number
    NucleonNumber: Qudt.quantityKindFromLocalname("NucleonNumber"),
    // Angular Impulse
    AngularImpulse: Qudt.quantityKindFromLocalname("AngularImpulse"),
    // Thermal Efficiency
    ThermalEfficiency: Qudt.quantityKindFromLocalname("ThermalEfficiency"),
    // Electron Radius
    ElectronRadius: Qudt.quantityKindFromLocalname("ElectronRadius"),
    // Lift Coefficient
    LiftCoefficient: Qudt.quantityKindFromLocalname("LiftCoefficient"),
    // Heat Flux Density
    HeatFluxDensity: Qudt.quantityKindFromLocalname("HeatFluxDensity"),
    // Volume Thermal Expansion
    VolumeThermalExpansion: Qudt.quantityKindFromLocalname("VolumeThermalExpansion"),
    // Thermal Utilization Factor
    ThermalUtilizationFactor: Qudt.quantityKindFromLocalname("ThermalUtilizationFactor"),
    // Max Operating Thrust
    MaxOperatingThrust: Qudt.quantityKindFromLocalname("MaxOperatingThrust"),
    // Volume
    Volume: Qudt.quantityKindFromLocalname("Volume"),
    // Mass Property Uncertainty
    MASS__PROPERTY__UNCERTAINTY: Qudt.quantityKindFromLocalname("MASS-PROPERTY-UNCERTAINTY"),
    // Statistical Weight
    StatisticalWeight: Qudt.quantityKindFromLocalname("StatisticalWeight"),
    // Magnetic Dipole Moment
    MagneticDipoleMoment: Qudt.quantityKindFromLocalname("MagneticDipoleMoment"),
    // Touch Thresholds
    TouchThresholds: Qudt.quantityKindFromLocalname("TouchThresholds"),
    // Strain Energy Density
    StrainEnergyDensity: Qudt.quantityKindFromLocalname("StrainEnergyDensity"),
    // Internal Energy
    InternalEnergy: Qudt.quantityKindFromLocalname("InternalEnergy"),
    // Radiant Intensity
    RadiantIntensity: Qudt.quantityKindFromLocalname("RadiantIntensity"),
    // Burn Time
    BurnTime: Qudt.quantityKindFromLocalname("BurnTime"),
    // Emissivity
    Emissivity: Qudt.quantityKindFromLocalname("Emissivity"),
    // Infinite Multiplication Factor
    InfiniteMultiplicationFactor: Qudt.quantityKindFromLocalname("InfiniteMultiplicationFactor"),
    // Second Stage Mass Ratio
    SecondStageMassRatio: Qudt.quantityKindFromLocalname("SecondStageMassRatio"),
    // Coercivity
    Coercivity: Qudt.quantityKindFromLocalname("Coercivity"),
    // Voltage Phasor
    VoltagePhasor: Qudt.quantityKindFromLocalname("VoltagePhasor"),
    // Cross-section
    CrossSection: Qudt.quantityKindFromLocalname("CrossSection"),
    // Volumic Electromagnetic Energy
    VolumicElectromagneticEnergy: Qudt.quantityKindFromLocalname("VolumicElectromagneticEnergy"),
    // Ionization Energy
    IonizationEnergy: Qudt.quantityKindFromLocalname("IonizationEnergy"),
    // Angular Frequency
    AngularFrequency: Qudt.quantityKindFromLocalname("AngularFrequency"),
    // Flight Performance Reserve Propellant Mass
    FLIGHT__PERFORMANCE__RESERVE__PROPELLANT__MASS: Qudt.quantityKindFromLocalname("FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS"),
    // Mass Concentration
    MassConcentration: Qudt.quantityKindFromLocalname("MassConcentration"),
    // Sound intensity
    SoundIntensity: Qudt.quantityKindFromLocalname("SoundIntensity"),
    // Volume Fraction
    VolumeFraction: Qudt.quantityKindFromLocalname("VolumeFraction"),
    // Generalized Force
    GeneralizedForce: Qudt.quantityKindFromLocalname("GeneralizedForce"),
    // Peltier Coefficient
    PeltierCoefficient: Qudt.quantityKindFromLocalname("PeltierCoefficient"),
    // Diffusion Coefficient for Fluence Rate
    DiffusionCoefficientForFluenceRate: Qudt.quantityKindFromLocalname("DiffusionCoefficientForFluenceRate"),
    // Equilibrium Constant
    EquilibriumConstant: Qudt.quantityKindFromLocalname("EquilibriumConstant"),
    // Kinetic Energy
    EnergyKinetic: Qudt.quantityKindFromLocalname("EnergyKinetic"),
    // Thermal Resistance
    ThermalResistance: Qudt.quantityKindFromLocalname("ThermalResistance"),
    // Group Speed of Sound
    GroupSpeedOfSound: Qudt.quantityKindFromLocalname("GroupSpeedOfSound"),
    // Static Friction
    StaticFriction: Qudt.quantityKindFromLocalname("StaticFriction"),
    // Migration Length
    MigrationLength: Qudt.quantityKindFromLocalname("MigrationLength"),
    // Magnetic Field Strength
    MagneticFieldStrength_H: Qudt.quantityKindFromLocalname("MagneticFieldStrength_H"),
    // Product of Inertia in the X axis
    PRODUCT__OF__INERTIA_X: Qudt.quantityKindFromLocalname("PRODUCT-OF-INERTIA_X"),
    // Atomic Attenuation Coefficient
    AtomicAttenuationCoefficient: Qudt.quantityKindFromLocalname("AtomicAttenuationCoefficient"),
    // Electron Mean Free Path
    ElectronMeanFreePath: Qudt.quantityKindFromLocalname("ElectronMeanFreePath"),
    // Current Linkage
    CurrentLinkage: Qudt.quantityKindFromLocalname("CurrentLinkage"),
    // Control Mass.
    CONTROL__MASS: Qudt.quantityKindFromLocalname("CONTROL-MASS"),
    // Energy Per Area Electric Charge
    EnergyPerAreaElectricCharge: Qudt.quantityKindFromLocalname("EnergyPerAreaElectricCharge"),
    // Target Bogie Mass
    TARGET__BOGIE__MASS: Qudt.quantityKindFromLocalname("TARGET-BOGIE-MASS"),
    // Force
    Force: Qudt.quantityKindFromLocalname("Force"),
    // Orbital Angular Momentum Quantum Number
    OrbitalAngularMomentumQuantumNumber: Qudt.quantityKindFromLocalname("OrbitalAngularMomentumQuantumNumber"),
    // Activity Concentration
    ActivityConcentration: Qudt.quantityKindFromLocalname("ActivityConcentration"),
    // Debye Angular Wavenumber
    DebyeAngularWavenumber: Qudt.quantityKindFromLocalname("DebyeAngularWavenumber"),
    // Sound pressure
    SoundPressure: Qudt.quantityKindFromLocalname("SoundPressure"),
    // Burn Rate
    BurnRate: Qudt.quantityKindFromLocalname("BurnRate"),
    // Phase coefficient
    PhaseCoefficient: Qudt.quantityKindFromLocalname("PhaseCoefficient"),
    // Upper Critical Magnetic Flux Density
    UpperCriticalMagneticFluxDensity: Qudt.quantityKindFromLocalname("UpperCriticalMagneticFluxDensity"),
    // Total Cross-section
    TotalCrossSection: Qudt.quantityKindFromLocalname("TotalCrossSection"),
    // Lagrange Function
    LagrangeFunction: Qudt.quantityKindFromLocalname("LagrangeFunction"),
    // Amount of Substance
    AmountOfSubstance: Qudt.quantityKindFromLocalname("AmountOfSubstance"),
    // Complex Power
    ComplexPower: Qudt.quantityKindFromLocalname("ComplexPower"),
    // Relative Humidity
    RelativeHumidity: Qudt.quantityKindFromLocalname("RelativeHumidity"),
    // Illuminance
    Illuminance: Qudt.quantityKindFromLocalname("Illuminance"),
    // Total Linear Stopping Power
    TotalLinearStoppingPower: Qudt.quantityKindFromLocalname("TotalLinearStoppingPower"),
    // Curvature
    CurvatureFromRadius: Qudt.quantityKindFromLocalname("CurvatureFromRadius"),
    // Maximum Expected Operating Thrust
    MaxExpectedOperatingThrust: Qudt.quantityKindFromLocalname("MaxExpectedOperatingThrust"),
    // Effective Mass
    EffectiveMass: Qudt.quantityKindFromLocalname("EffectiveMass"),
    // Atomic Number
    AtomicNumber: Qudt.quantityKindFromLocalname("AtomicNumber"),
    // Mean Free Path
    MeanFreePath: Qudt.quantityKindFromLocalname("MeanFreePath"),
    // Slowing-Down Length
    Slowing__DownLength: Qudt.quantityKindFromLocalname("Slowing-DownLength"),
    // Amount of Substance of Concentration of B
    AmountOfSubstanceConcentrationOfB: Qudt.quantityKindFromLocalname("AmountOfSubstanceConcentrationOfB"),
    // Vertical Velocity
    VerticalVelocity: Qudt.quantityKindFromLocalname("VerticalVelocity"),
    // Kerma Rate
    KermaRate: Qudt.quantityKindFromLocalname("KermaRate"),
    // Multiplication Factor
    MultiplicationFactor: Qudt.quantityKindFromLocalname("MultiplicationFactor"),
    // Electric Current
    ElectricCurrent: Qudt.quantityKindFromLocalname("ElectricCurrent"),
    // Specific Enthalpy
    SpecificEnthalpy: Qudt.quantityKindFromLocalname("SpecificEnthalpy"),
    // Mole Fraction
    MoleFraction: Qudt.quantityKindFromLocalname("MoleFraction"),
    // Amount of Substance per Unit Mass
    AmountOfSubstancePerUnitMass: Qudt.quantityKindFromLocalname("AmountOfSubstancePerUnitMass"),
    // Flux
    Flux: Qudt.quantityKindFromLocalname("Flux"),
    // Work Function
    WorkFunction: Qudt.quantityKindFromLocalname("WorkFunction"),
    // Wavelength
    Wavelength: Qudt.quantityKindFromLocalname("Wavelength"),
    // Permeability
    Permeability: Qudt.quantityKindFromLocalname("Permeability"),
    // Rest Mass
    RestMass: Qudt.quantityKindFromLocalname("RestMass"),
    // Force Per Area Time
    ForcePerAreaTime: Qudt.quantityKindFromLocalname("ForcePerAreaTime"),
    // Molar Mass variation due to Pressure
    AmountOfSubstancePerUnitMassPressure: Qudt.quantityKindFromLocalname("AmountOfSubstancePerUnitMassPressure"),
    // Atom Scattering Factor
    AtomScatteringFactor: Qudt.quantityKindFromLocalname("AtomScatteringFactor"),
    // Radiant Energy Density
    RadiantEnergyDensity: Qudt.quantityKindFromLocalname("RadiantEnergyDensity"),
    // Mass Of Solid Booster
    MassOfSolidBooster: Qudt.quantityKindFromLocalname("MassOfSolidBooster"),
    // Predicted Mass
    PREDICTED__MASS: Qudt.quantityKindFromLocalname("PREDICTED-MASS"),
    // Product of Inertia
    PRODUCT__OF__INERTIA: Qudt.quantityKindFromLocalname("PRODUCT-OF-INERTIA"),
    // Voltage Percentage
    VoltagePercentage: Qudt.quantityKindFromLocalname("VoltagePercentage"),
    // Mortality Rate
    MortalityRate: Qudt.quantityKindFromLocalname("MortalityRate"),
    // Acceptor Density
    AcceptorDensity: Qudt.quantityKindFromLocalname("AcceptorDensity"),
    // Mass Fraction
    MassFraction: Qudt.quantityKindFromLocalname("MassFraction"),
    // Second Polar Moment of Area
    SecondPolarMomentOfArea: Qudt.quantityKindFromLocalname("SecondPolarMomentOfArea"),
    // Permeability
    ElectromagneticPermeability: Qudt.quantityKindFromLocalname("ElectromagneticPermeability"),
    // Order of Reflection
    OrderOfReflection: Qudt.quantityKindFromLocalname("OrderOfReflection"),
    // Volumetric Heat Capacity
    VolumetricHeatCapacity: Qudt.quantityKindFromLocalname("VolumetricHeatCapacity"),
    // Reaction Energy
    ReactionEnergy: Qudt.quantityKindFromLocalname("ReactionEnergy"),
    // Serum or Plasma Level
    SerumOrPlasmaLevel: Qudt.quantityKindFromLocalname("SerumOrPlasmaLevel"),
    // Pressure
    Pressure: Qudt.quantityKindFromLocalname("Pressure"),
    // Henry's Law Volatility Constant
    HenrysLawVolatilityConstant: Qudt.quantityKindFromLocalname("HenrysLawVolatilityConstant"),
    // Specific Acoustic Impedance
    SpecificAcousticImpedance: Qudt.quantityKindFromLocalname("SpecificAcousticImpedance"),
    // Fermi Angular Wavenumber
    FermiAngularWavenumber: Qudt.quantityKindFromLocalname("FermiAngularWavenumber"),
    // Reverberation Time
    ReverberationTime: Qudt.quantityKindFromLocalname("ReverberationTime"),
    // Electric Current Phasor
    ElectricCurrentPhasor: Qudt.quantityKindFromLocalname("ElectricCurrentPhasor"),
    // Photo Threshold of Awareness Function
    PhotoThresholdOfAwarenessFunction: Qudt.quantityKindFromLocalname("PhotoThresholdOfAwarenessFunction"),
    // Video Frame Rate
    VideoFrameRate: Qudt.quantityKindFromLocalname("VideoFrameRate"),
    // Electric Propulsion Propellant Mass
    ElectricPropulsionPropellantMass: Qudt.quantityKindFromLocalname("ElectricPropulsionPropellantMass"),
    // Drag Force
    DragForce: Qudt.quantityKindFromLocalname("DragForce"),
    // Total Current Density
    TotalCurrentDensity: Qudt.quantityKindFromLocalname("TotalCurrentDensity"),
    // Moment of Inertia in the Z axis
    MOMENT__OF__INERTIA_Z: Qudt.quantityKindFromLocalname("MOMENT-OF-INERTIA_Z"),
    // Nuclear Quadrupole Moment
    NuclearQuadrupoleMoment: Qudt.quantityKindFromLocalname("NuclearQuadrupoleMoment"),
    // Curie Temperature
    CurieTemperature: Qudt.quantityKindFromLocalname("CurieTemperature"),
    // Ratio of Specific Heat Capacities
    RatioOfSpecificHeatCapacities: Qudt.quantityKindFromLocalname("RatioOfSpecificHeatCapacities"),
    // Seebeck Coefficient
    SeebeckCoefficient: Qudt.quantityKindFromLocalname("SeebeckCoefficient"),
    // Information Entropy
    InformationEntropy: Qudt.quantityKindFromLocalname("InformationEntropy"),
    // Propellant Mean Bulk Temperature
    PropellantMeanBulkTemperature: Qudt.quantityKindFromLocalname("PropellantMeanBulkTemperature"),
    // Area Ratio
    AreaRatio: Qudt.quantityKindFromLocalname("AreaRatio"),
    // Force per Angle
    ForcePerAngle: Qudt.quantityKindFromLocalname("ForcePerAngle"),
    // Modulus of Elasticity
    ModulusOfElasticity: Qudt.quantityKindFromLocalname("ModulusOfElasticity"),
    // Decay Constant
    DecayConstant: Qudt.quantityKindFromLocalname("DecayConstant"),
    // Inverse Magnetic Flux
    InverseMagneticFlux: Qudt.quantityKindFromLocalname("InverseMagneticFlux"),
    // Average Specific Impulse
    AverageSpecificImpulse: Qudt.quantityKindFromLocalname("AverageSpecificImpulse"),
    // Electric Charge Density
    ElectricChargeDensity: Qudt.quantityKindFromLocalname("ElectricChargeDensity"),
    // Spectral Radiant Energy Density
    SpectralRadiantEnergyDensity: Qudt.quantityKindFromLocalname("SpectralRadiantEnergyDensity"),
    // Heat Flow Rate per Unit Area
    HeatFlowRatePerUnitArea: Qudt.quantityKindFromLocalname("HeatFlowRatePerUnitArea"),
    // Expansion Ratio
    ExpansionRatio: Qudt.quantityKindFromLocalname("ExpansionRatio"),
    // Friction Coefficient
    FrictionCoefficient: Qudt.quantityKindFromLocalname("FrictionCoefficient"),
    // Gustatory Threshold
    GustatoryThreshold: Qudt.quantityKindFromLocalname("GustatoryThreshold"),
    // Madelung Constant
    MadelungConstant: Qudt.quantityKindFromLocalname("MadelungConstant"),
    // Pressure Burning Rate Index
    PressureBurningRateIndex: Qudt.quantityKindFromLocalname("PressureBurningRateIndex"),
    // Volumetric Flux
    VolumetricFlux: Qudt.quantityKindFromLocalname("VolumetricFlux"),
    // Thermodynamic Entropy
    ThermodynamicEntropy: Qudt.quantityKindFromLocalname("ThermodynamicEntropy"),
    // Earth Closest Approach Vehicle Velocity
    EarthClosestApproachVehicleVelocity: Qudt.quantityKindFromLocalname("EarthClosestApproachVehicleVelocity"),
    // Velocity
    Velocity: Qudt.quantityKindFromLocalname("Velocity"),
    // Atmospheric Pressure
    AtmosphericPressure: Qudt.quantityKindFromLocalname("AtmosphericPressure"),
    // Gravitational Attraction
    GravitationalAttraction: Qudt.quantityKindFromLocalname("GravitationalAttraction"),
}

// Prefixes
function addPrefix0(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Atto", new Decimal("1.0E-18"), "a", "a", undefined);
        prefix.addLabel(new LangString("Atto", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Atto", prefix);
}
function addPrefix1(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Centi", new Decimal("0.010"), "c", "c", undefined);
        prefix.addLabel(new LangString("Centi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Centi", prefix);
}
function addPrefix2(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Deca", new Decimal("10"), "da", "da", undefined);
        prefix.addLabel(new LangString("Deca", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Deca", prefix);
}
function addPrefix3(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Deci", new Decimal("0.10"), "d", "d", undefined);
        prefix.addLabel(new LangString("Deci", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Deci", prefix);
}
function addPrefix4(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Deka", new Decimal("10"), "da", "da", undefined);
        prefix.addLabel(new LangString("Deka", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Deka", prefix);
}
function addPrefix5(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Exa", new Decimal("1.0E+18"), "E", "E", undefined);
        prefix.addLabel(new LangString("Exa", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Exa", prefix);
}
function addPrefix6(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Exbi", new Decimal("152921504606846976"), "Ei", undefined, undefined);
        prefix.addLabel(new LangString("Exbi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Exbi", prefix);
}
function addPrefix7(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Femto", new Decimal("1.0E-15"), "f", "f", undefined);
        prefix.addLabel(new LangString("Femto", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Femto", prefix);
}
function addPrefix8(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Gibi", new Decimal("1073741824"), "Gi", undefined, undefined);
        prefix.addLabel(new LangString("Gibi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Gibi", prefix);
}
function addPrefix9(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Giga", new Decimal("1.0E+9"), "G", "G", undefined);
        prefix.addLabel(new LangString("Giga", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Giga", prefix);
}
function addPrefix10(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Hecto", new Decimal("1.0E+2"), "h", "h", undefined);
        prefix.addLabel(new LangString("Hecto", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Hecto", prefix);
}
function addPrefix11(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Kibi", new Decimal("1024"), "Ki", undefined, undefined);
        prefix.addLabel(new LangString("Kibi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Kibi", prefix);
}
function addPrefix12(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Kilo", new Decimal("1.0E+3"), "k", "k", undefined);
        prefix.addLabel(new LangString("Kilo", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Kilo", prefix);
}
function addPrefix13(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Mebi", new Decimal("1048576"), "Mi", undefined, undefined);
        prefix.addLabel(new LangString("Mebi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Mebi", prefix);
}
function addPrefix14(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Mega", new Decimal("1.0E+6"), "M", "M", undefined);
        prefix.addLabel(new LangString("Mega", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Mega", prefix);
}
function addPrefix15(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Micro", new Decimal("0.0000010"), "μ", "u", undefined);
        prefix.addLabel(new LangString("Micro", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Micro", prefix);
}
function addPrefix16(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Milli", new Decimal("0.0010"), "m", "m", undefined);
        prefix.addLabel(new LangString("Milli", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Milli", prefix);
}
function addPrefix17(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Nano", new Decimal("1.0E-9"), "n", "n", undefined);
        prefix.addLabel(new LangString("Nano", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Nano", prefix);
}
function addPrefix18(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Pebi", new Decimal("125899906842624"), "Pi", undefined, undefined);
        prefix.addLabel(new LangString("Pebi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Pebi", prefix);
}
function addPrefix19(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Peta", new Decimal("1.0E+15"), "P", "P", undefined);
        prefix.addLabel(new LangString("Peta", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Peta", prefix);
}
function addPrefix20(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Pico", new Decimal("1.0E-12"), "p", "p", undefined);
        prefix.addLabel(new LangString("Pico", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Pico", prefix);
}
function addPrefix21(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Tebi", new Decimal("1099511627776"), "Ti", undefined, undefined);
        prefix.addLabel(new LangString("Tebi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Tebi", prefix);
}
function addPrefix22(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Tera", new Decimal("1.0E+12"), "T", "T", undefined);
        prefix.addLabel(new LangString("Tera", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Tera", prefix);
}
function addPrefix23(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Yobi", new Decimal("1208925819614629174706176"), "Yi", undefined, undefined);
        prefix.addLabel(new LangString("Yobi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Yobi", prefix);
}
function addPrefix24(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Yocto", new Decimal("1.0E-24"), "y", "y", undefined);
        prefix.addLabel(new LangString("Yocto", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Yocto", prefix);
}
function addPrefix25(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Yotta", new Decimal("1.0E+24"), "Y", "Y", undefined);
        prefix.addLabel(new LangString("Yotta", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Yotta", prefix);
}
function addPrefix26(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Zebi", new Decimal("1180591620717411303424"), "Zi", undefined, undefined);
        prefix.addLabel(new LangString("Zebi", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Zebi", prefix);
}
function addPrefix27(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Zepto", new Decimal("1.0E-21"), "z", "z", undefined);
        prefix.addLabel(new LangString("Zepto", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Zepto", prefix);
}
function addPrefix28(config: QudtlibConfig) {
    let prefix: Prefix;
    prefix = new Prefix("http://qudt.org/vocab/prefix/Zetta", new Decimal("1.0E+21"), "Z", "Z", undefined);
        prefix.addLabel(new LangString("Zetta", "en"));
    config.prefixes.set("http://qudt.org/vocab/prefix/Zetta", prefix);
}

addPrefix0(config);
addPrefix1(config);
addPrefix2(config);
addPrefix3(config);
addPrefix4(config);
addPrefix5(config);
addPrefix6(config);
addPrefix7(config);
addPrefix8(config);
addPrefix9(config);
addPrefix10(config);
addPrefix11(config);
addPrefix12(config);
addPrefix13(config);
addPrefix14(config);
addPrefix15(config);
addPrefix16(config);
addPrefix17(config);
addPrefix18(config);
addPrefix19(config);
addPrefix20(config);
addPrefix21(config);
addPrefix22(config);
addPrefix23(config);
addPrefix24(config);
addPrefix25(config);
addPrefix26(config);
addPrefix27(config);
addPrefix28(config);

export const Prefixes = {
    // Tebi
    Tebi: Qudt.prefixFromLocalname("Tebi"),
    // Pico
    Pico: Qudt.prefixFromLocalname("Pico"),
    // Milli
    Milli: Qudt.prefixFromLocalname("Milli"),
    // Peta
    Peta: Qudt.prefixFromLocalname("Peta"),
    // Zepto
    Zepto: Qudt.prefixFromLocalname("Zepto"),
    // Zebi
    Zebi: Qudt.prefixFromLocalname("Zebi"),
    // Giga
    Giga: Qudt.prefixFromLocalname("Giga"),
    // Micro
    Micro: Qudt.prefixFromLocalname("Micro"),
    // Exa
    Exa: Qudt.prefixFromLocalname("Exa"),
    // Deka
    Deka: Qudt.prefixFromLocalname("Deka"),
    // Mebi
    Mebi: Qudt.prefixFromLocalname("Mebi"),
    // Centi
    Centi: Qudt.prefixFromLocalname("Centi"),
    // Exbi
    Exbi: Qudt.prefixFromLocalname("Exbi"),
    // Pebi
    Pebi: Qudt.prefixFromLocalname("Pebi"),
    // Kibi
    Kibi: Qudt.prefixFromLocalname("Kibi"),
    // Deci
    Deci: Qudt.prefixFromLocalname("Deci"),
    // Yobi
    Yobi: Qudt.prefixFromLocalname("Yobi"),
    // Deca
    Deca: Qudt.prefixFromLocalname("Deca"),
    // Atto
    Atto: Qudt.prefixFromLocalname("Atto"),
    // Tera
    Tera: Qudt.prefixFromLocalname("Tera"),
    // Kilo
    Kilo: Qudt.prefixFromLocalname("Kilo"),
    // Yotta
    Yotta: Qudt.prefixFromLocalname("Yotta"),
    // Yocto
    Yocto: Qudt.prefixFromLocalname("Yocto"),
    // Mega
    Mega: Qudt.prefixFromLocalname("Mega"),
    // Nano
    Nano: Qudt.prefixFromLocalname("Nano"),
    // Hecto
    Hecto: Qudt.prefixFromLocalname("Hecto"),
    // Femto
    Femto: Qudt.prefixFromLocalname("Femto"),
    // Zetta
    Zetta: Qudt.prefixFromLocalname("Zetta"),
    // Gibi
    Gibi: Qudt.prefixFromLocalname("Gibi"),
}