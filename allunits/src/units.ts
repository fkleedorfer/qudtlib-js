/**
 * Code generated by qudtlib-java:qudtlib-js-gen.
 */
import { Decimal } from "decimal.js";
import {
  config,
  Unit,
  QuantityKind,
  Prefix,
  LangString,
  FactorUnit,
  Qudt,
} from "@qudtlib/core";

export * from "@qudtlib/core";
// Units
{
  let unit: Unit;
  unit = new Unit(
    "http://qudt.org/vocab/unit/1000000I",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("1000000I", undefined));
  config.units.set("http://qudt.org/vocab/unit/1000000I", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/1000I",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("1000I", undefined));
  config.units.set("http://qudt.org/vocab/unit/1000I", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DisplacementCurrent"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPhasor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagnetomotiveForce"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalCurrent");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CurrentLinkage");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticTension");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/A-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A⋅m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Square Metre", "en"));
  unit.addLabel(new LangString("Ampere Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/A-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-M2-PER-J-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A⋅m²/(J⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Square Metre Per Joule Second", "en"));
  unit.addLabel(
    new LangString("Ampere Square Meter Per Joule Second", "en-us")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GyromagneticRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/A-M2-PER-J-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M",
    undefined,
    "A/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Per Centimeter", "en-us"));
  unit.addLabel(new LangString("Ampere Per Centimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M2",
    undefined,
    "A/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Per Square Centimetre", "en"));
  unit.addLabel(new LangString("Ampere Per Square Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H-1T0D0",
    new Decimal("57.2957795"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A/°C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere per Degree Celsius", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-J",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A/J",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere per Joule", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitEnergy"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-J", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere per Metre", "en"));
  unit.addLabel(new LangString("Ampere per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Coercivity");
  config.units.set("http://qudt.org/vocab/unit/A-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere per Square Meter", "en-us"));
  unit.addLabel(new LangString("Ampere per Square Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DisplacementCurrentDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalCurrentDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-M2-K2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H-2T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A/m²⋅k²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Ampere per Square Meter Square Kelvin", "en-us")
  );
  unit.addLabel(new LangString("Ampere per Square Metre Square Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RichardsonConstant"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-M2-K2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M",
    undefined,
    "A/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Per Millimetre", "en"));
  unit.addLabel(new LangString("Ampere Per Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-MilliM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M2",
    undefined,
    "A/mm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Per Square Millimetre", "en"));
  unit.addLabel(new LangString("Ampere Per Square Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-MilliM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-PER-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A/rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere per Radian", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerAngle"
  );
  config.units.set("http://qudt.org/vocab/unit/A-PER-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "A⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/A-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("4046.8564224"),
    undefined,
    undefined,
    undefined,
    undefined,
    "acre",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Acre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/AC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AC-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1233.4818375475202"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ac⋅ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Acre Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/AC-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AFN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AFN",
    971
  );
  unit.addLabel(new LangString("Afghani", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/AFN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AMD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AMD",
    51
  );
  unit.addLabel(new LangString("Armenian Dram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/AMD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AMU",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1.66053878283E-27"),
    undefined,
    undefined,
    undefined,
    undefined,
    "amu",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Atomic mass unit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/AMU", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ANGSTROM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Å",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Angstrom", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/ANGSTROM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ANGSTROM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0",
    new Decimal("1E-40"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ã…^3",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Angstrom^3", "en-us"));
  unit.addLabel(new LangString("Angstrom^3", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Polarizability");
  config.units.set("http://qudt.org/vocab/unit/ANGSTROM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ARCMIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000290888209"),
    undefined,
    undefined,
    undefined,
    undefined,
    "'",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ArcMinute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/ARCMIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ARCSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.00000484813681"),
    undefined,
    undefined,
    undefined,
    undefined,
    '"',
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ArcSecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/ARCSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ARE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "a",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("are", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/ARE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ARS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ARS",
    32
  );
  unit.addLabel(new LangString("Argentine Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ARS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "AT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Turn", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagnetomotiveForce"
  );
  config.units.set("http://qudt.org/vocab/unit/AT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AT-PER-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("39.3700787"),
    undefined,
    undefined,
    undefined,
    undefined,
    "At/in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Turn per Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  config.units.set("http://qudt.org/vocab/unit/AT-PER-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AT-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "At/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ampere Turn per Metre", "en"));
  unit.addLabel(new LangString("Ampere Turn per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  config.units.set("http://qudt.org/vocab/unit/AT-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ATM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("101325.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "atm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Standard Atmosphere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/ATM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ATM-M3-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    new Decimal("101325.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Atmosphere Cubic Meter per Mole", "en"));
  unit.addLabel(new LangString("Atmosphere Cubic Meter per Mole", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/HenrysLawVolatilityConstant"
  );
  config.units.set("http://qudt.org/vocab/unit/ATM-M3-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ATM_T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("98066.5"),
    undefined,
    undefined,
    undefined,
    undefined,
    "at",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Technical Atmosphere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/ATM_T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AU",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("149597870691.6"),
    undefined,
    undefined,
    undefined,
    undefined,
    "AU",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("astronomical-unit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/AU", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AUD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AUD",
    36
  );
  unit.addLabel(new LangString("Australian Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/AUD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AWG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AWG",
    533
  );
  unit.addLabel(new LangString("Aruban Guilder", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/AWG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AZN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AZN",
    944
  );
  unit.addLabel(new LangString("Azerbaijanian Manat", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/AZN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("10.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A",
    undefined,
    "abA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/A_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A_Ab-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abA⋅cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abampere Square centimetre", "en"));
  unit.addLabel(new LangString("Abampere Square centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/A_Ab-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A_Ab-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("100000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abA/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abampere per Square Centimetre", "en"));
  unit.addLabel(new LangString("Abampere per Square Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A_Ab-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A_Reactive",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("A_Reactive", undefined));
  config.units.set("http://qudt.org/vocab/unit/A_Reactive", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("3.335641E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/A_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/A_Stat-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("0.000003335641"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statA/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statampere per Square Centimetre", "en"));
  unit.addLabel(new LangString("Statampere per Square Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/A_Stat-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AttoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Atto",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "aC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("AttoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/AttoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AttoFARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("1E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Atto",
    "http://qudt.org/vocab/unit/FARAD",
    undefined,
    "aF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Attofarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/AttoFARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AttoJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Atto",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "aJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Attojoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/AttoJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/AttoJ-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1E-18"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-SEC",
    undefined,
    "aJ⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Attojoule Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Action");
  config.units.set("http://qudt.org/vocab/unit/AttoJ-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/B",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "B",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bel", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundExposureLevel"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundPowerLevel");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundPressureLevel"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundReductionIndex"
  );
  config.units.set("http://qudt.org/vocab/unit/B", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BAN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("2.30258509"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ban",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ban", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/BAN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("100000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BAR-L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bar⋅L/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bar Liter Per Second", "en-us"));
  unit.addLabel(new LangString("Bar Litre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/BAR-L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bar⋅m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bar Cubic Meter Per Second", "en-us"));
  unit.addLabel(new LangString("Bar Cubic Metre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/BAR-M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BAR-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bar/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bar Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/BAR-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BAR-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("100000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bar/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bar Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/BAR-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ba",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/BARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BARN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1E-28"),
    undefined,
    undefined,
    undefined,
    undefined,
    "b",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barn", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/BARN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BARYE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ba",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barye", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/BARYE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BBD",
    52
  );
  unit.addLabel(new LangString("Barbados Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BBD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/BBL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_UK_PET",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.1591132"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (UK Petroleum)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000001841587"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (UK Petroleum) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0000441981"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (UK Petroleum) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.002651886"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (UK Petroleum) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.1591132"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (UK Petroleum) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_UK_PET-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.1589873"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{US petroleum}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/BBL_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00000184"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{US petroleum}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (US) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0026498"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{US petroleum}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (US) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_US-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US_DRY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.1156281989625"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{US dry}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dry Barrel (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/BBL_US_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US_PET",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BBL_US_PET", undefined));
  config.units.set("http://qudt.org/vocab/unit/BBL_US_PET", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US_PET-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000044163"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (US Petroleum) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_US_PET-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BBL_US_PET-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.1589873"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bbl{UK petroleum}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Barrel (US Petroleum) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BBL_US_PET-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BDT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BDT",
    50
  );
  unit.addLabel(new LangString("Bangladeshi Taka", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BDT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BEAT",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BEAT", undefined));
  config.units.set("http://qudt.org/vocab/unit/BEAT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BEAT-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BPM",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Heart Beats per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeartRate");
  config.units.set("http://qudt.org/vocab/unit/BEAT-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BFT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Beufort",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Beaufort", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  config.units.set("http://qudt.org/vocab/unit/BFT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BHD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BHD",
    48
  );
  unit.addLabel(new LangString("Bahraini Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BHD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BIOT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("10.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Biot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/BIOT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BIT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.69314718055994530941723212145818"),
    undefined,
    undefined,
    undefined,
    undefined,
    "b",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/BIT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BIT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.69314718055994530941723212145818"),
    undefined,
    undefined,
    undefined,
    undefined,
    "b/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bit per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
  config.units.set("http://qudt.org/vocab/unit/BIT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bq",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Becquerel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/BQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BQ-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bq/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Becquerel per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificActivity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassicActivity");
  config.units.set("http://qudt.org/vocab/unit/BQ-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BQ-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bq/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Becquerels per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration"
  );
  config.units.set("http://qudt.org/vocab/unit/BQ-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BQ-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bq/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Becquerel per Square Meter", "en-us"));
  unit.addLabel(new LangString("Becquerel per Square Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SurfaceActivityDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/BQ-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BQ-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bq/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Becquerel per Cubic Metre", "en"));
  unit.addLabel(new LangString("Becquerel per Cubic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration"
  );
  config.units.set("http://qudt.org/vocab/unit/BQ-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BQ-SEC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Bq⋅s/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Becquerels second per cubic metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AbsoluteActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/BQ-SEC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BREATH",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BREATH", undefined));
  config.units.set("http://qudt.org/vocab/unit/BREATH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BREATH-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "breath/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Breath per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RespiratoryRate");
  config.units.set("http://qudt.org/vocab/unit/BREATH-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BSD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BSD",
    44
  );
  unit.addLabel(new LangString("Bahamian Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BSD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1055.05585262"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (International Definition)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    new Decimal("321.581024"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu⋅ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU Foot", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalEnergyLength"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-FT-PER-FT2-HR-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("1.730734666"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}⋅ft/(ft²⋅hr⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("BTU (IT) Foot per Square Foot Hour Degree Fahrenheit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_IT-FT-PER-FT2-HR-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    new Decimal("26.7984187"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu⋅in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalEnergyLength"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-HR-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("0.144227889"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}⋅in/(ft²⋅hr⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Inch Per Hour Square Foot Degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-HR-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-SEC-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("519.220399911"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}⋅in/(ft²⋅s⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "BTU (IT) Inch per Square Foot Second Degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-SEC-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-HR-FT2-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("0.1442279"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}⋅in/(hr⋅ft²⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Inch Per Hour Square Foot degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-HR-FT2-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-SEC-FT2-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("519.2204"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}⋅in/(s⋅ft²⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Inch Per Second Square Foot degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-SEC-FT2-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    new Decimal("1899.100535"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU (IT) per Degree Fahrenheit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    new Decimal("1899.100535"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/°R",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Degree Rankine", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("11356.5267"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2-HR-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(hr⋅ft²⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("BTU per Square Foot Hour Degree Fahrenheit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-HR-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2-SEC-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(ft²⋅s⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("BTU per Square Foot Second Degree Fahrenheit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-SEC-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("37258.94579"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/ft³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (IT) Per Cubic Foot", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-FT3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.29307107"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("3.15459075"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(hr⋅ft²)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Hour Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    new Decimal("0.555556"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(hr⋅ft²⋅°R)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Hour Square Foot degree Rankine",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("2326.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/lb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU-IT-PER-lb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(lb⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Pound Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(lb⋅°R)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Pound Degree Rankine", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(lb⋅mol)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Pound Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerMassAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("237.18597062376833"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/lbf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Pound of Force",
      "en"
    )
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("4186.8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(lbf⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Pound Degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("426.9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(lbf⋅°R)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Pound Degree Rankine",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("17.58"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Minute",
      "en"
    )
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-MOL-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(lb⋅mol⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Pound Mole Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-MOL-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1055.05585262"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("178.66"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(s⋅ft⋅°R)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Second Foot Degree Rankine",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("11356.5267"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(s⋅ft²)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BTU per Second Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    new Decimal("14.89"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{IT}/(s⋅ft²⋅°R)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (international Table) Per Second Square Foot degree Rankine",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_MEAN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1055.05585262"),
    undefined,
    undefined,
    undefined,
    undefined,
    "BTU{mean}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("British Thermal Unit (mean)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/BTU_MEAN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1054.3502645"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (Thermochemical Definition)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/BTU_TH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-FT-PER-FT2-HR-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("1.729577206"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}⋅ft/(ft²⋅hr⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("BTU (TH) Foot per Square Foot Hour Degree Fahrenheit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_TH-FT-PER-FT2-HR-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-FT-PER-HR-FT2-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("1.73"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}⋅ft/(hr⋅ft²⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (thermochemical) Foot Per Hour Square Foot degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_TH-FT-PER-HR-FT2-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-HR-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("0.144131434"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}⋅in/(ft²⋅hr⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("BTU (TH) Inch per Square Foot Hour Degree Fahrenheit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-HR-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-SEC-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("518.8732"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}⋅in/(ft²⋅s⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "BTU (TH) Inch per Square Foot Second Degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-SEC-DEG_F",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-PER-FT3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("37234.03"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}/ft³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (TH) Per Cubic Foot", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
  config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-FT3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.2929"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (thermochemical) Per Hour", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-PER-LB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("2324.443861"),
    undefined,
    undefined,
    undefined,
    undefined,
    "btu{th}/lb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("British Thermal Unit (TH) Per Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-LB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-PER-LB-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("426.654"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}/(lb⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "British Thermal Unit (thermochemical) Per Pound Degree Fahrenheit",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-LB-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("17.573"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (thermochemical) Per Minute", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BTU_TH-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1054.35"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Btu{th}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("British Thermal Unit (thermochemical) Per Second", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BTU_TH-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.03636872"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("bushel (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/BU_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("4.209343E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (UK) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001010242"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (UK) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0006061453"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (UK) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.03636872"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (UK) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.03523907"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("bushel (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/BU_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_US_DRY",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("BU_US_DRY", undefined));
  config.units.set("http://qudt.org/vocab/unit/BU_US_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("4.0786E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (US Dry) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000009789"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (US Dry) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00058732"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{US}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (US Dry) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.03523907"),
    undefined,
    undefined,
    undefined,
    undefined,
    "bsh{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Bushel (US Dry) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/BU_US_DRY-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BYR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BYN",
    933
  );
  unit.addLabel(new LangString("Belarussian Ruble", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BYR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5.5451774444795624753378569716654"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BIT",
    undefined,
    "B",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Byte", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/BYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BelizeDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BZD",
    84
  );
  unit.addLabel(new LangString("Belize Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BelizeDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BermudaDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BMD",
    60
  );
  unit.addLabel(new LangString("Bermuda Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BermudaDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BolivianMvdol",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BOV",
    984
  );
  unit.addLabel(new LangString("Bolivian Mvdol (Funds code)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BolivianMvdol", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Boliviano",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BOB",
    68
  );
  unit.addLabel(new LangString("Boliviano", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Boliviano", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BrazilianReal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BRL",
    986
  );
  unit.addLabel(new LangString("Brazilian Real", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BrazilianReal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BruneiDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BND",
    96
  );
  unit.addLabel(new LangString("Brunei Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BruneiDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BulgarianLev",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BGN",
    975
  );
  unit.addLabel(new LangString("Bulgarian Lev", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BulgarianLev", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/BurundianFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BIF",
    108
  );
  unit.addLabel(new LangString("Burundian Franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/BurundianFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElementaryCharge"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L1I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Metre", "en"));
  unit.addLabel(new LangString("Coulomb Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/C-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C⋅m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Square Metre", "en"));
  unit.addLabel(new LangString("Coulomb Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricQuadrupoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/C-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-M2-PER-V",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C⋅m²/V",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Square Metre Per Volt", "en"));
  unit.addLabel(new LangString("Coulomb Square Meter Per Volt", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Polarizability");
  config.units.set("http://qudt.org/vocab/unit/C-M2-PER-V", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "C/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Per Square Centimeter", "en-us"));
  unit.addLabel(new LangString("Coulomb Per Square Centimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "C/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Per Cubic Centimetre", "en"));
  unit.addLabel(new LangString("Coulomb Per Cubic Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-KiloGM-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C/kg⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Per Kilogram Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExposureRate");
  config.units.set("http://qudt.org/vocab/unit/C-PER-KiloGM-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb per Metre", "en"));
  unit.addLabel(new LangString("Coulomb per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeLineDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeLinearDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb per Square Metre", "en"));
  unit.addLabel(new LangString("Coulomb per Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeSurfaceDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricPolarization"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb per Cubic Metre", "en"));
  unit.addLabel(new LangString("Coulomb per Cubic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E1L0I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "c/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb per Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-MilliM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "C/mm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Per Square Millimeter", "en-us"));
  unit.addLabel(new LangString("Coulomb Per Square Millimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-MilliM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C-PER-MilliM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "C/mm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Coulomb Per Cubic Millimeter", "en-us"));
  unit.addLabel(new LangString("Coulomb Per Cubic Millimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/C-PER-MilliM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C2-M-PER-J",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C²⋅m²/J",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Coulomb Meter per Joule", "en-us"));
  unit.addLabel(new LangString("Square Coulomb Metre per Joule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Polarizability");
  config.units.set("http://qudt.org/vocab/unit/C2-M-PER-J", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C3-M-PER-J2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E3L-1I0M-2H0T7D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C³⋅m³/J²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Coulomb Metre per Square Joule", "en"));
  unit.addLabel(
    new LangString("Cubic Coulomb Meter per Square Joule", "en-us")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CubicElectricDipoleMomentPerSquareEnergy"
  );
  config.units.set("http://qudt.org/vocab/unit/C3-M-PER-J2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C4-M4-PER-J3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E4L-2I0M-3H0T10D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "C⁴m⁴/J³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quartic Coulomb Metre per Cubic Energy", "en"));
  unit.addLabel(
    new LangString("Quartic Coulomb Meter per Cubic Energy", "en-us")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuarticElectricDipoleMomentPerCubicEnergy"
  );
  config.units.set("http://qudt.org/vocab/unit/C4-M4-PER-J3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CAD",
    124
  );
  unit.addLabel(new LangString("Canadian Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_15_DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4.1855"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{15 °C}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie (15 Degrees C)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_15_DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4.1868"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{IT}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("International Table calorie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_IT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_IT-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("4186.8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{IT}/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie (international Table) Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_IT-PER-GM-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("4186.8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{IT}/(g⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Calorie (international Table) Per Gram Degree Celsius",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-GM-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_IT-PER-GM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("4186.8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{IT}/(g⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Calorie (international Table) Per Gram Kelvin", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-GM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("418.68"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{IT}/(s⋅cm⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Calorie (international Table) Per Second Centimetre Kelvin",
      "en"
    )
  );
  unit.addLabel(
    new LangString(
      "Calorie (international Table) Per Second Centimeter Kelvin",
      "en-us"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM2-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    new Decimal("41868.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{IT}/(s⋅cm²⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Calorie (international Table) Per Second Square Centimetre kelvin",
      "en"
    )
  );
  unit.addLabel(
    new LangString(
      "Calorie (international Table) Per Second Square Centimeter kelvin",
      "en-us"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM2-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_MEAN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4.19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{mean}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie (mean)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_MEAN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4.184"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Thermochemical Calorie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_TH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-CentiM-SEC-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("418.4"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/(cm⋅s⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Calorie (thermochemical) Per Centimetre Second Degree Celsius",
      "en"
    )
  );
  unit.addLabel(
    new LangString(
      "Calorie (thermochemical) Per Centimeter Second Degree Celsius",
      "en-us"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/CAL_TH-PER-CentiM-SEC-DEG_C",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-G",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "calTH/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("calorie (thermochemical) per gram (calTH/g)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-G", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie (thermochemical) Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-GM-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/(g⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Calorie (thermochemical) Per Gram Degree Celsius", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-GM-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-GM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/(g⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Calorie (thermochemical) Per Gram Kelvin", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-GM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.06973"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie (thermochemical) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("4.184"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie (thermochemical) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("418.4"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/(s⋅cm⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Calorie (thermochemical) Per Second Centimetre Kelvin",
      "en"
    )
  );
  unit.addLabel(
    new LangString(
      "Calorie (thermochemical) Per Second Centimeter Kelvin",
      "en-us"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM2-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    new Decimal("41840.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cal{th}/(s⋅cm²⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Calorie (thermochemical) Per Second Square Centimeter kelvin",
      "en-us"
    )
  );
  unit.addLabel(
    new LangString(
      "Calorie (thermochemical) Per Second Square Centimetre kelvin",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM2-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CARAT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.0002"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ct",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Carat", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/CARAT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CASES",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("CASES", undefined));
  config.units.set("http://qudt.org/vocab/unit/CASES", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CASES-PER-1000I-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Cases/1000 individuals/year",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cases per 1000 individuals per year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Incidence");
  config.units.set("http://qudt.org/vocab/unit/CASES-PER-1000I-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cd",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Candela", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousIntensity"
  );
  config.units.set("http://qudt.org/vocab/unit/CD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CD-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("1550.0031000062002"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cd/in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Candela per Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
  config.units.set("http://qudt.org/vocab/unit/CD-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CD-PER-LM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Candela per Lumen", undefined));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousIntensityDistribution"
  );
  config.units.set("http://qudt.org/vocab/unit/CD-PER-LM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CD-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cd/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("candela per square metre", "en"));
  unit.addLabel(new LangString("candela per square meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
  config.units.set("http://qudt.org/vocab/unit/CD-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CFU",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CFU",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Colony Forming Unit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MicrobialFormation"
  );
  config.units.set("http://qudt.org/vocab/unit/CFU", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("20.1168"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ch",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("chain", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/CH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CLO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    new Decimal("0.155"),
    undefined,
    undefined,
    undefined,
    undefined,
    "clo",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Clo", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance"
  );
  config.units.set("http://qudt.org/vocab/unit/CLO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CM_H2O",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("98.0665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cmH₂0",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimetre of Water", "en"));
  unit.addLabel(new LangString("Centimeter of Water", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/CM_H2O", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CORD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("3.62"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cord",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cord", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/CORD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cp",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Candlepower", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousIntensity"
  );
  config.units.set("http://qudt.org/vocab/unit/CP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CUP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00023658825"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cup",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Liquid Cup", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/CUP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CUP_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0002365882"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cup{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cup (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/CUP_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CWT_LONG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("50.80235"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cwt{long}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Long Hundred Weight", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/CWT_LONG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CWT_SHORT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("45.359237"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cwt{short}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hundred Weight - Short", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/CWT_SHORT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("10.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abcoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/C_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C_Ab-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("100000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abC/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abcoulomb per Square Centimetre", "en"));
  unit.addLabel(new LangString("Abcoulomb per Square Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/C_Ab-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("3.3356409519815204957557671447492E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statcoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/C_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C_Stat-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("0.00000333564"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statC/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statcoulomb per Square Centimetre", "en"));
  unit.addLabel(new LangString("Statcoulomb per Square Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/C_Stat-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/C_Stat-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E1L0I0M0H0T1D0",
    new Decimal("3.33564E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statC/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statcoulomb per Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/C_Stat-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CapeVerdeEscudo",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CVE",
    132
  );
  unit.addLabel(new LangString("Cape Verde Escudo", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CapeVerdeEscudo", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CaymanIslandsDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KYD",
    136
  );
  unit.addLabel(new LangString("Cayman Islands Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CaymanIslandsDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Cedi",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GHS",
    936
  );
  unit.addLabel(new LangString("Cedi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Cedi", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "cbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centibar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/CentiBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("0.01"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "cC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("CentiCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/CentiC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.00001"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "cg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centigram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/CentiGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00001"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "cL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centilitre", "en-us"));
  unit.addLabel(new LangString("Centilitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/CentiL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.01"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimeter", "en-us"));
  unit.addLabel(new LangString("Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.000002777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "cm/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimetre Per Hour", "en"));
  unit.addLabel(new LangString("Centimeter Per Hour", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/CentiM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-K",
    undefined,
    "cm/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimeter Per Kelvin", "en-us"));
  unit.addLabel(new LangString("Centimetre Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiM-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("3.16880878140289E-13"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-YR",
    undefined,
    "cm/(1000 yr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimetres per thousand years", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/CentiM-PER-KiloYR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "cm/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("centimeter per second", "en-us"));
  unit.addLabel(new LangString("centimetre per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/CentiM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC2",
    undefined,
    "cm/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimeter per Square Second", "en-us"));
  unit.addLabel(new LangString("Centimetre per Square Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/CentiM-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM-SEC-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "cm⋅s⋅°C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimetre Second Degree Celsius", "en"));
  unit.addLabel(new LangString("Centimeter Second Degree Celsius", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LengthTemperatureTime"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiM-SEC-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("0.0001"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/M2",
    undefined,
    "cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Centimeter", "en-us"));
  unit.addLabel(new LangString("Square Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM2-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("0.006"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cm²m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Centimetre Minute", "en"));
  unit.addLabel(new LangString("Square Centimeter Minute", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
  config.units.set("http://qudt.org/vocab/unit/CentiM2-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM2-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cm²/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Square centimetres per cubic centimetre", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/CentiM2-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M2-PER-SEC",
    undefined,
    "cm²/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square centimetres per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  config.units.set("http://qudt.org/vocab/unit/CentiM2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cm²⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Centimetre Second", "en"));
  unit.addLabel(new LangString("Square Centimeter Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
  config.units.set("http://qudt.org/vocab/unit/CentiM2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/M3",
    undefined,
    "cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("cubic centimetre", "en"));
  unit.addLabel(new LangString("cubic centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-M3",
    undefined,
    "cm³/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimetre Per Cubic Centimetre", "en"));
  unit.addLabel(
    new LangString("Cubic Centimeter Per Cubic Centimeter", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.157407E-11"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "cm³/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimeter Per Day", "en-us"));
  unit.addLabel(new LangString("Cubic Centimetre Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("2.777778E-10"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "cm³/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimeter Per Hour", "en-us"));
  unit.addLabel(new LangString("Cubic Centimetre Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-K",
    undefined,
    "cm³/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimeter Per Kelvin", "en-us"));
  unit.addLabel(new LangString("Cubic Centimetre Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-M3",
    undefined,
    "cm³/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimetre Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Cubic Centimeter Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.666667E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "cm³/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimeter Per Minute", "en-us"));
  unit.addLabel(new LangString("Cubic Centimetre Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-MOL",
    undefined,
    "cm³/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimetre Per Mole", "en"));
  unit.addLabel(new LangString("Cubic Centimeter Per Mole", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimeter per Mole Second", "en-us"));
  unit.addLabel(new LangString("Cubic Centimeter per Mole Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AtmosphericHydroxylationRate"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "cm³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Centimeter Per Second", "en-us"));
  unit.addLabel(new LangString("Cubic Centimetre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/CentiM3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("0.010"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("CentiMOL", undefined));
  config.units.set("http://qudt.org/vocab/unit/CentiMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimole per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolalityOfSolute"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM_H2O",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("98.0665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cmH₂0",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimetre of Water", "en"));
  unit.addLabel(new LangString("Centimeter of Water", "en-us"));
  unit.addLabel(new LangString("Conventional Centimetre Of Water", "en"));
  unit.addLabel(new LangString("Conventional Centimeter Of Water", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/CentiM_H2O", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiM_HG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1333.224"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cmHg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centimetre Of Mercury", "en"));
  unit.addLabel(new LangString("Centimeter Of Mercury", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/CentiM_HG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.010"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/N",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("CentiN", undefined));
  config.units.set("http://qudt.org/vocab/unit/CentiN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiN-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "cN⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centinewton Meter", "en-us"));
  unit.addLabel(new LangString("Centinewton Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/CentiN-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiPOISE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/POISE",
    undefined,
    "cP",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centipoise", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiPOISE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiPOISE-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/POISE-PER-BAR",
    undefined,
    "cP/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centipoise Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/CentiPOISE-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CentiST",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Centi",
    "http://qudt.org/vocab/unit/ST",
    undefined,
    "cSt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Centistokes", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/KinematicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/CentiST", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ChileanPeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CLP",
    152
  );
  unit.addLabel(new LangString("Chilean Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ChileanPeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Ci",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("37000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ci",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Curie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/Ci", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ColombianPeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "COP",
    170
  );
  unit.addLabel(new LangString("Colombian Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ColombianPeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ComoroFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KMF",
    174
  );
  unit.addLabel(new LangString("Comoro Franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ComoroFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ConvertibleMark",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BAM",
    977
  );
  unit.addLabel(new LangString("Convertible Marks", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ConvertibleMark", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CordobaOro",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NIO",
    558
  );
  unit.addLabel(new LangString("Cordoba Oro", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CordobaOro", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CostaRicanColon",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CRC",
    188
  );
  unit.addLabel(new LangString("Costa Rican Colon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CostaRicanColon", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CroatianKuna",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "HRK",
    191
  );
  unit.addLabel(new LangString("Croatian Kuna", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CroatianKuna", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CubanPeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CUP",
    192
  );
  unit.addLabel(new LangString("Cuban Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CubanPeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CyprusPound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CYP",
    196
  );
  unit.addLabel(new LangString("Cyprus Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CyprusPound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/CzechKoruna",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CZK",
    203
  );
  unit.addLabel(new LangString("Czech Koruna", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/CzechKoruna", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("86400.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Day", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/BiodegredationHalfLife"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FishBiotransformationHalfLife"
  );
  config.units.set("http://qudt.org/vocab/unit/DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DAY_Sidereal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("86164.099"),
    undefined,
    undefined,
    undefined,
    undefined,
    "day{sidereal}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sidereal Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/DAY_Sidereal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEATHS",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DEATHS", undefined));
  config.units.set("http://qudt.org/vocab/unit/DEATHS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEATHS-PER-1000000I-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "deaths/million individuals/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Deaths per Million individuals per year", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MortalityRate");
  config.units.set("http://qudt.org/vocab/unit/DEATHS-PER-1000000I-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEATHS-PER-1000I-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "deaths/1000 individuals/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Deaths per 1000 individuals per year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MortalityRate");
  config.units.set("http://qudt.org/vocab/unit/DEATHS-PER-1000I-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DECADE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "dec",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dec", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/DECADE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.0174532925"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/DEG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.00000484813681"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/DEG-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("0.0174532925199433"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degrees per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/DEG-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.000290888209"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/DEG-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.0174532925"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/DEG-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    new Decimal("0.0174532925"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree per Square Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularAcceleration"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.00030461742"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square degree", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SolidAngle");
  config.units.set("http://qudt.org/vocab/unit/DEG2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_API",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°API",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree API", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Gravity_API");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_API", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_BALLING",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Balling",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Balling", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_BALLING", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_BAUME",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Bé{origin}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Baume (origin Scale)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_BAUME", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_BAUME_US_HEAVY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Bé{US Heavy}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Baume (US Heavy)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_BAUME_US_HEAVY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_BAUME_US_LIGHT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Bé{US Light}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Baume (US Light)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_BAUME_US_LIGHT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_BRIX",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Bx",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Brix", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_BRIX", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_OECHSLE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Oe",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Oechsle", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_OECHSLE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_PLATO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°P",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Plato", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_PLATO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEGREE_TWADDELL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°Tw",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Twaddell", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/DEGREE_TWADDELL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    new Decimal("1.0"),
    new Decimal("273.15"),
    undefined,
    undefined,
    undefined,
    "°C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
  config.units.set("http://qudt.org/vocab/unit/DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°C⋅cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius Centimetre", "en"));
  unit.addLabel(new LangString("Degree Celsius Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LengthTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-KiloGM-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°C⋅kg/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Degrees Celsius kilogram per square metre", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-KiloGM-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius per Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperatureRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degrees Celsius per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-PER-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    new Decimal("3.16880878140289E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degrees Celsius per year", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C-PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C-WK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0",
    new Decimal("604800.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°C/wk",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Celsius week", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeTemperature");
  config.units.set("http://qudt.org/vocab/unit/DEG_C-WK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H2T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°C²⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Degrees Celsius per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/DEG_C2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DEG_C_GROWING_CEREAL", undefined));
  config.units.set("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0",
    new Decimal("8.64E+4"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "GDD",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Growing Degree Days (Cereals)", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GrowingDegreeDay_Cereal"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    new Decimal("0.5555555555555556"),
    new Decimal("459.669607"),
    undefined,
    undefined,
    undefined,
    "°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
  config.units.set("http://qudt.org/vocab/unit/DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°F⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalResistivity"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    new Decimal("1.89563"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°F⋅hr⋅ft²/Btu{IT}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Degree Fahrenheit Hour Square Foot per British Thermal Unit (international Table)",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_IT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_TH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    new Decimal("1.8969"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°F⋅hr⋅ft²/Btu{th}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Degree Fahrenheit Hour Square Foot per British Thermal Unit (thermochemical)",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_TH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-HR-PER-BTU_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H1T3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°F⋅hr/Btu",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit Hour per BTU", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalResistance"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-HR-PER-BTU_IT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°F/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit per Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.5555556"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°F/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperatureRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°F/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°F/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_F-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°F/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Fahrenheit per Square Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_F-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    new Decimal("0.5555555555555556"),
    undefined,
    undefined,
    undefined,
    undefined,
    "°R",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Rankine", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
  config.units.set("http://qudt.org/vocab/unit/DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_R-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/DEG_R-PER-MIN",
    undefined,
    "°R/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Rankine per Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_R-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_R-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/DEG_R-PER-SEC",
    undefined,
    "°R/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Rankine per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_R-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DEG_R-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "°R/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degree Rankine per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DEG_R-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DIOPTER",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "D",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Diopter", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Curvature");
  config.units.set("http://qudt.org/vocab/unit/DIOPTER", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DPI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("39.37008"),
    undefined,
    undefined,
    undefined,
    undefined,
    "DPI",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dots Per Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  config.units.set("http://qudt.org/vocab/unit/DPI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DRAM_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.0017718451953125"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dr{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dram (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DRAM_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DRAM_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.0038879346"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dr{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dram (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DRAM_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DWT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.00155517384"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dwt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Penny Weight", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DWT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DYN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dyn",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dyne", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/DYN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DYN-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dyn⋅cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dyne Centimeter", "en-us"));
  unit.addLabel(new LangString("Dyne Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/DYN-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dyn/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dyne Per Centimetre", "en"));
  unit.addLabel(new LangString("Dyne Per Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/DYN-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dyn/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dyne per Square Centimetre", "en"));
  unit.addLabel(new LangString("Dyne per Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/DYN-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dyn⋅s/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dyne Second Per Centimetre", "en"));
  unit.addLabel(new LangString("Dyne Second Per Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("10.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dyn⋅s/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dyne Second Per Cubic Centimetre", "en"));
  unit.addLabel(new LangString("Dyne Second Per Cubic Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DZD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "DZD",
    12
  );
  unit.addLabel(new LangString("Algerian Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/DZD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Da",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1.66053878283E-27"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Da",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dalton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolecularMass");
  config.units.set("http://qudt.org/vocab/unit/Da", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Dalasi",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GMD",
    270
  );
  unit.addLabel(new LangString("Dalasi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Dalasi", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DanishKrone",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "DKK",
    208
  );
  unit.addLabel(new LangString("Danish Krone", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/DanishKrone", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Debye",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L1I0M0H0T1D0",
    new Decimal("3.33564E-30"),
    undefined,
    undefined,
    undefined,
    undefined,
    "D",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Debye", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/Debye", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaARE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/ARE",
    undefined,
    "daa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/DecaARE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("10.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "daC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DecaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/DecaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.01"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "dag",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decagram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DecaGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.01"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "daL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decalitre", "en"));
  unit.addLabel(new LangString("Decalitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/DecaL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("10.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "dam",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decametre", "en"));
  unit.addLabel(new LangString("Decameter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/DecaM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/M3",
    undefined,
    "dam³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decameter", "en-us"));
  unit.addLabel(new LangString("Cubic Decametre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/DecaM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DecaPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("10.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deca",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "daPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decapascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/DecaPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/B",
    undefined,
    "dB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decibel", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundExposureLevel"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundPowerLevel");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundPressureLevel"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundReductionIndex"
  );
  config.units.set("http://qudt.org/vocab/unit/DeciB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("10000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "dbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decibar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/DeciBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciBAR-PER-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("0.00031688"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dbar/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decibars per year", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/DeciBAR-PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciB_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "dBc",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decibel Carrier Unit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SignalDetectionThreshold"
  );
  config.units.set("http://qudt.org/vocab/unit/DeciB_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciB_M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "dBmW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decibel Referred to 1mw", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/DeciB_M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("0.1"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "dC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DeciCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/DeciC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.0001"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "dg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decigram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DeciGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0001"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "dL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decilitre", "en"));
  unit.addLabel(new LangString("Decilitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/DeciL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciL-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dL/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decilitre Per Gram", "en-us"));
  unit.addLabel(new LangString("Decilitre Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
  config.units.set("http://qudt.org/vocab/unit/DeciL-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.1"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "dm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decimetre", "en"));
  unit.addLabel(new LangString("Decimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/DeciM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("0.01"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/M2",
    undefined,
    "dm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Decimetre", "en"));
  unit.addLabel(new LangString("Square Decimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/DeciM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/M3",
    undefined,
    "dm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimetre", "en"));
  unit.addLabel(new LangString("Cubic Decimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/DeciM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.157407407E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "dm³/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimetre Per Day", "en"));
  unit.addLabel(new LangString("Cubic Decimeter Per Day", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("2.777778E-7"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "dm³/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimetre Per Hour", "en"));
  unit.addLabel(new LangString("Cubic Decimeter Per Hour", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-M3",
    undefined,
    "dm³/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimetre Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Cubic Decimeter Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001666667"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "dm³/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimetre Per Minute", "en"));
  unit.addLabel(new LangString("Cubic Decimeter Per Minute", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-MOL",
    undefined,
    "dm³/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimeter Per Mole", "en-us"));
  unit.addLabel(new LangString("Cubic Decimetre Per Mole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity"
  );
  config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciM3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "dm³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Decimeter Per Second", "en-us"));
  unit.addLabel(new LangString("Cubic Decimetre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/DeciM3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.10"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/N",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DeciN", undefined));
  config.units.set("http://qudt.org/vocab/unit/DeciN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciN-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "dN⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Decinewton Metre", "en"));
  unit.addLabel(new LangString("Decinewton Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/DeciN-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("0.10"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/S",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DeciS", undefined));
  config.units.set("http://qudt.org/vocab/unit/DeciS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "dS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("decisiemens per metre", "en"));
  unit.addLabel(new LangString("decisiemens per meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/DeciS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciTONNE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("100.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/TONNE",
    undefined,
    "dt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("DeciTonne", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DeciTONNE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DeciTON_Metric",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("100.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Deci",
    "http://qudt.org/vocab/unit/TON_Metric",
    undefined,
    "dt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metric DeciTON", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/DeciTON_Metric", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Denar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MKD",
    807
  );
  unit.addLabel(new LangString("Denar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Denar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Denier",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("1.1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "D",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Denier", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/Denier", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DjiboutiFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "DJF",
    262
  );
  unit.addLabel(new LangString("Djibouti Franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/DjiboutiFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Dobra",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "STN",
    930
  );
  unit.addLabel(new LangString("Dobra", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Dobra", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/DominicanPeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "DOP",
    214
  );
  unit.addLabel(new LangString("Dominican Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/DominicanPeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/E",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "e",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Elementary Charge", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/E", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForceMagnitude");
  config.units.set("http://qudt.org/vocab/unit/ERG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg Per Centimeter", "en-us"));
  unit.addLabel(new LangString("Erg Per Centimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower"
  );
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/(cm²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg per Square Centimetre Second", "en"));
  unit.addLabel(new LangString("Erg per Square Centimeter Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg per Cubic Centimetre", "en"));
  unit.addLabel(new LangString("Erg per Cubic Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-G",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-G", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-GM-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/(g⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg Per Gram Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AbsorbedDoseRate"
  );
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-GM-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/ERG-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERG-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "erg⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erg Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
  config.units.set("http://qudt.org/vocab/unit/ERG-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ERLANG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "E",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Erlang", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/ERLANG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "eV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electron Volt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/EV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EV-PER-ANGSTROM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.602176634E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "eV/Å",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electronvolt Per Angstrom", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower"
  );
  config.units.set("http://qudt.org/vocab/unit/EV-PER-ANGSTROM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EV-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ev/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electron Volt per Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
  config.units.set("http://qudt.org/vocab/unit/EV-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EV-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "eV/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electronvolt Per Meter", "en-us"));
  unit.addLabel(new LangString("Electronvolt Per Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower"
  );
  config.units.set("http://qudt.org/vocab/unit/EV-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EV-PER-T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "eV/T",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electron Volt per Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/EV-PER-T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EV-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "eV⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electron Volt Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
  config.units.set("http://qudt.org/vocab/unit/EV-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/E_h",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4.35974394E-18"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hartree", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/E_h", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EarthMass",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("5972190000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "M⊕",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Earth mass", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/EarthMass", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EastCaribbeanDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XCD",
    951
  );
  unit.addLabel(new LangString("East Caribbean Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EastCaribbeanDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EgyptianPound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "EGP",
    818
  );
  unit.addLabel(new LangString("Egyptian Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EgyptianPound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ElementaryCharge",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1.602176634E-19"),
    undefined,
    undefined,
    undefined,
    undefined,
    "e",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Elementary Charge", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/ElementaryCharge", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EthiopianBirr",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ETB",
    230
  );
  unit.addLabel(new LangString("Ethiopian Birr", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EthiopianBirr", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Euro",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "EUR",
    978
  );
  unit.addLabel(new LangString("Euro", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Euro", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EuropeanCompositeUnit",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XBA",
    955
  );
  unit.addLabel(
    new LangString("European Composite Unit (EURCO) (Bonds market unit)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EuropeanCompositeUnit", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EuropeanMonetaryUnit",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XBB",
    956
  );
  unit.addLabel(
    new LangString(
      "European Monetary Unit (E.M.U.-6) (Bonds market unit)",
      "en"
    )
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EuropeanMonetaryUnit", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EuropeanUnitOfAccount17",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XBD",
    958
  );
  unit.addLabel(
    new LangString(
      "European Unit of Account 17 (E.U.A.-17) (Bonds market unit)",
      "en"
    )
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EuropeanUnitOfAccount17", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/EuropeanUnitOfAccount9",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XBC",
    957
  );
  unit.addLabel(
    new LangString(
      "European Unit of Account 9 (E.U.A.-9) (Bonds market unit)",
      "en"
    )
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/EuropeanUnitOfAccount9", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ExaBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5545177444479562475.3378569716654"),
    undefined,
    "http://qudt.org/vocab/prefix/Exa",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "EB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ExaByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/ExaBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ExaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Exa",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "EC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ExaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/ExaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ExaJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000000000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Exa",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "EJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Exajoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/ExaJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ExbiBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("6393154322601327829.8943153498712"),
    undefined,
    "http://qudt.org/vocab/prefix/Exbi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "EiB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ExbiByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/ExbiBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("96485.3399"),
    undefined,
    undefined,
    undefined,
    undefined,
    "F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Faraday", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("12.5663706"),
    undefined,
    undefined,
    undefined,
    undefined,
    "fa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Fractional area", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SolidAngle");
  config.units.set("http://qudt.org/vocab/unit/FA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Farad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/FARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FARAD-PER-KiloM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/FARAD-PER-M",
    undefined,
    "F/km",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Farad Per Kilometre", "en"));
  unit.addLabel(new LangString("Farad Per Kilometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/FARAD-PER-KiloM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FARAD-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "F/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Farad per Meter", "en-us"));
  unit.addLabel(new LangString("Farad per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/FARAD-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FARAD_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abfarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/FARAD_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FARAD_Ab-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("100000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abf/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abfarad per Centimeter", "en-us"));
  unit.addLabel(new LangString("Abfarad per Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/FARAD_Ab-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FARAD_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("1.112650056053618432174089964848E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statfarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/FARAD_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FATH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1.8288"),
    undefined,
    undefined,
    undefined,
    undefined,
    "fathom",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Fathom", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FATH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FBM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00236"),
    undefined,
    undefined,
    undefined,
    undefined,
    "BDFT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Board Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/FBM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("10.764"),
    undefined,
    undefined,
    undefined,
    undefined,
    "fc",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Candle", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/FC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FLIGHT",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("FLIGHT", undefined));
  config.units.set("http://qudt.org/vocab/unit/FLIGHT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1E-15"),
    undefined,
    undefined,
    undefined,
    undefined,
    "fm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("fermi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("3.335641E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Fr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Franklin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/FR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FRACTION",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "÷",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Fraction", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/FRACTION", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FRAME",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("FRAME", undefined));
  config.units.set("http://qudt.org/vocab/unit/FRAME", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FRAME-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "fps",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Frame per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VideoFrameRate");
  config.units.set("http://qudt.org/vocab/unit/FRAME-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.3048"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("3.4262591"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Lambert", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
  config.units.set("http://qudt.org/vocab/unit/FT-LA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.35581807"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound Force", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("14.5939042"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("14.5939042"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf/ft²s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Foot Pound Force per Square Foot Second", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.00376616129"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound Force per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound Force per Square Metre", "en"));
  unit.addLabel(new LangString("Foot Pound Force per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.0225969678"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound Force per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.35581807"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅lbf/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound Force per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-LB_F-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Pound Force Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
  config.units.set("http://qudt.org/vocab/unit/FT-LB_F-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PDL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.0421401100938048"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft⋅pdl",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Poundal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/FT-PDL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.00000352777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/FT-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PER-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("0.54864"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft/°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Per Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/FT-PER-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.00008466666666666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/FT-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.00508"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/FT-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.3048"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/FT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.3048"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot per Square Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/FT-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("0.09290304"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²⋅°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot Degree Fahrenheit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTemperature");
  config.units.set("http://qudt.org/vocab/unit/FT2-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-HR-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²⋅hr⋅°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot Hour Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaTimeTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/FT2-HR-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-HR-DEG_F-PER-BTU_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "sqft⋅hr⋅°F/btu",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Square Foot Hour Degree Fahrenheit per BTU", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance"
  );
  config.units.set("http://qudt.org/vocab/unit/FT2-HR-DEG_F-PER-BTU_IT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-PER-BTU_IT-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0",
    new Decimal("0.00346673589"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²/btu⋅in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot per BTU Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalResistivity"
  );
  config.units.set("http://qudt.org/vocab/unit/FT2-PER-BTU_IT-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.0000258064"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  config.units.set("http://qudt.org/vocab/unit/FT2-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.09290304"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  config.units.set("http://qudt.org/vocab/unit/FT2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT2-SEC-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ft²⋅s⋅°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Foot Second Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaTimeTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/FT2-SEC-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.028316846592"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/FT3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("3.277413E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/FT3-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3-PER-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    new Decimal("0.05097033"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³/°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot Per Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/FT3-PER-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000007865792"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/FT3-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0004719474432000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/FT3-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3-PER-MIN-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.00508"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³/(min⋅ft²)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot Per Minute Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  config.units.set("http://qudt.org/vocab/unit/FT3-PER-MIN-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.028316846592000004"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Foot per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/FT3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT_H2O",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("2989.067"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ftH₂0",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot of Water", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/FT_H2O", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT_HG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("40636.66"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ftHg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Foot Of Mercury", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/FT_HG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FT_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.3048006"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ft{US Survey}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Survey Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FT_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FUR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("201.168"),
    undefined,
    undefined,
    undefined,
    undefined,
    "furlong",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Furlong", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FUR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FUR_Long",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "furlong{long}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Long Furlong", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FUR_Long", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FalklandIslandsPound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "FKP",
    238
  );
  unit.addLabel(new LangString("Falkland Islands Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/FalklandIslandsPound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1E-15"),
    undefined,
    "http://qudt.org/vocab/prefix/Femto",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "fC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("FemtoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/FemtoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1.0E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Femto",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("FemtoGM", undefined));
  config.units.set("http://qudt.org/vocab/unit/FemtoGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-18"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "fg/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtograms per kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoGM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1E-15"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "fg/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtograms per litre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/FemtoGM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1E-15"),
    undefined,
    "http://qudt.org/vocab/prefix/Femto",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "fJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtojoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/FemtoJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Femto",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "fL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtolitre", "en"));
  unit.addLabel(new LangString("Femtolitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/FemtoL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1E-15"),
    undefined,
    "http://qudt.org/vocab/prefix/Femto",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "fm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtometre", "en"));
  unit.addLabel(new LangString("Femtometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/FemtoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("1.0E-15"),
    undefined,
    "http://qudt.org/vocab/prefix/Femto",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("FemtoMOL", undefined));
  config.units.set("http://qudt.org/vocab/unit/FemtoMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("1E-15"),
    undefined,
    undefined,
    undefined,
    undefined,
    "fmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtomoles per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/FemtoMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FemtoMOL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-L",
    undefined,
    "fmol/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Femtomoles per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/FemtoMOL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FijiDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "FJD",
    242
  );
  unit.addLabel(new LangString("Fiji Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/FijiDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Flight",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "flight",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Flight", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/Flight", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Forint",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "HUF",
    348
  );
  unit.addLabel(new LangString("Forint", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Forint", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/FrancCongolais",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CDF",
    976
  );
  unit.addLabel(new LangString("Franc Congolais", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/FrancCongolais", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/G",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "G",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gravity", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/G", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GAL", undefined));
  config.units.set("http://qudt.org/vocab/unit/GAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GALILEO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Gal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Galileo", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/GALILEO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_IMP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00454609"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{Imp}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Gallon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/GAL_IMP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00454609"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/GAL_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("5.261678E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (UK) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000001262803"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (UK) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00007576817"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (UK) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00454609"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (UK) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GAL_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.003785412"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Gallon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/GAL_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("4.38126389E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Gallon per Day", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_US-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000001051503"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (US) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_US-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0000630902"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Gallon per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_US-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.003785412"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gallon (US Liquid) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GAL_US-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAL_US_DRY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00440488377"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gal{US Dry}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Dry Gallon US", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/GAL_US_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAUGE_FR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0003333333"),
    undefined,
    undefined,
    undefined,
    undefined,
    "French gauge",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("French Gauge", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/GAUGE_FR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GAUSS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Gs",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gauss", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/GAUSS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("0.795774715"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Gb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gilbert", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagnetomotiveForce"
  );
  config.units.set("http://qudt.org/vocab/unit/GI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0001420653"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/GI_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.644274E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (UK) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("3.946258E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (UK) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000002367755"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (UK) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0001420653"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (UK) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.000118294125"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/GI_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.369145E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (US) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_US-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("3.285947E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (US) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_US-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_US-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000001971568"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{US}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (US) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_US-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GI_US-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0001182941"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gill{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gill (US) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GI_US-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Millimeter", "en-us"));
  unit.addLabel(new LangString("Gram Millimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
  config.units.set("http://qudt.org/vocab/unit/GM-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("10.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "g/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Square Centimetre", "en"));
  unit.addLabel(new LangString("Gram Per Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-CentiM2-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("3.16880878140289E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/(cm²⋅yr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Grams per square centimetre per year", "en"));
  config.units.set("http://qudt.org/vocab/unit/GM-PER-CentiM2-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "g/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Cubic Centimeter", "en-us"));
  unit.addLabel(new LangString("Gram Per Cubic Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.157407E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "g/°C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Degree Celsius", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-DeciM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "g/dm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Cubic Decimetre", "en"));
  unit.addLabel(new LangString("Gram Per Cubic Decimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-DeciM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("2.777778E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "g/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-KiloM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M",
    undefined,
    "g/km",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Kilometre", "en"));
  unit.addLabel(new LangString("Gram Per Kilometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-KiloM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Litre", "en"));
  unit.addLabel(new LangString("Gram Per Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Meter", "en-us"));
  unit.addLabel(new LangString("Gram Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Square Meter", "en-us"));
  unit.addLabel(new LangString("Gram Per Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.1574073E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("grams per square meter per day", "en-us"));
  unit.addLabel(new LangString("grams per square metre per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Gram Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.00001666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Mole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarMass");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "g/mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Millilitre", "en"));
  unit.addLabel(new LangString("Gram Per Millilitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M",
    undefined,
    "g/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Millimetre", "en"));
  unit.addLabel(new LangString("Gram Per Millimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/GM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_Carbon",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GM_Carbon", undefined));
  config.units.set("http://qudt.org/vocab/unit/GM_Carbon", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_Carbon-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.1574073E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g{carbon}/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("grams Carbon per square meter per day", "en-us")
  );
  unit.addLabel(new LangString("grams Carbon per square metre per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/GM_Carbon-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_DRY",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GM_DRY", undefined));
  config.units.set("http://qudt.org/vocab/unit/GM_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_F",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GM_F", undefined));
  config.units.set("http://qudt.org/vocab/unit/GM_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("98.0665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gf/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gram Force Per Square Centimetre", "en"));
  unit.addLabel(new LangString("Gram Force Per Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/GM_F-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_Nitrogen",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GM_Nitrogen", undefined));
  config.units.set("http://qudt.org/vocab/unit/GM_Nitrogen", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GM_Nitrogen-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.1574073E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "g{nitrogen}/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("grams Nitrogen per square meter per day", "en-us")
  );
  unit.addLabel(
    new LangString("grams Nitrogen per square metre per day", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/GM_Nitrogen-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GON",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.015707963267949"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gon",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/GON", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "gr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Grade", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/GR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GRAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.0157079633"),
    undefined,
    undefined,
    undefined,
    undefined,
    "grad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Grad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/GRAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GRAIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.00006479891"),
    undefined,
    undefined,
    undefined,
    undefined,
    "gr{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Grain", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/GRAIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GRAIN-PER-GAL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.017118061"),
    undefined,
    undefined,
    undefined,
    undefined,
    "grain{UK}/gal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Grain per Gallon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/GRAIN-PER-GAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GRAIN-PER-GAL_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.01711806"),
    undefined,
    undefined,
    undefined,
    undefined,
    "grain{US}/gal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Grain Per Gallon (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/GRAIN-PER-GAL_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GRAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Gy",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gray", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Kerma");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
  config.units.set("http://qudt.org/vocab/unit/GRAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GRAY-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Gy/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gray per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AbsorbedDoseRate"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/KermaRate");
  config.units.set("http://qudt.org/vocab/unit/GRAY-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "G.T.",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gross Tonnage", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/GT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Gamma",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "γ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gamma", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticField");
  config.units.set("http://qudt.org/vocab/unit/Gamma", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GibiBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5954088943.6391441429912255610071"),
    undefined,
    "http://qudt.org/vocab/prefix/Gibi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "GiB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GibiByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/GibiBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GibraltarPound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GIP",
    292
  );
  unit.addLabel(new LangString("Gibraltar pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/GibraltarPound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaBIT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("693147180.5599453"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/BIT",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GigaBIT", undefined));
  config.units.set("http://qudt.org/vocab/unit/GigaBIT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaBIT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BIT-PER-SEC",
    undefined,
    "Gbps",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigabit per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
  config.units.set("http://qudt.org/vocab/unit/GigaBIT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaBQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    "GBq",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigabecquerel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/GigaBQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5954088943.6391441429912255610071"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "GB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GigaByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/GigaBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaBasePair",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Gbp",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigabase Pair", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/GigaBasePair", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "GC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("GigaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/GigaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "GC/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigacoulomb Per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Gigacoulomb Per Cubic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  config.units.set("http://qudt.org/vocab/unit/GigaC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaEV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.602176634E-10"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/EV",
    undefined,
    "GeV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Giga Electron Volt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/GigaEV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaHZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/HZ",
    undefined,
    "GHz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigahertz", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/GigaHZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaHZ-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/HZ-M",
    undefined,
    "GHz⋅M",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigahertz Metre", "en"));
  unit.addLabel(new LangString("Gigahertz Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ConductionSpeed");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundParticleVelocity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GroupSpeedOfSound"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/GigaHZ-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "GJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigajoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/GigaJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "GΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigaohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/GigaOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "GPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigapascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/GigaPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Giga",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "GW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigawatt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/GigaW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GigaW-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-SEC",
    undefined,
    "GW⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gigawatt Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/GigaW-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Gold-OunceTroy",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XAU",
    959
  );
  unit.addLabel(new LangString("Gold (one Troy ounce)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Gold-OunceTroy", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GoldFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XFO",
    undefined
  );
  unit.addLabel(
    new LangString("Gold franc (special settlement currency)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/GoldFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Gs",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "G",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Gs", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/Gs", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Guarani",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PYG",
    600
  );
  unit.addLabel(new LangString("Guarani", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Guarani", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GuineaFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GNF",
    324
  );
  unit.addLabel(new LangString("Guinea Franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/GuineaFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/GuyanaDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GYD",
    328
  );
  unit.addLabel(new LangString("Guyana Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/GuyanaDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "H",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Henry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  config.units.set("http://qudt.org/vocab/unit/H", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H-PER-KiloOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-OHM",
    undefined,
    "H/kΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Henry Per Kiloohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/H-PER-KiloOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "H/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Henry per Meter", "en-us"));
  unit.addLabel(new LangString("Henry per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeability"
  );
  config.units.set("http://qudt.org/vocab/unit/H-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H-PER-OHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "H/Ω",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Henry Per Ohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/H-PER-OHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HART",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("2.3025850929940456840179914546844"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hart",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hartley", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/HART", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HART-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hart/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hartley per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationFlowRate"
  );
  config.units.set("http://qudt.org/vocab/unit/HART-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("745.6999"),
    undefined,
    undefined,
    undefined,
    undefined,
    "HP",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Horsepower", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/HP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HP_Boiler",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("9809.5"),
    undefined,
    undefined,
    undefined,
    undefined,
    "HP{boiler}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Boiler Horsepower", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/HP_Boiler", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HP_Brake",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("9809.5"),
    undefined,
    undefined,
    undefined,
    undefined,
    "HP{brake}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Horsepower (brake)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/HP_Brake", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HP_Electric",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("746.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "HP{electric}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Horsepower (electric)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/HP_Electric", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HP_Metric",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("735.4988"),
    undefined,
    undefined,
    undefined,
    undefined,
    "HP{metric}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Horsepower (metric)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/HP_Metric", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HR-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("334.450944"),
    undefined,
    undefined,
    undefined,
    undefined,
    "hr⋅ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hour Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
  config.units.set("http://qudt.org/vocab/unit/HR-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HR_Sidereal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("3590.17"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/DAY_Sidereal",
    undefined,
    "hr{sidereal}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sidereal Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/HR_Sidereal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hertz", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/HZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HZ-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hz⋅M",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hertz Meter", "en-us"));
  unit.addLabel(new LangString("Hertz Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  config.units.set("http://qudt.org/vocab/unit/HZ-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HZ-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hz/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hertz per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseTimeTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/HZ-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HZ-PER-T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hz/T",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hertz per Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/HZ-PER-T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HZ-PER-V",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Hz/V",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hertz per Volt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseMagneticFlux"
  );
  config.units.set("http://qudt.org/vocab/unit/HZ-PER-V", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abhenry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  config.units.set("http://qudt.org/vocab/unit/H_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("898760000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Stathenry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  config.units.set("http://qudt.org/vocab/unit/H_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/H_Stat-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0",
    new Decimal("89876000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statH/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Stathenry per Centimeter", "en-us"));
  unit.addLabel(new LangString("Stathenry per Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeability"
  );
  config.units.set("http://qudt.org/vocab/unit/H_Stat-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HaitiGourde",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "HTG",
    332
  );
  unit.addLabel(new LangString("Haiti Gourde", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/HaitiGourde", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HeartBeat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Heart Beat", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/HeartBeat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("10000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Hecto",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "hbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectobar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/HectoBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("100.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Hecto",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "hC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("HectoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/HectoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.1"),
    undefined,
    "http://qudt.org/vocab/prefix/Hecto",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "hg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/HectoGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.1"),
    undefined,
    "http://qudt.org/vocab/prefix/Hecto",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "hL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectolitre", "en-us"));
  unit.addLabel(new LangString("Hectolitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/HectoL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("100.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Hecto",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "hm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectometre", "en"));
  unit.addLabel(new LangString("Hectometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/HectoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("100.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Hecto",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "hPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectopascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/HectoPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoPA-L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-L-PER-SEC",
    undefined,
    "hPa⋅L/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectopascal Liter Per Second", "en-us"));
  unit.addLabel(new LangString("Hectopascal Litre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerArea");
  config.units.set("http://qudt.org/vocab/unit/HectoPA-L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoPA-M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-M3-PER-SEC",
    undefined,
    "hPa⋅m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectopascal Cubic Metre Per Second", "en"));
  unit.addLabel(new LangString("Hectopascal Cubic Meter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerArea");
  config.units.set("http://qudt.org/vocab/unit/HectoPA-M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoPA-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-BAR",
    undefined,
    "hPa/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectopascal Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/HectoPA-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoPA-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("0.0277777777777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-SEC",
    undefined,
    "hPa/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectopascals per hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/HectoPA-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HectoPA-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-K",
    undefined,
    "hPa/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hectopascal Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/HectoPA-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/HongKongDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "HKD",
    344
  );
  unit.addLabel(new LangString("Hong Kong Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/HongKongDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Hryvnia",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "UAH",
    980
  );
  unit.addLabel(new LangString("Hryvnia", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Hryvnia", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Hundredweight_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("50.80235"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cwt{long}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hundredweight (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/Hundredweight_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Hundredweight_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("45.35924"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cwt{short}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Hundredweight (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/Hundredweight_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0254"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN-PER-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("0.04572"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in/°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inch Per Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/IN-PER-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.0254"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inch per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropellantBurnRate"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/IN-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.0254"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inch per Square second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/IN-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("0.00064516"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.00064516"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in²/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Inch Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  config.units.set("http://qudt.org/vocab/unit/IN2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.000016387064"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/IN3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN3-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("4.551961E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in³/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Inch Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/IN3-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN3-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("2.7311773333333333E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in³/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Inch per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/IN3-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001638706"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Inch Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/IN3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN4",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0",
    new Decimal("4.162314E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "in⁴",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quartic Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea"
  );
  config.units.set("http://qudt.org/vocab/unit/IN4", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN_H2O",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("249.080024"),
    undefined,
    undefined,
    undefined,
    undefined,
    "inH₂0",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inch of Water", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/IN_H2O", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IN_HG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("3386.389"),
    undefined,
    undefined,
    undefined,
    undefined,
    "inHg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inch of Mercury", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/IN_HG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IU",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "IU",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("International Unit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/IU", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IU-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "IU/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("International Unit per Litre", "en"));
  unit.addLabel(new LangString("International Unit per Liter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SerumOrPlasmaLevel"
  );
  config.units.set("http://qudt.org/vocab/unit/IU-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IU-PER-MilliGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("0.0000010"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "IU/mg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("International Unit per milligram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/IU-PER-MilliGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IcelandKrona",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ISK",
    352
  );
  unit.addLabel(new LangString("Iceland Krona", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/IcelandKrona", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IndianRupee",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "INR",
    356
  );
  unit.addLabel(new LangString("Indian Rupee", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/IndianRupee", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IranianRial",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "IRR",
    364
  );
  unit.addLabel(new LangString("Iranian Rial", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/IranianRial", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/IraqiDinar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "IQD",
    368
  );
  unit.addLabel(new LangString("Iraqi Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/IraqiDinar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LagrangeFunction"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ExchangeIntegral"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LevelWidth");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForceMagnitude");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/HamiltonFunction"
  );
  config.units.set("http://qudt.org/vocab/unit/J", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-M-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J⋅m/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Meter per Mole", "en-us"));
  unit.addLabel(new LangString("Joule Metre per Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LengthMolarEnergy"
  );
  config.units.set("http://qudt.org/vocab/unit/J-M-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J⋅m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Square Meter", "en-us"));
  unit.addLabel(new LangString("Joule Square Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalAtomicStoppingPower"
  );
  config.units.set("http://qudt.org/vocab/unit/J-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-M2-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "j⋅m²/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Square Metre per Kilogram", "en"));
  unit.addLabel(new LangString("Joule Square Meter per Kilogram", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalMassStoppingPower"
  );
  config.units.set("http://qudt.org/vocab/unit/J-M2-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-M2",
    undefined,
    "J/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Per Square Centimeter", "en-us"));
  unit.addLabel(new LangString("Joule Per Square Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/J-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("0.115740740740741"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/(cm²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joules per square centimetre per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Radiosity");
  config.units.set("http://qudt.org/vocab/unit/J-PER-CentiM2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/J-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/J-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Entropy");
  config.units.set("http://qudt.org/vocab/unit/J-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-GM",
    undefined,
    "J/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificEnthalpy"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificInternalEnergy"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHelmholtzEnergy"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificGibbsEnergy"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/(kg⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joules per kilogram per Kelvin", "en"));
  unit.addLabel(new LangString("Joule per Kilogram Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtSaturation"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEntropy");
  config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/(kg⋅K⋅m³)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Kilogram Kelvin Cubic Metre", "en"));
  unit.addLabel(
    new LangString("Joule per Kilogram Kelvin Cubic Meter", "en-us")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/(kg⋅K⋅Pa)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Kilogram Kelvin per Pascal", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatPressure"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Per Metre", "en"));
  unit.addLabel(new LangString("Joule Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearEnergyTransfer"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Square Metre", "en"));
  unit.addLabel(new LangString("Joule per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RadiantFluence");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyFluence");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/J-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Joule per Cubic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RadiantEnergyDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumicElectromagneticEnergy"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectromagneticEnergyDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-M3-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/(m³⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Cubic Meter Kelvin", "en-us"));
  unit.addLabel(new LangString("Joule per Cubic Metre Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-M3-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-M4",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/m⁴",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Quartic Metre", "en"));
  unit.addLabel(new LangString("Joule per Quartic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-M4", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Mole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEnergy");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ChemicalAffinity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricPolarizability"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-MOL-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/(mol⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Mole Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEntropy");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-MOL-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/J-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/T",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-PER-T2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L2I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J/T²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule per Square Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerSquareMagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/J-PER-T2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Action");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
  config.units.set("http://qudt.org/vocab/unit/J-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/J-SEC-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "J⋅s/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Joule Second per Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarAngularMomentum"
  );
  config.units.set("http://qudt.org/vocab/unit/J-SEC-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/JamaicanDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "JMD",
    388
  );
  unit.addLabel(new LangString("Jamaican Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/JamaicanDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/JapaneseYen",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "JPY",
    392
  );
  unit.addLabel(new LangString("Japanese yen", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/JapaneseYen", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/JordanianDinar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "JOD",
    400
  );
  unit.addLabel(new LangString("Jordanian Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/JordanianDinar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CorrelatedColorTemperature"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
  config.units.set("http://qudt.org/vocab/unit/K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0",
    new Decimal("86400.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeTemperature");
  config.units.set("http://qudt.org/vocab/unit/K-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin metres", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LengthTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/K-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-M-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅m/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin metres per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/K-M-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-M-PER-W",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅m/W",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin Meter Per Watt", "en-us"));
  unit.addLabel(new LangString("Kelvin Metre Per Watt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalResistivity"
  );
  config.units.set("http://qudt.org/vocab/unit/K-M-PER-W", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-M2-PER-KiloGM-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H1T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅m²/(kg⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kelvin square metres per kilogram per second", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/K-M2-PER-KiloGM-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PA-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H1T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅Pa/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin Pascals per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/K-PA-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin per Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperatureRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Degrees Kelvin per metre", "en"));
  unit.addLabel(new LangString("Kelvins per metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperatureGradient"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    new Decimal("60.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H1T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K/T",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin per Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerMagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-PER-W",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H1T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K/W",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin per Watt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalResistance"
  );
  config.units.set("http://qudt.org/vocab/unit/K-PER-W", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kelvin second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeTemperature");
  config.units.set("http://qudt.org/vocab/unit/K-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/K2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H2T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Kelvin", "en"));
  config.units.set("http://qudt.org/vocab/unit/K2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KAT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kat",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Katal", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CatalyticActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/KAT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KIP_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("4448.222"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kip",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kip", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/KIP_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KIP_F-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("6894757.89"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kip/in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kip per Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KIP_F-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.5144444444444445"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kn",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Knot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/KN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KN-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.5144444444444445"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kn/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Knot per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/KN-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kayser", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  config.units.set("http://qudt.org/vocab/unit/KY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KenyanShilling",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KES",
    404
  );
  unit.addLabel(new LangString("Kenyan Shilling", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/KenyanShilling", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KibiBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5678.2617031470719747459655389854"),
    undefined,
    "http://qudt.org/vocab/prefix/Kibi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "KiB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KibiByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/KibiBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/A",
    undefined,
    "kA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("kiloampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/KiloA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloA-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-SEC",
    undefined,
    "kA⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kiloampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/KiloA-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloA-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M",
    undefined,
    "kA/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kiloampere Per Metre", "en"));
  unit.addLabel(new LangString("Kiloampere Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloA-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloA-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M2",
    undefined,
    "kA/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kiloampere Per Square Metre", "en"));
  unit.addLabel(new LangString("Kiloampere Per Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloA-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("100000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "kbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilobar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloBIT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("693.1471805599452"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/BIT",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KiloBIT", undefined));
  config.units.set("http://qudt.org/vocab/unit/KiloBIT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloBIT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BIT-PER-SEC",
    undefined,
    "kbps",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilobit per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
  config.units.set("http://qudt.org/vocab/unit/KiloBIT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloBQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    "kBq",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilobecquerel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/KiloBQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5678.2617031470719747459655389854"),
    undefined,
    "http://qudt.org/vocab/prefix/Kibi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "kB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilo Byte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/KiloBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloBYTE-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5678.2617031470719747459655389854"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BIT-PER-SEC",
    undefined,
    "kBps",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilobyte per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/KiloBYTE-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "kC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KiloCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/KiloC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloC-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "kC/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocoulomb Per Square Meter", "en-us"));
  unit.addLabel(new LangString("Kilocoulomb Per Square Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricPolarization"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloC-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "kC/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocoulomb Per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Kilocoulomb Per Cubic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM-SEC-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/(cm⋅s⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilocalorie per Centimeter Second Degree Celsius", "en-us")
  );
  unit.addLabel(
    new LangString("Kilocalorie per Centimetre Second Degree Celsius", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM-SEC-DEG_C",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("4.184E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie per Square Centimeter", "en-us"));
  unit.addLabel(new LangString("Kilocalorie per Square Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("0.0000697333333"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/(cm²⋅min)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilocalorie per Square Centimetre Minute", "en")
  );
  unit.addLabel(
    new LangString("Kilocalorie per Square Centimeter Minute", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("4.184E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/(cm²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilocalorie per Square Centimetre Second", "en")
  );
  unit.addLabel(
    new LangString("Kilocalorie per Square Centimeter Second", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("4184000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-GM-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/(g⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Calorie per Gram Degree Celsius", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-GM-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("69.7333333"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie per Mole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MOL-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/(mol⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie per Mole Degree Celsius", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-MOL-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4186.8"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/CAL_IT",
    undefined,
    "kcal{IT}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie (international Table)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL_IT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_IT-PER-HR-M-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("1.163"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal{IT}/(hr⋅m⋅°C)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Kilocalorie (international Table) Per Hour Metre Degree Celsius",
      "en"
    )
  );
  unit.addLabel(
    new LangString(
      "Kilocalorie (international Table) Per Hour Meter Degree Celsius",
      "en-us"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/KiloCAL_IT-PER-HR-M-DEG_C",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_Mean",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4190.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kcal{mean}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie (mean)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL_Mean", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_TH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4184.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/CAL_TH",
    undefined,
    "kcal{th}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie (thermochemical)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_TH-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.162230555555556"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC",
    undefined,
    "kcal{th}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocalorie (thermochemical) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_TH-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("69.73383333333334"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC",
    undefined,
    "kcal{th}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilocalorie (thermochemical) Per Minute", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCAL_TH-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("4184.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC",
    undefined,
    "kcal{th}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilocalorie (thermochemical) Per Second", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloCAL_TH-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloCi",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("37000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/Ci",
    undefined,
    "kCi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilocurie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DecayConstant");
  config.units.set("http://qudt.org/vocab/unit/KiloCi", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloEV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.602176634E-16"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/EV",
    undefined,
    "keV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilo Electron Volt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/KiloEV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloEV-PER-MicroM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.602176634E-10"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/EV-PER-M",
    undefined,
    "keV/µM",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilo Electron Volt per Micrometre", "en"));
  unit.addLabel(new LangString("Kilo Electron Volt per Micrometer", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearEnergyTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloEV-PER-MicroM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGAUSS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/GAUSS",
    undefined,
    "kGs",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogauss", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloGAUSS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Square Centimetre", "en"));
  unit.addLabel(new LangString("Kilogram Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-M-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅m/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Metre Per Second", "en"));
  unit.addLabel(new LangString("Kilogram Meter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-M-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Square Meter", "en-us"));
  unit.addLabel(new LangString("Kilogram Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅m²/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Square Meter Per Second", "en-us"));
  unit.addLabel(new LangString("Kilogram Square Metre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularImpulse");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-MilliM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅mm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Square Millimetre", "en"));
  unit.addLabel(new LangString("Kilogram Square Millimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-MilliM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "kg/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Square Centimetre", "en"));
  unit.addLabel(new LangString("Kilogram Per Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "kg⋅cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Cubic Centimeter", "en-us"));
  unit.addLabel(new LangString("Kilogram Per Cubic Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.00001157407"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "kg/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-DeciM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "kg⋅dm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Cubic Decimetre", "en"));
  unit.addLabel(new LangString("Kilogram Per Cubic Decimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-DeciM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.000277777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "kg/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "kg/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "kg/km²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilograms per square kilometre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceDensity");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-KiloM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-MOL",
    undefined,
    "kg/kmol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Kilomol", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarMass");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-KiloMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "kg/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Litre", "en"));
  unit.addLabel(new LangString("Kilogram Per Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M",
    undefined,
    "kg/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Meter", "en-us"));
  unit.addLabel(new LangString("Kilogram per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearDensity");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("0.000277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilograms per metre per hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilograms per metre per second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m⋅s²)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilograms per metre per square second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "kg/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Square Metre", "en"));
  unit.addLabel(new LangString("Kilogram per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeanMassRange");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceDensity");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BodyMassIndex");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M2-PA-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m²⋅s⋅Pa)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilograms per square metre per Pascal per second", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VaporPermeability"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M2-PA-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilograms per square metre per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilogram per Square Meter Square Second", "en-us")
  );
  unit.addLabel(
    new LangString("Kilogram per Square Metre Square Second", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FrictionLoss");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "kg/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("kilogram per cubic meter", "en-us"));
  unit.addLabel(new LangString("Kilogram per Cubic Metre", "en"));
  unit.addLabel(new LangString("kilogram per cubic metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentrationOfWaterVapour"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentration"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentrationOfWater"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-M3-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m³⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilograms per cubic metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-M3-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.01666667"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "kg/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-MOL",
    undefined,
    "kg/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Mol", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarMass");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M",
    undefined,
    "kg/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Millimeter", "en-us"));
  unit.addLabel(new LangString("Kilogram Per Millimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearDensity");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "kg/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(s⋅m²)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Per Second Per Square Metre", "en"));
  unit.addLabel(
    new LangString("Kilogram Per Second Per Square Meter", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-SEC-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram per Square Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg⋅s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Square Second", "en"));
  config.units.set("http://qudt.org/vocab/unit/KiloGM-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM2-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M2H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Kilograms per square second", "en"));
  config.units.set("http://qudt.org/vocab/unit/KiloGM2-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Force", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram?force Metre", "en"));
  unit.addLabel(new LangString("Kilogram?force Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F-M-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("98066.5"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf⋅m/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Kilogram?force Metre Per Square Centimetre", "en")
  );
  unit.addLabel(
    new LangString("Kilogram?force Meter Per Square Centimeter", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F-M-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F-M-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf⋅m/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram?force Metre Per Second", "en"));
  unit.addLabel(new LangString("Kilogram?force Meter Per Second", "en-us"));
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F-M-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("98066.5"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Force per Square Centimetre", "en"));
  unit.addLabel(
    new LangString("Kilogram Force per Square Centimeter", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Force Per Square Meter", "en-us"));
  unit.addLabel(new LangString("Kilogram Force Per Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("9806650.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kgf/mm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilogram Force Per Square Millimetre", "en"));
  unit.addLabel(
    new LangString("Kilogram Force Per Square Millimeter", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloHZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/HZ",
    undefined,
    "kHz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilohertz", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/KiloHZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloHZ-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/HZ-M",
    undefined,
    "kHz⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilohertz Metre", "en"));
  unit.addLabel(new LangString("Kilohertz Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ConductionSpeed");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundParticleVelocity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GroupSpeedOfSound"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloHZ-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "kJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilojoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloJ-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-K",
    undefined,
    "kJ/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilojoule Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloJ-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-GM",
    undefined,
    "kJ/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilojoule Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloJ-PER-KiloGM-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kJ/(kg⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilojoule Per Kilogram Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEntropy");
  config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloJ-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-MOL",
    undefined,
    "kJ/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilojoule Per Mole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloJ-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "kL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilolitre", "en"));
  unit.addLabel(new LangString("Kilolitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/KiloL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloL-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00277777777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-SEC",
    undefined,
    "kL/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilolitre Per Hour", "en"));
  unit.addLabel(new LangString("Kilolitre Per Hour", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloL-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloLB_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("4448.222000000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/LB_F",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KiloLB_F", undefined));
  config.units.set("http://qudt.org/vocab/unit/KiloLB_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloLB_F-FT-PER-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("2728.302797866667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "klbf⋅ft/A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Foot Per Ampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("2989.067"),
    undefined,
    undefined,
    undefined,
    undefined,
    "klbf⋅ft/lb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Foot Per Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("14593.904199475066"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/LB_F-PER-FT",
    undefined,
    "klbf/ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Per Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/KiloLB_F-PER-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("6894757.89"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/LB_F-PER-IN2",
    undefined,
    "kpsi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopound Force Per Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloLB_F-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "km",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilometre", "en"));
  unit.addLabel(new LangString("Kilometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/KiloM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloM-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.0115740740740741"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "kg/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilometres per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/KiloM-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.2777777777777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "km/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilometer per Hour", "en-us"));
  unit.addLabel(new LangString("Kilometre per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/KiloM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "km/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilometre per Second", "en"));
  unit.addLabel(new LangString("Kilometer per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/KiloM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloM3-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-2D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-SEC2",
    undefined,
    "km³/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Kilometer per Square Second", "en-us"));
  unit.addLabel(new LangString("Cubic Kilometre per Square Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StandardGravitationalParameter"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloM3-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    "kmol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilomole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloMOL-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("0.277777777777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-SEC",
    undefined,
    "kmol/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilomole Per Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CatalyticActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilomol per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolalityOfSolute"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloMOL-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3",
    undefined,
    "kmol/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilomole Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Kilomole Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloMOL-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("16.94444"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-SEC",
    undefined,
    "kmol/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilomole Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloMOL-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-SEC",
    undefined,
    "kmol/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilomole Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
  config.units.set("http://qudt.org/vocab/unit/KiloMOL-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/N",
    undefined,
    "kN",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilonewton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/KiloN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloN-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "kN⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilonewton Meter", "en-us"));
  unit.addLabel(new LangString("Kilonewton Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/KiloN-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloN-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M2",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilo Newton Square Metre", "en"));
  unit.addLabel(new LangString("Kilo Newton Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/WarpingMoment");
  config.units.set("http://qudt.org/vocab/unit/KiloN-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "kΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kiloohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/KiloOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kP",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/KiloP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "kPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPA-M2-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kPa⋅m²/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopascal Square Metre per Gram", "en"));
  unit.addLabel(new LangString("Kilopascal Square Meter per Gram", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/KiloPA-M2-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPA-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("100000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-BAR",
    undefined,
    "kPa/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopascal Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/KiloPA-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPA-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-K",
    undefined,
    "kPa/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopascal Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloPA-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPA-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    new Decimal("100000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-M",
    undefined,
    "kPa/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopascal Per Millimetre", "en"));
  unit.addLabel(new LangString("Kilopascal Per Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloPA-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPA_A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "KPaA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopascal Absolute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloPA_A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloPOND",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kp",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilopond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/KiloPOND", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("0.258"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/R",
    undefined,
    "kR",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kiloroentgen", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/S",
    undefined,
    "kS",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilosiemens", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductance");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Admittance");
  config.units.set("http://qudt.org/vocab/unit/KiloS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "kS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilosiemens Per Metre", "en"));
  unit.addLabel(new LangString("Kilosiemens Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/KiloS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/SEC",
    undefined,
    "ks",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("kilosecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/KiloSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloTONNE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/TONNE",
    undefined,
    "kt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KiloTonne", "en"));
  config.units.set("http://qudt.org/vocab/unit/KiloTONNE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloTON_Metric",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/TON_Metric",
    undefined,
    "kton{short}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metric KiloTON", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/KiloTON_Metric", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/V",
    undefined,
    "kV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilovolt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloV-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-A",
    undefined,
    "kV⋅A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilovolt Ampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ComplexPower");
  config.units.set("http://qudt.org/vocab/unit/KiloV-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloV-A-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kV⋅A/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilovolt Ampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/KiloV-A-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-A_Reactive",
    undefined,
    "kV⋅A{Reactive}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilovolt Ampere Reactive", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReactivePower");
  config.units.set("http://qudt.org/vocab/unit/KiloV-A_Reactive", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kV⋅A{Reactive}⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilovolt Ampere Reactive Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/KiloV-A_Reactive-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloV-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "kV/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilovolt Per Metre", "en"));
  unit.addLabel(new LangString("Kilovolt Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloV-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "kW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilowatt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/KiloW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloW-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-SEC",
    undefined,
    "kW⋅h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilowatthour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/KiloW-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloW-HR-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("3.6E+6"),
    new Decimal("0.0"),
    undefined,
    "http://qudt.org/vocab/unit/W-SEC-PER-M2",
    undefined,
    "kW⋅h/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kilowatt hour per square metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/KiloW-HR-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloWB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("1.0E+3"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/WB",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KiloWB", undefined));
  config.units.set("http://qudt.org/vocab/unit/KiloWB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloWB-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/WB-PER-M",
    undefined,
    "kWb/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Kiloweber Per Meter", "en-us"));
  unit.addLabel(new LangString("Kiloweber Per Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticVectorPotential"
  );
  config.units.set("http://qudt.org/vocab/unit/KiloWB-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KiloYR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("3.15576E+10"),
    undefined,
    "http://qudt.org/vocab/prefix/Kilo",
    "http://qudt.org/vocab/unit/YR",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("KiloYR", undefined));
  config.units.set("http://qudt.org/vocab/unit/KiloYR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Kina",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PGK",
    598
  );
  unit.addLabel(new LangString("Kina", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Kina", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Kroon",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "EEK",
    233
  );
  unit.addLabel(new LangString("Kroon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Kroon", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/KuwaitiDinar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KWD",
    414
  );
  unit.addLabel(new LangString("Kuwaiti Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/KuwaitiDinar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Kwanza",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AOA",
    973
  );
  unit.addLabel(new LangString("Kwanza", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Kwanza", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Kyat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MMK",
    104
  );
  unit.addLabel(new LangString("Kyat", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Kyat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre", "en"));
  unit.addLabel(new LangString("Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.157407E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Liter Per Day", "en-us"));
  unit.addLabel(new LangString("Litre Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/L-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("2.777778E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Hour", "en"));
  unit.addLabel(new LangString("Liter Per Hour", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/L-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Kelvin", "en"));
  unit.addLabel(new LangString("Liter Per Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/L-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Kilogram", "en"));
  unit.addLabel(new LangString("Liter Per Kilogram", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoilAdsorptionCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/L-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Litre", "en"));
  unit.addLabel(new LangString("Liter Per Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/L-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Liter Per Minute", "en-us"));
  unit.addLabel(new LangString("Litre Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/L-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Mole", "en"));
  unit.addLabel(new LangString("Liter Per Mole", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity"
  );
  config.units.set("http://qudt.org/vocab/unit/L-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-MicroMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-MOL",
    undefined,
    "L/µmol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litres per micromole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity"
  );
  config.units.set("http://qudt.org/vocab/unit/L-PER-MicroMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Second", "en"));
  unit.addLabel(new LangString("Liter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/L-PER-SEC-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Litre Per Second Per Square Metre", "en"));
  unit.addLabel(new LangString("Liter Per Second Per Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VentilationRatePerFloorArea"
  );
  config.units.set("http://qudt.org/vocab/unit/L-PER-SEC-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("3183.09886"),
    undefined,
    undefined,
    undefined,
    undefined,
    "L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Lambert", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
  config.units.set("http://qudt.org/vocab/unit/LA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.45359237"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Mass", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/LB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Degree Fahrenheit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
  config.units.set("http://qudt.org/vocab/unit/LB-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-DEG_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅°R",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Degree Rankine", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassTemperature");
  config.units.set("http://qudt.org/vocab/unit/LB-DEG_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    new Decimal("0.04214011"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Mass (avoirdupois) Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
  config.units.set("http://qudt.org/vocab/unit/LB-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0",
    new Decimal("0.011521246198"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Mass (avoirdupois) Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
  config.units.set("http://qudt.org/vocab/unit/LB-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    new Decimal("0.0002926397"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Mass (avoirdupois) Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfInertia");
  config.units.set("http://qudt.org/vocab/unit/LB-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("0.45359237"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/LB-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-MOL-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "lb⋅mol⋅°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Mole Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassAmountOfSubstanceTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/LB-MOL-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.000005249912"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound (avoirdupois) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("1.4881639435695537"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-FT-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("0.0004133788732137649"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/(ft⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Foot Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/LB-PER-FT-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-FT-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("1.4881639435695537"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/(ft⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Foot Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/LB-PER-FT-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("4.882428"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Pound Mass (avoirdupois) Per Square Foot", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-FT3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("16.018463373960138"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/ft³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Cubic Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-FT3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-GAL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("99.7763727"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/gal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Gallon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-GAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-GAL_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("99.77637"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/gal{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound (avoirdupois) Per Gallon (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-GAL_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-GAL_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/gal{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound (avoirdupois) Per Gallon (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-GAL_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.00012599788055555556"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("17.857967322834646"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound (avoirdupois) Per Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeanMassRange");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SurfaceDensity");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-IN3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("27679.904710203125"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/in³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Cubic Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-IN3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.45359237"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Pound per Cubic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.007559872833333333"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.4535924"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound (avoirdupois) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB-PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.5932764212577829"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lb/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound per Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/LB-PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("4.448222"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/LB_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.35581807"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf⋅ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/LB_F-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.112984839"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf⋅in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/LB_F-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("14.5939042"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force per Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("47.8802631"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("175.12685"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force per Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("6894.75789"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psia",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force per Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-IN2-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("12410.56"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/(in²⋅°F)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Pound Force Per Square Inch Degree Fahrenheit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN2-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-IN2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("6894.75789"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/in²⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force per Square Inch Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-IN2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-PER-LB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("9.80665085"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf/lb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force per Pound", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThrustToMassRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/LB_F-PER-LB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-SEC-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("47.8802631"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf⋅s/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Second per Square Foot", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/LB_F-SEC-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_F-SEC-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("6894.75789"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbf⋅s/in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Force Second per Square Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/LB_F-SEC-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LB_T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.3732417216"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lbt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pound Troy", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/LB_T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("lumen", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousFlux");
  config.units.set("http://qudt.org/vocab/unit/LM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LM-PER-W",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lm/W",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Lumen per Watt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpectralLuminousEfficiency"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousEfficacy"
  );
  config.units.set("http://qudt.org/vocab/unit/LM-PER-W", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LM-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lm⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("lumen second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LuminousEnergy");
  config.units.set("http://qudt.org/vocab/unit/LM-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LUX",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lx",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Lux", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/LUX", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LUX-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T1D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "lx⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Lux Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousExposure"
  );
  config.units.set("http://qudt.org/vocab/unit/LUX-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("9460730472580800.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ly",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Light Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/LY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LaoKip",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    " ₭",
    undefined,
    "LAK",
    418
  );
  unit.addLabel(new LangString("Lao kip", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/LaoKip", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Lari",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GEL",
    981
  );
  unit.addLabel(new LangString("Lari", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Lari", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LatvianLats",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LVL",
    428
  );
  unit.addLabel(new LangString("Latvian Lats", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/LatvianLats", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LebanesePound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LBP",
    422
  );
  unit.addLabel(new LangString("Lebanese Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/LebanesePound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Lek",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ALL",
    8
  );
  unit.addLabel(new LangString("Lek", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Lek", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Lempira",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "HNL",
    340
  );
  unit.addLabel(new LangString("Lempira", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Lempira", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Leone",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SLE",
    925
  );
  unit.addLabel(new LangString("Leone", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Leone", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LiberianDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LRD",
    430
  );
  unit.addLabel(new LangString("Liberian Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/LiberianDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LibyanDinar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LYD",
    434
  );
  unit.addLabel(new LangString("Libyan Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/LibyanDinar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Lilangeni",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SZL",
    748
  );
  unit.addLabel(new LangString("Lilangeni", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Lilangeni", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LithuanianLitas",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LTL",
    440
  );
  unit.addLabel(new LangString("Lithuanian Litas", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/LithuanianLitas", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Loti",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LSL",
    426
  );
  unit.addLabel(new LangString("Loti", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Loti", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/LunarMass",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("73460000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "M☾",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Lunar mass", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/LunarMass", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre", "en"));
  unit.addLabel(new LangString("Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m⋅K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre Kelvin", "en"));
  unit.addLabel(new LangString("Meter Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LengthTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/M-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-K-PER-W",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "K⋅m/W",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Meter Kelvin per Watt", "en-us"));
  unit.addLabel(new LangString("Metre Kelvin per Watt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalResistivity"
  );
  config.units.set("http://qudt.org/vocab/unit/M-K-PER-W", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m⋅kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Meter Kilogram", "en-us"));
  unit.addLabel(new LangString("Metre Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
  config.units.set("http://qudt.org/vocab/unit/M-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-FARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/f",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Meter per Farad", "en-us"));
  unit.addLabel(new LangString("Metre per Farad", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InversePermittivity"
  );
  config.units.set("http://qudt.org/vocab/unit/M-PER-FARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.000277777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre per Hour", "en"));
  unit.addLabel(new LangString("Meter per Hour", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/M-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/k",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre per Kelvin", "en"));
  unit.addLabel(new LangString("Meter per Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/M-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.0166666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre per Minute", "en"));
  unit.addLabel(new LangString("Meter per Minute", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/M-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre per Second", "en"));
  unit.addLabel(new LangString("Meter per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectromagneticWavePhaseSpeed"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/M-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metre per Square Second", "en"));
  unit.addLabel(new LangString("Meter per Square Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/M-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M-PER-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("3.16880878140289E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metres per year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/M-PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre", "en"));
  unit.addLabel(new LangString("Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-HR-DEG_C-PER-KiloCAL_IT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    new Decimal("0.859845"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅hr⋅°C/kcal{IT}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Square Meter Hour Degree Celsius Per Kilocalorie (international Table)",
      "en-us"
    )
  );
  unit.addLabel(
    new LangString(
      "Square Metre Hour Degree Celsius Per Kilocalorie (international Table)",
      "en"
    )
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance"
  );
  config.units.set(
    "http://qudt.org/vocab/unit/M2-HR-DEG_C-PER-KiloCAL_IT",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-HZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅Hz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres Hertz", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  config.units.set("http://qudt.org/vocab/unit/M2-HZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-HZ2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅Hz²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metres square Hertz", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-HZ2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-HZ3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅Hz³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres cubic Hertz", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-HZ3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-HZ4",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅Hz⁴",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres Hertz^4", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-HZ4", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Meter Kelvin", "en-us"));
  unit.addLabel(new LangString("Square Metre Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTemperature");
  config.units.set("http://qudt.org/vocab/unit/M2-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-K-PER-W",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "(K²)m/W",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Meter Kelvin per Watt", "en-us"));
  unit.addLabel(new LangString("Square Metre Kelvin per Watt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-K-PER-W", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres per gram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-GM_DRY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/g{dry sediment}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres per gram of dry sediment", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-GM_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("square meters per hectare", "en-us"));
  unit.addLabel(new LangString("square metres per hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaRatio");
  config.units.set("http://qudt.org/vocab/unit/M2-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-HZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/Hz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres per Hertz", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-PER-HZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-HZ-DEG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("57.2957795130823"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/(Hz⋅°)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres per Hertz per degree", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-PER-HZ-DEG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-HZ2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/Hz²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres per square Hertz", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-PER-HZ2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-J",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/j",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre per Joule", "en"));
  unit.addLabel(new LangString("Square Meter per Joule", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpectralCrossSection"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-J", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/k",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Meter per Kelvin", "en-us"));
  unit.addLabel(new LangString("Square Metre per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M2-PER-GM",
    undefined,
    "m²/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Meter per Kilogram", "en-us"));
  unit.addLabel(new LangString("Square Metre per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassEnergyTransferCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassAbsorptionCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "m²/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("square metre per square metre", "en"));
  unit.addLabel(new LangString("square meter per square meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaRatio");
  config.units.set("http://qudt.org/vocab/unit/M2-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre per Mole", "en"));
  unit.addLabel(new LangString("Square Meter per Mole", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarAttenuationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-N",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/N",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Meter Per Newton", "en-us"));
  unit.addLabel(new LangString("Square Metre Per Newton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
  config.units.set("http://qudt.org/vocab/unit/M2-PER-N", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre per Second", "en"));
  unit.addLabel(new LangString("Square Meter per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DiffusionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NeutronDiffusionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionRatioCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metres per square second", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre per Steradian", "en"));
  unit.addLabel(new LangString("Square Meter per Steradian", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularCrossSection"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-SR-J",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/(sr⋅J)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre per Steradian Joule", "en"));
  unit.addLabel(new LangString("Square Meter per Steradian Joule", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpectralAngularCrossSection"
  );
  config.units.set("http://qudt.org/vocab/unit/M2-PER-SR-J", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-PER-V-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²/(V⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Meter per Volt Second", "en-us"));
  unit.addLabel(new LangString("Square Metre per Volt Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mobility");
  config.units.set("http://qudt.org/vocab/unit/M2-PER-V-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-SEC-PER-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅s/rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square metre seconds per radian", "en"));
  config.units.set("http://qudt.org/vocab/unit/M2-SEC-PER-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M2-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m²⋅sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Metre Steradian", "en"));
  unit.addLabel(new LangString("Square Meter Steradian", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaAngle");
  config.units.set("http://qudt.org/vocab/unit/M2-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre", "en"));
  unit.addLabel(new LangString("Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SectionModulus");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre per Coulomb", "en"));
  unit.addLabel(new LangString("Cubic Meter per Coulomb", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HallCoefficient");
  config.units.set("http://qudt.org/vocab/unit/M3-PER-C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001157407"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre Per Day", "en"));
  unit.addLabel(new LangString("Cubic Meter Per Day", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/M3-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m^3/ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Meter per Hectare", "en-us"));
  unit.addLabel(new LangString("Cubic Metre per Hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumePerArea");
  config.units.set("http://qudt.org/vocab/unit/M3-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0002777777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Meter per Hour", "en-us"));
  unit.addLabel(new LangString("Cubic Metre per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/M3-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre per Kelvin", "en"));
  unit.addLabel(new LangString("Cubic Meter per Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/M3-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre per Kilogram", "en"));
  unit.addLabel(new LangString("Cubic Meter per Kilogram", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
  config.units.set("http://qudt.org/vocab/unit/M3-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-KiloGM-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/(kg⋅s²)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Cubic Meter per Kilogram Square Second", "en-us")
  );
  unit.addLabel(new LangString("Cubic Metre per Kilogram Square Second", "en"));
  config.units.set("http://qudt.org/vocab/unit/M3-PER-KiloGM-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Meter Per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Cubic Metre Per Cubic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/M3-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.01666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Meter Per Minute", "en-us"));
  unit.addLabel(new LangString("Cubic Metre Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/M3-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre per Mole", "en"));
  unit.addLabel(new LangString("Cubic Meter per Mole", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarVolume");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity"
  );
  config.units.set("http://qudt.org/vocab/unit/M3-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Metre per Second", "en"));
  unit.addLabel(new LangString("Cubic Meter per Second", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundVolumeVelocity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RecombinationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M3-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m³/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Meter per Square Second", "en-us"));
  unit.addLabel(new LangString("Cubic Metre per Square Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StandardGravitationalParameter"
  );
  config.units.set("http://qudt.org/vocab/unit/M3-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M4",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m⁴",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quartic Meter", "en-us"));
  unit.addLabel(new LangString("Quartic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea"
  );
  config.units.set("http://qudt.org/vocab/unit/M4", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M4-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m⁴/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metres to the power four per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/M4-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M5",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L5I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m⁵",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quintic Meter", "en-us"));
  unit.addLabel(new LangString("Quintic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SectionAreaIntegral"
  );
  config.units.set("http://qudt.org/vocab/unit/M5", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/M6",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L6I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "m⁶",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sextic Meter", "en-us"));
  unit.addLabel(new LangString("Sextic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/WarpingConstant");
  config.units.set("http://qudt.org/vocab/unit/M6", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MACH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Mach",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mach", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MachNumber");
  config.units.set("http://qudt.org/vocab/unit/MACH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MDOLLAR",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MDOLLAR", undefined));
  config.units.set("http://qudt.org/vocab/unit/MDOLLAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MDOLLAR-PER-FLIGHT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "$M/flight",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Million US Dollars per Flight", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurrencyPerFlight"
  );
  config.units.set("http://qudt.org/vocab/unit/MDOLLAR-PER-FLIGHT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MESH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mesh", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  config.units.set("http://qudt.org/vocab/unit/MESH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MHO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "℧",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mho", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/MHO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MHO_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1.1126E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "stat℧",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statmho", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/MHO_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1609.344"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("International Mile", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.44704"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mi/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mile per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MI-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("26.8224"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mi/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mile per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MI-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("2589988.11"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mi²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Mile", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/MI2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("4168181830.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mi³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Mile", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/MI3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MIL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000490873852"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mil{NATO}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mil Angle (NATO)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/MIL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MILLE",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MILLE", undefined));
  config.units.set("http://qudt.org/vocab/unit/MILLE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MIL_Circ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("5.067075E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "cmil",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Circular Mil", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/MIL_Circ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("60.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MIN_Angle",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.0002908882"),
    undefined,
    undefined,
    undefined,
    undefined,
    "'",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Minute Angle", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/MIN_Angle", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MIN_Sidereal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("59.83617"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/HR_Sidereal",
    undefined,
    "min{sidereal}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sidereal Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MIN_Sidereal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI_N",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1852.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nautical Mile", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MI_N", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI_N-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.514444"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmi/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nautical Mile per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MI_N-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI_N-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "nmi/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nautical Mile per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MI_N-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MI_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1609.347"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mi{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mile US Statute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MI_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("2551442.976"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mo",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Month", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mohm", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MechanicalMobility"
  );
  config.units.set("http://qudt.org/vocab/unit/MOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ExtentOfReaction"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-DEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "mol⋅°C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Degree Celsius", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-DEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol⋅K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-DeciM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3",
    undefined,
    "mol/dm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Per Cubic Decimeter", "en-us"));
  unit.addLabel(new LangString("Mole Per Cubic Decimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-DeciM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-GM-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0",
    new Decimal("0.277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(g⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Moles per gram per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-GM-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("0.000277778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mol per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolalityOfSolute"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM-PA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L1I0M-2H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(kg⋅Pa)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole per Kilogram Pascal", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMassPressure"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-KiloGM-PA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Per Litre", "en"));
  unit.addLabel(new LangString("Mole Per Liter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Moles per square metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("0.0000115740740740741"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Moles per square metre per day", undefined));
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Moles per square metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(m²⋅s⋅m)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Moles per square metre per second per metre", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(m²⋅s⋅m⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Moles per square metre per second per metre per steradian",
      "en"
    )
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(m²⋅s⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Moles per square metre per second per steradian", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole per Cubic Metre", "en"));
  unit.addLabel(new LangString("Mole per Cubic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstanceConcentrationOfB"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-M3-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/(m³⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Moles per cubic metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-M3-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("0.016666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Moles per mole", "en"));
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MOL-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mol/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mole Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MolarFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MOL-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MO_MeanGREGORIAN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mean Gregorian Month", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MO_MeanGREGORIAN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MO_MeanJulian",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mean Julian Month", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MO_MeanJulian", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MO_Synodic",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Synodic month", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MO_Synodic", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MX",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Mx",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Maxwell", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/MX", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MalagasyAriary",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MGA",
    969
  );
  unit.addLabel(new LangString("Malagasy Ariary", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MalagasyAriary", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MalawiKwacha",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MWK",
    454
  );
  unit.addLabel(new LangString("Malawi Kwacha", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MalawiKwacha", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MalaysianRinggit",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MYR",
    458
  );
  unit.addLabel(new LangString("Malaysian Ringgit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MalaysianRinggit", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MalteseLira",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MTL",
    470
  );
  unit.addLabel(new LangString("Maltese Lira", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MalteseLira", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Manat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TMT",
    934
  );
  unit.addLabel(new LangString("Manat", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Manat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MauritiusRupee",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MUR",
    480
  );
  unit.addLabel(new LangString("Mauritius Rupee", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MauritiusRupee", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MebiBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5814539.984022601702139868711921"),
    undefined,
    "http://qudt.org/vocab/prefix/Mebi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "MiB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mebibyte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/MebiBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/A",
    undefined,
    "MA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megaampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/MegaA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaA-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M2",
    undefined,
    "mol/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megaampere Per Square Metre", "en"));
  unit.addLabel(new LangString("Megaampere Per Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaA-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("100000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "Mbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megabar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MegaBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaBIT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("693147.1805599453"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/BIT",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MegaBIT", undefined));
  config.units.set("http://qudt.org/vocab/unit/MegaBIT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaBIT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BIT-PER-SEC",
    undefined,
    "mbps",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megabit per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DataRate");
  config.units.set("http://qudt.org/vocab/unit/MegaBIT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaBQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    "MBq",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megabecquerel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/MegaBQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5814539.984022601702139868711921"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "MB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega byte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/MegaBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "MC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MegaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/MegaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaC-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "MC/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megacoulomb Per Square Metre", "en"));
  unit.addLabel(new LangString("Megacoulomb Per Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaC-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "MC/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megacoulomb Per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Megacoulomb Per Cubic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaEV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.602176634E-13"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/EV",
    undefined,
    "MeV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Electron Volt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MegaEV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaEV-FemtoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    new Decimal("1.602176634E-28"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    undefined,
    undefined,
    "MeV⋅fm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Electron Volt Femtometer", "en-us"));
  unit.addLabel(new LangString("Mega Electron Volt Femtometre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthEnergy");
  config.units.set("http://qudt.org/vocab/unit/MegaEV-FemtoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaEV-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.602176634E-11"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/EV-PER-M",
    undefined,
    "MeV/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Electron Volt per Centimetre", "en"));
  unit.addLabel(new LangString("Mega Electron Volt per Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearEnergyTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaEV-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaEV-PER-SpeedOfLight",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MeV/c",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Electron Volt per Speed of Light", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
  config.units.set("http://qudt.org/vocab/unit/MegaEV-PER-SpeedOfLight", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "Mg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megagram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/MegaGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaGM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "Mg/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megagram Per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Megagram Per Cubic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MegaGM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaHZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/HZ",
    undefined,
    "MHz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megahertz", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/MegaHZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaHZ-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/HZ-M",
    undefined,
    "MHz⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megahertz Metre", "en"));
  unit.addLabel(new LangString("Megahertz Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Speed");
  config.units.set("http://qudt.org/vocab/unit/MegaHZ-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaHZ-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T-1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/HZ-PER-K",
    undefined,
    "MHz/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Hertz per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseTimeTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaHZ-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaHZ-PER-T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/HZ-PER-T",
    undefined,
    "MHz/T",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Hertz per Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaHZ-PER-T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "MJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megajoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/MegaJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaJ-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-K",
    undefined,
    "MJ/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MegaJoule per Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatCapacity");
  config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaJ-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-GM",
    undefined,
    "MJ/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megajoule Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaJ-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-M2",
    undefined,
    "MJ/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megajoule Per Square Metre", "en"));
  unit.addLabel(new LangString("Megajoule Per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaJ-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-M3",
    undefined,
    "MJ/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megajoule Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Megajoule Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
  config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaJ-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/J-PER-SEC",
    undefined,
    "MJ/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megajoule Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/MegaJ-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "ML",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megalitre", "en"));
  unit.addLabel(new LangString("Megalitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/MegaL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaLB_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("4448.222"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/LB_F",
    undefined,
    "Mlbf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mega Pound Force", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/MegaLB_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/N",
    undefined,
    "MN",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Meganewton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/MegaN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaN-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "MN⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Meganewton Meter", "en-us"));
  unit.addLabel(new LangString("Meganewton Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/MegaN-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "MΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megaohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/MegaOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "MPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megapascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MegaPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaPA-L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-L-PER-SEC",
    undefined,
    "MPa⋅L/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megapascal Litre Per Second", "en"));
  unit.addLabel(new LangString("Megapascal Liter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/MegaPA-L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-M3-PER-SEC",
    undefined,
    "MPa⋅m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megapascal Cubic Metre Per Second", "en"));
  unit.addLabel(new LangString("Megapascal Cubic Meter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaPA-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("10.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-BAR",
    undefined,
    "MPa/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megapascal Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/MegaPA-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaPA-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-K",
    undefined,
    "MPa/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megapascal Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaPA-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("1.0E+6"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/S",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MegaS", undefined));
  config.units.set("http://qudt.org/vocab/unit/MegaS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "MS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megasiemens Per Meter", "en-us"));
  unit.addLabel(new LangString("Megasiemens Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/MegaS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaTOE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("41868000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/TOE",
    undefined,
    "megatoe",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megaton of Oil Equivalent", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MegaTOE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/V",
    undefined,
    "mV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megavolt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaV-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-A",
    undefined,
    "MV⋅A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megavolt Ampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ComplexPower");
  config.units.set("http://qudt.org/vocab/unit/MegaV-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaV-A-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "MV⋅A⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megavolt Ampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MegaV-A-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-A_Reactive",
    undefined,
    "MV⋅A{Reactive}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megavolt Ampere Reactive", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReactivePower");
  config.units.set("http://qudt.org/vocab/unit/MegaV-A_Reactive", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "MV⋅A{Reactive}⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megavolt Ampere Reactive Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MegaV-A_Reactive-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaV-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "MV/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megavolt Per Metre", "en"));
  unit.addLabel(new LangString("Megavolt Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/MegaV-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "MW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MegaW", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/MegaW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaW-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-SEC",
    undefined,
    "MW⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Megawatt Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MegaW-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MegaYR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("31557600000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Mega",
    "http://qudt.org/vocab/unit/YR",
    undefined,
    "Myr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Million Years", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MegaYR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Metical",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MZN",
    943
  );
  unit.addLabel(new LangString("Metical", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Metical", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MexicanPeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MXN",
    484
  );
  unit.addLabel(new LangString("Mexican Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MexicanPeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MexicanUnidadDeInversion",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MXV",
    979
  );
  unit.addLabel(
    new LangString("Mexican Unidad de Inversion (UDI) (Funds code)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MexicanUnidadDeInversion", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/A",
    undefined,
    "µA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("microampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/MicroA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroATM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.101325"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/ATM",
    undefined,
    "µatm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microatmospheres", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MicroATM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.1"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "μbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microbar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MicroBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroBQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    "μBq",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microbecquerel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/MicroBQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroBQ-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µBq/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microbecquerels per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroBQ-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroBQ-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BQ-PER-L",
    undefined,
    "µBq/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microbecquerels per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroBQ-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "µC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/MicroC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroC-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "μC/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microcoulomb Per Square Meter", "en-us"));
  unit.addLabel(new LangString("Microcoulomb Per Square Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroC-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "μC/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microcoulomb Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Microcoulomb Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroCi",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("37000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/Ci",
    undefined,
    "μCi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroCurie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/MicroCi", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroFARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/FARAD",
    undefined,
    "µF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("microfarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/MicroFARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroFARAD-PER-KiloM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/FARAD-PER-M",
    undefined,
    "μF/km",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microfarad Per Kilometre", "en"));
  unit.addLabel(new LangString("Microfarad Per Kilometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/MicroFARAD-PER-KiloM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroFARAD-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/FARAD-PER-M",
    undefined,
    "μF/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microfarad Per Meter", "en-us"));
  unit.addLabel(new LangString("Microfarad Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/MicroFARAD-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.00000980665"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/G",
    undefined,
    "µG",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microgravity", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/MicroG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroG-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.010"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "µg/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microgram per square centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/MicroG-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGAL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroGAL", undefined));
  config.units.set("http://qudt.org/vocab/unit/MicroGAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGAL-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µGal/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroGals per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroGAL-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "μg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microgram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/MicroGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "µg/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrograms per gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "μg/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microgram Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "μg/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microgram Per Liter", "en-us"));
  unit.addLabel(new LangString("Microgram Per Litre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-L-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("2.77777777777778E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µg/(L⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrograms per litre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-L-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.15740740740741E-14"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µg/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrograms per square metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "μg/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microgram Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Microgram Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-M3-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("2.77777777777778E-13"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µg/(m³⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrograms per cubic metre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-M3-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGM-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "µg/mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrograms per millilitre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentration"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MicroGM-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroGRAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/GRAY",
    undefined,
    "µGy",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroGray", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
  config.units.set("http://qudt.org/vocab/unit/MicroGRAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/H",
    undefined,
    "µH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microhenry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  config.units.set("http://qudt.org/vocab/unit/MicroH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroH-PER-KiloOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-OHM",
    undefined,
    "µH/kΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microhenry Per Kiloohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MicroH-PER-KiloOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroH-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-M",
    undefined,
    "μH/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microhenry Per Metre", "en"));
  unit.addLabel(new LangString("Microhenry Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
  config.units.set("http://qudt.org/vocab/unit/MicroH-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroH-PER-OHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-OHM",
    undefined,
    "µH/Ω",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microhenry Per Ohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MicroH-PER-OHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("2.54E-8"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/IN",
    undefined,
    "µin",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microinch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MicroIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.000001"),
    new Decimal("0.0"),
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "µJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micro Joule", "en"));
  unit.addLabel(new LangString("Mikrojoule ", "de"));
  unit.addLabel(new LangString("Micro Joule", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MicroJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "μL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microlitre", "en"));
  unit.addLabel(new LangString("Microlitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/MicroL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-L",
    undefined,
    "μL/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microlitre Per Litre", "en"));
  unit.addLabel(new LangString("Microlitre Per Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/MicroL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "µm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrometre", "en"));
  unit.addLabel(new LangString("Micrometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MicroM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-K",
    undefined,
    "μm/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micrometre Per Kelvin", "en"));
  unit.addLabel(new LangString("Micrometer Per Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroM-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM-PER-L-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    new Decimal("1.15740740740741E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µm/(L⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per litre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroM-PER-L-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µm/mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square microns per millilitre", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroM-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM-PER-N",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0",
    new Decimal("0.000001"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "µJ/N",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mikrometer pro Newton", "de"));
  unit.addLabel(new LangString("Micro meter per Newton", "en-us"));
  unit.addLabel(new LangString("Micro metre per Newton", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearCompressibility"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroM-PER-N", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/M2",
    undefined,
    "μm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Micrometre", "en"));
  unit.addLabel(new LangString("Square Micrometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/MicroM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/M3",
    undefined,
    "µm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic micrometres (microns)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/MicroM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM3-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-18"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-M3",
    undefined,
    "µm³/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic microns per cubic metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/MicroM3-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroM3-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µm³/mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic microns per millilitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/MicroM3-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMHO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/MHO",
    undefined,
    "μmho",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromho", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMHO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    "μmol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM",
    undefined,
    "µmol/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per gram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolalityOfSolute"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-GM-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0",
    new Decimal("2.77777777777778E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µmol/(g⋅h)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per gram per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-GM-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-GM-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per gram per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-GM-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-L",
    undefined,
    "µmol/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-L-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("2.77777777777778E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µmol/(L⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per litre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-L-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2",
    undefined,
    "µmol/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per square metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("1.15740740740741E-11"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "µmol/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per square metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-M2-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("2.77777777777778E-10"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "µmol/(m²⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per square metre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-M2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "µmol/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per square metre per second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-M2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-MOL",
    undefined,
    "µmol/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per mole", "en"));
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-MicroMOL-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.0000115740740740741"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µmol/(µmol⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Micromole per micromole of biomass per day", "en")
  );
  config.units.set(
    "http://qudt.org/vocab/unit/MicroMOL-PER-MicroMOL-DAY",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroMOL-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-SEC",
    undefined,
    "µmol/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micromoles per second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFlux"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroMOL-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/N",
    undefined,
    "μN",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micronewton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/MicroN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroN-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "μN⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micronewton Meter", "en-us"));
  unit.addLabel(new LangString("Micronewton Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/MicroN-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "μΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/MicroOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "μPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micropascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MicroPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroPOISE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("1E-7"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/POISE",
    undefined,
    "μP",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Micropoise", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroPOISE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroRAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/RAD",
    undefined,
    "µrad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("microradian", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/MicroRAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/S",
    undefined,
    "μS",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microsiemens", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductance");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Admittance");
  config.units.set("http://qudt.org/vocab/unit/MicroS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroS-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "μS/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microsiemens Per Centimetre", "en"));
  unit.addLabel(new LangString("Microsiemens Per Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/MicroS-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "μS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microsiemens Per Metre", "en"));
  unit.addLabel(new LangString("Microsiemens Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/MicroS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/SEC",
    undefined,
    "µs",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("microsecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MicroSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroSV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/SV",
    undefined,
    "µSv",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroSievert", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
  config.units.set("http://qudt.org/vocab/unit/MicroSV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroSV-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("2.77778E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µSv/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroSievert per hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
  config.units.set("http://qudt.org/vocab/unit/MicroSV-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/T",
    undefined,
    "µT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microtesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroTORR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.000133322"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/TORR",
    undefined,
    "µTorr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MicroTorr", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MicroTORR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/V",
    undefined,
    "µV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microvolt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroV-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "µV/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microvolt Per Metre", "en"));
  unit.addLabel(new LangString("Microvolt Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/MicroV-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "mW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microwatt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/MicroW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MicroW-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2",
    undefined,
    "µW/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Microwatt Per Square Metre", "en"));
  unit.addLabel(new LangString("Microwatt Per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/MicroW-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilLength",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0000254"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mil",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Mil Length", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MilLength", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Micro",
    "http://qudt.org/vocab/unit/A",
    undefined,
    "mA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliAmpere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/MilliA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliA-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("3.6"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-SEC",
    undefined,
    "µA⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/MilliA-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliA-PER-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("0.03937008"),
    undefined,
    undefined,
    undefined,
    undefined,
    "µA/in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliampere Per Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliA-PER-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliA-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/A-PER-M",
    undefined,
    "mA/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliampere Per Millimeter", "en-us"));
  unit.addLabel(new LangString("Milliampere Per Millimetre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliA-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliARCSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("4.84813681E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/ARCSEC",
    undefined,
    "mas",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milli ArcSecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/MilliARCSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("100.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/BAR",
    undefined,
    "mbar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliBAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BAR-L-PER-SEC",
    undefined,
    "mbar⋅L/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibar Litre Per Second", "en"));
  unit.addLabel(new LangString("Millibar Liter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC",
    undefined,
    "mbar⋅m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibar Cubic Metre Per Second", "en"));
  unit.addLabel(new LangString("Millibar Cubic Meter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBAR-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BAR-PER-BAR",
    undefined,
    "mbar/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibar Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/MilliBAR-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBAR-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BAR-PER-K",
    undefined,
    "mbar/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibar Per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliBAR-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.0010"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliBQ", undefined));
  config.units.set("http://qudt.org/vocab/unit/MilliBQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBQ-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mBq/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibecquerels per gram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBQ-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mBq/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibecquerels per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBQ-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BQ-PER-L",
    undefined,
    "mBq/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millibecquerels per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliBQ-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-2D0",
    new Decimal("1.15740740740741E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mBq/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Millibecquerels per square metre per day", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/MilliBQ-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "mC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/MilliC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliC-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mC/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millicoulomb Per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliC-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliC-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M2",
    undefined,
    "mC/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millicoulomb Per Square Metre", "en"));
  unit.addLabel(new LangString("Millicoulomb Per Square Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliC-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/C-PER-M3",
    undefined,
    "mC/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millicoulomb Per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Millicoulomb Per Cubic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliCi",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("37000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/Ci",
    undefined,
    "mCi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millicurie", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Activity");
  config.units.set("http://qudt.org/vocab/unit/MilliCi", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliDEG_C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    new Decimal("0.001"),
    new Decimal("273.15"),
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/DEG_C",
    undefined,
    "m°C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millidegree Celsius", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
  config.units.set("http://qudt.org/vocab/unit/MilliDEG_C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliFARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/FARAD",
    undefined,
    "mF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millifarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/MilliFARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.00980665"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/G",
    undefined,
    "mG",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligravity", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/MilliG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGAL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mgal",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acceleration");
  config.units.set("http://qudt.org/vocab/unit/MilliGAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGAL-PER-MO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-3D0",
    new Decimal("3.80257053768347E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mgal/mo",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliGals per month", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliGAL-PER-MO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "mg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/MilliGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "mg/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Square Centimetre", "en"));
  unit.addLabel(new LangString("Milligram Per Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.157407E-11"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "mg/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-DeciL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "mg/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("milligrams per decilitre", "en"));
  unit.addLabel(new LangString("milligrams per decilitre", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/BloodGlucoseLevel_Mass"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-DeciL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "mg/gm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("1E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("2.777778E-10"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "mg/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "mg/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "mg/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Liter", "en-us"));
  unit.addLabel(new LangString("Milligram Per Litre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M",
    undefined,
    "mg/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Metre", "en"));
  unit.addLabel(new LangString("Milligram Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M2",
    undefined,
    "mg/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Square Meter", "en-us"));
  unit.addLabel(new LangString("Milligram Per Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.15740740740741E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mg/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligrams per square metre per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("2.77777777777778E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mg/(m²⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligrams per square metre per hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mg/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligrams per square metre per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "mg/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Milligram Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M3-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("1.15740740740741E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mg/(m³⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligrams per cubic metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M3-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("2.77777777777778E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mg/(m³⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligrams per cubic metre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-M3-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mg/(m³⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligrams per cubic metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-M3-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.666667E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "mg/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Millilitre", "en"));
  unit.addLabel(new LangString("Milligram Per Milliliter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentration"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "mg/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligram Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliGM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliGRAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/GRAY",
    undefined,
    "mGy",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milligray", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
  config.units.set("http://qudt.org/vocab/unit/MilliGRAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/H",
    undefined,
    "mH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millihenry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  config.units.set("http://qudt.org/vocab/unit/MilliH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliH-PER-KiloOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-OHM",
    undefined,
    "mH/kΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millihenry Per Kiloohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MilliH-PER-KiloOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliH-PER-OHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-OHM",
    undefined,
    "mH/Ω",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millihenry Per Ohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MilliH-PER-OHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0000254"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/IN",
    undefined,
    "mil",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milli-inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MilliIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "mJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millijoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/MilliJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre", "en"));
  unit.addLabel(new LangString("Millilitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-CentiM2-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.00016666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mL/(cm²⋅min)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Millilitre Per Square Centimeter Minute", "en-us")
  );
  unit.addLabel(
    new LangString("Millilitre Per Square Centimetre Minute", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricFlux");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-CentiM2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mL/(cm²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Millilitre Per Square Centimetre Second", "en")
  );
  unit.addLabel(
    new LangString("Millilitre Per Square Centimeter Second", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumetricFlux");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.157407E-11"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-SEC",
    undefined,
    "mL/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Day", "en"));
  unit.addLabel(new LangString("Millilitre Per Day", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("2.777778E-10"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-SEC",
    undefined,
    "mL/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Hour", "en-us"));
  unit.addLabel(new LangString("Millilitre Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-K",
    undefined,
    "mL/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Kelvin", "en"));
  unit.addLabel(new LangString("Millilitre Per Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mL/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Kilogram", "en-us"));
  unit.addLabel(new LangString("Millilitre Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificVolume");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-L",
    undefined,
    "mL/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Litre", "en"));
  unit.addLabel(new LangString("Millilitre Per Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1.15740740740741E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mL/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitres per square metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mL/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Millilitre Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.666667E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-SEC",
    undefined,
    "mL/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Minute", "en-us"));
  unit.addLabel(new LangString("Millilitre Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliL-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/L-PER-SEC",
    undefined,
    "mL/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millilitre Per Second", "en-us"));
  unit.addLabel(new LangString("Millilitre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/MilliL-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimetre", "en"));
  unit.addLabel(new LangString("Millimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1.15741E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "mm/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("millimetres per day", "en"));
  unit.addLabel(new LangString("millimeters per day", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MilliM-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("2.777778E-7"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "mm/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimeter Per Hour", "en-us"));
  unit.addLabel(new LangString("Millimetre Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MilliM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-K",
    undefined,
    "mm/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimetre Per Kelvin", "en"));
  unit.addLabel(new LangString("Millimeter Per Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliM-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.00001666667"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "mm/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimeter Per Minute", "en-us"));
  unit.addLabel(new LangString("Millimetre Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MilliM-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "mm/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimetre Per Second", "en"));
  unit.addLabel(new LangString("Millimeter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MilliM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM-PER-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1.71E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M-PER-SEC",
    undefined,
    "mm/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimetre Per Year", "en"));
  unit.addLabel(new LangString("Millimeter Per Year", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Velocity");
  config.units.set("http://qudt.org/vocab/unit/MilliM-PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/M2",
    undefined,
    "mm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Millimetre", "en"));
  unit.addLabel(new LangString("Square Millimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/MilliM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM2-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M2-PER-SEC",
    undefined,
    "mm²/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Millimeter Per Second", "en-us"));
  unit.addLabel(new LangString("Square Millimetre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaPerTime");
  config.units.set("http://qudt.org/vocab/unit/MilliM2-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/M3",
    undefined,
    "mm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Millimeter", "en-us"));
  unit.addLabel(new LangString("Cubic Millimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/MilliM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM3-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/M3-PER-M3",
    undefined,
    "mm³/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Millimetre Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Cubic Millimeter Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFraction");
  config.units.set("http://qudt.org/vocab/unit/MilliM3-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM4",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/M4",
    undefined,
    "mm⁴",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quartic Millimetre", "en"));
  unit.addLabel(new LangString("Quartic Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliM4", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    "mmol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mmol/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimole Per Gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimole Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/IonicStrength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-L",
    undefined,
    "mmo/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("millimoles per litre", "en-us"));
  unit.addLabel(new LangString("millimoles per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/BloodGlucoseLevel"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2",
    undefined,
    "mmol/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimoles per square metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("1.15740740740741E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "mmol/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimoles per square metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "µg/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimoles per square metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3",
    undefined,
    "mmol/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimoles per cubic metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M3-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1.15740740740741E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3-SEC",
    undefined,
    "mmol/(m³⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimoles per cubic metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-M3-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliMOL-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-MOL",
    undefined,
    "mmol/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimoles per mole", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliMOL-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM_H2O",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("9.80665"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mmH₂0",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Conventional Millimetre Of Water", "en"));
  unit.addLabel(new LangString("Conventional Millimeter Of Water", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliM_H2O", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM_HG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("133.322387415"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mmHg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimetre of Mercury", "en"));
  unit.addLabel(new LangString("Millimeter of Mercury", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliM_HG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliM_HGA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "mmHgA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millimetre of Mercury - Absolute", "en"));
  unit.addLabel(new LangString("Millimeter of Mercury - Absolute", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliM_HGA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/N",
    undefined,
    "mN",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millinewton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/MilliN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliN-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "mN⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millinewton Meter", "en-us"));
  unit.addLabel(new LangString("Millinewton Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/MilliN-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliN-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-PER-M",
    undefined,
    "mN/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millinewton Per Meter", "en-us"));
  unit.addLabel(new LangString("Millinewton Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/MilliN-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "mΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/MilliOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "mPa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millipascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliPA-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-SEC",
    undefined,
    "mPa⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millipascal Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliPA-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR",
    undefined,
    "mPa⋅s/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millipascal Second Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("2.58E-7"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/R",
    undefined,
    "mR",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliroentgen", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliRAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/RAD",
    undefined,
    "mrad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("milliradian", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/MilliRAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliRAD_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.000010"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/RAD_R",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliRAD_R", undefined));
  config.units.set("http://qudt.org/vocab/unit/MilliRAD_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliRAD_R-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    new Decimal("2.77777777777778E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mrad/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millirads per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/MilliRAD_R-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliR_man",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("2.58E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "mrem",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliroentgen Equivalent Man", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
  config.units.set("http://qudt.org/vocab/unit/MilliR_man", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/S",
    undefined,
    "mS",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millisiemens", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductance");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Admittance");
  config.units.set("http://qudt.org/vocab/unit/MilliS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliS-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "mS/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millisiemens Per Centimetre", "en"));
  unit.addLabel(new LangString("Millisiemens Per Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/MilliS-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "mS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliSiemens per metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/MilliS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/SEC",
    undefined,
    "ms",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("millisecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/MilliSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliSV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/SV",
    undefined,
    "mSv",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millisievert", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
  config.units.set("http://qudt.org/vocab/unit/MilliSV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/T",
    undefined,
    "mT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millitesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliTORR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("0.133322"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/TORR",
    undefined,
    "mTorr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliTorr", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliTORR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/V",
    undefined,
    "mV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millivolt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliV-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "mV/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millivolt Per Meter", "en-us"));
  unit.addLabel(new LangString("Millivolt Per Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliV-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliV-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0",
    new Decimal("0.00001666667"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-SEC",
    undefined,
    "mV/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Millivolt Per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/MilliV-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "mW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("MilliW", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/MilliW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliW-PER-CentiM2-MicroM-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("10000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2-M-SR",
    undefined,
    "mW/(cm⋅µm⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Milliwatts per square centimetre per micrometre per steradian",
      "en"
    )
  );
  config.units.set(
    "http://qudt.org/vocab/unit/MilliW-PER-CentiM2-MicroM-SR",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliW-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2",
    undefined,
    "mW/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliwatt Per Square Metre", "en"));
  unit.addLabel(new LangString("Milliwatt Per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/MilliW-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2-M",
    undefined,
    "mW/(cm⋅nm)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Milliwatts per square metre per nanometre", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2-M-SR",
    undefined,
    "mW/(cm⋅nm⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Milliwatts per square metre per nanometre per steradian",
      "en"
    )
  );
  config.units.set("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MilliWB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("0.001"),
    undefined,
    "http://qudt.org/vocab/prefix/Milli",
    "http://qudt.org/vocab/unit/WB",
    undefined,
    "mWb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Milliweber", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/MilliWB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MillionUSD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Million US Dollars", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MillionUSD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MillionUSD-PER-YR",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Million US Dollars per Year", "en"));
  config.units.set("http://qudt.org/vocab/unit/MillionUSD-PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MoldovanLeu",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MDL",
    498
  );
  unit.addLabel(new LangString("Moldovan Leu", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MoldovanLeu", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/MoroccanDirham",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MAD",
    504
  );
  unit.addLabel(new LangString("Moroccan Dirham", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/MoroccanDirham", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/N", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "N⋅cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Centimeter", "en-us"));
  unit.addLabel(new LangString("Newton Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/N-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Metre", "en"));
  unit.addLabel(new LangString("Newton Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MomentOfForce");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/N-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-PER-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m/A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Metre Per Ampere", "en"));
  unit.addLabel(new LangString("Newton Meter Per Ampere", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/N-M-PER-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Meter Per Kilogram", "en-us"));
  unit.addLabel(new LangString("Newton Metre Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SpecificEnergy");
  config.units.set("http://qudt.org/vocab/unit/N-M-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N⋅m/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton metre per metre", "en"));
  unit.addLabel(new LangString("Newtonmeter pro Meter", "de"));
  unit.addLabel(new LangString("Newton meter per meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TorquePerLength");
  config.units.set("http://qudt.org/vocab/unit/N-M-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-PER-M-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Newton Metre per Metre per Radians", undefined)
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ModulusOfRotationalSubgradeReaction"
  );
  config.units.set("http://qudt.org/vocab/unit/N-M-PER-M-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Metre Per Square Metre", "en"));
  unit.addLabel(new LangString("Newton Meter Per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/N-M-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-PER-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N⋅m/rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newtonmeter pro Radian", "de"));
  unit.addLabel(new LangString("Newton metre per radian", "en"));
  unit.addLabel(new LangString("Newton meter per radian", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TorquePerAngle");
  config.units.set("http://qudt.org/vocab/unit/N-M-PER-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Metre Second", "en"));
  unit.addLabel(new LangString("Newton Meter Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularImpulse");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularMomentum");
  config.units.set("http://qudt.org/vocab/unit/N-M-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-SEC-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N⋅m⋅s/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newtonmetersekunden pro Meter", "de"));
  unit.addLabel(new LangString("Newton metre seconds per metre", "en"));
  unit.addLabel(new LangString("Newton meter seconds per meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
  config.units.set("http://qudt.org/vocab/unit/N-M-SEC-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M-SEC-PER-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N⋅m⋅s/rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newtonmetersekunden pro Radian", "de"));
  unit.addLabel(new LangString("Newton metre seconds per radian", "en"));
  unit.addLabel(new LangString("Newton meter seconds per radian", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularMomentumPerAngle"
  );
  config.units.set("http://qudt.org/vocab/unit/N-M-SEC-PER-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Square Metre", "en"));
  unit.addLabel(new LangString("Newton Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/WarpingMoment");
  config.units.set("http://qudt.org/vocab/unit/N-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M2-PER-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m²/A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Metre Squared per Ampere", "en"));
  unit.addLabel(new LangString("Newton Meter Squared per Ampere", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/N-M2-PER-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-M2-PER-KiloGM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅m²/kg²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Newton Square Metre Per Square Kilogram", "en")
  );
  unit.addLabel(
    new LangString("Newton Square Meter Per Square Kilogram", "en-us")
  );
  config.units.set("http://qudt.org/vocab/unit/N-M2-PER-KiloGM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N/A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Per Ampere", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength"
  );
  config.units.set("http://qudt.org/vocab/unit/N-PER-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-C",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N/C",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton per Coulomb", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/N-PER-C", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-PER-M",
    undefined,
    "N/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Per Centimeter", "en-us"));
  unit.addLabel(new LangString("Newton Per Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/N-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-PER-M2",
    undefined,
    "N/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Per Square Centimetre", "en"));
  unit.addLabel(new LangString("Newton Per Square Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/N-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThrustToMassRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/N-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton per Meter", "en-us"));
  unit.addLabel(new LangString("Newton per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/N-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newtons Per Square Metre", "en"));
  unit.addLabel(new LangString("Newtons Per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ModulusOfLinearSubgradeReaction"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/N-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newtons per cubic metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ModulusOfSubgradeReaction"
  );
  config.units.set("http://qudt.org/vocab/unit/N-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-PER-M",
    undefined,
    "N/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Per Millimetre", "en"));
  unit.addLabel(new LangString("Newton Per Millimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  config.units.set("http://qudt.org/vocab/unit/N-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-MilliM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/N-PER-M2",
    undefined,
    "N/mm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Per Square Millimeter", "en-us"));
  unit.addLabel(new LangString("Newton Per Square Millimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/N-PER-MilliM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-PER-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N/rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton per radian", "en-us"));
  unit.addLabel(new LangString("Newton pro Radian", "de"));
  unit.addLabel(new LangString("Newton per radian", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerAngle");
  config.units.set("http://qudt.org/vocab/unit/N-PER-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
  config.units.set("http://qudt.org/vocab/unit/N-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-SEC-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N⋅s/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton Second per Meter", "en-us"));
  unit.addLabel(new LangString("Newton Second per Metre", "en"));
  unit.addLabel(new LangString("Newtonsekunden pro Meter", "de"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/N-SEC-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-SEC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "N⋅s/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton second per Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Newton second per Cubic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance"
  );
  config.units.set("http://qudt.org/vocab/unit/N-SEC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/N-SEC-PER-RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    new Decimal("1.0"),
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    "N⋅s/rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Newton seconds per radian", "en-us"));
  unit.addLabel(new LangString("Newton seconds per radian", "en"));
  unit.addLabel(new LangString("Newtonsekunden pro Radian", "de"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MomentumPerAngle"
  );
  config.units.set("http://qudt.org/vocab/unit/N-SEC-PER-RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NAT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nat",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nat", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/NAT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NAT-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nat/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nat per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/NAT-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Np",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Neper", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/NP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NTU",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NTU",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nephelometry Turbidity Unit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Turbidity");
  config.units.set("http://qudt.org/vocab/unit/NTU", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "#",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticQuantumNumber"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassNumber");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/QuantumNumber");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReynoldsNumber");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FrictionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NucleonNumber");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Population");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpinQuantumNumber"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ChargeNumber");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StoichiometricNumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/HyperfineStructureQuantumNumber"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NeutronNumber");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NuclearSpinQuantumNumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumQuantumNumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TotalAngularMomentumQuantumNumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PrincipalQuantumNumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IonTransportNumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Landau-GinzburgNumber"
  );
  config.units.set("http://qudt.org/vocab/unit/NUM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-CentiM-KiloYR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T-1D0",
    new Decimal("3.16880878140289E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(cm⋅1000 yr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Number per square centimetre per thousand years", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-CentiM-KiloYR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per gram", "en"));
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.000277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per individual per hour", "en"));
  unit.addLabel(new LangString("Number per hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-HectoGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0",
    new Decimal("10.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/NUM-PER-GM",
    undefined,
    "/hg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per 100 grams", "en"));
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-HectoGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-KiloM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/NUM-PER-M2",
    undefined,
    "/km²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per square kilometre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-KiloM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per litre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per square metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    new Decimal("0.0000115740740740741"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per square metre per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Flux");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per cubic metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/NUM-PER-L",
    undefined,
    "/µL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per microlitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-MicroL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-MilliGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/NUM-PER-GM",
    undefined,
    "/mg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per milligram", "en"));
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-MilliGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-NanoL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("2147483647.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/NUM-PER-L",
    undefined,
    "/nL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per nanolitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-NanoL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Counts per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NUM-PER-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("3.168808781402895023702689684893655E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "#/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Number per Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/NUM-PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Naira",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NGN",
    566
  );
  unit.addLabel(new LangString("Naira", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Naira", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Nakfa",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ERN",
    232
  );
  unit.addLabel(new LangString("Nakfa", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Nakfa", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NamibianDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NAD",
    516
  );
  unit.addLabel(new LangString("Namibian Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NamibianDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/A",
    undefined,
    "nA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("nanoampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/NanoA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoBQ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/BQ",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("NanoBQ", undefined));
  config.units.set("http://qudt.org/vocab/unit/NanoBQ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoBQ-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/BQ-PER-L",
    undefined,
    "nBq/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanobecquerels per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoBQ-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "nC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("NanoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/NanoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoFARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/FARAD",
    undefined,
    "nF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanofarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/NanoFARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoFARAD-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/FARAD-PER-M",
    undefined,
    "nF/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanofarad Per Meter", "en-us"));
  unit.addLabel(new LangString("Nanofarad Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/NanoFARAD-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "ng",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanograms", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/NanoGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.15740740740741E-17"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-SEC",
    undefined,
    "ng/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanograms per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "ng/Kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanogram Per Kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "ng/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanograms per litre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-M2-PA-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kg/(m²⋅s⋅Pa)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Nanograms per square metre per Pascal per second", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VaporPermeability"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-M2-PA-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-M3",
    undefined,
    "ng/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanogram Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Nanogram Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-MicroL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "ng/µL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanograms per microlitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-MicroL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoGM-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "ng/mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanograms per millilitre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentration"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/NanoGM-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/H",
    undefined,
    "nH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanohenry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeance");
  config.units.set("http://qudt.org/vocab/unit/NanoH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoH-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/H-PER-M",
    undefined,
    "nH/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanohenry Per Meter", "en-us"));
  unit.addLabel(new LangString("Nanohenry Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permeability");
  config.units.set("http://qudt.org/vocab/unit/NanoH-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "nL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanolitre", "en-us"));
  unit.addLabel(new LangString("Nanolitre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/NanoL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "nM",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanometer", "en-us"));
  unit.addLabel(new LangString("Nanometre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/NanoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoM-PER-CentiM-PSI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("1.45037738E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nm/(cm⋅PSI)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanometer Per Centimeter PSI", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StressOpticCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoM-PER-CentiM-PSI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoM-PER-MilliM-MegaPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nm/(mm⋅MPa)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanometer Per Millimeter Megapascal", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StressOpticCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoM-PER-MilliM-MegaPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("1E-18"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/M2",
    undefined,
    "nm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Nanometer", "en-us"));
  unit.addLabel(new LangString("Square Nanometre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/NanoM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("1.0E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("NanoMOL", undefined));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-CentiM3-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("2.77777777777778E-7"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3-SEC",
    undefined,
    "nmol/(cm³⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Nanomoles per cubic centimetre per hour", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-CentiM3-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-GM-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per gram per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-GM-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-L",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-L-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1.15740740740741E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmol/(L⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per litre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-L-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-L-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("2.77777777777778E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmol/(L⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per litre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-L-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    new Decimal("1.15740740740741E-14"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "nmol/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per square metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-MicroGM-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T-1D0",
    new Decimal("0.000277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmol/(µg⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per microgram per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-MicroGM-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-MOL",
    undefined,
    "nmol/µmol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per micromole", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D1",
    new Decimal("1.15740740740741E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "nmol/(µmol⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanomoles per micromole per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("1.0E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/S",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("NanoS", undefined));
  config.units.set("http://qudt.org/vocab/unit/NanoS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoS-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1E-7"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "nS/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanosiemens Per Centimetre", "en"));
  unit.addLabel(new LangString("Nanosiemens Per Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/NanoS-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "nS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanosiemens Per Metre", "en"));
  unit.addLabel(new LangString("Nanosiemens Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/NanoS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/SEC",
    undefined,
    "ns",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("nanosecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/NanoSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/T",
    undefined,
    "nT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanotesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/NanoT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NanoW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1E-9"),
    undefined,
    "http://qudt.org/vocab/prefix/Nano",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "nW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Nanowatt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/NanoW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NepaleseRupee",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NPR",
    524
  );
  unit.addLabel(new LangString("Nepalese Rupee", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NepaleseRupee", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NetherlandsAntillianGuilder",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ANG",
    532
  );
  unit.addLabel(new LangString("Netherlands Antillian Guilder", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set(
    "http://qudt.org/vocab/unit/NetherlandsAntillianGuilder",
    unit
  );
  unit = new Unit(
    "http://qudt.org/vocab/unit/NewIsraeliShekel",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ILS",
    376
  );
  unit.addLabel(new LangString("New Israeli Shekel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NewIsraeliShekel", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NewTaiwanDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TWD",
    901
  );
  unit.addLabel(new LangString("New Taiwan Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NewTaiwanDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NewTurkishLira",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TRY",
    949
  );
  unit.addLabel(new LangString("New Turkish Lira", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NewTurkishLira", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NewZealandDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NZD",
    554
  );
  unit.addLabel(new LangString("New Zealand Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NewZealandDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Ngultrum",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BTN",
    64
  );
  unit.addLabel(new LangString("Ngultrum", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Ngultrum", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NorthKoreanWon",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KPW",
    408
  );
  unit.addLabel(new LangString("North Korean Won", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NorthKoreanWon", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NorwegianKrone",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "NOK",
    578
  );
  unit.addLabel(new LangString("Norwegian Krone", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NorwegianKrone", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/NuevoSol",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PEN",
    604
  );
  unit.addLabel(new LangString("Nuevo Sol", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/NuevoSol", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OCT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "oct",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Oct", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/OCT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OERSTED",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    new Decimal("79.5774715"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Oe",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Oersted", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  config.units.set("http://qudt.org/vocab/unit/OERSTED", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OERSTED-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("0.795774715"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Oe⋅cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Oersted Centimetre", "en"));
  unit.addLabel(new LangString("Oersted Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagnetomotiveForce"
  );
  config.units.set("http://qudt.org/vocab/unit/OERSTED-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ω",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Reactance");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ModulusOfImpedance"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Impedance");
  config.units.set("http://qudt.org/vocab/unit/OHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OHM-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ω⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ohm Meter", "en-us"));
  unit.addLabel(new LangString("Ohm Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ResidualResistivity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistivity");
  config.units.set("http://qudt.org/vocab/unit/OHM-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OHM-M2-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Ω⋅m²/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ohm Square Meter per Meter", "en-us"));
  unit.addLabel(new LangString("Ohm Square Metre per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistivity");
  config.units.set("http://qudt.org/vocab/unit/OHM-M2-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OHM_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/OHM_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OHM_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("898760000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/OHM_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.028349523125"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce Mass", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/OZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0",
    new Decimal("0.0086409"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz⋅ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
  config.units.set("http://qudt.org/vocab/unit/OZ-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0",
    new Decimal("0.000694563"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz⋅in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LengthMass");
  config.units.set("http://qudt.org/vocab/unit/OZ-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("3.2812E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.305151727"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/ft²{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Mass Ounce per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-GAL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("6.23602329"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/gal{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Mass Ounce per Gallon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-GAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-GAL_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("6.236"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/gal{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Gallon (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-GAL_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-GAL_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("7.8125"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/gal{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Gallon (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-GAL_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.00000787487"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-IN3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1729.99404"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/in³{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Mass Ounce per Cubic Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-IN3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.000472492"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.02834952"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-YD2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.0339057474748823"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/yd³{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Mass Ounce per Square Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-YD2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ-PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("0.0370798"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (avoirdupois) Per Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/OZ-PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.278013875"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ozf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Ounce Force", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/OZ_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_F-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("0.0706155243"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ozf⋅in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Ounce Force Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Torque");
  config.units.set("http://qudt.org/vocab/unit/OZ_F-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_TROY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.0311034768"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{Troy}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce Troy", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/OZ_TROY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0000284130625"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Fluid Ounce (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00000787487"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (UK Fluid) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00000787487"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (UK Fluid) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00472492"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (UK Fluid) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0000284"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (UK Fluid) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0000295735296"),
    undefined,
    undefined,
    undefined,
    undefined,
    "fl oz{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Liquid Ounce", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("3.42286E-10"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (US Fluid) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("8.214869E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (US Fluid) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("4.92892E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{US}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (US Fluid) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0000295735296"),
    undefined,
    undefined,
    undefined,
    undefined,
    "oz{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ounce (US Fluid) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/OZ_VOL_US-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/OmaniRial",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "OMR",
    512
  );
  unit.addLabel(new LangString("Rial Omani", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/OmaniRial", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Ouguiya",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MRU",
    929
  );
  unit.addLabel(new LangString("Ouguiya", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Ouguiya", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Fugacity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ModulusOfElasticity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BulkModulus");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ShearModulus");
  config.units.set("http://qudt.org/vocab/unit/PA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅L/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Litre Per Second", "en"));
  unit.addLabel(new LangString("Pascal Liter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/PA-L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal metres", "en"));
  config.units.set("http://qudt.org/vocab/unit/PA-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-M-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅m/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal metres per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PA-M-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-M-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅m/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal metres per square second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PA-M-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Cubic Metre Per Second", "en"));
  unit.addLabel(new LangString("Pascal Cubic Meter Per Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/PA-M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/PA-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("0.000277777778"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-MIN",
    undefined,
    "P/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal per Hour", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "P/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Per Metre", "en"));
  unit.addLabel(new LangString("Pascal Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("0.0166666667"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-SEC",
    undefined,
    "P/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal per Minute", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "P/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅s/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Second Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/PA-SEC-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-SEC-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅s/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Second Per Metre", "en"));
  unit.addLabel(new LangString("Pascal Second Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AcousticImpedance"
  );
  config.units.set("http://qudt.org/vocab/unit/PA-SEC-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA-SEC-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-4I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa⋅s/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pascal Second Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Pascal Second Per Cubic Meter", "en-us"));
  config.units.set("http://qudt.org/vocab/unit/PA-SEC-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA2-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M2H0T-6D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa²⋅m/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square pascal per square second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PA2-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PA2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M2H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Pa²⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Pascal Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SoundExposure");
  config.units.set("http://qudt.org/vocab/unit/PA2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PAB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PAB",
    590
  );
  unit.addLabel(new LangString("Balboa", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/PAB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PARSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("30856780000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pc",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parsec", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/PARSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PCA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0042333"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pc",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pica", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/PCA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PDL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("0.138254954376"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pdl",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Poundal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/PDL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PDL-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.48816443"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pdl/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Poundal per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/PDL-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-ANGSTROM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/Å",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Ã¥ngstrÃ¶m", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  config.units.set("http://qudt.org/vocab/unit/PER-ANGSTROM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
  config.units.set("http://qudt.org/vocab/unit/PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Centimeter", "en-us"));
  unit.addLabel(new LangString("Reciprocal Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  config.units.set("http://qudt.org/vocab/unit/PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-CentiM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M3",
    undefined,
    "/cm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Centimetre", "en"));
  unit.addLabel(new LangString("Reciprocal Cubic Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  config.units.set("http://qudt.org/vocab/unit/PER-CentiM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.00001157407"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-FT3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("35.31466"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/ft³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  config.units.set("http://qudt.org/vocab/unit/PER-FT3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal gram", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-GigaEV2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-4I0M-2H0T4D0",
    new Decimal("38956440500000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/GeV²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Reciprocal Square Giga Electron Volt Unit", "en")
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseSquareEnergy"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-GigaEV2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-H",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/H",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Henry", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-H", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("360.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-IN3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("61023.76"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/in³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  config.units.set("http://qudt.org/vocab/unit/PER-IN3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-J-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(J⋅m³)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Joule Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Reciprocal Joule Cubic Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyDensityOfStates"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-J-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExpansionRatio");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseTemperature"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalExpansionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativePressureCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-KiloM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "/km",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Kilometre", "en"));
  unit.addLabel(new LangString("Reciprocal Kilometer", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearIonization"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-KiloM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-KiloV-A-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H0T2D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(kV⋅A⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Kilovolt Ampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseEnergy");
  config.units.set("http://qudt.org/vocab/unit/PER-KiloV-A-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Litre", "en"));
  unit.addLabel(new LangString("Reciprocal Liter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  config.units.set("http://qudt.org/vocab/unit/PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Metre", "en"));
  unit.addLabel(new LangString("Reciprocal Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearIonization"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H-1T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Metre Kelvin", "en"));
  unit.addLabel(new LangString("Reciprocal Meter Kelvin", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseLengthTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-M-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M-NanoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m⋅nm)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal metre per nanometre", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-M-NanoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M-NanoM-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m⋅nm⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Reciprocal metre per nanometre per steradian", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/PER-M-NanoM-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-M-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal metre per steradian", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-M-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Square Meter", "en-us"));
  unit.addLabel(new LangString("Reciprocal Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ParticleFluence");
  config.units.set("http://qudt.org/vocab/unit/PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M2-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m²⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal square metre per second", "en"));
  unit.addLabel(new LangString("Reciprocal Square Metre Second", "en"));
  unit.addLabel(new LangString("Reciprocal Square Meter Second", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Flux");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ParticleFluenceRate"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-M2-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Reciprocal Cubic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NumberDensity");
  config.units.set("http://qudt.org/vocab/unit/PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-M3-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(m³⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Meter Second", "en-us"));
  unit.addLabel(new LangString("Reciprocal Cubic Metre Second", "en"));
  unit.addLabel(new LangString("Reciprocal cubic metre per second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Slowing-DownDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ParticleSourceDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-M3-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MILLE-PER-PSI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("1.450377E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/ksi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Mille Per Psi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IsothermalCompressibility"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
  config.units.set("http://qudt.org/vocab/unit/PER-MILLE-PER-PSI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("60.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MO",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("3.91935077E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/month",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Month", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-MO", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Mole", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseAmountOfSubstance"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MicroM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "/µm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Micrometre", "en"));
  unit.addLabel(new LangString("Reciprocal Micrometer", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearIonization"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-MicroM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MicroMOL-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L-3I0M0H0T0D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(mmol⋅L)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal micromole per litre", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-MicroMOL-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Millimetre", "en"));
  unit.addLabel(new LangString("Reciprocal Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearIonization"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MilliM3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M3",
    undefined,
    "/mm³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Millimeter", "en-us"));
  unit.addLabel(new LangString("Reciprocal Cubic Millimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  config.units.set("http://qudt.org/vocab/unit/PER-MilliM3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-MilliSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-SEC",
    undefined,
    "/ms",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal millisecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-MilliSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-NanoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "/nm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Nanometre", "en"));
  unit.addLabel(new LangString("Reciprocal Nanometer", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearIonization"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-NanoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-PA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/Pa",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Pascal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IsentropicCompressibility"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StressOpticCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IsothermalCompressibility"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Compressibility");
  config.units.set("http://qudt.org/vocab/unit/PER-PA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-PA-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/(Pa⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Pascal per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-PA-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-PSI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    new Decimal("0.0001450377"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/psi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Psi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InversePressure");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StressOpticCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-PSI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-PicoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1000000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PER-M",
    undefined,
    "/pm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Picometre", "en"));
  unit.addLabel(new LangString("Reciprocal Picometer", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearIonization"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseLength");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-PicoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-PlanckMass2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-2H0T0D0",
    new Decimal("2111089000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/mₚ²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Inverse Square Planck Mass", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseSquareMass"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-PlanckMass2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-SEC-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/s⋅m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Second Square Meter", "en-us"));
  unit.addLabel(new LangString("Reciprocal Second Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Flux");
  config.units.set("http://qudt.org/vocab/unit/PER-SEC-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-SEC-M2-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/s⋅m²⋅sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Reciprocal Second Square Metre Steradian", "en")
  );
  unit.addLabel(
    new LangString("Reciprocal Second Square Meter Steradian", "en-us")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhotonRadiance");
  config.units.set("http://qudt.org/vocab/unit/PER-SEC-M2-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-SEC-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/s⋅sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Second Steradian", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PhotonIntensity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemporalSummationFunction"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-SEC-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal square second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal steradian", "en"));
  config.units.set("http://qudt.org/vocab/unit/PER-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-T-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M-1H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/t⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Tesla Metre", "en"));
  unit.addLabel(new LangString("Reciprocal Tesla Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticReluctivity"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-T-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-T-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/T⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Tesla Second Unit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-T-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-WB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "/Wb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Weber", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseMagneticFlux"
  );
  config.units.set("http://qudt.org/vocab/unit/PER-WB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-WK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.000001653439"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/week",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Week", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-WK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    new Decimal("1.307951"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/InverseVolume");
  config.units.set("http://qudt.org/vocab/unit/PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PER-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("3.1709792E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "/yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reciprocal Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PER-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERCENT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "%",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Percent", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LengthPercentage"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeHumidity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VoltagePercentage"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ResistancePercentage"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeLuminousFlux"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressurePercentage"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Prevalence");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativePartialPressure"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimePercentage");
  config.units.set("http://qudt.org/vocab/unit/PERCENT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERCENT-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.0000115740740740741"),
    undefined,
    undefined,
    undefined,
    undefined,
    "%/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Percent per day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERCENT-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.000277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "%/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Percent per hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERCENT-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "%/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Percent per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERCENT-PER-WK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.00000165343915343915"),
    undefined,
    undefined,
    undefined,
    undefined,
    "%/wk",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Percent per week", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PERCENT-PER-WK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERCENT_RH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.01"),
    undefined,
    undefined,
    undefined,
    undefined,
    "%RH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Percent Relative Humidity", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeHumidity"
  );
  config.units.set("http://qudt.org/vocab/unit/PERCENT_RH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERMEABILITY_EM_REL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "μₜ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Relative Electromagnetic Permeability", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeabilityRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PERMEABILITY_EM_REL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERMEABILITY_REL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.00000125663706"),
    undefined,
    undefined,
    undefined,
    undefined,
    "kᵣ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Relative Permeability", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PermeabilityRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PERMEABILITY_REL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("8.854187817E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "εᵣ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Relative Permittivity", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PERMITTIVITY_REL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERM_Metric",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0",
    new Decimal("8.68127E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("U.S. Perm", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VaporPermeability"
  );
  config.units.set("http://qudt.org/vocab/unit/PERM_Metric", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PERM_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0",
    new Decimal("5.72135E-11"),
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("U.S. Perm", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VaporPermeability"
  );
  config.units.set("http://qudt.org/vocab/unit/PERM_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "pH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Acidity", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PH");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Acidity");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Basicity");
  config.units.set("http://qudt.org/vocab/unit/PH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PHOT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ph",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Phot", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea"
  );
  config.units.set("http://qudt.org/vocab/unit/PHOT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00056826125"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Imperial Pint", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/PINT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0005682613"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/PINT_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("6.577098E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (UK) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.578504E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (UK) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000009471022"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (UK) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0005682613"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (UK) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0004731765"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Liquid Pint", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/PINT_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("5.47658E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (US Liquid) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_US-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.314379E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (US Liquid) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_US-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000007886275"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{US}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (US Liquid) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_US-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0004731765"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pint (US Liquid) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PINT_US-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PINT_US_DRY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.000550610471"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt{US Dry}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Dry Pint", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/PINT_US_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.009092181"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/PK_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.05233576E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (UK) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000002525605833"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (UK) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00015153635"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (UK) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.009092181"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (UK) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_US_DRY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00880976754"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{US Dry}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Peck", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/PK_US_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.01964902E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (US Dry) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000002447157651"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (US Dry) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000146829459067"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{US}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (US Dry) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00880976754"),
    undefined,
    undefined,
    undefined,
    undefined,
    "peck{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Peck (US Dry) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/PK_US_DRY-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/POISE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "P",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Poise", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/POISE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/POISE-PER-BAR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "P/bar",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Poise Per Bar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/POISE-PER-BAR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per billion", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PPB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPM",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per million", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PPM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPM-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPM/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts Per Million per Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExpansionRatio");
  config.units.set("http://qudt.org/vocab/unit/PPM-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPTH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "‰",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per thousand", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PPTH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPTH-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("2.77777777777778E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "‰/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per thousand per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/PPTH-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPTM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPTM",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per Ten Million", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PPTM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPTM-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    new Decimal("1E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPM/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts Per Ten Million per Kelvin", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ExpansionRatio");
  config.units.set("http://qudt.org/vocab/unit/PPTM-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPTR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "PPTR",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per trillion", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.units.set("http://qudt.org/vocab/unit/PPTR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PPTR_VOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pptr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Parts per trillion by volume", "en"));
  config.units.set("http://qudt.org/vocab/unit/PPTR_VOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("6894.75789"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PSI", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/PSI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSI-IN3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("0.1129848"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psi⋅in³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Psi Cubic Inch Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/PSI-IN3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSI-L-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("6.894757"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psi⋅L³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Psi Liter Per Second", "en-us"));
  unit.addLabel(new LangString("Psi Litre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/PSI-L-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSI-M3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("6894.757"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psi⋅m³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PSI Cubic Meter Per Second", "en-us"));
  unit.addLabel(new LangString("PSI Cubic Metre Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/PSI-M3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSI-PER-PSI",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psi/psi",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Psi Per Psi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PressureRatio");
  config.units.set("http://qudt.org/vocab/unit/PSI-PER-PSI", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSI-YD3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("5271.42"),
    undefined,
    undefined,
    undefined,
    undefined,
    "psi⋅yd³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Psi Cubic Yard Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/PSI-YD3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PSU",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PSU",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Practical salinity unit", undefined));
  config.units.set("http://qudt.org/vocab/unit/PSU", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.0000254"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Point", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/PT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Paanga",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TOP",
    776
  );
  unit.addLabel(new LangString("Pa'anga", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Paanga", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PakistanRupee",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PKR",
    586
  );
  unit.addLabel(new LangString("Pakistan Rupee", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/PakistanRupee", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Palladium-OunceTroy",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XPD",
    964
  );
  unit.addLabel(new LangString("Palladium (one Troy ounce)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Palladium-OunceTroy", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Pataca",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MOP",
    446
  );
  unit.addLabel(new LangString("Pataca", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Pataca", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PebiBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("6243314768165359.2088811673338586"),
    undefined,
    "http://qudt.org/vocab/prefix/Pebi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "PiB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PebiByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/PebiBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Pennyweight",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.001555174"),
    undefined,
    undefined,
    undefined,
    undefined,
    "dwt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Pennyweight", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/Pennyweight", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PetaBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5545177444479562.4753378569716654"),
    undefined,
    "http://qudt.org/vocab/prefix/Peta",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "PB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PetaByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/PetaBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PetaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Peta",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "PC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PetaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/PetaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PetaJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Peta",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "PJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Petajoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/PetaJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PhilippinePeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PHP",
    608
  );
  unit.addLabel(new LangString("Philippine Peso", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/PhilippinePeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/A",
    undefined,
    "pA",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("picoampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/PicoA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoA-PER-MicroMOL-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E1L-3I0M0H0T0D0",
    new Decimal("0.001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pA/(mmol⋅L)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picoamps per micromole per litre", "en"));
  config.units.set("http://qudt.org/vocab/unit/PicoA-PER-MicroMOL-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "pC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PicoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/PicoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoFARAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/FARAD",
    undefined,
    "pF",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picofarad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Capacitance");
  config.units.set("http://qudt.org/vocab/unit/PicoFARAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoFARAD-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/FARAD-PER-M",
    undefined,
    "pF/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picofarad Per Metre", "en"));
  unit.addLabel(new LangString("Picofarad Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Permittivity");
  config.units.set("http://qudt.org/vocab/unit/PicoFARAD-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1E-15"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "pg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picograms", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/PicoGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoGM-PER-GM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "pg/g",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picograms per gram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-GM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoGM-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1E-15"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-GM",
    undefined,
    "pg/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picograms per kilogram", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassRatio");
  config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoGM-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "pg/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picofarad Per Metre", "en"));
  unit.addLabel(new LangString("Picofarad Per Meter", "en-us"));
  unit.addLabel(new LangString("Picograms per litre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoGM-PER-MilliL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM-PER-L",
    undefined,
    "pg/mL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picograms per millilitre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassConcentration"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/PicoGM-PER-MilliL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/H",
    undefined,
    "pH",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picohenry", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Inductance");
  config.units.set("http://qudt.org/vocab/unit/PicoH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1E-15"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/L",
    undefined,
    "pL",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picolitre", "en"));
  unit.addLabel(new LangString("Picolitre", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/PicoL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/M",
    undefined,
    "pM",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picometre", "en"));
  unit.addLabel(new LangString("Picometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/PicoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    new Decimal("1.0E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/MOL",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PicoMOL", undefined));
  config.units.set("http://qudt.org/vocab/unit/PicoMOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pmol/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1E-9"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-L",
    undefined,
    "pmol/L",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per litre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-L-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-1D0",
    new Decimal("1.15740740740741E-14"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pmol/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per litre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-L-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-L-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("2.77777777777778E-13"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pmol/(L⋅hr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per litre per hour", "en"));
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-L-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-M-W-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M-1H0T2D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pmol/(m⋅W⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Picomoles per metre per watt per second", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M-W-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-M2-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1.15740740740741E-17"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M2-SEC",
    undefined,
    "pmol/(m²⋅day)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per square metre per day", "en"));
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M2-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3",
    undefined,
    "pmol/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per cubic metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Solubility_Water"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoMOL-PER-M3-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T-1D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/MOL-PER-M3-SEC",
    undefined,
    "pmol/(m³⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picomoles per cubic metre per second", "en"));
  config.units.set("http://qudt.org/vocab/unit/PicoMOL-PER-M3-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoPA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("1.0E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/PA",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PicoPA", undefined));
  config.units.set("http://qudt.org/vocab/unit/PicoPA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoPA-PER-KiloM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1E-15"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/PA-PER-M",
    undefined,
    "pPa/km",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picopascal Per Kilometre", "en"));
  unit.addLabel(new LangString("Picopascal Per Kilometer", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerLength");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/PicoPA-PER-KiloM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("1.0E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/S",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PicoS", undefined));
  config.units.set("http://qudt.org/vocab/unit/PicoS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoS-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "pS/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picosiemens Per Metre", "en"));
  unit.addLabel(new LangString("Picosiemens Per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/PicoS-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/SEC",
    undefined,
    "ps",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picosecond", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/PicoSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1E-12"),
    undefined,
    "http://qudt.org/vocab/prefix/Pico",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "pW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picowatt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/PicoW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoW-PER-CentiM2-L",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T-3D0",
    new Decimal("0.00001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pW/(cm²⋅L)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Picowatts per square centimetre per litre", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/PicoW-PER-CentiM2-L", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PicoW-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("1E-12"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2",
    undefined,
    "pW/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Picowatt Per Square Metre", "en"));
  unit.addLabel(new LangString("Picowatt Per Square Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/PicoW-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckArea",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("2.61223E-70"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckarea",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Area", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/PlanckArea", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckCharge",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1.87554587E-18"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckcharge",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Charge", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/PlanckCharge", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckCurrent",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    new Decimal("34789000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckcurrent",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Current", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCurrent");
  config.units.set("http://qudt.org/vocab/unit/PlanckCurrent", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckCurrentDensity",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    new Decimal("1.331774E+95"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckcurrentdensity",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Current Density", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity"
  );
  config.units.set("http://qudt.org/vocab/unit/PlanckCurrentDensity", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckDensity",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("5.155E+96"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckdensity",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Density", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/PlanckDensity", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckEnergy",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1956100000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Eᵨ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Energy", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/PlanckEnergy", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckForce",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("121027000000000000000000000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckforce",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Force", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/PlanckForce", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckFrequency",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("18548700000000000000000000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckfrequency",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Frequency", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/PlanckFrequency", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckFrequency_Ang",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("18548700000000000000000000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckangularfrequency",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Angular Frequency", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/PlanckFrequency_Ang", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckImpedance",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("29.9792458"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Zₚ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Impedance", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/PlanckImpedance", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckLength",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("1.616252E-35"),
    undefined,
    undefined,
    undefined,
    undefined,
    "plancklength",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Length", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/PlanckLength", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckMass",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("2.17644E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckmass",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Mass", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/PlanckMass", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckMomentum",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    new Decimal("6.52485"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckmomentum",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Momentum", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LinearMomentum");
  config.units.set("http://qudt.org/vocab/unit/PlanckMomentum", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckPower",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("36283100000000000000000000000000000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckpower",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Power", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  config.units.set("http://qudt.org/vocab/unit/PlanckPower", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckPressure",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("4.63309E+113"),
    undefined,
    undefined,
    undefined,
    undefined,
    "planckpressure",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Pressure", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/PlanckPressure", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckTemperature",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    new Decimal("141678400000000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "plancktemperature",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("PlanckTemperature", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Temperature");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MeltingPoint");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BoilingPoint");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/FlashPoint");
  config.units.set("http://qudt.org/vocab/unit/PlanckTemperature", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckTime",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("5.39124E-44"),
    undefined,
    undefined,
    undefined,
    undefined,
    "tₚ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Time", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/PlanckTime", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckVolt",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("1042950000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Vₚ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Volt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/PlanckVolt", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PlanckVolume",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("4.22419E-105"),
    undefined,
    undefined,
    undefined,
    undefined,
    "l³ₚ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Planck Volume", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/PlanckVolume", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Platinum-OunceTroy",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XPT",
    962
  );
  unit.addLabel(new LangString("Platinum (one Troy ounce)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Platinum-OunceTroy", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/PoundSterling",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GBP",
    826
  );
  unit.addLabel(new LangString("Pound Sterling", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/PoundSterling", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Pula",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "BWP",
    72
  );
  unit.addLabel(new LangString("Pula", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Pula", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0011365225"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/QT_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.31542E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{UK}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (UK Liquid) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_UK-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("3.157007E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{UK}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (UK Liquid) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_UK-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001894205"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{UK}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (UK Liquid) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_UK-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0011365225"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{UK}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (UK Liquid) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_UK-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.000946353"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Liquid Quart", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LiquidVolume");
  config.units.set("http://qudt.org/vocab/unit/QT_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("1.095316E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (US Liquid) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_US-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("2.62875833E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (US Liquid) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_US-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_US-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00001577255"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{US}/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (US Liquid) Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_US-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_US-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.000946353"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{US}/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quart (US Liquid) Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/QT_US-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QT_US_DRY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.001101220942715"),
    undefined,
    undefined,
    undefined,
    undefined,
    "qt{US Dry}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("US Dry Quart", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DryVolume");
  config.units.set("http://qudt.org/vocab/unit/QT_US_DRY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QUAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1055000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "quad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/QUAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/QatariRial",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "QAR",
    634
  );
  unit.addLabel(new LangString("Qatari Rial", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/QatariRial", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Quarter_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("12.70058636"),
    undefined,
    undefined,
    undefined,
    undefined,
    "quarter",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Quarter (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/Quarter_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Quetzal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "GTQ",
    320
  );
  unit.addLabel(new LangString("Quetzal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Quetzal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    new Decimal("0.000258"),
    undefined,
    undefined,
    undefined,
    undefined,
    "R",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Roentgen", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.units.set("http://qudt.org/vocab/unit/R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/RAD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-M2-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad⋅m²/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian Square Meter per Kilogram", "en-us"));
  unit.addLabel(new LangString("Radian Square Metre per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificOpticalRotatoryPower"
  );
  config.units.set("http://qudt.org/vocab/unit/RAD-M2-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-M2-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad⋅m²/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian Square Metre per Mole", "en"));
  unit.addLabel(new LangString("Radian Square Meter per Mole", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarOpticalRotatoryPower"
  );
  config.units.set("http://qudt.org/vocab/unit/RAD-M2-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/RAD-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian per Metre", "en"));
  unit.addLabel(new LangString("Radian per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DebyeAngularWavenumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularWavenumber"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FermiAngularWavenumber"
  );
  config.units.set("http://qudt.org/vocab/unit/RAD-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("60.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/RAD-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("radian per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/RAD-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Radian per Square Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularAcceleration"
  );
  config.units.set("http://qudt.org/vocab/unit/RAD-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAD_R",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rad",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Rad", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AbsorbedDose");
  config.units.set("http://qudt.org/vocab/unit/RAD_R", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RAYL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rayl",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Rayl", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance"
  );
  config.units.set("http://qudt.org/vocab/unit/RAYL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/REM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("0.01"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rem",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Rem", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
  config.units.set("http://qudt.org/vocab/unit/REM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/REV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("6.28318531"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rev",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Revolution", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Angle");
  config.units.set("http://qudt.org/vocab/unit/REV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/REV-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.00174532925"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rev/h",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Revolution per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/REV-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/REV-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.104719755"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rev/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Revolution per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/REV-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/REV-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("6.28318531"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rev/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Revolution per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AngularVelocity");
  config.units.set("http://qudt.org/vocab/unit/REV-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/REV-PER-SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    new Decimal("6.28318531"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rev/s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Revolution per Square Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularAcceleration"
  );
  config.units.set("http://qudt.org/vocab/unit/REV-PER-SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ROD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("5.02921"),
    undefined,
    undefined,
    undefined,
    undefined,
    "rod",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Rod", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/ROD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RPK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "RPK",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Reads Per Kilobase", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GeneFamilyAbundance"
  );
  config.units.set("http://qudt.org/vocab/unit/RPK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("2.8316846592"),
    undefined,
    undefined,
    undefined,
    undefined,
    "RT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Register Ton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/RT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Riel",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KHR",
    116
  );
  unit.addLabel(new LangString("Riel", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Riel", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RomanianNeLeu",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "RON",
    946
  );
  unit.addLabel(new LangString("Romanian New Leu", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/RomanianNeLeu", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Rufiyaa",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "MVR",
    462
  );
  unit.addLabel(new LangString("Rufiyaa", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Rufiyaa", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Rupiah",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "IDR",
    360
  );
  unit.addLabel(new LangString("Rupiah", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Rupiah", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RussianRuble",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "RUB",
    643
  );
  unit.addLabel(new LangString("Russian Ruble", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/RussianRuble", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/RwandaFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "RWF",
    646
  );
  unit.addLabel(new LangString("Rwanda Franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/RwandaFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/S",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "S",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Siemens", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductance");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Admittance");
  config.units.set("http://qudt.org/vocab/unit/S", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/S-M2-PER-MOL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "s⋅m²/mol",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Siemens Square metre per mole", "en"));
  unit.addLabel(new LangString("Siemens Square meter per mole", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/S-M2-PER-MOL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/S-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "S/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Siemens Per Centimetre", "en"));
  unit.addLabel(new LangString("Siemens Per Centimeter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  config.units.set("http://qudt.org/vocab/unit/S-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/S-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "s/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Siemens Per Meter", "en-us"));
  unit.addLabel(new LangString("Siemens Per Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Conductivity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectrolyticConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/S-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SAMPLE",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("SAMPLE", undefined));
  config.units.set("http://qudt.org/vocab/unit/SAMPLE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SAMPLE-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "sample/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sample per second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/SAMPLE-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Period");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SEC-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    new Decimal("0.09290304"),
    undefined,
    undefined,
    undefined,
    undefined,
    "s⋅ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Second Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AreaTime");
  config.units.set("http://qudt.org/vocab/unit/SEC-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SEC-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "s/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Seconds per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/SEC-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SEC-PER-RAD-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "s/rad⋅m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Second per Radian Cubic Meter", "en-us"));
  unit.addLabel(new LangString("Second per Radian Cubic Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DensityOfStates");
  config.units.set("http://qudt.org/vocab/unit/SEC-PER-RAD-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SEC2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "s²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TimeSquared");
  config.units.set("http://qudt.org/vocab/unit/SEC2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SH",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "shake",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Shake", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/SH", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SHANNON",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Sh",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Shannon", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.units.set("http://qudt.org/vocab/unit/SHANNON", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SHANNON-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Sh/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Shannon per Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationFlowRate"
  );
  config.units.set("http://qudt.org/vocab/unit/SHANNON-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("14.593903"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/SLUG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.00016891087963"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-FT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("47.8802591863517"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/ft",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug per Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-FT-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    new Decimal("47.8802591863517"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/(ft⋅s)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug per Foot Second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("157.08746452215124"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-FT3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("515.3788206107324"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/ft³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug per Cubic Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-FT3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.004053861111111"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.243231666666667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SLUG-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("14.593903"),
    undefined,
    undefined,
    undefined,
    undefined,
    "slug/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Slug per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/SLUG-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Steradian", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/SolidAngle");
  config.units.set("http://qudt.org/vocab/unit/SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ST",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "St",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Stokes", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/KinematicViscosity"
  );
  config.units.set("http://qudt.org/vocab/unit/ST", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/STILB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "sb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Stilb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Luminance");
  config.units.set("http://qudt.org/vocab/unit/STILB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/STR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "st",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Stere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/STR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SUSCEPTIBILITY_ELEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "χ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Electric Susceptibility Unit", undefined));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/SUSCEPTIBILITY_ELEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SUSCEPTIBILITY_MAG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "χ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Magnetic Susceptibility Unit", undefined));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/SUSCEPTIBILITY_MAG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SV",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Sv",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sievert", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/DoseEquivalent");
  config.units.set("http://qudt.org/vocab/unit/SV", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/S_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "aS",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Absiemen", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/S_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/S_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    new Decimal("1.1126500561E-12"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statS",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statsiemens", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/S_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SaintHelenaPound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SHP",
    654
  );
  unit.addLabel(new LangString("Saint Helena Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SaintHelenaPound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SameDay",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("SameDay", undefined));
  config.units.set("http://qudt.org/vocab/unit/SameDay", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SamoanTala",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "WST",
    882
  );
  unit.addLabel(new LangString("Samoan Tala", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SamoanTala", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SaudiRiyal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SAR",
    682
  );
  unit.addLabel(new LangString("Saudi Riyal", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SaudiRiyal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SerbianDinar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "RSD",
    941
  );
  unit.addLabel(new LangString("Serbian Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SerbianDinar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SeychellesRupee",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SCR",
    690
  );
  unit.addLabel(new LangString("Seychelles Rupee", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SeychellesRupee", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Silver-OunceTroy",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XAG",
    961
  );
  unit.addLabel(new LangString("Silver (one Troy ounce)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Silver-OunceTroy", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SingaporeDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SGD",
    702
  );
  unit.addLabel(new LangString("Singapore Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SingaporeDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SlovakKoruna",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SKK",
    703
  );
  unit.addLabel(new LangString("Slovak Koruna", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SlovakKoruna", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SolarMass",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1988435000000000000000000000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "S",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Solar mass", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/SolarMass", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SolomonIslandsDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SBD",
    90
  );
  unit.addLabel(new LangString("Solomon Islands Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SolomonIslandsDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Som",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KGS",
    417
  );
  unit.addLabel(new LangString("Som", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Som", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SomaliShilling",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SOS",
    706
  );
  unit.addLabel(new LangString("Somali Shilling", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SomaliShilling", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Somoni",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TJS",
    972
  );
  unit.addLabel(new LangString("Somoni", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Somoni", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SouthAfricanRand",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ZAR",
    710
  );
  unit.addLabel(new LangString("South African Rand", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SouthAfricanRand", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SouthKoreanWon",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KRW",
    410
  );
  unit.addLabel(new LangString("South Korean Won", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SouthKoreanWon", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SpecialDrawingRights",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XDR",
    960
  );
  unit.addLabel(new LangString("Special Drawing Rights", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SpecialDrawingRights", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SpeedOfLight",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("SpeedOfLight", undefined));
  config.units.set("http://qudt.org/vocab/unit/SpeedOfLight", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SriLankaRupee",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "LKR",
    144
  );
  unit.addLabel(new LangString("Sri Lanka Rupee", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SriLankaRupee", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Standard",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("4.672"),
    undefined,
    undefined,
    undefined,
    undefined,
    "standard",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Standard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/Standard", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Stone_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("6.35029318"),
    undefined,
    undefined,
    undefined,
    undefined,
    "st{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Stone (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/Stone_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SudanesePound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SDG",
    938
  );
  unit.addLabel(new LangString("Sudanese Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SudanesePound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SurinamDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SRD",
    968
  );
  unit.addLabel(new LangString("Surinam Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SurinamDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SwedishKrona",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SEK",
    752
  );
  unit.addLabel(new LangString("Swedish Krona", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SwedishKrona", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SwissFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CHF",
    756
  );
  unit.addLabel(new LangString("Swiss Franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SwissFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/SyrianPound",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "SYP",
    760
  );
  unit.addLabel(new LangString("Syrian Pound", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/SyrianPound", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/T",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "T",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticField");
  config.units.set("http://qudt.org/vocab/unit/T", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/T-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "T⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("T-M", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength"
  );
  config.units.set("http://qudt.org/vocab/unit/T-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/T-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-1D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "T⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("T-SEC", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/T-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TBSP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.0000147867656"),
    undefined,
    undefined,
    undefined,
    undefined,
    "tbsp",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tablespoon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/TBSP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TEX",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "tex",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tex", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerLength");
  config.units.set("http://qudt.org/vocab/unit/TEX", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/THB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "THB",
    764
  );
  unit.addLabel(new LangString("Baht", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/THB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/THM_EEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "thm{EEC}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("THM_EEC", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/THM_EEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/THM_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("105480400.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "thm{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Therm US", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ThermalEnergy");
  config.units.set("http://qudt.org/vocab/unit/THM_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TOE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("41868000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "toe",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton of Oil Equivalent", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/TOE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "t",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TONNE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.011574074074074"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("tonne per hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-HA-YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    new Decimal("3.17E-9"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/ha/year",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("tonne per hectare per year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerAreaTime");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-HA-YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Tonne Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("16.666666666666668"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TONNE-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TONNE-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Assay",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("0.02916667"),
    undefined,
    undefined,
    undefined,
    undefined,
    "AT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Assay Ton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TON_Assay", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_FG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("3516.853"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/fg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton of Refrigeration", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/HeatFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_FG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_F_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    new Decimal("8896.443230521"),
    undefined,
    undefined,
    undefined,
    undefined,
    "tonf{us}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton Force (US Short)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Force");
  config.units.set("http://qudt.org/vocab/unit/TON_F_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_LONG",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1016.0469088"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t{long}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Long Ton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TON_LONG", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_LONG-PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1328.9391836174336"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t{long}/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Long Ton per Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/TON_LONG-PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/GM",
    undefined,
    "t",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Metric Ton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.011574074074074"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric-PER-HA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    new Decimal("0.1"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/ha",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("metric tonne per hectare", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerArea");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-HA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.277777777777778"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Tonne Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("16.666666666666668"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_Metric-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tonne Per Second (metric Ton)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_Metric-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_SHIPPING_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("1.1326"),
    undefined,
    undefined,
    undefined,
    undefined,
    "MTON",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton (US Shipping)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/TON_SHIPPING_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_SHORT",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("907.18474"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{short}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Short Ton", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TON_SHORT", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_SHORT-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.251995761"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Short Ton per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassPerTime");
  config.units.set("http://qudt.org/vocab/unit/TON_SHORT-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_SHORT-PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1186.552842515566"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{short}/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Short Ton per Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Density");
  config.units.set("http://qudt.org/vocab/unit/TON_SHORT-PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_UK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1016.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{UK}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton (UK)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TON_UK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_UK-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.011759259259259"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t{long}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Long Ton (uk) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_UK-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_UK-PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1328.8778292234224"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t{long}/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Long Ton (UK) Per Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/TON_UK-PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_US",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("907.1847"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{US}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton (US)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/TON_US", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_US-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.010497685185185"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{US}/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Short Ton (us) Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_US-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_US-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    new Decimal("0.251944444444444"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{US}/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton (US) Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFlowRate");
  config.units.set("http://qudt.org/vocab/unit/TON_US-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TON_US-PER-YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    new Decimal("1186.3112117181538"),
    undefined,
    undefined,
    undefined,
    undefined,
    "ton{US}/yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Short Ton (US) Per Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassDensity");
  config.units.set("http://qudt.org/vocab/unit/TON_US-PER-YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TORR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("133.322"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Torr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Torr", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VaporPressure");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ForcePerArea");
  config.units.set("http://qudt.org/vocab/unit/TORR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TSP",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.00000492892187"),
    undefined,
    undefined,
    undefined,
    undefined,
    "tsp",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Teaspoon", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/TSP", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/T_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    new Decimal("0.0001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abT",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abtesla", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticField");
  config.units.set("http://qudt.org/vocab/unit/T_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TanzanianShilling",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TZS",
    834
  );
  unit.addLabel(new LangString("Tanzanian Shilling", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/TanzanianShilling", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TebiBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("6096987078286.4836024230149744713"),
    undefined,
    "http://qudt.org/vocab/prefix/Tebi",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "TiB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("TebiByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/TebiBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Tenge",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "KZT",
    398
  );
  unit.addLabel(new LangString("Tenge", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Tenge", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraBYTE",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("5545177444479.5624753378569716654"),
    undefined,
    "http://qudt.org/vocab/prefix/Tera",
    "http://qudt.org/vocab/unit/BYTE",
    undefined,
    "TB",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("TeraByte", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  config.units.set("http://qudt.org/vocab/unit/TeraBYTE", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Tera",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "TC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("TeraCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/TeraC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraHZ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("1000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Tera",
    "http://qudt.org/vocab/unit/HZ",
    undefined,
    "THz",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Terahertz", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/TeraHZ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraJ",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Tera",
    "http://qudt.org/vocab/unit/J",
    undefined,
    "TJ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Terajoule", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/TeraJ", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraOHM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    new Decimal("1000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Tera",
    "http://qudt.org/vocab/unit/OHM",
    undefined,
    "TΩ",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Teraohm", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Resistance");
  config.units.set("http://qudt.org/vocab/unit/TeraOHM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraW",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Tera",
    "http://qudt.org/vocab/unit/W",
    undefined,
    "TW",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Terawatt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/TeraW", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TeraW-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600000000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-SEC",
    undefined,
    "TW⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Terawatt Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/TeraW-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TonEnergy",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("4184000000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "t/lbf",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Ton Energy", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/TonEnergy", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TrinidadAndTobagoDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TTD",
    780
  );
  unit.addLabel(new LangString("Trinidad and Tobago Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/TrinidadAndTobagoDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Tugrik",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tugrik", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Tugrik", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/TunisianDinar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "TND",
    788
  );
  unit.addLabel(new LangString("Tunisian Dinar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/TunisianDinar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/U",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    new Decimal("1.66053878283E-27"),
    undefined,
    undefined,
    undefined,
    undefined,
    "u",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Unified Atomic Mass Unit", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Mass");
  config.units.set("http://qudt.org/vocab/unit/U", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UAEDirham",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "AED",
    784
  );
  unit.addLabel(new LangString("United Arab Emirates dirham", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UAEDirham", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UICFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XFU",
    undefined
  );
  unit.addLabel(
    new LangString("UIC franc (special settlement currency)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UICFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UNITLESS",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "unitless",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Unitless", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MultiplicationFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StatisticalWeight"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Chromaticity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NeutronYieldPerFission"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Duv");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InternalConversionFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LogarithmicFrequencyInterval"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RadianceFactor");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionRatio"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NeutronYieldPerAbsorption"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Reactivity");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LandeGFactor");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DoseEquivalentQualityFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FastFissionFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeMassConcentrationOfVapour"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GeneralizedVelocity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MassFraction");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricSusceptibility"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LeakageFactor");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PoissonRatio");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GeneralizedCoordinate"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Refectance");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeMassExcess"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassRatioOfWaterToDryMatter"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstant"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/QualityFactor");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Debye-WallerFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GeneralizedMomentum"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TransmittanceDensity"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dimensionless");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/TotalIonization");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GeneralizedForce"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RatioOfSpecificHeatCapacities"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GruneisenParameter"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DegreeOfDissociation"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassFractionOfWater"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberOfParticles"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstanceFractionOfB"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/OrderOfReflection"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ReflectanceFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AtomScatteringFactor"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/BioconcentrationFactor"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Reflectance");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Short-RangeOrderParameter"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticSusceptability"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/BindingFraction");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LogOctanolAirPartitionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ResonanceEscapeProbability"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Transmittance");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalUtilizationFactor"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Emissivity");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IsentropicExponent"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassFractionOfDryMatter"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/OsmoticCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeMassDensity"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AverageLogarithmicEnergyDecrement"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Turns");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/CouplingFactor");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NapierianAbsorbance"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Long-RangeOrderParameter"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Dissipance");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativeMassRatioOfVapour"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ActivityCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PermittivityRatio"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LogOctanolWaterPartitionCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EinsteinTransitionProbability"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PackingFraction");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MobilityRatio");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/RefractiveIndex");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FrictionCoefficient"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/LossFactor");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Non-LeakageProbability"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/StructureFactor");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerFactor");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MadelungConstant"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GFactorOfNucleus"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Absorptance");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassRatioOfWaterVapourToDryGas"
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Lethargy");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StandardAbsoluteActivity"
  );
  config.units.set("http://qudt.org/vocab/unit/UNITLESS", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/USDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "US$",
    undefined,
    "USD",
    840
  );
  unit.addLabel(new LangString("US Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/USDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/USDollar-NextDay",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "USN",
    997
  );
  unit.addLabel(
    new LangString("United States Dollar (next day) (funds code)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/USDollar-NextDay", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/USDollar-SameDay",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "USS",
    998
  );
  unit.addLabel(
    new LangString("United States Dollar (same day) (funds code)", "en")
  );
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/USDollar-SameDay", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UgandaShilling",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "UGX",
    800
  );
  unit.addLabel(new LangString("Uganda Shilling", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UgandaShilling", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UnidadDeValorReal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "COU",
    970
  );
  unit.addLabel(new LangString("Unidad de Valor Real", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UnidadDeValorReal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UnidadesDeFormento",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CLF",
    990
  );
  unit.addLabel(new LangString("Unidades de formento (Funds code)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UnidadesDeFormento", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UnitPole",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("1.256637E-7"),
    undefined,
    undefined,
    undefined,
    undefined,
    "pole",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Unit Pole", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/UnitPole", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UruguayPeso",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "UYU",
    858
  );
  unit.addLabel(new LangString("Peso Uruguayo", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UruguayPeso", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/UzbekistanSom",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "UZS",
    860
  );
  unit.addLabel(new LangString("Uzbekistan Som", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/UzbekistanSom", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/V", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-A",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V⋅A",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Ampere", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/NonActivePower");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ComplexPower");
  config.units.set("http://qudt.org/vocab/unit/V-A", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-A-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V⋅A⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Ampere Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/V-A-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-A_Reactive",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V⋅A{Reactive}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Ampere Reactive", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ReactivePower");
  config.units.set("http://qudt.org/vocab/unit/V-A_Reactive", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V⋅A{reactive}⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Ampere Reactive Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/V-A_Reactive-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("V-M", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFlux");
  config.units.set("http://qudt.org/vocab/unit/V-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("100.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "V/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Per Centimetre", "en"));
  unit.addLabel(new LangString("Volt Per Centimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-IN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("39.37007874015748"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V/in",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Per Inch", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-IN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H-1T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SeebeckCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThomsonCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt per Metre", "en"));
  unit.addLabel(new LangString("Volt per Meter", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricField");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt per Square Meter", "en-us"));
  unit.addLabel(new LangString("Volt per Square Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerAreaElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-MicroSEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0",
    new Decimal("1000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-SEC",
    undefined,
    "V/µs",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Per Microsecond", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-MicroSEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/V-PER-M",
    undefined,
    "V/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Per Millimetre", "en"));
  unit.addLabel(new LangString("Volt Per Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt per second", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/V-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V-SEC-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V⋅s/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Volt Second Per Meter", "en-us"));
  unit.addLabel(new LangString("Volt Second Per Metre", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticVectorPotential"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ScalarMagneticPotential"
  );
  config.units.set("http://qudt.org/vocab/unit/V-SEC-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V2-PER-K2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-2L4I0M2H-2T-6D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "V²/K²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Volt per Square Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LorenzCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/V2-PER-K2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V_Ab",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abvolt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/V_Ab", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V_Ab-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("0.000001"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abV/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abvolt per centimeter", "en-us"));
  unit.addLabel(new LangString("Abvolt per centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricField");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/V_Ab-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V_Ab-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("1E-8"),
    undefined,
    undefined,
    undefined,
    undefined,
    "abv⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Abvolt Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/V_Ab-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V_Stat",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    new Decimal("299.792458"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statV",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statvolt", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.units.set("http://qudt.org/vocab/unit/V_Stat", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V_Stat-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "statV⋅cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("V_Stat-CentiM", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricFlux");
  config.units.set("http://qudt.org/vocab/unit/V_Stat-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/V_Stat-PER-CentiM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    new Decimal("29979.2458"),
    undefined,
    undefined,
    undefined,
    undefined,
    "statV/cm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Statvolt per Centimeter", "en-us"));
  unit.addLabel(new LangString("Statvolt per Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricField");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.units.set("http://qudt.org/vocab/unit/V_Stat-PER-CentiM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Vatu",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "VUV",
    548
  );
  unit.addLabel(new LangString("Vatu", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Vatu", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/VenezuelanBolvar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "VES",
    928
  );
  unit.addLabel(new LangString("Venezuelan bolvar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/VenezuelanBolvar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/VietnameseDong",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "VND",
    704
  );
  unit.addLabel(new LangString("Vietnamese ??ng", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/VietnameseDong", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Power");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ActivePower");
  config.units.set("http://qudt.org/vocab/unit/W", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watthour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/W-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-HR-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    new Decimal("3600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅hr/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watthour per Cubic meter", "en-us"));
  unit.addLabel(new LangString("Watthour per Cubic metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyDensity");
  config.units.set("http://qudt.org/vocab/unit/W-HR-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-M-PER-M2-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅m/m²⋅sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString(
      "Watts per square metre per inverse metre per steradian",
      "en"
    )
  );
  config.units.set("http://qudt.org/vocab/unit/W-M-PER-M2-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("W-M2", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerArea");
  config.units.set("http://qudt.org/vocab/unit/W-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-M2-PER-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅m²/sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("W-M2-PER-SR", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle"
  );
  config.units.set("http://qudt.org/vocab/unit/W-M2-PER-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-CentiM2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("10000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2",
    undefined,
    "W/cm²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Centimeter", "en-us"));
  unit.addLabel(new LangString("Watt per Square Centimetre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/W-PER-CentiM2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-FT2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("10.7639104"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/ft²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Foot", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/W-PER-FT2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-IN2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("1550.0031"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/in²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Inch", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  config.units.set("http://qudt.org/vocab/unit/W-PER-IN2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "w/K",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductance"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-KiloGM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/kg",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt Per Kilogram", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AbsorbedDoseRate"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-KiloGM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watts per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/W-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/(m⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Meter Kelvin", "en-us"));
  unit.addLabel(new LangString("Watt per Metre Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Meter", "en-us"));
  unit.addLabel(new LangString("Watt per Square Metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PowerPerArea");
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/PoyntingVector");
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-K",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/(m²⋅K)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Meter Kelvin", "en-us"));
  unit.addLabel(new LangString("Watt per Square Metre Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SurfaceCoefficientOfHeatTransfer"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CombinedNonEvaporativeHeatTransferCoefficient"
  );
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-K", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-K4",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-4T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/(m²⋅K⁴)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Watt per Square Meter Quartic Kelvin", "en-us")
  );
  unit.addLabel(new LangString("Watt per Square Metre Quartic Kelvin", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerAreaQuarticTemperature"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-K4", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/m²⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watts per square metre per metre", "en"));
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-M-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/m²⋅m⋅sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Watts per square metre per metre per steradian", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-M-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-NanoM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2-M",
    undefined,
    "W/m²⋅nm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watts per square metre per nanometre", "en"));
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-NanoM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-NanoM-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1000000000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/W-PER-M2-M-SR",
    undefined,
    "W/m²⋅nm⋅sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(
    new LangString("Watts per square metre per nanometre per steradian", "en")
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-NanoM-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-PA",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/(m²⋅pa)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Metre Pascal", "en"));
  unit.addLabel(new LangString("Watt per Square Meter Pascal", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EvaporativeHeatTransferCoefficient"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-PA", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M2-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/(m²⋅sr)",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Square Metre Steradian", "en"));
  unit.addLabel(new LangString("Watt per Square Meter Steradian", "en-us"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Radiance");
  config.units.set("http://qudt.org/vocab/unit/W-PER-M2-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-M3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/m³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt Per Cubic Metre", "en"));
  unit.addLabel(new LangString("Watt Per Cubic Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-M3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-PER-SR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W/sr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt per Steradian", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RadiantIntensity"
  );
  config.units.set("http://qudt.org/vocab/unit/W-PER-SR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Energy");
  config.units.set("http://qudt.org/vocab/unit/W-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/W-SEC-PER-M2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "W⋅s/m²",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Watt seconds per square metre", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/EnergyPerArea");
  config.units.set("http://qudt.org/vocab/unit/W-SEC-PER-M2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WB",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Wb",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Weber", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/MagneticFlux");
  config.units.set("http://qudt.org/vocab/unit/WB", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WB-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Wb⋅m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Weber Metre", "en"));
  unit.addLabel(new LangString("Weber Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment"
  );
  config.units.set("http://qudt.org/vocab/unit/WB-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WB-PER-M",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    new Decimal("1.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "Wb/m",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Weber Per Metre", "en"));
  unit.addLabel(new LangString("Weber Per Meter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticVectorPotential"
  );
  config.units.set("http://qudt.org/vocab/unit/WB-PER-M", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WB-PER-MilliM",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    new Decimal("1000.0"),
    undefined,
    undefined,
    "http://qudt.org/vocab/unit/WB-PER-M",
    undefined,
    "Wb/mm",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Weber Per Millimetre", "en"));
  unit.addLabel(new LangString("Weber Per Millimeter", "en-us"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticVectorPotential"
  );
  config.units.set("http://qudt.org/vocab/unit/WB-PER-MilliM", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WIREuro",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CHE",
    947
  );
  unit.addLabel(new LangString("WIR Euro (complementary currency)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/WIREuro", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WIRFranc",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CHW",
    948
  );
  unit.addLabel(new LangString("WIR Franc (complementary currency)", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/WIRFranc", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/WK",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("604800.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "wk",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Week", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/WK", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/XAF",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XAF",
    950
  );
  unit.addLabel(new LangString("CFA Franc BEAC", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/XAF", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/XOF",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XOF",
    952
  );
  unit.addLabel(new LangString("CFA Franc BCEAO", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/XOF", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/XPF",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "XPF",
    953
  );
  unit.addLabel(new LangString("CFP franc", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/XPF", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    new Decimal("0.9144"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Length");
  config.units.set("http://qudt.org/vocab/unit/YD", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD-PER-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    new Decimal("1.6459200164592"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd/°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Yard Per Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/YD-PER-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD2",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    new Decimal("0.83612736"),
    undefined,
    undefined,
    undefined,
    undefined,
    "sqyd",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Square Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Area");
  config.units.set("http://qudt.org/vocab/unit/YD2", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD3",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    new Decimal("0.764554857984"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd³",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Yard", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Volume");
  config.units.set("http://qudt.org/vocab/unit/YD3", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD3-PER-DAY",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00000884901456"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd³/day",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Yard Per Day", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/YD3-PER-DAY", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD3-PER-DEG_F",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    new Decimal("1.376198881991088"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd³/°F",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Yard Per Degree Fahrenheit", "en"));
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion"
  );
  config.units.set("http://qudt.org/vocab/unit/YD3-PER-DEG_F", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD3-PER-HR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.00021237634944"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd³/hr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Yard Per Hour", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/YD3-PER-HR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD3-PER-MIN",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.0127425809664"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd³/min",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Yard per Minute", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  unit.addQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime"
  );
  config.units.set("http://qudt.org/vocab/unit/YD3-PER-MIN", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YD3-PER-SEC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    new Decimal("0.764554857984"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yd³/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Cubic Yard Per Second", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/VolumeFlowRate");
  config.units.set("http://qudt.org/vocab/unit/YD3-PER-SEC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YR",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("31557600.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/YR", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YR_Common",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("31536000.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yr",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Common Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/YR_Common", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YR_Sidereal",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("31558149.7632"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yr{sidereal}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Sidereal Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/YR_Sidereal", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YR_TROPICAL",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    new Decimal("31556925.216"),
    undefined,
    undefined,
    undefined,
    undefined,
    "yr{tropical}",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Tropical Year", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Time");
  config.units.set("http://qudt.org/vocab/unit/YR_TROPICAL", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YemeniRial",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "YER",
    886
  );
  unit.addLabel(new LangString("Yemeni Rial", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/YemeniRial", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YoctoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1E-24"),
    undefined,
    "http://qudt.org/vocab/prefix/Yocto",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "yC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("YoctoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/YoctoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YottaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000000000000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Yotta",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "YC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("YottaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/YottaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/YuanRenminbi",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "CNY",
    156
  );
  unit.addLabel(new LangString("Yuan Renminbi", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/YuanRenminbi", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Z",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "Z",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("atomic-number", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/AtomicNumber");
  config.units.set("http://qudt.org/vocab/unit/Z", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ZambianKwacha",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ZMW",
    967
  );
  unit.addLabel(new LangString("Zambian Kwacha", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ZambianKwacha", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ZeptoC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1E-21"),
    undefined,
    "http://qudt.org/vocab/prefix/Zepto",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "zC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ZeptoCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/ZeptoC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ZettaC",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    new Decimal("1000000000000000000000.0"),
    undefined,
    "http://qudt.org/vocab/prefix/Zetta",
    "http://qudt.org/vocab/unit/C",
    undefined,
    "ZC",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("ZettaCoulomb", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/ElectricCharge");
  config.units.set("http://qudt.org/vocab/unit/ZettaC", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/ZimbabweDollar",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "ZWL",
    932
  );
  unit.addLabel(new LangString("Zimbabwe Dollar", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/ZimbabweDollar", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/Zloty",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    "PLN",
    985
  );
  unit.addLabel(new LangString("Zloty", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Currency");
  config.units.set("http://qudt.org/vocab/unit/Zloty", unit);
  unit = new Unit(
    "http://qudt.org/vocab/unit/failures-in-time",
    undefined,
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    new Decimal("0.0"),
    undefined,
    undefined,
    undefined,
    undefined,
    "failures/s",
    undefined,
    undefined,
    undefined
  );
  unit.addLabel(new LangString("Failures In Time", "en"));
  unit.addQuantityKindIri("http://qudt.org/vocab/quantitykind/Frequency");
  config.units.set("http://qudt.org/vocab/unit/failures-in-time", unit);
}

export const Units = {
  // Millilitre Per Minute
  MilliL__PER__MIN: Qudt.unitFromLocalnameRequired("MilliL-PER-MIN"),
  // WIR Euro (complementary currency)
  WIREuro: Qudt.unitFromLocalnameRequired("WIREuro"),
  // New Zealand Dollar
  NewZealandDollar: Qudt.unitFromLocalnameRequired("NewZealandDollar"),
  // Cubic Meter per Kilogram Square Second
  M3__PER__KiloGM__SEC2: Qudt.unitFromLocalnameRequired("M3-PER-KiloGM-SEC2"),
  // Manat
  Manat: Qudt.unitFromLocalnameRequired("Manat"),
  // Planck Momentum
  PlanckMomentum: Qudt.unitFromLocalnameRequired("PlanckMomentum"),
  // Gram Per Mole
  GM__PER__MOL: Qudt.unitFromLocalnameRequired("GM-PER-MOL"),
  // Gill (UK)
  GI_UK: Qudt.unitFromLocalnameRequired("GI_UK"),
  // Standard Atmosphere
  ATM: Qudt.unitFromLocalnameRequired("ATM"),
  // CentiMOL
  CentiMOL: Qudt.unitFromLocalnameRequired("CentiMOL"),
  // BTU (IT) Inch per Square Foot Second Degree Fahrenheit
  BTU_IT__IN__PER__FT2__SEC__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-IN-PER-FT2-SEC-DEG_F"
  ),
  // Volt Per Inch
  V__PER__IN: Qudt.unitFromLocalnameRequired("V-PER-IN"),
  // Milliroentgen
  MilliR: Qudt.unitFromLocalnameRequired("MilliR"),
  // Mil Angle (NATO)
  MIL: Qudt.unitFromLocalnameRequired("MIL"),
  // Sievert
  SV: Qudt.unitFromLocalnameRequired("SV"),
  // Pound per Hour
  LB__PER__HR: Qudt.unitFromLocalnameRequired("LB-PER-HR"),
  // Microsiemens Per Centimetre
  MicroS__PER__CentiM: Qudt.unitFromLocalnameRequired("MicroS-PER-CentiM"),
  // Mole Per Minute
  MOL__PER__MIN: Qudt.unitFromLocalnameRequired("MOL-PER-MIN"),
  // Centimetre Of Mercury
  CentiM_HG: Qudt.unitFromLocalnameRequired("CentiM_HG"),
  // Reciprocal Weber
  PER__WB: Qudt.unitFromLocalnameRequired("PER-WB"),
  // Siemens Per Centimetre
  S__PER__CentiM: Qudt.unitFromLocalnameRequired("S-PER-CentiM"),
  // Guarani
  Guarani: Qudt.unitFromLocalnameRequired("Guarani"),
  // Russian Ruble
  RussianRuble: Qudt.unitFromLocalnameRequired("RussianRuble"),
  // Solar mass
  SolarMass: Qudt.unitFromLocalnameRequired("SolarMass"),
  // Picograms per kilogram
  PicoGM__PER__KiloGM: Qudt.unitFromLocalnameRequired("PicoGM-PER-KiloGM"),
  // Statohm
  OHM_Stat: Qudt.unitFromLocalnameRequired("OHM_Stat"),
  // Candela per Square Inch
  CD__PER__IN2: Qudt.unitFromLocalnameRequired("CD-PER-IN2"),
  // Femtograms per kilogram
  FemtoGM__PER__KiloGM: Qudt.unitFromLocalnameRequired("FemtoGM-PER-KiloGM"),
  // Cubic Mile
  MI3: Qudt.unitFromLocalnameRequired("MI3"),
  // Kiloweber Per Meter
  KiloWB__PER__M: Qudt.unitFromLocalnameRequired("KiloWB-PER-M"),
  // Degrees Celsius per year
  DEG_C__PER__YR: Qudt.unitFromLocalnameRequired("DEG_C-PER-YR"),
  // AttoCoulomb
  AttoC: Qudt.unitFromLocalnameRequired("AttoC"),
  // Degree Rankine per Hour
  DEG_R__PER__HR: Qudt.unitFromLocalnameRequired("DEG_R-PER-HR"),
  // Gigawatt Hour
  GigaW__HR: Qudt.unitFromLocalnameRequired("GigaW-HR"),
  // Joule
  J: Qudt.unitFromLocalnameRequired("J"),
  // Boiler Horsepower
  HP_Boiler: Qudt.unitFromLocalnameRequired("HP_Boiler"),
  // Quart (UK Liquid) Per Minute
  QT_UK__PER__MIN: Qudt.unitFromLocalnameRequired("QT_UK-PER-MIN"),
  // Becquerels per litre
  BQ__PER__L: Qudt.unitFromLocalnameRequired("BQ-PER-L"),
  // Joule per Mole Kelvin
  J__PER__MOL__K: Qudt.unitFromLocalnameRequired("J-PER-MOL-K"),
  // Gigajoule
  GigaJ: Qudt.unitFromLocalnameRequired("GigaJ"),
  // Hundredweight (UK)
  Hundredweight_UK: Qudt.unitFromLocalnameRequired("Hundredweight_UK"),
  // Foot Candle
  FC: Qudt.unitFromLocalnameRequired("FC"),
  // Exajoule
  ExaJ: Qudt.unitFromLocalnameRequired("ExaJ"),
  // Acre Foot
  AC__FT: Qudt.unitFromLocalnameRequired("AC-FT"),
  // Short Ton per Hour
  TON_SHORT__PER__HR: Qudt.unitFromLocalnameRequired("TON_SHORT-PER-HR"),
  // Degree Celsius per Minute
  DEG_C__PER__MIN: Qudt.unitFromLocalnameRequired("DEG_C-PER-MIN"),
  // Heart Beat
  HeartBeat: Qudt.unitFromLocalnameRequired("HeartBeat"),
  // grams Nitrogen per square meter per day
  GM_Nitrogen__PER__M2__DAY: Qudt.unitFromLocalnameRequired(
    "GM_Nitrogen-PER-M2-DAY"
  ),
  // Milligravity
  MilliG: Qudt.unitFromLocalnameRequired("MilliG"),
  // Millibar Cubic Metre Per Second
  MilliBAR__M3__PER__SEC: Qudt.unitFromLocalnameRequired("MilliBAR-M3-PER-SEC"),
  // Gram Per Square Centimetre
  GM__PER__CentiM2: Qudt.unitFromLocalnameRequired("GM-PER-CentiM2"),
  // astronomical-unit
  AU: Qudt.unitFromLocalnameRequired("AU"),
  // Barrel (US Petroleum) Per Hour
  BBL_US_PET__PER__HR: Qudt.unitFromLocalnameRequired("BBL_US_PET-PER-HR"),
  // Hundredweight (US)
  Hundredweight_US: Qudt.unitFromLocalnameRequired("Hundredweight_US"),
  // Kilolitre
  KiloL: Qudt.unitFromLocalnameRequired("KiloL"),
  // Watt per Square Meter Kelvin
  W__PER__M2__K: Qudt.unitFromLocalnameRequired("W-PER-M2-K"),
  // Comoro Franc
  ComoroFranc: Qudt.unitFromLocalnameRequired("ComoroFranc"),
  // Kilogram Per Kilomol
  KiloGM__PER__KiloMOL: Qudt.unitFromLocalnameRequired("KiloGM-PER-KiloMOL"),
  // Weber Per Millimetre
  WB__PER__MilliM: Qudt.unitFromLocalnameRequired("WB-PER-MilliM"),
  // Curie
  Ci: Qudt.unitFromLocalnameRequired("Ci"),
  // Square Millimeter Per Second
  MilliM2__PER__SEC: Qudt.unitFromLocalnameRequired("MilliM2-PER-SEC"),
  // Gram Per Minute
  GM__PER__MIN: Qudt.unitFromLocalnameRequired("GM-PER-MIN"),
  // T-M
  T__M: Qudt.unitFromLocalnameRequired("T-M"),
  // Nanomoles per litre
  NanoMOL__PER__L: Qudt.unitFromLocalnameRequired("NanoMOL-PER-L"),
  // Degree Celsius
  DEG_C: Qudt.unitFromLocalnameRequired("DEG_C"),
  // Parts per Ten Million
  PPTM: Qudt.unitFromLocalnameRequired("PPTM"),
  // Reciprocal Bar
  PER__BAR: Qudt.unitFromLocalnameRequired("PER-BAR"),
  // Kilogram per Second
  KiloGM__PER__SEC: Qudt.unitFromLocalnameRequired("KiloGM-PER-SEC"),
  // Psi Cubic Inch Per Second
  PSI__IN3__PER__SEC: Qudt.unitFromLocalnameRequired("PSI-IN3-PER-SEC"),
  // Newton Square Metre
  N__M2: Qudt.unitFromLocalnameRequired("N-M2"),
  // British Thermal Unit (Thermochemical Definition)
  BTU_TH: Qudt.unitFromLocalnameRequired("BTU_TH"),
  // Dyne Per Centimetre
  DYN__PER__CentiM: Qudt.unitFromLocalnameRequired("DYN-PER-CentiM"),
  // Platinum (one Troy ounce)
  Platinum__OunceTroy: Qudt.unitFromLocalnameRequired("Platinum-OunceTroy"),
  // Lumen per Watt
  LM__PER__W: Qudt.unitFromLocalnameRequired("LM-PER-W"),
  // Fathom
  FATH: Qudt.unitFromLocalnameRequired("FATH"),
  // Ounce (avoirdupois) Per Minute
  OZ__PER__MIN: Qudt.unitFromLocalnameRequired("OZ-PER-MIN"),
  // Reciprocal Kilovolt Ampere Hour
  PER__KiloV__A__HR: Qudt.unitFromLocalnameRequired("PER-KiloV-A-HR"),
  // Dalasi
  Dalasi: Qudt.unitFromLocalnameRequired("Dalasi"),
  // Kilogram Per Minute
  KiloGM__PER__MIN: Qudt.unitFromLocalnameRequired("KiloGM-PER-MIN"),
  // Pascal Second Per Cubic Metre
  PA__SEC__PER__M3: Qudt.unitFromLocalnameRequired("PA-SEC-PER-M3"),
  // Djibouti Franc
  DjiboutiFranc: Qudt.unitFromLocalnameRequired("DjiboutiFranc"),
  // Unidades de formento (Funds code)
  UnidadesDeFormento: Qudt.unitFromLocalnameRequired("UnidadesDeFormento"),
  // Centigram
  CentiGM: Qudt.unitFromLocalnameRequired("CentiGM"),
  // Reads Per Kilobase
  RPK: Qudt.unitFromLocalnameRequired("RPK"),
  // WIR Franc (complementary currency)
  WIRFranc: Qudt.unitFromLocalnameRequired("WIRFranc"),
  // Unified Atomic Mass Unit
  U: Qudt.unitFromLocalnameRequired("U"),
  // Parts Per Ten Million per Kelvin
  PPTM__PER__K: Qudt.unitFromLocalnameRequired("PPTM-PER-K"),
  // Joule Per Second
  J__PER__SEC: Qudt.unitFromLocalnameRequired("J-PER-SEC"),
  // BTU Foot
  BTU_IT__FT: Qudt.unitFromLocalnameRequired("BTU_IT-FT"),
  // Coulomb Square Metre Per Volt
  C__M2__PER__V: Qudt.unitFromLocalnameRequired("C-M2-PER-V"),
  // Pound per Cubic Meter
  LB__PER__M3: Qudt.unitFromLocalnameRequired("LB-PER-M3"),
  // British Thermal Unit (international Table) Inch Per Hour Square Foot Degree Fahrenheit
  BTU_IT__IN__PER__FT2__HR__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-IN-PER-FT2-HR-DEG_F"
  ),
  // Cubic Metre per Kelvin
  M3__PER__K: Qudt.unitFromLocalnameRequired("M3-PER-K"),
  // Yard Per Degree Fahrenheit
  YD__PER__DEG_F: Qudt.unitFromLocalnameRequired("YD-PER-DEG_F"),
  // Imperial Ounce Force
  OZ_F: Qudt.unitFromLocalnameRequired("OZ_F"),
  // Square Metre per Steradian Joule
  M2__PER__SR__J: Qudt.unitFromLocalnameRequired("M2-PER-SR-J"),
  // lumen
  LM: Qudt.unitFromLocalnameRequired("LM"),
  // Milligram Per Hour
  MilliGM__PER__HR: Qudt.unitFromLocalnameRequired("MilliGM-PER-HR"),
  // GibiByte
  GibiBYTE: Qudt.unitFromLocalnameRequired("GibiBYTE"),
  // Pa'anga
  Paanga: Qudt.unitFromLocalnameRequired("Paanga"),
  // Decibel Referred to 1mw
  DeciB_M: Qudt.unitFromLocalnameRequired("DeciB_M"),
  // Pound per Minute
  LB__PER__MIN: Qudt.unitFromLocalnameRequired("LB-PER-MIN"),
  // Lek
  Lek: Qudt.unitFromLocalnameRequired("Lek"),
  // Ampere Hour
  A__HR: Qudt.unitFromLocalnameRequired("A-HR"),
  // Abvolt per centimeter
  V_Ab__PER__CentiM: Qudt.unitFromLocalnameRequired("V_Ab-PER-CentiM"),
  // Milligram Per Gram
  MilliGM__PER__GM: Qudt.unitFromLocalnameRequired("MilliGM-PER-GM"),
  // GM_DRY
  GM_DRY: Qudt.unitFromLocalnameRequired("GM_DRY"),
  // U.S. Perm
  PERM_Metric: Qudt.unitFromLocalnameRequired("PERM_Metric"),
  // British Thermal Unit (international Table) Per Pound Degree Rankine
  BTU_IT__PER__LB_F__DEG_R: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-LB_F-DEG_R"
  ),
  // Erg Per Centimeter
  ERG__PER__CentiM: Qudt.unitFromLocalnameRequired("ERG-PER-CentiM"),
  // Dots Per Inch
  DPI: Qudt.unitFromLocalnameRequired("DPI"),
  // Reciprocal Mille Per Psi
  PER__MILLE__PER__PSI: Qudt.unitFromLocalnameRequired("PER-MILLE-PER-PSI"),
  // Microfarad Per Meter
  MicroFARAD__PER__M: Qudt.unitFromLocalnameRequired("MicroFARAD-PER-M"),
  // Micromole per micromole of biomass per day
  MicroMOL__PER__MicroMOL__DAY: Qudt.unitFromLocalnameRequired(
    "MicroMOL-PER-MicroMOL-DAY"
  ),
  // Lambert
  LA: Qudt.unitFromLocalnameRequired("LA"),
  // Megavolt Ampere Reactive Hour
  MegaV__A_Reactive__HR: Qudt.unitFromLocalnameRequired("MegaV-A_Reactive-HR"),
  // MilliCoulomb
  MilliC: Qudt.unitFromLocalnameRequired("MilliC"),
  // Kelvin per Tesla
  K__PER__T: Qudt.unitFromLocalnameRequired("K-PER-T"),
  // International Unit
  IU: Qudt.unitFromLocalnameRequired("IU"),
  // Millimoles per square metre per second
  MilliMOL__PER__M2__SEC: Qudt.unitFromLocalnameRequired("MilliMOL-PER-M2-SEC"),
  // Acre
  AC: Qudt.unitFromLocalnameRequired("AC"),
  // Millinewton Meter
  MilliN__M: Qudt.unitFromLocalnameRequired("MilliN-M"),
  // Peck (US Dry) Per Day
  PK_US_DRY__PER__DAY: Qudt.unitFromLocalnameRequired("PK_US_DRY-PER-DAY"),
  // FemtoCoulomb
  FemtoC: Qudt.unitFromLocalnameRequired("FemtoC"),
  // Kilo Byte
  KiloBYTE: Qudt.unitFromLocalnameRequired("KiloBYTE"),
  // Volt Ampere Reactive
  V__A_Reactive: Qudt.unitFromLocalnameRequired("V-A_Reactive"),
  // Reciprocal Second Steradian
  PER__SEC__SR: Qudt.unitFromLocalnameRequired("PER-SEC-SR"),
  // Peck (UK)
  PK_UK: Qudt.unitFromLocalnameRequired("PK_UK"),
  // Millitesla
  MilliT: Qudt.unitFromLocalnameRequired("MilliT"),
  // MilliSiemens per metre
  MilliS__PER__M: Qudt.unitFromLocalnameRequired("MilliS-PER-M"),
  // Ounce (UK Fluid) Per Day
  OZ_VOL_UK__PER__DAY: Qudt.unitFromLocalnameRequired("OZ_VOL_UK-PER-DAY"),
  // Statcoulomb
  C_Stat: Qudt.unitFromLocalnameRequired("C_Stat"),
  // atomic-number
  Z: Qudt.unitFromLocalnameRequired("Z"),
  // Gram Per Millilitre
  GM__PER__MilliL: Qudt.unitFromLocalnameRequired("GM-PER-MilliL"),
  // Nanobecquerels per litre
  NanoBQ__PER__L: Qudt.unitFromLocalnameRequired("NanoBQ-PER-L"),
  // Square Metre
  M2: Qudt.unitFromLocalnameRequired("M2"),
  // Degree per Second
  DEG__PER__SEC: Qudt.unitFromLocalnameRequired("DEG-PER-SEC"),
  // New Taiwan Dollar
  NewTaiwanDollar: Qudt.unitFromLocalnameRequired("NewTaiwanDollar"),
  // Newton Metre per Metre per Radians
  N__M__PER__M__RAD: Qudt.unitFromLocalnameRequired("N-M-PER-M-RAD"),
  // Cubic Foot Per Degree Fahrenheit
  FT3__PER__DEG_F: Qudt.unitFromLocalnameRequired("FT3-PER-DEG_F"),
  // Square Mile
  MI2: Qudt.unitFromLocalnameRequired("MI2"),
  // Megabecquerel
  MegaBQ: Qudt.unitFromLocalnameRequired("MegaBQ"),
  // Joule per Kilogram Kelvin per Pascal
  J__PER__KiloGM__K__PA: Qudt.unitFromLocalnameRequired("J-PER-KiloGM-K-PA"),
  // Megajoule Per Square Metre
  MegaJ__PER__M2: Qudt.unitFromLocalnameRequired("MegaJ-PER-M2"),
  // Tonne Per Day
  TONNE__PER__DAY: Qudt.unitFromLocalnameRequired("TONNE-PER-DAY"),
  // Coulomb Per Kilogram Second
  C__PER__KiloGM__SEC: Qudt.unitFromLocalnameRequired("C-PER-KiloGM-SEC"),
  // PetaCoulomb
  PetaC: Qudt.unitFromLocalnameRequired("PetaC"),
  // Newton per Kilogram
  N__PER__KiloGM: Qudt.unitFromLocalnameRequired("N-PER-KiloGM"),
  // Teraohm
  TeraOHM: Qudt.unitFromLocalnameRequired("TeraOHM"),
  // Picomoles per litre
  PicoMOL__PER__L: Qudt.unitFromLocalnameRequired("PicoMOL-PER-L"),
  // Terawatt
  TeraW: Qudt.unitFromLocalnameRequired("TeraW"),
  // Kilogram per Hectare
  KiloGM__PER__HA: Qudt.unitFromLocalnameRequired("KiloGM-PER-HA"),
  // Millimeter Per Hour
  MilliM__PER__HR: Qudt.unitFromLocalnameRequired("MilliM-PER-HR"),
  // Newton Metre Second
  N__M__SEC: Qudt.unitFromLocalnameRequired("N-M-SEC"),
  // Day
  DAY: Qudt.unitFromLocalnameRequired("DAY"),
  // Seconds per metre
  SEC__PER__M: Qudt.unitFromLocalnameRequired("SEC-PER-M"),
  // US Survey Foot
  FT_US: Qudt.unitFromLocalnameRequired("FT_US"),
  // Megawatt Hour
  MegaW__HR: Qudt.unitFromLocalnameRequired("MegaW-HR"),
  // square meters per hectare
  M2__PER__HA: Qudt.unitFromLocalnameRequired("M2-PER-HA"),
  // Statvolt
  V_Stat: Qudt.unitFromLocalnameRequired("V_Stat"),
  // Number per milligram
  NUM__PER__MilliGM: Qudt.unitFromLocalnameRequired("NUM-PER-MilliGM"),
  // Abampere
  A_Ab: Qudt.unitFromLocalnameRequired("A_Ab"),
  // MilliTorr
  MilliTORR: Qudt.unitFromLocalnameRequired("MilliTORR"),
  // Kip per Square Inch
  KIP_F__PER__IN2: Qudt.unitFromLocalnameRequired("KIP_F-PER-IN2"),
  // Statvolt per Centimeter
  V_Stat__PER__CentiM: Qudt.unitFromLocalnameRequired("V_Stat-PER-CentiM"),
  // Moldovan Leu
  MoldovanLeu: Qudt.unitFromLocalnameRequired("MoldovanLeu"),
  // Mega Hertz per Tesla
  MegaHZ__PER__T: Qudt.unitFromLocalnameRequired("MegaHZ-PER-T"),
  // Cubic Inch
  IN3: Qudt.unitFromLocalnameRequired("IN3"),
  // TebiByte
  TebiBYTE: Qudt.unitFromLocalnameRequired("TebiBYTE"),
  // Kilometres per day
  KiloM__PER__DAY: Qudt.unitFromLocalnameRequired("KiloM-PER-DAY"),
  // Millilitre Per Hour
  MilliL__PER__HR: Qudt.unitFromLocalnameRequired("MilliL-PER-HR"),
  // Reciprocal Metre Kelvin
  PER__M__K: Qudt.unitFromLocalnameRequired("PER-M-K"),
  // Microtesla
  MicroT: Qudt.unitFromLocalnameRequired("MicroT"),
  // Ampere per Radian
  A__PER__RAD: Qudt.unitFromLocalnameRequired("A-PER-RAD"),
  // Dyne Centimeter
  DYN__CentiM: Qudt.unitFromLocalnameRequired("DYN-CentiM"),
  // DeciTonne
  DeciTONNE: Qudt.unitFromLocalnameRequired("DeciTONNE"),
  // Volt per second
  V__PER__SEC: Qudt.unitFromLocalnameRequired("V-PER-SEC"),
  // Square Kilograms per square second
  KiloGM2__PER__SEC2: Qudt.unitFromLocalnameRequired("KiloGM2-PER-SEC2"),
  // Solomon Islands Dollar
  SolomonIslandsDollar: Qudt.unitFromLocalnameRequired("SolomonIslandsDollar"),
  // Kilocoulomb Per Cubic Meter
  KiloC__PER__M3: Qudt.unitFromLocalnameRequired("KiloC-PER-M3"),
  // Kilogram
  KiloGM: Qudt.unitFromLocalnameRequired("KiloGM"),
  // Ampere Turn
  AT: Qudt.unitFromLocalnameRequired("AT"),
  // Terawatt Hour
  TeraW__HR: Qudt.unitFromLocalnameRequired("TeraW-HR"),
  // Stokes
  ST: Qudt.unitFromLocalnameRequired("ST"),
  // Mole Kelvin
  MOL__K: Qudt.unitFromLocalnameRequired("MOL-K"),
  // Rupiah
  Rupiah: Qudt.unitFromLocalnameRequired("Rupiah"),
  // Degree Celsius per Hour
  DEG_C__PER__HR: Qudt.unitFromLocalnameRequired("DEG_C-PER-HR"),
  // Grad
  GRAD: Qudt.unitFromLocalnameRequired("GRAD"),
  // MilliBQ
  MilliBQ: Qudt.unitFromLocalnameRequired("MilliBQ"),
  // Mesh
  MESH: Qudt.unitFromLocalnameRequired("MESH"),
  // A_Reactive
  A_Reactive: Qudt.unitFromLocalnameRequired("A_Reactive"),
  // Reciprocal Centimeter
  PER__CentiM: Qudt.unitFromLocalnameRequired("PER-CentiM"),
  // Barrel (UK Petroleum) Per Second
  BBL_UK_PET__PER__SEC: Qudt.unitFromLocalnameRequired("BBL_UK_PET-PER-SEC"),
  // Reciprocal millisecond
  PER__MilliSEC: Qudt.unitFromLocalnameRequired("PER-MilliSEC"),
  // Inverse Square Planck Mass
  PER__PlanckMass2: Qudt.unitFromLocalnameRequired("PER-PlanckMass2"),
  // Kilocalorie per Square Centimeter
  KiloCAL__PER__CentiM2: Qudt.unitFromLocalnameRequired("KiloCAL-PER-CentiM2"),
  // Picopascal Per Kilometre
  PicoPA__PER__KiloM: Qudt.unitFromLocalnameRequired("PicoPA-PER-KiloM"),
  // Millibar Litre Per Second
  MilliBAR__L__PER__SEC: Qudt.unitFromLocalnameRequired("MilliBAR-L-PER-SEC"),
  // Foot per Second
  FT__PER__SEC: Qudt.unitFromLocalnameRequired("FT-PER-SEC"),
  // Femtomoles per kilogram
  FemtoMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("FemtoMOL-PER-KiloGM"),
  // Degree Oechsle
  DEGREE_OECHSLE: Qudt.unitFromLocalnameRequired("DEGREE_OECHSLE"),
  // Psi Per Psi
  PSI__PER__PSI: Qudt.unitFromLocalnameRequired("PSI-PER-PSI"),
  // Norwegian Krone
  NorwegianKrone: Qudt.unitFromLocalnameRequired("NorwegianKrone"),
  // Reciprocal gram
  PER__GM: Qudt.unitFromLocalnameRequired("PER-GM"),
  // Becquerel
  BQ: Qudt.unitFromLocalnameRequired("BQ"),
  // Somali Shilling
  SomaliShilling: Qudt.unitFromLocalnameRequired("SomaliShilling"),
  // Falkland Islands Pound
  FalklandIslandsPound: Qudt.unitFromLocalnameRequired("FalklandIslandsPound"),
  // Millimole Per Gram
  MilliMOL__PER__GM: Qudt.unitFromLocalnameRequired("MilliMOL-PER-GM"),
  // Joule per Kilogram
  J__PER__KiloGM: Qudt.unitFromLocalnameRequired("J-PER-KiloGM"),
  // Kelvin day
  K__DAY: Qudt.unitFromLocalnameRequired("K-DAY"),
  // North Korean Won
  NorthKoreanWon: Qudt.unitFromLocalnameRequired("NorthKoreanWon"),
  // Ounce (US Fluid) Per Day
  OZ_VOL_US__PER__DAY: Qudt.unitFromLocalnameRequired("OZ_VOL_US-PER-DAY"),
  // Pascal Second Per Bar
  PA__SEC__PER__BAR: Qudt.unitFromLocalnameRequired("PA-SEC-PER-BAR"),
  // Pound Force Foot Per Ampere
  KiloLB_F__FT__PER__A: Qudt.unitFromLocalnameRequired("KiloLB_F-FT-PER-A"),
  // Hundred Weight - Short
  CWT_SHORT: Qudt.unitFromLocalnameRequired("CWT_SHORT"),
  // Pint (UK) Per Day
  PINT_UK__PER__DAY: Qudt.unitFromLocalnameRequired("PINT_UK-PER-DAY"),
  // Parts per thousand per hour
  PPTH__PER__HR: Qudt.unitFromLocalnameRequired("PPTH-PER-HR"),
  // Singapore Dollar
  SingaporeDollar: Qudt.unitFromLocalnameRequired("SingaporeDollar"),
  // Ounce (US Fluid) Per Hour
  OZ_VOL_US__PER__HR: Qudt.unitFromLocalnameRequired("OZ_VOL_US-PER-HR"),
  // Shannon per Second
  SHANNON__PER__SEC: Qudt.unitFromLocalnameRequired("SHANNON-PER-SEC"),
  // Maxwell
  MX: Qudt.unitFromLocalnameRequired("MX"),
  // British Thermal Unit (IT) Per Cubic Foot
  BTU_IT__PER__FT3: Qudt.unitFromLocalnameRequired("BTU_IT-PER-FT3"),
  // Nanomoles per gram per second
  NanoMOL__PER__GM__SEC: Qudt.unitFromLocalnameRequired("NanoMOL-PER-GM-SEC"),
  // Argentine Peso
  ARS: Qudt.unitFromLocalnameRequired("ARS"),
  // MilliGals per month
  MilliGAL__PER__MO: Qudt.unitFromLocalnameRequired("MilliGAL-PER-MO"),
  // Megajoule Per Kilogram
  MegaJ__PER__KiloGM: Qudt.unitFromLocalnameRequired("MegaJ-PER-KiloGM"),
  // Lux Hour
  LUX__HR: Qudt.unitFromLocalnameRequired("LUX-HR"),
  // Millilitre Per Second
  MilliL__PER__SEC: Qudt.unitFromLocalnameRequired("MilliL-PER-SEC"),
  // Metric Ton
  TON_Metric: Qudt.unitFromLocalnameRequired("TON_Metric"),
  // BTU per Pound Mole
  BTU_IT__PER__LB__MOL: Qudt.unitFromLocalnameRequired("BTU_IT-PER-LB-MOL"),
  // Megalitre
  MegaL: Qudt.unitFromLocalnameRequired("MegaL"),
  // Abvolt
  V_Ab: Qudt.unitFromLocalnameRequired("V_Ab"),
  // Mile US Statute
  MI_US: Qudt.unitFromLocalnameRequired("MI_US"),
  // Cedi
  Cedi: Qudt.unitFromLocalnameRequired("Cedi"),
  // Decagram
  DecaGM: Qudt.unitFromLocalnameRequired("DecaGM"),
  // Ampere Turn per Inch
  AT__PER__IN: Qudt.unitFromLocalnameRequired("AT-PER-IN"),
  // Poise Per Bar
  POISE__PER__BAR: Qudt.unitFromLocalnameRequired("POISE-PER-BAR"),
  // US Dry Quart
  QT_US_DRY: Qudt.unitFromLocalnameRequired("QT_US_DRY"),
  // Milligrams per square metre per second
  MilliGM__PER__M2__SEC: Qudt.unitFromLocalnameRequired("MilliGM-PER-M2-SEC"),
  // Number per microlitre
  NUM__PER__MicroL: Qudt.unitFromLocalnameRequired("NUM-PER-MicroL"),
  // Imperial Pint
  PINT: Qudt.unitFromLocalnameRequired("PINT"),
  // Bit per Second
  BIT__PER__SEC: Qudt.unitFromLocalnameRequired("BIT-PER-SEC"),
  // Degree Fahrenheit Hour
  DEG_F__HR: Qudt.unitFromLocalnameRequired("DEG_F-HR"),
  // Barrel (UK Petroleum) Per Minute
  BBL_UK_PET__PER__MIN: Qudt.unitFromLocalnameRequired("BBL_UK_PET-PER-MIN"),
  // Minute
  MIN: Qudt.unitFromLocalnameRequired("MIN"),
  // Hartley per Second
  HART__PER__SEC: Qudt.unitFromLocalnameRequired("HART-PER-SEC"),
  // Foot Poundal
  FT__PDL: Qudt.unitFromLocalnameRequired("FT-PDL"),
  // Millimoles per square metre per day
  MilliMOL__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MilliMOL-PER-M2-DAY"),
  // Millibecquerels per kilogram
  MilliBQ__PER__KiloGM: Qudt.unitFromLocalnameRequired("MilliBQ-PER-KiloGM"),
  // Uzbekistan Som
  UzbekistanSom: Qudt.unitFromLocalnameRequired("UzbekistanSom"),
  // Gray
  GRAY: Qudt.unitFromLocalnameRequired("GRAY"),
  // Planck Energy
  PlanckEnergy: Qudt.unitFromLocalnameRequired("PlanckEnergy"),
  // YoctoCoulomb
  YoctoC: Qudt.unitFromLocalnameRequired("YoctoC"),
  // Poundal
  PDL: Qudt.unitFromLocalnameRequired("PDL"),
  // Ton (US Shipping)
  TON_SHIPPING_US: Qudt.unitFromLocalnameRequired("TON_SHIPPING_US"),
  // Elementary Charge
  E: Qudt.unitFromLocalnameRequired("E"),
  // Kilogauss
  KiloGAUSS: Qudt.unitFromLocalnameRequired("KiloGAUSS"),
  // Malaysian Ringgit
  MalaysianRinggit: Qudt.unitFromLocalnameRequired("MalaysianRinggit"),
  // Foot Pound Force per Square Foot Second
  FT__LB_F__PER__FT2__SEC: Qudt.unitFromLocalnameRequired(
    "FT-LB_F-PER-FT2-SEC"
  ),
  // Micromoles per square metre per hour
  MicroMOL__PER__M2__HR: Qudt.unitFromLocalnameRequired("MicroMOL-PER-M2-HR"),
  // Microfarad Per Kilometre
  MicroFARAD__PER__KiloM: Qudt.unitFromLocalnameRequired(
    "MicroFARAD-PER-KiloM"
  ),
  // Degree per Hour
  DEG__PER__HR: Qudt.unitFromLocalnameRequired("DEG-PER-HR"),
  // Volt Ampere Hour
  V__A__HR: Qudt.unitFromLocalnameRequired("V-A-HR"),
  // Quart (US Liquid) Per Second
  QT_US__PER__SEC: Qudt.unitFromLocalnameRequired("QT_US-PER-SEC"),
  // Square centimetres per cubic centimetre
  CentiM2__PER__CentiM3: Qudt.unitFromLocalnameRequired("CentiM2-PER-CentiM3"),
  // Hartley
  HART: Qudt.unitFromLocalnameRequired("HART"),
  // Millicoulomb Per Kilogram
  MilliC__PER__KiloGM: Qudt.unitFromLocalnameRequired("MilliC-PER-KiloGM"),
  // Bar Per Bar
  BAR__PER__BAR: Qudt.unitFromLocalnameRequired("BAR-PER-BAR"),
  // Thermochemical Calorie
  CAL_TH: Qudt.unitFromLocalnameRequired("CAL_TH"),
  // Calorie (thermochemical) Per Gram Kelvin
  CAL_TH__PER__GM__K: Qudt.unitFromLocalnameRequired("CAL_TH-PER-GM-K"),
  // Kilometre
  KiloM: Qudt.unitFromLocalnameRequired("KiloM"),
  // Phot
  PHOT: Qudt.unitFromLocalnameRequired("PHOT"),
  // BTU (TH) Foot per Square Foot Hour Degree Fahrenheit
  BTU_TH__FT__PER__FT2__HR__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_TH-FT-PER-FT2-HR-DEG_F"
  ),
  // Erg Second
  ERG__SEC: Qudt.unitFromLocalnameRequired("ERG-SEC"),
  // Ohm Meter
  OHM__M: Qudt.unitFromLocalnameRequired("OHM-M"),
  // Kilogram Force
  KiloGM_F: Qudt.unitFromLocalnameRequired("KiloGM_F"),
  // Barrel (US Petroleum) Per Second
  BBL_US_PET__PER__SEC: Qudt.unitFromLocalnameRequired("BBL_US_PET-PER-SEC"),
  // BTU (IT) per Degree Fahrenheit
  BTU_IT__PER__DEG_F: Qudt.unitFromLocalnameRequired("BTU_IT-PER-DEG_F"),
  // Tenge
  Tenge: Qudt.unitFromLocalnameRequired("Tenge"),
  // Radian per Square Second
  RAD__PER__SEC2: Qudt.unitFromLocalnameRequired("RAD-PER-SEC2"),
  // Newton Metre Per Ampere
  N__M__PER__A: Qudt.unitFromLocalnameRequired("N-M-PER-A"),
  // Pound Mass (avoirdupois) Square Inch
  LB__IN2: Qudt.unitFromLocalnameRequired("LB-IN2"),
  // Moles per square metre per second
  MOL__PER__M2__SEC: Qudt.unitFromLocalnameRequired("MOL-PER-M2-SEC"),
  // Decilitre Per Gram
  DeciL__PER__GM: Qudt.unitFromLocalnameRequired("DeciL-PER-GM"),
  // Square Second
  SEC2: Qudt.unitFromLocalnameRequired("SEC2"),
  // Reciprocal Square Meter
  PER__M2: Qudt.unitFromLocalnameRequired("PER-M2"),
  // Planck Angular Frequency
  PlanckFrequency_Ang: Qudt.unitFromLocalnameRequired("PlanckFrequency_Ang"),
  // Nanograms per microlitre
  NanoGM__PER__MicroL: Qudt.unitFromLocalnameRequired("NanoGM-PER-MicroL"),
  // Watt per Square Meter Quartic Kelvin
  W__PER__M2__K4: Qudt.unitFromLocalnameRequired("W-PER-M2-K4"),
  // Hectare
  HA: Qudt.unitFromLocalnameRequired("HA"),
  // Foot Pound Force Second
  FT__LB_F__SEC: Qudt.unitFromLocalnameRequired("FT-LB_F-SEC"),
  // Long Ton (UK) Per Cubic Yard
  TON_UK__PER__YD3: Qudt.unitFromLocalnameRequired("TON_UK-PER-YD3"),
  // Kroon
  Kroon: Qudt.unitFromLocalnameRequired("Kroon"),
  // Millimeter Per Minute
  MilliM__PER__MIN: Qudt.unitFromLocalnameRequired("MilliM-PER-MIN"),
  // Barrel (UK Petroleum)
  BBL_UK_PET: Qudt.unitFromLocalnameRequired("BBL_UK_PET"),
  // Litre Per Litre
  L__PER__L: Qudt.unitFromLocalnameRequired("L-PER-L"),
  // Vatu
  Vatu: Qudt.unitFromLocalnameRequired("Vatu"),
  // Megajoule Per Cubic Metre
  MegaJ__PER__M3: Qudt.unitFromLocalnameRequired("MegaJ-PER-M3"),
  // decisiemens per metre
  DeciS__PER__M: Qudt.unitFromLocalnameRequired("DeciS-PER-M"),
  // Lebanese Pound
  LebanesePound: Qudt.unitFromLocalnameRequired("LebanesePound"),
  // Nanometer Per Millimeter Megapascal
  NanoM__PER__MilliM__MegaPA: Qudt.unitFromLocalnameRequired(
    "NanoM-PER-MilliM-MegaPA"
  ),
  // Uganda Shilling
  UgandaShilling: Qudt.unitFromLocalnameRequired("UgandaShilling"),
  // Percent
  PERCENT: Qudt.unitFromLocalnameRequired("PERCENT"),
  // Kilograms per metre per square second
  KiloGM__PER__M__SEC2: Qudt.unitFromLocalnameRequired("KiloGM-PER-M-SEC2"),
  // Degree Fahrenheit Hour per BTU
  DEG_F__HR__PER__BTU_IT: Qudt.unitFromLocalnameRequired("DEG_F-HR-PER-BTU_IT"),
  // Watts per metre
  W__PER__M: Qudt.unitFromLocalnameRequired("W-PER-M"),
  // Volt Ampere
  V__A: Qudt.unitFromLocalnameRequired("V-A"),
  // Reciprocal Cubic Foot
  PER__FT3: Qudt.unitFromLocalnameRequired("PER-FT3"),
  // Nanograms
  NanoGM: Qudt.unitFromLocalnameRequired("NanoGM"),
  // Planck Volume
  PlanckVolume: Qudt.unitFromLocalnameRequired("PlanckVolume"),
  // FLIGHT
  FLIGHT: Qudt.unitFromLocalnameRequired("FLIGHT"),
  // Bar Per Kelvin
  BAR__PER__K: Qudt.unitFromLocalnameRequired("BAR-PER-K"),
  // Stere
  STR: Qudt.unitFromLocalnameRequired("STR"),
  // Hertz per Volt
  HZ__PER__V: Qudt.unitFromLocalnameRequired("HZ-PER-V"),
  // Mol per Kilogram
  MOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("MOL-PER-KiloGM"),
  // Kilopascal Absolute
  KiloPA_A: Qudt.unitFromLocalnameRequired("KiloPA_A"),
  // Kilobyte per Second
  KiloBYTE__PER__SEC: Qudt.unitFromLocalnameRequired("KiloBYTE-PER-SEC"),
  // Centimetre Per Hour
  CentiM__PER__HR: Qudt.unitFromLocalnameRequired("CentiM-PER-HR"),
  // Kilobar
  KiloBAR: Qudt.unitFromLocalnameRequired("KiloBAR"),
  // Ton Energy
  TonEnergy: Qudt.unitFromLocalnameRequired("TonEnergy"),
  // Armenian Dram
  AMD: Qudt.unitFromLocalnameRequired("AMD"),
  // Reciprocal Second Square Meter
  PER__SEC__M2: Qudt.unitFromLocalnameRequired("PER-SEC-M2"),
  // YottaCoulomb
  YottaC: Qudt.unitFromLocalnameRequired("YottaC"),
  // European Composite Unit (EURCO) (Bonds market unit)
  EuropeanCompositeUnit: Qudt.unitFromLocalnameRequired(
    "EuropeanCompositeUnit"
  ),
  // Cubic Kilometer per Square Second
  KiloM3__PER__SEC2: Qudt.unitFromLocalnameRequired("KiloM3-PER-SEC2"),
  // Joule per Kelvin
  J__PER__K: Qudt.unitFromLocalnameRequired("J-PER-K"),
  // KiloCoulomb
  KiloC: Qudt.unitFromLocalnameRequired("KiloC"),
  // Kilogram Kelvin
  KiloGM__K: Qudt.unitFromLocalnameRequired("KiloGM-K"),
  // Degree Baume (origin Scale)
  DEGREE_BAUME: Qudt.unitFromLocalnameRequired("DEGREE_BAUME"),
  // Bahraini Dinar
  BHD: Qudt.unitFromLocalnameRequired("BHD"),
  // Kilogram Force per Square Centimetre
  KiloGM_F__PER__CentiM2: Qudt.unitFromLocalnameRequired(
    "KiloGM_F-PER-CentiM2"
  ),
  // Relative Permittivity
  PERMITTIVITY_REL: Qudt.unitFromLocalnameRequired("PERMITTIVITY_REL"),
  // Kilogram?force Metre Per Second
  KiloGM_F__M__PER__SEC: Qudt.unitFromLocalnameRequired("KiloGM_F-M-PER-SEC"),
  // Picomoles per square metre per day
  PicoMOL__PER__M2__DAY: Qudt.unitFromLocalnameRequired("PicoMOL-PER-M2-DAY"),
  // Nanosiemens Per Metre
  NanoS__PER__M: Qudt.unitFromLocalnameRequired("NanoS-PER-M"),
  // Nanofarad Per Meter
  NanoFARAD__PER__M: Qudt.unitFromLocalnameRequired("NanoFARAD-PER-M"),
  // Peck (UK) Per Minute
  PK_UK__PER__MIN: Qudt.unitFromLocalnameRequired("PK_UK-PER-MIN"),
  // Coulomb per Cubic Metre
  C__PER__M3: Qudt.unitFromLocalnameRequired("C-PER-M3"),
  // Nephelometry Turbidity Unit
  NTU: Qudt.unitFromLocalnameRequired("NTU"),
  // Number per individual per hour
  NUM__PER__HR: Qudt.unitFromLocalnameRequired("NUM-PER-HR"),
  // Parsec
  PARSEC: Qudt.unitFromLocalnameRequired("PARSEC"),
  // Millilitre Per Cubic Metre
  MilliL__PER__M3: Qudt.unitFromLocalnameRequired("MilliL-PER-M3"),
  // Pint (US Liquid) Per Day
  PINT_US__PER__DAY: Qudt.unitFromLocalnameRequired("PINT_US-PER-DAY"),
  // Calorie (thermochemical) Per Gram
  CAL_TH__PER__GM: Qudt.unitFromLocalnameRequired("CAL_TH-PER-GM"),
  // Silver (one Troy ounce)
  Silver__OunceTroy: Qudt.unitFromLocalnameRequired("Silver-OunceTroy"),
  // Pound (avoirdupois) Per Square Inch
  LB__PER__IN2: Qudt.unitFromLocalnameRequired("LB-PER-IN2"),
  // Watts per square metre per metre
  W__PER__M2__M: Qudt.unitFromLocalnameRequired("W-PER-M2-M"),
  // British Thermal Unit (thermochemical) Per Hour
  BTU_TH__PER__HR: Qudt.unitFromLocalnameRequired("BTU_TH-PER-HR"),
  // Newton Per Square Centimetre
  N__PER__CentiM2: Qudt.unitFromLocalnameRequired("N-PER-CentiM2"),
  // Pound Mass (avoirdupois) Per Square Foot
  LB__PER__FT2: Qudt.unitFromLocalnameRequired("LB-PER-FT2"),
  // Abcoulomb per Square Centimetre
  C_Ab__PER__CentiM2: Qudt.unitFromLocalnameRequired("C_Ab-PER-CentiM2"),
  // Biot
  BIOT: Qudt.unitFromLocalnameRequired("BIOT"),
  // Newton Square Metre Per Square Kilogram
  N__M2__PER__KiloGM2: Qudt.unitFromLocalnameRequired("N-M2-PER-KiloGM2"),
  // Picomoles per kilogram
  PicoMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("PicoMOL-PER-KiloGM"),
  // Cubic Millimeter
  MilliM3: Qudt.unitFromLocalnameRequired("MilliM3"),
  // Square Meter Per Newton
  M2__PER__N: Qudt.unitFromLocalnameRequired("M2-PER-N"),
  // Dyne per Square Centimetre
  DYN__PER__CentiM2: Qudt.unitFromLocalnameRequired("DYN-PER-CentiM2"),
  // Erg per Square Centimetre Second
  ERG__PER__CentiM2__SEC: Qudt.unitFromLocalnameRequired("ERG-PER-CentiM2-SEC"),
  // Lilangeni
  Lilangeni: Qudt.unitFromLocalnameRequired("Lilangeni"),
  // Nanomoles per micromole
  NanoMOL__PER__MicroMOL: Qudt.unitFromLocalnameRequired(
    "NanoMOL-PER-MicroMOL"
  ),
  // Oct
  OCT: Qudt.unitFromLocalnameRequired("OCT"),
  // Kilomole Per Cubic Metre
  KiloMOL__PER__M3: Qudt.unitFromLocalnameRequired("KiloMOL-PER-M3"),
  // Cubic Metre
  M3: Qudt.unitFromLocalnameRequired("M3"),
  // Gray per Second
  GRAY__PER__SEC: Qudt.unitFromLocalnameRequired("GRAY-PER-SEC"),
  // Parts per billion
  PPB: Qudt.unitFromLocalnameRequired("PPB"),
  // Colony Forming Unit
  CFU: Qudt.unitFromLocalnameRequired("CFU"),
  // Cubic Decimetre Per Day
  DeciM3__PER__DAY: Qudt.unitFromLocalnameRequired("DeciM3-PER-DAY"),
  // Milligray
  MilliGRAY: Qudt.unitFromLocalnameRequired("MilliGRAY"),
  // Reciprocal Tesla Metre
  PER__T__M: Qudt.unitFromLocalnameRequired("PER-T-M"),
  // Gigabit per Second
  GigaBIT__PER__SEC: Qudt.unitFromLocalnameRequired("GigaBIT-PER-SEC"),
  // Reciprocal metre per nanometre
  PER__M__NanoM: Qudt.unitFromLocalnameRequired("PER-M-NanoM"),
  // Square Yard
  YD2: Qudt.unitFromLocalnameRequired("YD2"),
  // Micronewton Meter
  MicroN__M: Qudt.unitFromLocalnameRequired("MicroN-M"),
  // Torr
  TORR: Qudt.unitFromLocalnameRequired("TORR"),
  // Millisiemens Per Centimetre
  MilliS__PER__CentiM: Qudt.unitFromLocalnameRequired("MilliS-PER-CentiM"),
  // Gallon (UK)
  GAL_UK: Qudt.unitFromLocalnameRequired("GAL_UK"),
  // MilliAmpere
  MilliA: Qudt.unitFromLocalnameRequired("MilliA"),
  // Reciprocal Cubic Meter Second
  PER__M3__SEC: Qudt.unitFromLocalnameRequired("PER-M3-SEC"),
  // Centimeter per Square Second
  CentiM__PER__SEC2: Qudt.unitFromLocalnameRequired("CentiM-PER-SEC2"),
  // Revolution per Second
  REV__PER__SEC: Qudt.unitFromLocalnameRequired("REV-PER-SEC"),
  // Cubic Foot Per Hour
  FT3__PER__HR: Qudt.unitFromLocalnameRequired("FT3-PER-HR"),
  // Nanofarad
  NanoFARAD: Qudt.unitFromLocalnameRequired("NanoFARAD"),
  // Megavolt
  MegaV: Qudt.unitFromLocalnameRequired("MegaV"),
  // Mega Electron Volt per Speed of Light
  MegaEV__PER__SpeedOfLight: Qudt.unitFromLocalnameRequired(
    "MegaEV-PER-SpeedOfLight"
  ),
  // Ounce (avoirdupois) Per Gallon (UK)
  OZ__PER__GAL_UK: Qudt.unitFromLocalnameRequired("OZ-PER-GAL_UK"),
  // U.S. Perm
  PERM_US: Qudt.unitFromLocalnameRequired("PERM_US"),
  // Dram (UK)
  DRAM_UK: Qudt.unitFromLocalnameRequired("DRAM_UK"),
  // Micromoles per litre
  MicroMOL__PER__L: Qudt.unitFromLocalnameRequired("MicroMOL-PER-L"),
  // Cubic Meter Per Minute
  M3__PER__MIN: Qudt.unitFromLocalnameRequired("M3-PER-MIN"),
  // Reciprocal steradian
  PER__SR: Qudt.unitFromLocalnameRequired("PER-SR"),
  // Foot per Hour
  FT__PER__HR: Qudt.unitFromLocalnameRequired("FT-PER-HR"),
  // Metres to the power four per second
  M4__PER__SEC: Qudt.unitFromLocalnameRequired("M4-PER-SEC"),
  // Volt per Metre
  V__PER__M: Qudt.unitFromLocalnameRequired("V-PER-M"),
  // Millirads per hour
  MilliRAD_R__PER__HR: Qudt.unitFromLocalnameRequired("MilliRAD_R-PER-HR"),
  // Bolivian Mvdol (Funds code)
  BolivianMvdol: Qudt.unitFromLocalnameRequired("BolivianMvdol"),
  // Kilovolt Per Metre
  KiloV__PER__M: Qudt.unitFromLocalnameRequired("KiloV-PER-M"),
  // Millisievert
  MilliSV: Qudt.unitFromLocalnameRequired("MilliSV"),
  // Micromoles per litre per day
  MicroM__PER__L__DAY: Qudt.unitFromLocalnameRequired("MicroM-PER-L-DAY"),
  // Bangladeshi Taka
  BDT: Qudt.unitFromLocalnameRequired("BDT"),
  // Foot Pound Force per Minute
  FT__LB_F__PER__MIN: Qudt.unitFromLocalnameRequired("FT-LB_F-PER-MIN"),
  // Pound (avoirdupois) Per Gallon (US)
  LB__PER__GAL_US: Qudt.unitFromLocalnameRequired("LB-PER-GAL_US"),
  // Milliampere Per Millimeter
  MilliA__PER__MilliM: Qudt.unitFromLocalnameRequired("MilliA-PER-MilliM"),
  // Millilitre Per Litre
  MilliL__PER__L: Qudt.unitFromLocalnameRequired("MilliL-PER-L"),
  // GM_Nitrogen
  GM_Nitrogen: Qudt.unitFromLocalnameRequired("GM_Nitrogen"),
  // Imperial Mass Ounce per Gallon
  OZ__PER__GAL: Qudt.unitFromLocalnameRequired("OZ-PER-GAL"),
  // French Gauge
  GAUGE_FR: Qudt.unitFromLocalnameRequired("GAUGE_FR"),
  // Millivolt Per Meter
  MilliV__PER__M: Qudt.unitFromLocalnameRequired("MilliV-PER-M"),
  // Calorie per Gram Degree Celsius
  KiloCAL__PER__GM__DEG_C: Qudt.unitFromLocalnameRequired(
    "KiloCAL-PER-GM-DEG_C"
  ),
  // Quart (UK)
  QT_UK: Qudt.unitFromLocalnameRequired("QT_UK"),
  // Millimoles per cubic metre
  MilliMOL__PER__M3: Qudt.unitFromLocalnameRequired("MilliMOL-PER-M3"),
  // Reciprocal Tesla Second Unit
  PER__T__SEC: Qudt.unitFromLocalnameRequired("PER-T-SEC"),
  // Degree Balling
  DEGREE_BALLING: Qudt.unitFromLocalnameRequired("DEGREE_BALLING"),
  // Kilonewton Meter
  KiloN__M: Qudt.unitFromLocalnameRequired("KiloN-M"),
  // Inch per Square second
  IN__PER__SEC2: Qudt.unitFromLocalnameRequired("IN-PER-SEC2"),
  // Degree API
  DEGREE_API: Qudt.unitFromLocalnameRequired("DEGREE_API"),
  // Unit Pole
  UnitPole: Qudt.unitFromLocalnameRequired("UnitPole"),
  // Ethiopian Birr
  EthiopianBirr: Qudt.unitFromLocalnameRequired("EthiopianBirr"),
  // Reciprocal Second
  PER__SEC: Qudt.unitFromLocalnameRequired("PER-SEC"),
  // 1000000I
  _1000000I: Qudt.unitFromLocalnameRequired("1000000I"),
  // Afghani
  AFN: Qudt.unitFromLocalnameRequired("AFN"),
  // Square Metre per Joule
  M2__PER__J: Qudt.unitFromLocalnameRequired("M2-PER-J"),
  // Reciprocal square metre per second
  PER__M2__SEC: Qudt.unitFromLocalnameRequired("PER-M2-SEC"),
  // W-M2
  W__M2: Qudt.unitFromLocalnameRequired("W-M2"),
  // Foot per Minute
  FT__PER__MIN: Qudt.unitFromLocalnameRequired("FT-PER-MIN"),
  // Tonne Per Cubic Metre
  TONNE__PER__M3: Qudt.unitFromLocalnameRequired("TONNE-PER-M3"),
  // Statampere
  A_Stat: Qudt.unitFromLocalnameRequired("A_Stat"),
  // Kilogram per Hour
  KiloGM__PER__HR: Qudt.unitFromLocalnameRequired("KiloGM-PER-HR"),
  // Millibar Per Kelvin
  MilliBAR__PER__K: Qudt.unitFromLocalnameRequired("MilliBAR-PER-K"),
  // Planck Force
  PlanckForce: Qudt.unitFromLocalnameRequired("PlanckForce"),
  // Gill (UK) Per Second
  GI_UK__PER__SEC: Qudt.unitFromLocalnameRequired("GI_UK-PER-SEC"),
  // Pascal Second
  PA__SEC: Qudt.unitFromLocalnameRequired("PA-SEC"),
  // Pound Force per Pound
  LB_F__PER__LB: Qudt.unitFromLocalnameRequired("LB_F-PER-LB"),
  // Venezuelan bolvar
  VenezuelanBolvar: Qudt.unitFromLocalnameRequired("VenezuelanBolvar"),
  // nanosecond
  NanoSEC: Qudt.unitFromLocalnameRequired("NanoSEC"),
  // Kilocalorie (thermochemical) Per Second
  KiloCAL_TH__PER__SEC: Qudt.unitFromLocalnameRequired("KiloCAL_TH-PER-SEC"),
  // Yard
  YD: Qudt.unitFromLocalnameRequired("YD"),
  // Picoamps per micromole per litre
  PicoA__PER__MicroMOL__L: Qudt.unitFromLocalnameRequired(
    "PicoA-PER-MicroMOL-L"
  ),
  // TeraCoulomb
  TeraC: Qudt.unitFromLocalnameRequired("TeraC"),
  // Gram Millimeter
  GM__MilliM: Qudt.unitFromLocalnameRequired("GM-MilliM"),
  // Decigram
  DeciGM: Qudt.unitFromLocalnameRequired("DeciGM"),
  // BBL_US_PET
  BBL_US_PET: Qudt.unitFromLocalnameRequired("BBL_US_PET"),
  // Centilitre
  CentiL: Qudt.unitFromLocalnameRequired("CentiL"),
  // Gilbert
  GI: Qudt.unitFromLocalnameRequired("GI"),
  // calorie (thermochemical) per gram (calTH/g)
  CAL_TH__PER__G: Qudt.unitFromLocalnameRequired("CAL_TH-PER-G"),
  // Breath per Minute
  BREATH__PER__MIN: Qudt.unitFromLocalnameRequired("BREATH-PER-MIN"),
  // Somoni
  Somoni: Qudt.unitFromLocalnameRequired("Somoni"),
  // CentiCoulomb
  CentiC: Qudt.unitFromLocalnameRequired("CentiC"),
  // Micromoles per litre per hour
  MicroMOL__PER__L__HR: Qudt.unitFromLocalnameRequired("MicroMOL-PER-L-HR"),
  // Volt Per Millimetre
  V__PER__MilliM: Qudt.unitFromLocalnameRequired("V-PER-MilliM"),
  // Pound Force per Square Foot
  LB_F__PER__FT2: Qudt.unitFromLocalnameRequired("LB_F-PER-FT2"),
  // Cubic Centimeter Per Minute
  CentiM3__PER__MIN: Qudt.unitFromLocalnameRequired("CentiM3-PER-MIN"),
  // Number per 100 grams
  NUM__PER__HectoGM: Qudt.unitFromLocalnameRequired("NUM-PER-HectoGM"),
  // Teaspoon
  TSP: Qudt.unitFromLocalnameRequired("TSP"),
  // Kelvin per Hour
  K__PER__HR: Qudt.unitFromLocalnameRequired("K-PER-HR"),
  // Kilojoule
  KiloJ: Qudt.unitFromLocalnameRequired("KiloJ"),
  // Kilovolt Ampere Reactive Hour
  KiloV__A_Reactive__HR: Qudt.unitFromLocalnameRequired("KiloV-A_Reactive-HR"),
  // Joules per kilogram per Kelvin
  J__PER__KiloGM__K: Qudt.unitFromLocalnameRequired("J-PER-KiloGM-K"),
  // Barrel (UK Petroleum) Per Hour
  BBL_UK_PET__PER__HR: Qudt.unitFromLocalnameRequired("BBL_UK_PET-PER-HR"),
  // Hour Square Foot
  HR__FT2: Qudt.unitFromLocalnameRequired("HR-FT2"),
  // microradian
  MicroRAD: Qudt.unitFromLocalnameRequired("MicroRAD"),
  // Litre Per Mole
  L__PER__MOL: Qudt.unitFromLocalnameRequired("L-PER-MOL"),
  // Pound Force Foot Per Pound
  KiloLB_F__FT__PER__LB: Qudt.unitFromLocalnameRequired("KiloLB_F-FT-PER-LB"),
  // Terajoule
  TeraJ: Qudt.unitFromLocalnameRequired("TeraJ"),
  // Statcoulomb per Square Centimetre
  C_Stat__PER__CentiM2: Qudt.unitFromLocalnameRequired("C_Stat-PER-CentiM2"),
  // Rem
  REM: Qudt.unitFromLocalnameRequired("REM"),
  // microampere
  MicroA: Qudt.unitFromLocalnameRequired("MicroA"),
  // Japanese yen
  JapaneseYen: Qudt.unitFromLocalnameRequired("JapaneseYen"),
  // Million US Dollars
  MillionUSD: Qudt.unitFromLocalnameRequired("MillionUSD"),
  // Kenyan Shilling
  KenyanShilling: Qudt.unitFromLocalnameRequired("KenyanShilling"),
  // Picomoles per litre per hour
  PicoMOL__PER__L__HR: Qudt.unitFromLocalnameRequired("PicoMOL-PER-L-HR"),
  // Fractional area
  FA: Qudt.unitFromLocalnameRequired("FA"),
  // Dyne
  DYN: Qudt.unitFromLocalnameRequired("DYN"),
  // Meganewton
  MegaN: Qudt.unitFromLocalnameRequired("MegaN"),
  // Ounce (UK Fluid) Per Minute
  OZ_VOL_UK__PER__MIN: Qudt.unitFromLocalnameRequired("OZ_VOL_UK-PER-MIN"),
  // Nanomoles per microgram per hour
  NanoMOL__PER__MicroGM__HR: Qudt.unitFromLocalnameRequired(
    "NanoMOL-PER-MicroGM-HR"
  ),
  // Kilocalorie (mean)
  KiloCAL_Mean: Qudt.unitFromLocalnameRequired("KiloCAL_Mean"),
  // British Thermal Unit (mean)
  BTU_MEAN: Qudt.unitFromLocalnameRequired("BTU_MEAN"),
  // Millivolt Per Minute
  MilliV__PER__MIN: Qudt.unitFromLocalnameRequired("MilliV-PER-MIN"),
  // Quintic Meter
  M5: Qudt.unitFromLocalnameRequired("M5"),
  // Millilitre
  MilliL: Qudt.unitFromLocalnameRequired("MilliL"),
  // Relative Electromagnetic Permeability
  PERMEABILITY_EM_REL: Qudt.unitFromLocalnameRequired("PERMEABILITY_EM_REL"),
  // Siemens Per Meter
  S__PER__M: Qudt.unitFromLocalnameRequired("S-PER-M"),
  // Henry
  H: Qudt.unitFromLocalnameRequired("H"),
  // Megapascal Cubic Metre Per Second
  MegaPA__M3__PER__SEC: Qudt.unitFromLocalnameRequired("MegaPA-M3-PER-SEC"),
  // Syrian Pound
  SyrianPound: Qudt.unitFromLocalnameRequired("SyrianPound"),
  // Franklin
  FR: Qudt.unitFromLocalnameRequired("FR"),
  // Square Degrees Celsius per second
  DEG_C2__PER__SEC: Qudt.unitFromLocalnameRequired("DEG_C2-PER-SEC"),
  // Kilogram Square Meter Per Second
  KiloGM__M2__PER__SEC: Qudt.unitFromLocalnameRequired("KiloGM-M2-PER-SEC"),
  // Belize Dollar
  BelizeDollar: Qudt.unitFromLocalnameRequired("BelizeDollar"),
  // Reciprocal Cubic Centimetre
  PER__CentiM3: Qudt.unitFromLocalnameRequired("PER-CentiM3"),
  // Circular Mil
  MIL_Circ: Qudt.unitFromLocalnameRequired("MIL_Circ"),
  // Kiloampere Per Metre
  KiloA__PER__M: Qudt.unitFromLocalnameRequired("KiloA-PER-M"),
  // Micrograms per square metre per day
  MicroGM__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MicroGM-PER-M2-DAY"),
  // Joule per Mole
  J__PER__MOL: Qudt.unitFromLocalnameRequired("J-PER-MOL"),
  // Milligram Per Hectare
  MilliGM__PER__HA: Qudt.unitFromLocalnameRequired("MilliGM-PER-HA"),
  // Megaohm
  MegaOHM: Qudt.unitFromLocalnameRequired("MegaOHM"),
  // Dec
  DECADE: Qudt.unitFromLocalnameRequired("DECADE"),
  // Square Meter Kelvin
  M2__K: Qudt.unitFromLocalnameRequired("M2-K"),
  // Degree Fahrenheit Per Kelvin
  DEG_F__PER__K: Qudt.unitFromLocalnameRequired("DEG_F-PER-K"),
  // Unidad de Valor Real
  UnidadDeValorReal: Qudt.unitFromLocalnameRequired("UnidadDeValorReal"),
  // Ampere
  A: Qudt.unitFromLocalnameRequired("A"),
  // Microvolt Per Metre
  MicroV__PER__M: Qudt.unitFromLocalnameRequired("MicroV-PER-M"),
  // Megapascal
  MegaPA: Qudt.unitFromLocalnameRequired("MegaPA"),
  // Joule Second
  J__SEC: Qudt.unitFromLocalnameRequired("J-SEC"),
  // Micronewton
  MicroN: Qudt.unitFromLocalnameRequired("MicroN"),
  // Kilocalorie Per Second
  KiloCAL__PER__SEC: Qudt.unitFromLocalnameRequired("KiloCAL-PER-SEC"),
  // Millibar Per Bar
  MilliBAR__PER__BAR: Qudt.unitFromLocalnameRequired("MilliBAR-PER-BAR"),
  // Reciprocal Kilometre
  PER__KiloM: Qudt.unitFromLocalnameRequired("PER-KiloM"),
  // Growing Degree Days (Cereals)
  DEG_C_GROWING_CEREAL__DAY: Qudt.unitFromLocalnameRequired(
    "DEG_C_GROWING_CEREAL-DAY"
  ),
  // Milliweber
  MilliWB: Qudt.unitFromLocalnameRequired("MilliWB"),
  // Convertible Marks
  ConvertibleMark: Qudt.unitFromLocalnameRequired("ConvertibleMark"),
  // Maltese Lira
  MalteseLira: Qudt.unitFromLocalnameRequired("MalteseLira"),
  // Planck Mass
  PlanckMass: Qudt.unitFromLocalnameRequired("PlanckMass"),
  // Pascal Per Metre
  PA__PER__M: Qudt.unitFromLocalnameRequired("PA-PER-M"),
  // Palladium (one Troy ounce)
  Palladium__OunceTroy: Qudt.unitFromLocalnameRequired("Palladium-OunceTroy"),
  // Pica
  PCA: Qudt.unitFromLocalnameRequired("PCA"),
  // Barye
  BARYE: Qudt.unitFromLocalnameRequired("BARYE"),
  // Newton Per Ampere
  N__PER__A: Qudt.unitFromLocalnameRequired("N-PER-A"),
  // Kilogram Square Centimetre
  KiloGM__CentiM2: Qudt.unitFromLocalnameRequired("KiloGM-CentiM2"),
  // Kilopascal Per Bar
  KiloPA__PER__BAR: Qudt.unitFromLocalnameRequired("KiloPA-PER-BAR"),
  // Calorie (international Table) Per Second Square Centimetre kelvin
  CAL_IT__PER__SEC__CentiM2__K: Qudt.unitFromLocalnameRequired(
    "CAL_IT-PER-SEC-CentiM2-K"
  ),
  // Cubic Metre per Second
  M3__PER__SEC: Qudt.unitFromLocalnameRequired("M3-PER-SEC"),
  // Gram Per Square Meter
  GM__PER__M2: Qudt.unitFromLocalnameRequired("GM-PER-M2"),
  // Belarussian Ruble
  BYR: Qudt.unitFromLocalnameRequired("BYR"),
  // Peck (UK) Per Hour
  PK_UK__PER__HR: Qudt.unitFromLocalnameRequired("PK_UK-PER-HR"),
  // Nat per Second
  NAT__PER__SEC: Qudt.unitFromLocalnameRequired("NAT-PER-SEC"),
  // Square metres per Hertz
  M2__PER__HZ: Qudt.unitFromLocalnameRequired("M2-PER-HZ"),
  // Bushel (US Dry) Per Minute
  BU_US_DRY__PER__MIN: Qudt.unitFromLocalnameRequired("BU_US_DRY-PER-MIN"),
  // International Table calorie
  CAL_IT: Qudt.unitFromLocalnameRequired("CAL_IT"),
  // Ton (US)
  TON_US: Qudt.unitFromLocalnameRequired("TON_US"),
  // Cubic Yard
  YD3: Qudt.unitFromLocalnameRequired("YD3"),
  // Number per cubic metre
  NUM__PER__M3: Qudt.unitFromLocalnameRequired("NUM-PER-M3"),
  // Degrees Kelvin per metre
  K__PER__M: Qudt.unitFromLocalnameRequired("K-PER-M"),
  // Microwatt
  MicroW: Qudt.unitFromLocalnameRequired("MicroW"),
  // Absiemen
  S_Ab: Qudt.unitFromLocalnameRequired("S_Ab"),
  // Volt Per Microsecond
  V__PER__MicroSEC: Qudt.unitFromLocalnameRequired("V-PER-MicroSEC"),
  // Pound Mole
  LB__MOL: Qudt.unitFromLocalnameRequired("LB-MOL"),
  // Cubic Yard Per Day
  YD3__PER__DAY: Qudt.unitFromLocalnameRequired("YD3-PER-DAY"),
  // Litre Per Kilogram
  L__PER__KiloGM: Qudt.unitFromLocalnameRequired("L-PER-KiloGM"),
  // Cubic Meter per Hectare
  M3__PER__HA: Qudt.unitFromLocalnameRequired("M3-PER-HA"),
  // Pascal per Second
  PA__PER__SEC: Qudt.unitFromLocalnameRequired("PA-PER-SEC"),
  // Square Foot Hour Degree Fahrenheit
  FT2__HR__DEG_F: Qudt.unitFromLocalnameRequired("FT2-HR-DEG_F"),
  // Kilojoule Per Kilogram
  KiloJ__PER__KiloGM: Qudt.unitFromLocalnameRequired("KiloJ-PER-KiloGM"),
  // PlanckTemperature
  PlanckTemperature: Qudt.unitFromLocalnameRequired("PlanckTemperature"),
  // Nautical Mile per Hour
  MI_N__PER__HR: Qudt.unitFromLocalnameRequired("MI_N-PER-HR"),
  // Gill (UK) Per Day
  GI_UK__PER__DAY: Qudt.unitFromLocalnameRequired("GI_UK-PER-DAY"),
  // Quetzal
  Quetzal: Qudt.unitFromLocalnameRequired("Quetzal"),
  // Reciprocal Ã¥ngstrÃ¶m
  PER__ANGSTROM: Qudt.unitFromLocalnameRequired("PER-ANGSTROM"),
  // US Liquid Pint
  PINT_US: Qudt.unitFromLocalnameRequired("PINT_US"),
  // Pound per Inch
  LB__PER__IN: Qudt.unitFromLocalnameRequired("LB-PER-IN"),
  // British Thermal Unit (international Table) Per Second Foot Degree Rankine
  BTU_IT__PER__SEC__FT__DEG_R: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-SEC-FT-DEG_R"
  ),
  // Kilogram Square Second
  KiloGM__SEC2: Qudt.unitFromLocalnameRequired("KiloGM-SEC2"),
  // Picomoles per cubic metre
  PicoMOL__PER__M3: Qudt.unitFromLocalnameRequired("PicoMOL-PER-M3"),
  // milliradian
  MilliRAD: Qudt.unitFromLocalnameRequired("MilliRAD"),
  // Carat
  CARAT: Qudt.unitFromLocalnameRequired("CARAT"),
  // Newton Per Millimetre
  N__PER__MilliM: Qudt.unitFromLocalnameRequired("N-PER-MilliM"),
  // Metres per year
  M__PER__YR: Qudt.unitFromLocalnameRequired("M-PER-YR"),
  // Square Meter Kelvin per Watt
  M2__K__PER__W: Qudt.unitFromLocalnameRequired("M2-K-PER-W"),
  // Ampere Per Square Centimetre
  A__PER__CentiM2: Qudt.unitFromLocalnameRequired("A-PER-CentiM2"),
  // Dyne Second Per Cubic Centimetre
  DYN__SEC__PER__CentiM3: Qudt.unitFromLocalnameRequired("DYN-SEC-PER-CentiM3"),
  // Abampere per Square Centimetre
  A_Ab__PER__CentiM2: Qudt.unitFromLocalnameRequired("A_Ab-PER-CentiM2"),
  // Gallon (UK) Per Minute
  GAL_UK__PER__MIN: Qudt.unitFromLocalnameRequired("GAL_UK-PER-MIN"),
  // Ton (US) Per Hour
  TON_US__PER__HR: Qudt.unitFromLocalnameRequired("TON_US-PER-HR"),
  // Kuwaiti Dinar
  KuwaitiDinar: Qudt.unitFromLocalnameRequired("KuwaitiDinar"),
  // Joule Square Meter
  J__M2: Qudt.unitFromLocalnameRequired("J-M2"),
  // Foot Pound Force per Square Metre
  FT__LB_F__PER__M2: Qudt.unitFromLocalnameRequired("FT-LB_F-PER-M2"),
  // Newton per Coulomb
  N__PER__C: Qudt.unitFromLocalnameRequired("N-PER-C"),
  // Megasiemens Per Meter
  MegaS__PER__M: Qudt.unitFromLocalnameRequired("MegaS-PER-M"),
  // Nanohenry Per Meter
  NanoH__PER__M: Qudt.unitFromLocalnameRequired("NanoH-PER-M"),
  // Microvolt
  MicroV: Qudt.unitFromLocalnameRequired("MicroV"),
  // Square microns per millilitre
  MicroM__PER__MilliL: Qudt.unitFromLocalnameRequired("MicroM-PER-MilliL"),
  // Kilovolt Ampere Reactive
  KiloV__A_Reactive: Qudt.unitFromLocalnameRequired("KiloV-A_Reactive"),
  // Loti
  Loti: Qudt.unitFromLocalnameRequired("Loti"),
  // Farad
  FARAD: Qudt.unitFromLocalnameRequired("FARAD"),
  // MilliW
  MilliW: Qudt.unitFromLocalnameRequired("MilliW"),
  // Ampere per Joule
  A__PER__J: Qudt.unitFromLocalnameRequired("A-PER-J"),
  // Slug Per Day
  SLUG__PER__DAY: Qudt.unitFromLocalnameRequired("SLUG-PER-DAY"),
  // Mean Julian Month
  MO_MeanJulian: Qudt.unitFromLocalnameRequired("MO_MeanJulian"),
  // BTU (TH) Inch per Square Foot Hour Degree Fahrenheit
  BTU_TH__IN__PER__FT2__HR__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_TH-IN-PER-FT2-HR-DEG_F"
  ),
  // Minute Angle
  MIN_Angle: Qudt.unitFromLocalnameRequired("MIN_Angle"),
  // Volt Second Per Meter
  V__SEC__PER__M: Qudt.unitFromLocalnameRequired("V-SEC-PER-M"),
  // Farad per Meter
  FARAD__PER__M: Qudt.unitFromLocalnameRequired("FARAD-PER-M"),
  // square metre per square metre
  M2__PER__M2: Qudt.unitFromLocalnameRequired("M2-PER-M2"),
  // Mile per Minute
  MI__PER__MIN: Qudt.unitFromLocalnameRequired("MI-PER-MIN"),
  // Nanograms per millilitre
  NanoGM__PER__MilliL: Qudt.unitFromLocalnameRequired("NanoGM-PER-MilliL"),
  // East Caribbean Dollar
  EastCaribbeanDollar: Qudt.unitFromLocalnameRequired("EastCaribbeanDollar"),
  // Riel
  Riel: Qudt.unitFromLocalnameRequired("Riel"),
  // Foot Pound Force per Second
  FT__LB_F__PER__SEC: Qudt.unitFromLocalnameRequired("FT-LB_F-PER-SEC"),
  // Peso Uruguayo
  UruguayPeso: Qudt.unitFromLocalnameRequired("UruguayPeso"),
  // Decalitre
  DecaL: Qudt.unitFromLocalnameRequired("DecaL"),
  // Square Foot Degree Fahrenheit
  FT2__DEG_F: Qudt.unitFromLocalnameRequired("FT2-DEG_F"),
  // Ohm Square Meter per Meter
  OHM__M2__PER__M: Qudt.unitFromLocalnameRequired("OHM-M2-PER-M"),
  // Centimetres per thousand years
  CentiM__PER__KiloYR: Qudt.unitFromLocalnameRequired("CentiM-PER-KiloYR"),
  // Hectopascal Per Kelvin
  HectoPA__PER__K: Qudt.unitFromLocalnameRequired("HectoPA-PER-K"),
  // Rod
  ROD: Qudt.unitFromLocalnameRequired("ROD"),
  // Pascal per Minute
  PA__PER__MIN: Qudt.unitFromLocalnameRequired("PA-PER-MIN"),
  // KiloBIT
  KiloBIT: Qudt.unitFromLocalnameRequired("KiloBIT"),
  // Reciprocal micromole per litre
  PER__MicroMOL__L: Qudt.unitFromLocalnameRequired("PER-MicroMOL-L"),
  // Millifarad
  MilliFARAD: Qudt.unitFromLocalnameRequired("MilliFARAD"),
  // Hertz per Tesla
  HZ__PER__T: Qudt.unitFromLocalnameRequired("HZ-PER-T"),
  // Pound (avoirdupois) Per Gallon (UK)
  LB__PER__GAL_UK: Qudt.unitFromLocalnameRequired("LB-PER-GAL_UK"),
  // Jordanian Dinar
  JordanianDinar: Qudt.unitFromLocalnameRequired("JordanianDinar"),
  // Reciprocal Second Square Metre Steradian
  PER__SEC__M2__SR: Qudt.unitFromLocalnameRequired("PER-SEC-M2-SR"),
  // Pint (UK) Per Hour
  PINT_UK__PER__HR: Qudt.unitFromLocalnameRequired("PINT_UK-PER-HR"),
  // PSI Cubic Meter Per Second
  PSI__M3__PER__SEC: Qudt.unitFromLocalnameRequired("PSI-M3-PER-SEC"),
  // Degrees per metre
  DEG__PER__M: Qudt.unitFromLocalnameRequired("DEG-PER-M"),
  // Cuban Peso
  CubanPeso: Qudt.unitFromLocalnameRequired("CubanPeso"),
  // Revolution per Minute
  REV__PER__MIN: Qudt.unitFromLocalnameRequired("REV-PER-MIN"),
  // Coulomb Metre
  C__M: Qudt.unitFromLocalnameRequired("C-M"),
  // Cubic Decimetre Per Minute
  DeciM3__PER__MIN: Qudt.unitFromLocalnameRequired("DeciM3-PER-MIN"),
  // Watt Second
  W__SEC: Qudt.unitFromLocalnameRequired("W-SEC"),
  // Mexican Unidad de Inversion (UDI) (Funds code)
  MexicanUnidadDeInversion: Qudt.unitFromLocalnameRequired(
    "MexicanUnidadDeInversion"
  ),
  // Micromoles per mole
  MicroMOL__PER__MOL: Qudt.unitFromLocalnameRequired("MicroMOL-PER-MOL"),
  // Bushel (UK) Per Hour
  BU_UK__PER__HR: Qudt.unitFromLocalnameRequired("BU_UK-PER-HR"),
  // Radian Square Metre per Mole
  RAD__M2__PER__MOL: Qudt.unitFromLocalnameRequired("RAD-M2-PER-MOL"),
  // Zambian Kwacha
  ZambianKwacha: Qudt.unitFromLocalnameRequired("ZambianKwacha"),
  // Cordoba Oro
  CordobaOro: Qudt.unitFromLocalnameRequired("CordobaOro"),
  // Pound per Foot Second
  LB__PER__FT__SEC: Qudt.unitFromLocalnameRequired("LB-PER-FT-SEC"),
  // Costa Rican Colon
  CostaRicanColon: Qudt.unitFromLocalnameRequired("CostaRicanColon"),
  // Degree Rankine per Minute
  DEG_R__PER__MIN: Qudt.unitFromLocalnameRequired("DEG_R-PER-MIN"),
  // Ampere per Metre
  A__PER__M: Qudt.unitFromLocalnameRequired("A-PER-M"),
  // Mole Per Cubic Decimeter
  MOL__PER__DeciM3: Qudt.unitFromLocalnameRequired("MOL-PER-DeciM3"),
  // Inch
  IN: Qudt.unitFromLocalnameRequired("IN"),
  // Bulgarian Lev
  BulgarianLev: Qudt.unitFromLocalnameRequired("BulgarianLev"),
  // Rwanda Franc
  RwandaFranc: Qudt.unitFromLocalnameRequired("RwandaFranc"),
  // SpeedOfLight
  SpeedOfLight: Qudt.unitFromLocalnameRequired("SpeedOfLight"),
  // Deaths per 1000 individuals per year
  DEATHS__PER__1000I__YR: Qudt.unitFromLocalnameRequired("DEATHS-PER-1000I-YR"),
  // British Thermal Unit (international Table) Per Hour Square Foot degree Rankine
  BTU_IT__PER__HR__FT2__DEG_R: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-HR-FT2-DEG_R"
  ),
  // Square Kelvin
  K2: Qudt.unitFromLocalnameRequired("K2"),
  // Electronvolt Per Angstrom
  EV__PER__ANGSTROM: Qudt.unitFromLocalnameRequired("EV-PER-ANGSTROM"),
  // Stone (UK)
  Stone_UK: Qudt.unitFromLocalnameRequired("Stone_UK"),
  // Long Furlong
  FUR_Long: Qudt.unitFromLocalnameRequired("FUR_Long"),
  // Hryvnia
  Hryvnia: Qudt.unitFromLocalnameRequired("Hryvnia"),
  // Reciprocal Cubic Inch
  PER__IN3: Qudt.unitFromLocalnameRequired("PER-IN3"),
  // Kiloroentgen
  KiloR: Qudt.unitFromLocalnameRequired("KiloR"),
  // Kilocalorie (thermochemical)
  KiloCAL_TH: Qudt.unitFromLocalnameRequired("KiloCAL_TH"),
  // Reciprocal Mole
  PER__MOL: Qudt.unitFromLocalnameRequired("PER-MOL"),
  // BTU Inch
  BTU_IT__IN: Qudt.unitFromLocalnameRequired("BTU_IT-IN"),
  // Reciprocal Pascal per second
  PER__PA__SEC: Qudt.unitFromLocalnameRequired("PER-PA-SEC"),
  // bushel (US)
  BU_US: Qudt.unitFromLocalnameRequired("BU_US"),
  // Milligrams per square metre per day
  MilliGM__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MilliGM-PER-M2-DAY"),
  // Pula
  Pula: Qudt.unitFromLocalnameRequired("Pula"),
  // Planck Frequency
  PlanckFrequency: Qudt.unitFromLocalnameRequired("PlanckFrequency"),
  // Barrel (US)
  BBL_US: Qudt.unitFromLocalnameRequired("BBL_US"),
  // Aruban Guilder
  AWG: Qudt.unitFromLocalnameRequired("AWG"),
  // Kilograms per metre per hour
  KiloGM__PER__M__HR: Qudt.unitFromLocalnameRequired("KiloGM-PER-M-HR"),
  // PetaByte
  PetaBYTE: Qudt.unitFromLocalnameRequired("PetaBYTE"),
  // Kilopond
  KiloP: Qudt.unitFromLocalnameRequired("KiloP"),
  // Cubic Inch Per Hour
  IN3__PER__HR: Qudt.unitFromLocalnameRequired("IN3-PER-HR"),
  // Millihenry
  MilliH: Qudt.unitFromLocalnameRequired("MilliH"),
  // Millilitre Per Day
  MilliL__PER__DAY: Qudt.unitFromLocalnameRequired("MilliL-PER-DAY"),
  // Square metres Hertz^4
  M2__HZ4: Qudt.unitFromLocalnameRequired("M2-HZ4"),
  // Kilogram?force Metre
  KiloGM_F__M: Qudt.unitFromLocalnameRequired("KiloGM_F-M"),
  // Megaton of Oil Equivalent
  MegaTOE: Qudt.unitFromLocalnameRequired("MegaTOE"),
  // Gram Per Cubic Metre
  GM__PER__M3: Qudt.unitFromLocalnameRequired("GM-PER-M3"),
  // GigaCoulomb
  GigaC: Qudt.unitFromLocalnameRequired("GigaC"),
  // British Thermal Unit (thermochemical) Per Pound Degree Fahrenheit
  BTU_TH__PER__LB__DEG_F: Qudt.unitFromLocalnameRequired("BTU_TH-PER-LB-DEG_F"),
  // Litre Per Second Per Square Metre
  L__PER__SEC__M2: Qudt.unitFromLocalnameRequired("L-PER-SEC-M2"),
  // Reciprocal Hour
  PER__HR: Qudt.unitFromLocalnameRequired("PER-HR"),
  // Millilitre Per Square Centimeter Minute
  MilliL__PER__CentiM2__MIN: Qudt.unitFromLocalnameRequired(
    "MilliL-PER-CentiM2-MIN"
  ),
  // Gigawatt
  GigaW: Qudt.unitFromLocalnameRequired("GigaW"),
  // Pennyweight
  Pennyweight: Qudt.unitFromLocalnameRequired("Pennyweight"),
  // Kilogram Force Per Square Meter
  KiloGM_F__PER__M2: Qudt.unitFromLocalnameRequired("KiloGM_F-PER-M2"),
  // Newton Second per Meter
  N__SEC__PER__M: Qudt.unitFromLocalnameRequired("N-SEC-PER-M"),
  // PicoCoulomb
  PicoC: Qudt.unitFromLocalnameRequired("PicoC"),
  // Microhenry Per Kiloohm
  MicroH__PER__KiloOHM: Qudt.unitFromLocalnameRequired("MicroH-PER-KiloOHM"),
  // Bushel (US Dry) Per Second
  BU_US_DRY__PER__SEC: Qudt.unitFromLocalnameRequired("BU_US_DRY-PER-SEC"),
  // Liter Per Day
  L__PER__DAY: Qudt.unitFromLocalnameRequired("L-PER-DAY"),
  // Milligram Per Cubic Metre
  MilliGM__PER__M3: Qudt.unitFromLocalnameRequired("MilliGM-PER-M3"),
  // Kilowatthour
  KiloW__HR: Qudt.unitFromLocalnameRequired("KiloW-HR"),
  // Reciprocal Litre
  PER__L: Qudt.unitFromLocalnameRequired("PER-L"),
  // Megacoulomb Per Cubic Meter
  MegaC__PER__M3: Qudt.unitFromLocalnameRequired("MegaC-PER-M3"),
  // ExaByte
  ExaBYTE: Qudt.unitFromLocalnameRequired("ExaBYTE"),
  // US Liquid Cup
  CUP: Qudt.unitFromLocalnameRequired("CUP"),
  // CASES
  CASES: Qudt.unitFromLocalnameRequired("CASES"),
  // lumen second
  LM__SEC: Qudt.unitFromLocalnameRequired("LM-SEC"),
  // Ohm
  OHM: Qudt.unitFromLocalnameRequired("OHM"),
  // Fiji Dollar
  FijiDollar: Qudt.unitFromLocalnameRequired("FijiDollar"),
  // Weber Per Metre
  WB__PER__M: Qudt.unitFromLocalnameRequired("WB-PER-M"),
  // Abfarad per Centimeter
  FARAD_Ab__PER__CentiM: Qudt.unitFromLocalnameRequired("FARAD_Ab-PER-CentiM"),
  // DeciCoulomb
  DeciC: Qudt.unitFromLocalnameRequired("DeciC"),
  // Microsiemens Per Metre
  MicroS__PER__M: Qudt.unitFromLocalnameRequired("MicroS-PER-M"),
  // Kelvin Pascals per second
  K__PA__PER__SEC: Qudt.unitFromLocalnameRequired("K-PA-PER-SEC"),
  // Cubic microns per millilitre
  MicroM3__PER__MilliL: Qudt.unitFromLocalnameRequired("MicroM3-PER-MilliL"),
  // Bushel (UK) Per Day
  BU_UK__PER__DAY: Qudt.unitFromLocalnameRequired("BU_UK-PER-DAY"),
  // Picowatts per square centimetre per litre
  PicoW__PER__CentiM2__L: Qudt.unitFromLocalnameRequired("PicoW-PER-CentiM2-L"),
  // Joule Per Metre
  J__PER__M: Qudt.unitFromLocalnameRequired("J-PER-M"),
  // Mega Hertz per Kelvin
  MegaHZ__PER__K: Qudt.unitFromLocalnameRequired("MegaHZ-PER-K"),
  // Nanograms per square metre per Pascal per second
  NanoGM__PER__M2__PA__SEC: Qudt.unitFromLocalnameRequired(
    "NanoGM-PER-M2-PA-SEC"
  ),
  // Calorie (international Table) Per Gram Kelvin
  CAL_IT__PER__GM__K: Qudt.unitFromLocalnameRequired("CAL_IT-PER-GM-K"),
  // metric tonne per hectare
  TON_Metric__PER__HA: Qudt.unitFromLocalnameRequired("TON_Metric-PER-HA"),
  // Gram
  GM: Qudt.unitFromLocalnameRequired("GM"),
  // Ounce Troy
  OZ_TROY: Qudt.unitFromLocalnameRequired("OZ_TROY"),
  // microsecond
  MicroSEC: Qudt.unitFromLocalnameRequired("MicroSEC"),
  // Degrees Celsius kilogram per square metre
  DEG_C__KiloGM__PER__M2: Qudt.unitFromLocalnameRequired("DEG_C-KiloGM-PER-M2"),
  // Millibecquerels per litre
  MilliBQ__PER__L: Qudt.unitFromLocalnameRequired("MilliBQ-PER-L"),
  // Fraction
  FRACTION: Qudt.unitFromLocalnameRequired("FRACTION"),
  // Square Metres square Hertz
  M2__HZ2: Qudt.unitFromLocalnameRequired("M2-HZ2"),
  // Square metres Hertz
  M2__HZ: Qudt.unitFromLocalnameRequired("M2-HZ"),
  // Deaths per Million individuals per year
  DEATHS__PER__1000000I__YR: Qudt.unitFromLocalnameRequired(
    "DEATHS-PER-1000000I-YR"
  ),
  // Kilocurie
  KiloCi: Qudt.unitFromLocalnameRequired("KiloCi"),
  // BTU-IT-PER-lb
  BTU_IT__PER__LB: Qudt.unitFromLocalnameRequired("BTU_IT-PER-LB"),
  // MegaS
  MegaS: Qudt.unitFromLocalnameRequired("MegaS"),
  // Square Metre per Mole
  M2__PER__MOL: Qudt.unitFromLocalnameRequired("M2-PER-MOL"),
  // Ounce (avoirdupois) Per Gallon (US)
  OZ__PER__GAL_US: Qudt.unitFromLocalnameRequired("OZ-PER-GAL_US"),
  // ExbiByte
  ExbiBYTE: Qudt.unitFromLocalnameRequired("ExbiBYTE"),
  // Pound per Foot
  LB__PER__FT: Qudt.unitFromLocalnameRequired("LB-PER-FT"),
  // Coulomb Square Metre
  C__M2: Qudt.unitFromLocalnameRequired("C-M2"),
  // Zloty
  Zloty: Qudt.unitFromLocalnameRequired("Zloty"),
  // Kilomole
  KiloMOL: Qudt.unitFromLocalnameRequired("KiloMOL"),
  // Degree Celsius Centimetre
  DEG_C__CentiM: Qudt.unitFromLocalnameRequired("DEG_C-CentiM"),
  // Pound Force
  LB_F: Qudt.unitFromLocalnameRequired("LB_F"),
  // Nepalese Rupee
  NepaleseRupee: Qudt.unitFromLocalnameRequired("NepaleseRupee"),
  // Square Nanometer
  NanoM2: Qudt.unitFromLocalnameRequired("NanoM2"),
  // Becquerel per Kilogram
  BQ__PER__KiloGM: Qudt.unitFromLocalnameRequired("BQ-PER-KiloGM"),
  // Cup (US)
  CUP_US: Qudt.unitFromLocalnameRequired("CUP_US"),
  // Lao kip
  LaoKip: Qudt.unitFromLocalnameRequired("LaoKip"),
  // Degree Rankine
  DEG_R: Qudt.unitFromLocalnameRequired("DEG_R"),
  // Micromoles per kilogram
  MicroMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("MicroMOL-PER-KiloGM"),
  // Short Ton
  TON_SHORT: Qudt.unitFromLocalnameRequired("TON_SHORT"),
  // Kilopascal Per Kelvin
  KiloPA__PER__K: Qudt.unitFromLocalnameRequired("KiloPA-PER-K"),
  // Gram Per Gram
  GM__PER__GM: Qudt.unitFromLocalnameRequired("GM-PER-GM"),
  // Gill (US) Per Second
  GI_US__PER__SEC: Qudt.unitFromLocalnameRequired("GI_US-PER-SEC"),
  // Watthour
  W__HR: Qudt.unitFromLocalnameRequired("W-HR"),
  // Microgram
  MicroGM: Qudt.unitFromLocalnameRequired("MicroGM"),
  // Joule per Kilogram Kelvin Cubic Metre
  J__PER__KiloGM__K__M3: Qudt.unitFromLocalnameRequired("J-PER-KiloGM-K-M3"),
  // Tonne Per Hour
  TON_Metric__PER__HR: Qudt.unitFromLocalnameRequired("TON_Metric-PER-HR"),
  // Microwatt Per Square Metre
  MicroW__PER__M2: Qudt.unitFromLocalnameRequired("MicroW-PER-M2"),
  // SameDay
  SameDay: Qudt.unitFromLocalnameRequired("SameDay"),
  // Quart (UK Liquid) Per Day
  QT_UK__PER__DAY: Qudt.unitFromLocalnameRequired("QT_UK-PER-DAY"),
  // Millijoule
  MilliJ: Qudt.unitFromLocalnameRequired("MilliJ"),
  // Moles per cubic metre per second
  MOL__PER__M3__SEC: Qudt.unitFromLocalnameRequired("MOL-PER-M3-SEC"),
  // Candela
  CD: Qudt.unitFromLocalnameRequired("CD"),
  // Tonne Per Second (metric Ton)
  TON_Metric__PER__SEC: Qudt.unitFromLocalnameRequired("TON_Metric-PER-SEC"),
  // Kilobit per Second
  KiloBIT__PER__SEC: Qudt.unitFromLocalnameRequired("KiloBIT-PER-SEC"),
  // Millipascal
  MilliPA: Qudt.unitFromLocalnameRequired("MilliPA"),
  // Slug per Foot
  SLUG__PER__FT: Qudt.unitFromLocalnameRequired("SLUG-PER-FT"),
  // Abtesla
  T_Ab: Qudt.unitFromLocalnameRequired("T_Ab"),
  // Gallon (US) Per Hour
  GAL_US__PER__HR: Qudt.unitFromLocalnameRequired("GAL_US-PER-HR"),
  // Tanzanian Shilling
  TanzanianShilling: Qudt.unitFromLocalnameRequired("TanzanianShilling"),
  // Degree Fahrenheit Hour Square Foot per British Thermal Unit (international Table)
  DEG_F__HR__FT2__PER__BTU_IT: Qudt.unitFromLocalnameRequired(
    "DEG_F-HR-FT2-PER-BTU_IT"
  ),
  // Slug
  SLUG: Qudt.unitFromLocalnameRequired("SLUG"),
  // Milligram Per Square Centimetre
  MilliGM__PER__CentiM2: Qudt.unitFromLocalnameRequired("MilliGM-PER-CentiM2"),
  // Pound Mole Degree Fahrenheit
  LB__MOL__DEG_F: Qudt.unitFromLocalnameRequired("LB-MOL-DEG_F"),
  // Milliwatts per square metre per nanometre
  MilliW__PER__M2__NanoM: Qudt.unitFromLocalnameRequired("MilliW-PER-M2-NanoM"),
  // Kelvin square metres per kilogram per second
  K__M2__PER__KiloGM__SEC: Qudt.unitFromLocalnameRequired(
    "K-M2-PER-KiloGM-SEC"
  ),
  // BTU per Square Foot Second Degree Fahrenheit
  BTU_IT__PER__FT2__SEC__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-FT2-SEC-DEG_F"
  ),
  // Kelvin per Minute
  K__PER__MIN: Qudt.unitFromLocalnameRequired("K-PER-MIN"),
  // Micromoles per square metre per second
  MicroMOL__PER__M2__SEC: Qudt.unitFromLocalnameRequired("MicroMOL-PER-M2-SEC"),
  // Percent per metre
  PERCENT__PER__M: Qudt.unitFromLocalnameRequired("PERCENT-PER-M"),
  // Watts per square metre per nanometre
  W__PER__M2__NanoM: Qudt.unitFromLocalnameRequired("W-PER-M2-NanoM"),
  // Hertz Meter
  HZ__M: Qudt.unitFromLocalnameRequired("HZ-M"),
  // Reciprocal Day
  PER__DAY: Qudt.unitFromLocalnameRequired("PER-DAY"),
  // Kilomole Per Minute
  KiloMOL__PER__MIN: Qudt.unitFromLocalnameRequired("KiloMOL-PER-MIN"),
  // Galileo
  GALILEO: Qudt.unitFromLocalnameRequired("GALILEO"),
  // Milligram Per Square Meter
  MilliGM__PER__M2: Qudt.unitFromLocalnameRequired("MilliGM-PER-M2"),
  // Barrel (US) Per Day
  BBL_US__PER__DAY: Qudt.unitFromLocalnameRequired("BBL_US-PER-DAY"),
  // Gallon (US Liquid) Per Second
  GAL_US__PER__SEC: Qudt.unitFromLocalnameRequired("GAL_US-PER-SEC"),
  // Millidegree Celsius
  MilliDEG_C: Qudt.unitFromLocalnameRequired("MilliDEG_C"),
  // European Unit of Account 17 (E.U.A.-17) (Bonds market unit)
  EuropeanUnitOfAccount17: Qudt.unitFromLocalnameRequired(
    "EuropeanUnitOfAccount17"
  ),
  // Shake
  SH: Qudt.unitFromLocalnameRequired("SH"),
  // Kelvin Per Kelvin
  K__PER__K: Qudt.unitFromLocalnameRequired("K-PER-K"),
  // US Liquid Quart
  QT_US: Qudt.unitFromLocalnameRequired("QT_US"),
  // Degree Baume (US Light)
  DEGREE_BAUME_US_LIGHT: Qudt.unitFromLocalnameRequired(
    "DEGREE_BAUME_US_LIGHT"
  ),
  // Litre
  L: Qudt.unitFromLocalnameRequired("L"),
  // Kilogram Per Square Centimetre
  KiloGM__PER__CentiM2: Qudt.unitFromLocalnameRequired("KiloGM-PER-CentiM2"),
  // Tonne Per Second
  TONNE__PER__SEC: Qudt.unitFromLocalnameRequired("TONNE-PER-SEC"),
  // Zimbabwe Dollar
  ZimbabweDollar: Qudt.unitFromLocalnameRequired("ZimbabweDollar"),
  // V_Stat-CentiM
  V_Stat__CentiM: Qudt.unitFromLocalnameRequired("V_Stat-CentiM"),
  // Nanomoles per litre per hour
  NanoMOL__PER__L__HR: Qudt.unitFromLocalnameRequired("NanoMOL-PER-L-HR"),
  // Litre Per Second
  L__PER__SEC: Qudt.unitFromLocalnameRequired("L-PER-SEC"),
  // Kilogram Per Kilogram
  KiloGM__PER__KiloGM: Qudt.unitFromLocalnameRequired("KiloGM-PER-KiloGM"),
  // Square Inch Per Second
  IN2__PER__SEC: Qudt.unitFromLocalnameRequired("IN2-PER-SEC"),
  // Dobra
  Dobra: Qudt.unitFromLocalnameRequired("Dobra"),
  // fermi
  FM: Qudt.unitFromLocalnameRequired("FM"),
  // Picomoles per metre per watt per second
  PicoMOL__PER__M__W__SEC: Qudt.unitFromLocalnameRequired(
    "PicoMOL-PER-M-W-SEC"
  ),
  // are
  ARE: Qudt.unitFromLocalnameRequired("ARE"),
  // Electronvolt Per Meter
  EV__PER__M: Qudt.unitFromLocalnameRequired("EV-PER-M"),
  // Becquerel per Square Meter
  BQ__PER__M2: Qudt.unitFromLocalnameRequired("BQ-PER-M2"),
  // Sidereal Minute
  MIN_Sidereal: Qudt.unitFromLocalnameRequired("MIN_Sidereal"),
  // Imperial Gallon
  GAL_IMP: Qudt.unitFromLocalnameRequired("GAL_IMP"),
  // Metre per Kelvin
  M__PER__K: Qudt.unitFromLocalnameRequired("M-PER-K"),
  // Number per metre
  NUM__PER__M: Qudt.unitFromLocalnameRequired("NUM-PER-M"),
  // Pascal metres per second
  PA__M__PER__SEC: Qudt.unitFromLocalnameRequired("PA-M-PER-SEC"),
  // Gram Per Cubic Centimeter
  GM__PER__CentiM3: Qudt.unitFromLocalnameRequired("GM-PER-CentiM3"),
  // Cubic Yard per Minute
  YD3__PER__MIN: Qudt.unitFromLocalnameRequired("YD3-PER-MIN"),
  // Cubic Decimetre
  DeciM3: Qudt.unitFromLocalnameRequired("DeciM3"),
  // Microcoulomb Per Cubic Metre
  MicroC__PER__M3: Qudt.unitFromLocalnameRequired("MicroC-PER-M3"),
  // Bar
  BAR: Qudt.unitFromLocalnameRequired("BAR"),
  // Square Volt per Square Kelvin
  V2__PER__K2: Qudt.unitFromLocalnameRequired("V2-PER-K2"),
  // Tesla
  T: Qudt.unitFromLocalnameRequired("T"),
  // Surinam Dollar
  SurinamDollar: Qudt.unitFromLocalnameRequired("SurinamDollar"),
  // Erg per Second
  ERG__PER__SEC: Qudt.unitFromLocalnameRequired("ERG-PER-SEC"),
  // Counts per second
  NUM__PER__SEC: Qudt.unitFromLocalnameRequired("NUM-PER-SEC"),
  // Percent Relative Humidity
  PERCENT_RH: Qudt.unitFromLocalnameRequired("PERCENT_RH"),
  // Henry Per Kiloohm
  H__PER__KiloOHM: Qudt.unitFromLocalnameRequired("H-PER-KiloOHM"),
  // Gauss
  GAUSS: Qudt.unitFromLocalnameRequired("GAUSS"),
  // Ounce (avoirdupois) Inch
  OZ__IN: Qudt.unitFromLocalnameRequired("OZ-IN"),
  // Decare
  DecaARE: Qudt.unitFromLocalnameRequired("DecaARE"),
  // Square Foot per Hour
  FT2__PER__HR: Qudt.unitFromLocalnameRequired("FT2-PER-HR"),
  // Kilogram Square Millimetre
  KiloGM__MilliM2: Qudt.unitFromLocalnameRequired("KiloGM-MilliM2"),
  // PicoPA
  PicoPA: Qudt.unitFromLocalnameRequired("PicoPA"),
  // Furlong
  FUR: Qudt.unitFromLocalnameRequired("FUR"),
  // Microatmospheres
  MicroATM: Qudt.unitFromLocalnameRequired("MicroATM"),
  // Bahamian Dollar
  BSD: Qudt.unitFromLocalnameRequired("BSD"),
  // Litres per micromole
  L__PER__MicroMOL: Qudt.unitFromLocalnameRequired("L-PER-MicroMOL"),
  // Millibecquerels per square metre per day
  MilliBQ__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MilliBQ-PER-M2-DAY"),
  // US Liquid Ounce
  OZ_VOL_US: Qudt.unitFromLocalnameRequired("OZ_VOL_US"),
  // Ban
  BAN: Qudt.unitFromLocalnameRequired("BAN"),
  // Gigahertz
  GigaHZ: Qudt.unitFromLocalnameRequired("GigaHZ"),
  // Coulomb
  C: Qudt.unitFromLocalnameRequired("C"),
  // Malagasy Ariary
  MalagasyAriary: Qudt.unitFromLocalnameRequired("MalagasyAriary"),
  // Kilopascal Per Millimetre
  KiloPA__PER__MilliM: Qudt.unitFromLocalnameRequired("KiloPA-PER-MilliM"),
  // Milligram Per Second
  MilliGM__PER__SEC: Qudt.unitFromLocalnameRequired("MilliGM-PER-SEC"),
  // Metre Kelvin
  M__K: Qudt.unitFromLocalnameRequired("M-K"),
  // BTU per Hour
  BTU_IT__PER__HR: Qudt.unitFromLocalnameRequired("BTU_IT-PER-HR"),
  // Trinidad and Tobago Dollar
  TrinidadAndTobagoDollar: Qudt.unitFromLocalnameRequired(
    "TrinidadAndTobagoDollar"
  ),
  // DEG_C_GROWING_CEREAL
  DEG_C_GROWING_CEREAL: Qudt.unitFromLocalnameRequired("DEG_C_GROWING_CEREAL"),
  // Degree per Minute
  DEG__PER__MIN: Qudt.unitFromLocalnameRequired("DEG-PER-MIN"),
  // Kiloampere Per Square Metre
  KiloA__PER__M2: Qudt.unitFromLocalnameRequired("KiloA-PER-M2"),
  // Croatian Kuna
  CroatianKuna: Qudt.unitFromLocalnameRequired("CroatianKuna"),
  // Reciprocal Pascal
  PER__PA: Qudt.unitFromLocalnameRequired("PER-PA"),
  // Kilocalorie (international Table)
  KiloCAL_IT: Qudt.unitFromLocalnameRequired("KiloCAL_IT"),
  // Foot Of Mercury
  FT_HG: Qudt.unitFromLocalnameRequired("FT_HG"),
  // SAMPLE
  SAMPLE: Qudt.unitFromLocalnameRequired("SAMPLE"),
  // Planck Length
  PlanckLength: Qudt.unitFromLocalnameRequired("PlanckLength"),
  // GigaBIT
  GigaBIT: Qudt.unitFromLocalnameRequired("GigaBIT"),
  // Square metre seconds per radian
  M2__SEC__PER__RAD: Qudt.unitFromLocalnameRequired("M2-SEC-PER-RAD"),
  // Quartic Inch
  IN4: Qudt.unitFromLocalnameRequired("IN4"),
  // Hectopascals per hour
  HectoPA__PER__HR: Qudt.unitFromLocalnameRequired("HectoPA-PER-HR"),
  // Ngultrum
  Ngultrum: Qudt.unitFromLocalnameRequired("Ngultrum"),
  // Bar Liter Per Second
  BAR__L__PER__SEC: Qudt.unitFromLocalnameRequired("BAR-L-PER-SEC"),
  // Pascal Second Per Metre
  PA__SEC__PER__M: Qudt.unitFromLocalnameRequired("PA-SEC-PER-M"),
  // Kilo Newton Square Metre
  KiloN__M2: Qudt.unitFromLocalnameRequired("KiloN-M2"),
  // Microhenry Per Metre
  MicroH__PER__M: Qudt.unitFromLocalnameRequired("MicroH-PER-M"),
  // Lux
  LUX: Qudt.unitFromLocalnameRequired("LUX"),
  // Cubic Centimeter Per Second
  CentiM3__PER__SEC: Qudt.unitFromLocalnameRequired("CentiM3-PER-SEC"),
  // Quart (US Liquid) Per Day
  QT_US__PER__DAY: Qudt.unitFromLocalnameRequired("QT_US-PER-DAY"),
  // Gamma
  Gamma: Qudt.unitFromLocalnameRequired("Gamma"),
  // Mauritius Rupee
  MauritiusRupee: Qudt.unitFromLocalnameRequired("MauritiusRupee"),
  // Milliroentgen Equivalent Man
  MilliR_man: Qudt.unitFromLocalnameRequired("MilliR_man"),
  // Kilogram per Meter
  KiloGM__PER__M: Qudt.unitFromLocalnameRequired("KiloGM-PER-M"),
  // Gravity
  G: Qudt.unitFromLocalnameRequired("G"),
  // Micropascal
  MicroPA: Qudt.unitFromLocalnameRequired("MicroPA"),
  // Calorie (thermochemical) Per Second Centimetre Kelvin
  CAL_TH__PER__SEC__CentiM__K: Qudt.unitFromLocalnameRequired(
    "CAL_TH-PER-SEC-CentiM-K"
  ),
  // Gigacoulomb Per Cubic Meter
  GigaC__PER__M3: Qudt.unitFromLocalnameRequired("GigaC-PER-M3"),
  // British Thermal Unit (international Table) Per Minute
  BTU_IT__PER__MIN: Qudt.unitFromLocalnameRequired("BTU_IT-PER-MIN"),
  // Millinewton Per Meter
  MilliN__PER__M: Qudt.unitFromLocalnameRequired("MilliN-PER-M"),
  // Bar Cubic Meter Per Second
  BAR__M3__PER__SEC: Qudt.unitFromLocalnameRequired("BAR-M3-PER-SEC"),
  // Megapascal Litre Per Second
  MegaPA__L__PER__SEC: Qudt.unitFromLocalnameRequired("MegaPA-L-PER-SEC"),
  // Degree Fahrenheit Hour Square Foot per British Thermal Unit (thermochemical)
  DEG_F__HR__FT2__PER__BTU_TH: Qudt.unitFromLocalnameRequired(
    "DEG_F-HR-FT2-PER-BTU_TH"
  ),
  // Imperial Mass Ounce per Square Foot
  OZ__PER__FT2: Qudt.unitFromLocalnameRequired("OZ-PER-FT2"),
  // Number per hectare
  NUM__PER__HA: Qudt.unitFromLocalnameRequired("NUM-PER-HA"),
  // Millilitre Per Kilogram
  MilliL__PER__KiloGM: Qudt.unitFromLocalnameRequired("MilliL-PER-KiloGM"),
  // MILLE
  MILLE: Qudt.unitFromLocalnameRequired("MILLE"),
  // Nanograms per day
  NanoGM__PER__DAY: Qudt.unitFromLocalnameRequired("NanoGM-PER-DAY"),
  // THM_EEC
  THM_EEC: Qudt.unitFromLocalnameRequired("THM_EEC"),
  // Pound Force Per Square Inch Degree Fahrenheit
  LB_F__PER__IN2__DEG_F: Qudt.unitFromLocalnameRequired("LB_F-PER-IN2-DEG_F"),
  // MegaCoulomb
  MegaC: Qudt.unitFromLocalnameRequired("MegaC"),
  // Horsepower
  HP: Qudt.unitFromLocalnameRequired("HP"),
  // Flight
  Flight: Qudt.unitFromLocalnameRequired("Flight"),
  // Therm US
  THM_US: Qudt.unitFromLocalnameRequired("THM_US"),
  // Milligrams per cubic metre per second
  MilliGM__PER__M3__SEC: Qudt.unitFromLocalnameRequired("MilliGM-PER-M3-SEC"),
  // Nanowatt
  NanoW: Qudt.unitFromLocalnameRequired("NanoW"),
  // Millivolt
  MilliV: Qudt.unitFromLocalnameRequired("MilliV"),
  // Short Ton (US) Per Cubic Yard
  TON_US__PER__YD3: Qudt.unitFromLocalnameRequired("TON_US-PER-YD3"),
  // Cubic Meter per Hour
  M3__PER__HR: Qudt.unitFromLocalnameRequired("M3-PER-HR"),
  // Bushel (UK) Per Second
  BU_UK__PER__SEC: Qudt.unitFromLocalnameRequired("BU_UK-PER-SEC"),
  // Milliohm
  MilliOHM: Qudt.unitFromLocalnameRequired("MilliOHM"),
  // Decibel Carrier Unit
  DeciB_C: Qudt.unitFromLocalnameRequired("DeciB_C"),
  // Reciprocal Week
  PER__WK: Qudt.unitFromLocalnameRequired("PER-WK"),
  // Picohenry
  PicoH: Qudt.unitFromLocalnameRequired("PicoH"),
  // Cubic Decimeter Per Mole
  DeciM3__PER__MOL: Qudt.unitFromLocalnameRequired("DeciM3-PER-MOL"),
  // Knot
  KN: Qudt.unitFromLocalnameRequired("KN"),
  // Degree Twaddell
  DEGREE_TWADDELL: Qudt.unitFromLocalnameRequired("DEGREE_TWADDELL"),
  // Nautical Mile
  MI_N: Qudt.unitFromLocalnameRequired("MI_N"),
  // Kilogram Per Millimeter
  KiloGM__PER__MilliM: Qudt.unitFromLocalnameRequired("KiloGM-PER-MilliM"),
  // Angstrom
  ANGSTROM: Qudt.unitFromLocalnameRequired("ANGSTROM"),
  // Gallon (UK) Per Day
  GAL_UK__PER__DAY: Qudt.unitFromLocalnameRequired("GAL_UK-PER-DAY"),
  // Hong Kong Dollar
  HongKongDollar: Qudt.unitFromLocalnameRequired("HongKongDollar"),
  // Milligram Per Metre
  MilliGM__PER__M: Qudt.unitFromLocalnameRequired("MilliGM-PER-M"),
  // Microgram Per Kilogram
  MicroGM__PER__KiloGM: Qudt.unitFromLocalnameRequired("MicroGM-PER-KiloGM"),
  // Ton Force (US Short)
  TON_F_US: Qudt.unitFromLocalnameRequired("TON_F_US"),
  // Earth mass
  EarthMass: Qudt.unitFromLocalnameRequired("EarthMass"),
  // FRAME
  FRAME: Qudt.unitFromLocalnameRequired("FRAME"),
  // Quad
  QUAD: Qudt.unitFromLocalnameRequired("QUAD"),
  // Planck Density
  PlanckDensity: Qudt.unitFromLocalnameRequired("PlanckDensity"),
  // Calorie (thermochemical) Per Second Square Centimeter kelvin
  CAL_TH__PER__SEC__CentiM2__K: Qudt.unitFromLocalnameRequired(
    "CAL_TH-PER-SEC-CentiM2-K"
  ),
  // Gill (US)
  GI_US: Qudt.unitFromLocalnameRequired("GI_US"),
  // Siemens
  S: Qudt.unitFromLocalnameRequired("S"),
  // MilliRAD_R
  MilliRAD_R: Qudt.unitFromLocalnameRequired("MilliRAD_R"),
  // Henry Per Ohm
  H__PER__OHM: Qudt.unitFromLocalnameRequired("H-PER-OHM"),
  // Abvolt Second
  V_Ab__SEC: Qudt.unitFromLocalnameRequired("V_Ab-SEC"),
  // Giga Electron Volt
  GigaEV: Qudt.unitFromLocalnameRequired("GigaEV"),
  // Pint (US Liquid) Per Second
  PINT_US__PER__SEC: Qudt.unitFromLocalnameRequired("PINT_US-PER-SEC"),
  // Micrograms per gram
  MicroGM__PER__GM: Qudt.unitFromLocalnameRequired("MicroGM-PER-GM"),
  // Pound per Foot Hour
  LB__PER__FT__HR: Qudt.unitFromLocalnameRequired("LB-PER-FT-HR"),
  // Millipascal Second Per Bar
  MilliPA__SEC__PER__BAR: Qudt.unitFromLocalnameRequired("MilliPA-SEC-PER-BAR"),
  // MicroGray
  MicroGRAY: Qudt.unitFromLocalnameRequired("MicroGRAY"),
  // Microhenry
  MicroH: Qudt.unitFromLocalnameRequired("MicroH"),
  // Millibar
  MilliBAR: Qudt.unitFromLocalnameRequired("MilliBAR"),
  // Watts per square metre per metre per steradian
  W__PER__M2__M__SR: Qudt.unitFromLocalnameRequired("W-PER-M2-M-SR"),
  // Cubic Decimeter Per Second
  DeciM3__PER__SEC: Qudt.unitFromLocalnameRequired("DeciM3-PER-SEC"),
  // W-M2-PER-SR
  W__M2__PER__SR: Qudt.unitFromLocalnameRequired("W-M2-PER-SR"),
  // Mile per Hour
  MI__PER__HR: Qudt.unitFromLocalnameRequired("MI-PER-HR"),
  // Kiloohm
  KiloOHM: Qudt.unitFromLocalnameRequired("KiloOHM"),
  // Planck Current Density
  PlanckCurrentDensity: Qudt.unitFromLocalnameRequired("PlanckCurrentDensity"),
  // Mohm
  MOHM: Qudt.unitFromLocalnameRequired("MOHM"),
  // Kilojoule Per Kelvin
  KiloJ__PER__K: Qudt.unitFromLocalnameRequired("KiloJ-PER-K"),
  // Metre per Square Second
  M__PER__SEC2: Qudt.unitFromLocalnameRequired("M-PER-SEC2"),
  // Cord
  CORD: Qudt.unitFromLocalnameRequired("CORD"),
  // Rayl
  RAYL: Qudt.unitFromLocalnameRequired("RAYL"),
  // Qatari Rial
  QatariRial: Qudt.unitFromLocalnameRequired("QatariRial"),
  // Cubic Decimetre Per Cubic Metre
  DeciM3__PER__M3: Qudt.unitFromLocalnameRequired("DeciM3-PER-M3"),
  // Picomoles per cubic metre per second
  PicoMOL__PER__M3__SEC: Qudt.unitFromLocalnameRequired("PicoMOL-PER-M3-SEC"),
  // Milliwatt Per Square Metre
  MilliW__PER__M2: Qudt.unitFromLocalnameRequired("MilliW-PER-M2"),
  // Ampere Second
  A__SEC: Qudt.unitFromLocalnameRequired("A-SEC"),
  // Joule per Cubic Meter
  J__PER__M3: Qudt.unitFromLocalnameRequired("J-PER-M3"),
  // Pound (avoirdupois) Per Day
  LB__PER__DAY: Qudt.unitFromLocalnameRequired("LB-PER-DAY"),
  // Sidereal Year
  YR_Sidereal: Qudt.unitFromLocalnameRequired("YR_Sidereal"),
  // Ounce (avoirdupois) Per Second
  OZ__PER__SEC: Qudt.unitFromLocalnameRequired("OZ-PER-SEC"),
  // Inch per Second
  IN__PER__SEC: Qudt.unitFromLocalnameRequired("IN-PER-SEC"),
  // Millimetre Per Kelvin
  MilliM__PER__K: Qudt.unitFromLocalnameRequired("MilliM-PER-K"),
  // Egyptian Pound
  EgyptianPound: Qudt.unitFromLocalnameRequired("EgyptianPound"),
  // Newton Per Square Millimeter
  N__PER__MilliM2: Qudt.unitFromLocalnameRequired("N-PER-MilliM2"),
  // KiloLB_F
  KiloLB_F: Qudt.unitFromLocalnameRequired("KiloLB_F"),
  // BTU per Hour Square Foot
  BTU_IT__PER__HR__FT2: Qudt.unitFromLocalnameRequired("BTU_IT-PER-HR-FT2"),
  // Square metres per square Hertz
  M2__PER__HZ2: Qudt.unitFromLocalnameRequired("M2-PER-HZ2"),
  // Degree Fahrenheit
  DEG_F: Qudt.unitFromLocalnameRequired("DEG_F"),
  // BTU per Second
  BTU_IT__PER__SEC: Qudt.unitFromLocalnameRequired("BTU_IT-PER-SEC"),
  // Micromole
  MicroMOL: Qudt.unitFromLocalnameRequired("MicroMOL"),
  // Nanohenry
  NanoH: Qudt.unitFromLocalnameRequired("NanoH"),
  // Terahertz
  TeraHZ: Qudt.unitFromLocalnameRequired("TeraHZ"),
  // Pound Force Second per Square Inch
  LB_F__SEC__PER__IN2: Qudt.unitFromLocalnameRequired("LB_F-SEC-PER-IN2"),
  // Pint (US Liquid) Per Minute
  PINT_US__PER__MIN: Qudt.unitFromLocalnameRequired("PINT_US-PER-MIN"),
  // Joule Per Gram
  J__PER__GM: Qudt.unitFromLocalnameRequired("J-PER-GM"),
  // cubic centimetre
  CentiM3: Qudt.unitFromLocalnameRequired("CentiM3"),
  // Clo
  CLO: Qudt.unitFromLocalnameRequired("CLO"),
  // Reciprocal Kelvin
  PER__K: Qudt.unitFromLocalnameRequired("PER-K"),
  // Barbados Dollar
  BBD: Qudt.unitFromLocalnameRequired("BBD"),
  // Reciprocal Micrometre
  PER__MicroM: Qudt.unitFromLocalnameRequired("PER-MicroM"),
  // British Thermal Unit (international Table) Per Second Square Foot degree Rankine
  BTU_IT__PER__SEC__FT2__DEG_R: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-SEC-FT2-DEG_R"
  ),
  // KiloWB
  KiloWB: Qudt.unitFromLocalnameRequired("KiloWB"),
  // Picolitre
  PicoL: Qudt.unitFromLocalnameRequired("PicoL"),
  // Baht
  THB: Qudt.unitFromLocalnameRequired("THB"),
  // Ounce (UK Fluid) Per Hour
  OZ_VOL_UK__PER__HR: Qudt.unitFromLocalnameRequired("OZ_VOL_UK-PER-HR"),
  // Milligrams per square metre per hour
  MilliGM__PER__M2__HR: Qudt.unitFromLocalnameRequired("MilliGM-PER-M2-HR"),
  // Danish Krone
  DanishKrone: Qudt.unitFromLocalnameRequired("DanishKrone"),
  // Ampere Square Metre
  A__M2: Qudt.unitFromLocalnameRequired("A-M2"),
  // Pascal per Kelvin
  PA__PER__K: Qudt.unitFromLocalnameRequired("PA-PER-K"),
  // Mega Pound Force
  MegaLB_F: Qudt.unitFromLocalnameRequired("MegaLB_F"),
  // Femtolitre
  FemtoL: Qudt.unitFromLocalnameRequired("FemtoL"),
  // Kilogram Square Meter
  KiloGM__M2: Qudt.unitFromLocalnameRequired("KiloGM-M2"),
  // Revolution per Hour
  REV__PER__HR: Qudt.unitFromLocalnameRequired("REV-PER-HR"),
  // Samoan Tala
  SamoanTala: Qudt.unitFromLocalnameRequired("SamoanTala"),
  // Newton metre per metre
  N__M__PER__M: Qudt.unitFromLocalnameRequired("N-M-PER-M"),
  // Tonne Per Minute
  TON_Metric__PER__MIN: Qudt.unitFromLocalnameRequired("TON_Metric-PER-MIN"),
  // Megapascal Per Bar
  MegaPA__PER__BAR: Qudt.unitFromLocalnameRequired("MegaPA-PER-BAR"),
  // Neper
  NP: Qudt.unitFromLocalnameRequired("NP"),
  // Henry per Meter
  H__PER__M: Qudt.unitFromLocalnameRequired("H-PER-M"),
  // Decametre
  DecaM: Qudt.unitFromLocalnameRequired("DecaM"),
  // Kilowatt hour per square metre
  KiloW__HR__PER__M2: Qudt.unitFromLocalnameRequired("KiloW-HR-PER-M2"),
  // New Turkish Lira
  NewTurkishLira: Qudt.unitFromLocalnameRequired("NewTurkishLira"),
  // Pound Force Foot
  LB_F__FT: Qudt.unitFromLocalnameRequired("LB_F-FT"),
  // Erg Per Gram
  ERG__PER__GM: Qudt.unitFromLocalnameRequired("ERG-PER-GM"),
  // Statsiemens
  S_Stat: Qudt.unitFromLocalnameRequired("S_Stat"),
  // Barad
  BARAD: Qudt.unitFromLocalnameRequired("BARAD"),
  // Millimoles per mole
  MilliMOL__PER__MOL: Qudt.unitFromLocalnameRequired("MilliMOL-PER-MOL"),
  // Newton Per Centimeter
  N__PER__CentiM: Qudt.unitFromLocalnameRequired("N-PER-CentiM"),
  // Abcoulomb
  C_Ab: Qudt.unitFromLocalnameRequired("C_Ab"),
  // Decibel
  DeciB: Qudt.unitFromLocalnameRequired("DeciB"),
  // Kilovolt Ampere Hour
  KiloV__A__HR: Qudt.unitFromLocalnameRequired("KiloV-A-HR"),
  // Square metres per gram
  M2__PER__GM: Qudt.unitFromLocalnameRequired("M2-PER-GM"),
  // Nuevo Sol
  NuevoSol: Qudt.unitFromLocalnameRequired("NuevoSol"),
  // Inch of Mercury
  IN_HG: Qudt.unitFromLocalnameRequired("IN_HG"),
  // Degree Fahrenheit per Minute
  DEG_F__PER__MIN: Qudt.unitFromLocalnameRequired("DEG_F-PER-MIN"),
  // Slug per Second
  SLUG__PER__SEC: Qudt.unitFromLocalnameRequired("SLUG-PER-SEC"),
  // Degree per Square Second
  DEG__PER__SEC2: Qudt.unitFromLocalnameRequired("DEG-PER-SEC2"),
  // Gram Per Kilometre
  GM__PER__KiloM: Qudt.unitFromLocalnameRequired("GM-PER-KiloM"),
  // US Gallon per Day
  GAL_US__PER__DAY: Qudt.unitFromLocalnameRequired("GAL_US-PER-DAY"),
  // grams Carbon per square meter per day
  GM_Carbon__PER__M2__DAY: Qudt.unitFromLocalnameRequired(
    "GM_Carbon-PER-M2-DAY"
  ),
  // Gigabecquerel
  GigaBQ: Qudt.unitFromLocalnameRequired("GigaBQ"),
  // Coulomb per Kilogram
  C__PER__KiloGM: Qudt.unitFromLocalnameRequired("C-PER-KiloGM"),
  // Watts per square metre per nanometre per steradian
  W__PER__M2__NanoM__SR: Qudt.unitFromLocalnameRequired("W-PER-M2-NanoM-SR"),
  // Sri Lanka Rupee
  SriLankaRupee: Qudt.unitFromLocalnameRequired("SriLankaRupee"),
  // Gram Degree Celsius
  GM__PER__DEG_C: Qudt.unitFromLocalnameRequired("GM-PER-DEG_C"),
  // bushel (UK)
  BU_UK: Qudt.unitFromLocalnameRequired("BU_UK"),
  // Kelvin Meter Per Watt
  K__M__PER__W: Qudt.unitFromLocalnameRequired("K-M-PER-W"),
  // Kilomol per Kilogram
  KiloMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("KiloMOL-PER-KiloGM"),
  // Watt per Square Meter
  W__PER__M2: Qudt.unitFromLocalnameRequired("W-PER-M2"),
  // Reciprocal square second
  PER__SEC2: Qudt.unitFromLocalnameRequired("PER-SEC2"),
  // Short Ton per Cubic Yard
  TON_SHORT__PER__YD3: Qudt.unitFromLocalnameRequired("TON_SHORT-PER-YD3"),
  // Metric KiloTON
  KiloTON_Metric: Qudt.unitFromLocalnameRequired("KiloTON_Metric"),
  // Grain
  GRAIN: Qudt.unitFromLocalnameRequired("GRAIN"),
  // Grade
  GR: Qudt.unitFromLocalnameRequired("GR"),
  // Megagram
  MegaGM: Qudt.unitFromLocalnameRequired("MegaGM"),
  // Nanometer Per Centimeter PSI
  NanoM__PER__CentiM__PSI: Qudt.unitFromLocalnameRequired(
    "NanoM-PER-CentiM-PSI"
  ),
  // Dalton
  Da: Qudt.unitFromLocalnameRequired("Da"),
  // Watt Per Cubic Metre
  W__PER__M3: Qudt.unitFromLocalnameRequired("W-PER-M3"),
  // Ampere per Square Meter Square Kelvin
  A__PER__M2__K2: Qudt.unitFromLocalnameRequired("A-PER-M2-K2"),
  // Pound per Cubic Inch
  LB__PER__IN3: Qudt.unitFromLocalnameRequired("LB-PER-IN3"),
  // Pound per Gallon
  LB__PER__GAL: Qudt.unitFromLocalnameRequired("LB-PER-GAL"),
  // HectoCoulomb
  HectoC: Qudt.unitFromLocalnameRequired("HectoC"),
  // Swiss Franc
  SwissFranc: Qudt.unitFromLocalnameRequired("SwissFranc"),
  // Square Millimetre
  MilliM2: Qudt.unitFromLocalnameRequired("MilliM2"),
  // Number per gram
  NUM__PER__GM: Qudt.unitFromLocalnameRequired("NUM-PER-GM"),
  // Micrograms per litre per hour
  MicroGM__PER__L__HR: Qudt.unitFromLocalnameRequired("MicroGM-PER-L-HR"),
  // Dyne Second Per Centimetre
  DYN__SEC__PER__CentiM: Qudt.unitFromLocalnameRequired("DYN-SEC-PER-CentiM"),
  // Cubic Yard Per Degree Fahrenheit
  YD3__PER__DEG_F: Qudt.unitFromLocalnameRequired("YD3-PER-DEG_F"),
  // Square centimetres per second
  CentiM2__PER__SEC: Qudt.unitFromLocalnameRequired("CentiM2-PER-SEC"),
  // Parts per thousand
  PPTH: Qudt.unitFromLocalnameRequired("PPTH"),
  // Reciprocal Minute
  PER__MIN: Qudt.unitFromLocalnameRequired("PER-MIN"),
  // Number per Year
  NUM__PER__YR: Qudt.unitFromLocalnameRequired("NUM-PER-YR"),
  // Micromoles per gram per second
  MicroMOL__PER__GM__SEC: Qudt.unitFromLocalnameRequired("MicroMOL-PER-GM-SEC"),
  // Board Foot
  FBM: Qudt.unitFromLocalnameRequired("FBM"),
  // Gs
  Gs: Qudt.unitFromLocalnameRequired("Gs"),
  // MicroGals per metre
  MicroGAL__PER__M: Qudt.unitFromLocalnameRequired("MicroGAL-PER-M"),
  // Watt per Meter Kelvin
  W__PER__M__K: Qudt.unitFromLocalnameRequired("W-PER-M-K"),
  // Reciprocal Year
  PER__YR: Qudt.unitFromLocalnameRequired("PER-YR"),
  // Micromoles per square metre per day
  MicroMOL__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MicroMOL-PER-M2-DAY"),
  // Kilolitre Per Hour
  KiloL__PER__HR: Qudt.unitFromLocalnameRequired("KiloL-PER-HR"),
  // Pound Force Inch
  LB_F__IN: Qudt.unitFromLocalnameRequired("LB_F-IN"),
  // Gill (US) Per Minute
  GI_US__PER__MIN: Qudt.unitFromLocalnameRequired("GI_US-PER-MIN"),
  // Kilonewton
  KiloN: Qudt.unitFromLocalnameRequired("KiloN"),
  // Micromho
  MicroMHO: Qudt.unitFromLocalnameRequired("MicroMHO"),
  // Faraday
  F: Qudt.unitFromLocalnameRequired("F"),
  // radian per second
  RAD__PER__SEC: Qudt.unitFromLocalnameRequired("RAD-PER-SEC"),
  // Centinewton Meter
  CentiN__M: Qudt.unitFromLocalnameRequired("CentiN-M"),
  // Planck Charge
  PlanckCharge: Qudt.unitFromLocalnameRequired("PlanckCharge"),
  // Katal
  KAT: Qudt.unitFromLocalnameRequired("KAT"),
  // Erg
  ERG: Qudt.unitFromLocalnameRequired("ERG"),
  // Square Micrometre
  MicroM2: Qudt.unitFromLocalnameRequired("MicroM2"),
  // Moles per square metre per second per metre per steradian
  MOL__PER__M2__SEC__M__SR: Qudt.unitFromLocalnameRequired(
    "MOL-PER-M2-SEC-M-SR"
  ),
  // Square Inch
  IN2: Qudt.unitFromLocalnameRequired("IN2"),
  // Gram Per Millimetre
  GM__PER__MilliM: Qudt.unitFromLocalnameRequired("GM-PER-MilliM"),
  // Joule per Square Tesla
  J__PER__T2: Qudt.unitFromLocalnameRequired("J-PER-T2"),
  // Cubic Foot Per Minute Square Foot
  FT3__PER__MIN__FT2: Qudt.unitFromLocalnameRequired("FT3-PER-MIN-FT2"),
  // Number per square kilometre
  NUM__PER__KiloM2: Qudt.unitFromLocalnameRequired("NUM-PER-KiloM2"),
  // Statfarad
  FARAD_Stat: Qudt.unitFromLocalnameRequired("FARAD_Stat"),
  // Mole per Cubic Metre
  MOL__PER__M3: Qudt.unitFromLocalnameRequired("MOL-PER-M3"),
  // Gram Per Meter
  GM__PER__M: Qudt.unitFromLocalnameRequired("GM-PER-M"),
  // Imperial Mass Ounce per Square Yard
  OZ__PER__YD2: Qudt.unitFromLocalnameRequired("OZ-PER-YD2"),
  // Ampere per Degree Celsius
  A__PER__DEG_C: Qudt.unitFromLocalnameRequired("A-PER-DEG_C"),
  // Megabit per Second
  MegaBIT__PER__SEC: Qudt.unitFromLocalnameRequired("MegaBIT-PER-SEC"),
  // Tonne Per Hour
  TONNE__PER__HR: Qudt.unitFromLocalnameRequired("TONNE-PER-HR"),
  // Ampere Per Centimeter
  A__PER__CentiM: Qudt.unitFromLocalnameRequired("A-PER-CentiM"),
  // Million Years
  MegaYR: Qudt.unitFromLocalnameRequired("MegaYR"),
  // millimoles per litre
  MilliMOL__PER__L: Qudt.unitFromLocalnameRequired("MilliMOL-PER-L"),
  // Abampere Square centimetre
  A_Ab__CentiM2: Qudt.unitFromLocalnameRequired("A_Ab-CentiM2"),
  // BTU per Pound Mole Degree Fahrenheit
  BTU_IT__PER__MOL__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-MOL-DEG_F"
  ),
  // Tonne
  TONNE: Qudt.unitFromLocalnameRequired("TONNE"),
  // Kilocalorie Per Minute
  KiloCAL__PER__MIN: Qudt.unitFromLocalnameRequired("KiloCAL-PER-MIN"),
  // Watt per Square Foot
  W__PER__FT2: Qudt.unitFromLocalnameRequired("W-PER-FT2"),
  // Fluid Ounce (UK)
  OZ_VOL_UK: Qudt.unitFromLocalnameRequired("OZ_VOL_UK"),
  // Joule Per Hour
  J__PER__HR: Qudt.unitFromLocalnameRequired("J-PER-HR"),
  // Millipascal Second
  MilliPA__SEC: Qudt.unitFromLocalnameRequired("MilliPA-SEC"),
  // Dry Gallon US
  GAL_US_DRY: Qudt.unitFromLocalnameRequired("GAL_US_DRY"),
  // Square Metre Steradian
  M2__SR: Qudt.unitFromLocalnameRequired("M2-SR"),
  // Pound (avoirdupois) Per Second
  LB__PER__SEC: Qudt.unitFromLocalnameRequired("LB-PER-SEC"),
  // Number
  NUM: Qudt.unitFromLocalnameRequired("NUM"),
  // Millicurie
  MilliCi: Qudt.unitFromLocalnameRequired("MilliCi"),
  // Kilocalorie per Centimeter Second Degree Celsius
  KiloCAL__PER__CentiM__SEC__DEG_C: Qudt.unitFromLocalnameRequired(
    "KiloCAL-PER-CentiM-SEC-DEG_C"
  ),
  // Roentgen
  R: Qudt.unitFromLocalnameRequired("R"),
  // Brazilian Real
  BrazilianReal: Qudt.unitFromLocalnameRequired("BrazilianReal"),
  // Pound Force per Square Inch Second
  LB_F__PER__IN2__SEC: Qudt.unitFromLocalnameRequired("LB_F-PER-IN2-SEC"),
  // MicroSievert
  MicroSV: Qudt.unitFromLocalnameRequired("MicroSV"),
  // Kilojoule Per Mole
  KiloJ__PER__MOL: Qudt.unitFromLocalnameRequired("KiloJ-PER-MOL"),
  // Seychelles Rupee
  SeychellesRupee: Qudt.unitFromLocalnameRequired("SeychellesRupee"),
  // Microohm
  MicroOHM: Qudt.unitFromLocalnameRequired("MicroOHM"),
  // Milliampere Per Inch
  MilliA__PER__IN: Qudt.unitFromLocalnameRequired("MilliA-PER-IN"),
  // Square Centimeter
  CentiM2: Qudt.unitFromLocalnameRequired("CentiM2"),
  // Milligram Per Day
  MilliGM__PER__DAY: Qudt.unitFromLocalnameRequired("MilliGM-PER-DAY"),
  // Square Meter Hour Degree Celsius Per Kilocalorie (international Table)
  M2__HR__DEG_C__PER__KiloCAL_IT: Qudt.unitFromLocalnameRequired(
    "M2-HR-DEG_C-PER-KiloCAL_IT"
  ),
  // Planck Time
  PlanckTime: Qudt.unitFromLocalnameRequired("PlanckTime"),
  // Micropoise
  MicroPOISE: Qudt.unitFromLocalnameRequired("MicroPOISE"),
  // Megajoule
  MegaJ: Qudt.unitFromLocalnameRequired("MegaJ"),
  // Square Decimetre
  DeciM2: Qudt.unitFromLocalnameRequired("DeciM2"),
  // Milli ArcSecond
  MilliARCSEC: Qudt.unitFromLocalnameRequired("MilliARCSEC"),
  // Coulomb per Square Metre
  C__PER__M2: Qudt.unitFromLocalnameRequired("C-PER-M2"),
  // Common Year
  YR_Common: Qudt.unitFromLocalnameRequired("YR_Common"),
  // Nanomoles per kilogram
  NanoMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("NanoMOL-PER-KiloGM"),
  // Forint
  Forint: Qudt.unitFromLocalnameRequired("Forint"),
  // International Unit per Litre
  IU__PER__L: Qudt.unitFromLocalnameRequired("IU-PER-L"),
  // Slovak Koruna
  SlovakKoruna: Qudt.unitFromLocalnameRequired("SlovakKoruna"),
  // Colombian Peso
  ColombianPeso: Qudt.unitFromLocalnameRequired("ColombianPeso"),
  // Square metres cubic Hertz
  M2__HZ3: Qudt.unitFromLocalnameRequired("M2-HZ3"),
  // Degree Celsius Per Kelvin
  DEG_C__PER__K: Qudt.unitFromLocalnameRequired("DEG_C-PER-K"),
  // Sidereal Day
  DAY_Sidereal: Qudt.unitFromLocalnameRequired("DAY_Sidereal"),
  // Gallon (UK) Per Hour
  GAL_UK__PER__HR: Qudt.unitFromLocalnameRequired("GAL_UK-PER-HR"),
  // Inch Per Degree Fahrenheit
  IN__PER__DEG_F: Qudt.unitFromLocalnameRequired("IN-PER-DEG_F"),
  // FemtoGM
  FemtoGM: Qudt.unitFromLocalnameRequired("FemtoGM"),
  // International Unit per milligram
  IU__PER__MilliGM: Qudt.unitFromLocalnameRequired("IU-PER-MilliGM"),
  // Pascal metres
  PA__M: Qudt.unitFromLocalnameRequired("PA-M"),
  // Latvian Lats
  LatvianLats: Qudt.unitFromLocalnameRequired("LatvianLats"),
  // CentiN
  CentiN: Qudt.unitFromLocalnameRequired("CentiN"),
  // Kilopound Force Per Square Inch
  KiloLB_F__PER__IN2: Qudt.unitFromLocalnameRequired("KiloLB_F-PER-IN2"),
  // Millimoles per cubic metre per day
  MilliMOL__PER__M3__DAY: Qudt.unitFromLocalnameRequired("MilliMOL-PER-M3-DAY"),
  // Reciprocal metre per nanometre per steradian
  PER__M__NanoM__SR: Qudt.unitFromLocalnameRequired("PER-M-NanoM-SR"),
  // Nautical Mile per Minute
  MI_N__PER__MIN: Qudt.unitFromLocalnameRequired("MI_N-PER-MIN"),
  // Gross Tonnage
  GT: Qudt.unitFromLocalnameRequired("GT"),
  // PSI
  PSI: Qudt.unitFromLocalnameRequired("PSI"),
  // Coulomb Per Square Centimeter
  C__PER__CentiM2: Qudt.unitFromLocalnameRequired("C-PER-CentiM2"),
  // Kilometer per Hour
  KiloM__PER__HR: Qudt.unitFromLocalnameRequired("KiloM-PER-HR"),
  // Pascal per Hour
  PA__PER__HR: Qudt.unitFromLocalnameRequired("PA-PER-HR"),
  // Newton Centimeter
  N__CentiM: Qudt.unitFromLocalnameRequired("N-CentiM"),
  // Calorie (international Table) Per Second Centimetre Kelvin
  CAL_IT__PER__SEC__CentiM__K: Qudt.unitFromLocalnameRequired(
    "CAL_IT-PER-SEC-CentiM-K"
  ),
  // MDOLLAR
  MDOLLAR: Qudt.unitFromLocalnameRequired("MDOLLAR"),
  // milligrams per decilitre
  MilliGM__PER__DeciL: Qudt.unitFromLocalnameRequired("MilliGM-PER-DeciL"),
  // Peck (US Dry) Per Second
  PK_US_DRY__PER__SEC: Qudt.unitFromLocalnameRequired("PK_US_DRY-PER-SEC"),
  // Mebibyte
  MebiBYTE: Qudt.unitFromLocalnameRequired("MebiBYTE"),
  // Pint (UK)
  PINT_UK: Qudt.unitFromLocalnameRequired("PINT_UK"),
  // Radian per Minute
  RAD__PER__MIN: Qudt.unitFromLocalnameRequired("RAD-PER-MIN"),
  // Joule Second per Mole
  J__SEC__PER__MOL: Qudt.unitFromLocalnameRequired("J-SEC-PER-MOL"),
  // Nanomoles per cubic centimetre per hour
  NanoMOL__PER__CentiM3__HR: Qudt.unitFromLocalnameRequired(
    "NanoMOL-PER-CentiM3-HR"
  ),
  // Milligal
  MilliGAL: Qudt.unitFromLocalnameRequired("MilliGAL"),
  // Gram Per Day
  GM__PER__DAY: Qudt.unitFromLocalnameRequired("GM-PER-DAY"),
  // candela per square metre
  CD__PER__M2: Qudt.unitFromLocalnameRequired("CD-PER-M2"),
  // Microgram per square centimetre
  MicroG__PER__CentiM2: Qudt.unitFromLocalnameRequired("MicroG-PER-CentiM2"),
  // Technical Atmosphere
  ATM_T: Qudt.unitFromLocalnameRequired("ATM_T"),
  // Number per square metre
  NUM__PER__M2: Qudt.unitFromLocalnameRequired("NUM-PER-M2"),
  // Micrograms per cubic metre per hour
  MicroGM__PER__M3__HR: Qudt.unitFromLocalnameRequired("MicroGM-PER-M3-HR"),
  // DecaCoulomb
  DecaC: Qudt.unitFromLocalnameRequired("DecaC"),
  // Slug per Foot Second
  SLUG__PER__FT__SEC: Qudt.unitFromLocalnameRequired("SLUG-PER-FT-SEC"),
  // 1000I
  _1000I: Qudt.unitFromLocalnameRequired("1000I"),
  // Sextic Meter
  M6: Qudt.unitFromLocalnameRequired("M6"),
  // Milligram Per Kilogram
  MilliGM__PER__KiloGM: Qudt.unitFromLocalnameRequired("MilliGM-PER-KiloGM"),
  // Abhenry
  H_Ab: Qudt.unitFromLocalnameRequired("H_Ab"),
  // Millilitre Per Kelvin
  MilliL__PER__K: Qudt.unitFromLocalnameRequired("MilliL-PER-K"),
  // Picofarad
  PicoFARAD: Qudt.unitFromLocalnameRequired("PicoFARAD"),
  // Million US Dollars per Year
  MillionUSD__PER__YR: Qudt.unitFromLocalnameRequired("MillionUSD-PER-YR"),
  // Pound Force per Square Inch
  LB_F__PER__IN2: Qudt.unitFromLocalnameRequired("LB_F-PER-IN2"),
  // Dram (US)
  DRAM_US: Qudt.unitFromLocalnameRequired("DRAM_US"),
  // Rial Omani
  OmaniRial: Qudt.unitFromLocalnameRequired("OmaniRial"),
  // Megapascal Per Kelvin
  MegaPA__PER__K: Qudt.unitFromLocalnameRequired("MegaPA-PER-K"),
  // Kelvin metres per second
  K__M__PER__SEC: Qudt.unitFromLocalnameRequired("K-M-PER-SEC"),
  // Poundal per Square Foot
  PDL__PER__FT2: Qudt.unitFromLocalnameRequired("PDL-PER-FT2"),
  // Practical salinity unit
  PSU: Qudt.unitFromLocalnameRequired("PSU"),
  // CFP franc
  XPF: Qudt.unitFromLocalnameRequired("XPF"),
  // Joule Meter per Mole
  J__M__PER__MOL: Qudt.unitFromLocalnameRequired("J-M-PER-MOL"),
  // US Gallon
  GAL_US: Qudt.unitFromLocalnameRequired("GAL_US"),
  // Kilohertz Metre
  KiloHZ__M: Qudt.unitFromLocalnameRequired("KiloHZ-M"),
  // Nanolitre
  NanoL: Qudt.unitFromLocalnameRequired("NanoL"),
  // Square pascal per square second
  PA2__PER__SEC2: Qudt.unitFromLocalnameRequired("PA2-PER-SEC2"),
  // Assay Ton
  TON_Assay: Qudt.unitFromLocalnameRequired("TON_Assay"),
  // British Thermal Unit (international Table) Inch Per Hour Square Foot degree Fahrenheit
  BTU_IT__IN__PER__HR__FT2__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-IN-PER-HR-FT2-DEG_F"
  ),
  // Kilocalorie per Square Centimetre Second
  KiloCAL__PER__CentiM2__SEC: Qudt.unitFromLocalnameRequired(
    "KiloCAL-PER-CentiM2-SEC"
  ),
  // ExaCoulomb
  ExaC: Qudt.unitFromLocalnameRequired("ExaC"),
  // Kilocalorie
  KiloCAL: Qudt.unitFromLocalnameRequired("KiloCAL"),
  // Ounce (US Fluid) Per Minute
  OZ_VOL_US__PER__MIN: Qudt.unitFromLocalnameRequired("OZ_VOL_US-PER-MIN"),
  // Kilogram Per Cubic Centimeter
  KiloGM__PER__CentiM3: Qudt.unitFromLocalnameRequired("KiloGM-PER-CentiM3"),
  // Microlitre Per Litre
  MicroL__PER__L: Qudt.unitFromLocalnameRequired("MicroL-PER-L"),
  // Gill (US) Per Hour
  GI_US__PER__HR: Qudt.unitFromLocalnameRequired("GI_US-PER-HR"),
  // Tropical Year
  YR_TROPICAL: Qudt.unitFromLocalnameRequired("YR_TROPICAL"),
  // Light Year
  LY: Qudt.unitFromLocalnameRequired("LY"),
  // Mikrometer pro Newton
  MicroM__PER__N: Qudt.unitFromLocalnameRequired("MicroM-PER-N"),
  // Planck Power
  PlanckPower: Qudt.unitFromLocalnameRequired("PlanckPower"),
  // Frame per Second
  FRAME__PER__SEC: Qudt.unitFromLocalnameRequired("FRAME-PER-SEC"),
  // Picograms per gram
  PicoGM__PER__GM: Qudt.unitFromLocalnameRequired("PicoGM-PER-GM"),
  // Pascal
  PA: Qudt.unitFromLocalnameRequired("PA"),
  // Revolution
  REV: Qudt.unitFromLocalnameRequired("REV"),
  // Kilocalorie per Mole
  KiloCAL__PER__MOL: Qudt.unitFromLocalnameRequired("KiloCAL-PER-MOL"),
  // Centimeter
  CentiM: Qudt.unitFromLocalnameRequired("CentiM"),
  // Square Centimetre Second
  CentiM2__SEC: Qudt.unitFromLocalnameRequired("CentiM2-SEC"),
  // Stathenry
  H_Stat: Qudt.unitFromLocalnameRequired("H_Stat"),
  // Planck Current
  PlanckCurrent: Qudt.unitFromLocalnameRequired("PlanckCurrent"),
  // Planck Impedance
  PlanckImpedance: Qudt.unitFromLocalnameRequired("PlanckImpedance"),
  // Moles per square metre per second per metre
  MOL__PER__M2__SEC__M: Qudt.unitFromLocalnameRequired("MOL-PER-M2-SEC-M"),
  // Meter Kilogram
  M__KiloGM: Qudt.unitFromLocalnameRequired("M-KiloGM"),
  // Liberian Dollar
  LiberianDollar: Qudt.unitFromLocalnameRequired("LiberianDollar"),
  // Kilowatt
  KiloW: Qudt.unitFromLocalnameRequired("KiloW"),
  // Newton Second
  N__SEC: Qudt.unitFromLocalnameRequired("N-SEC"),
  // Volt per Kelvin
  V__PER__K: Qudt.unitFromLocalnameRequired("V-PER-K"),
  // Weber Metre
  WB__M: Qudt.unitFromLocalnameRequired("WB-M"),
  // Micromoles per second
  MicroMOL__PER__SEC: Qudt.unitFromLocalnameRequired("MicroMOL-PER-SEC"),
  // MegaW
  MegaW: Qudt.unitFromLocalnameRequired("MegaW"),
  // Bushel (US Dry) Per Hour
  BU_US_DRY__PER__HR: Qudt.unitFromLocalnameRequired("BU_US_DRY-PER-HR"),
  // Cubic microns per cubic metre
  MicroM3__PER__M3: Qudt.unitFromLocalnameRequired("MicroM3-PER-M3"),
  // MicroTorr
  MicroTORR: Qudt.unitFromLocalnameRequired("MicroTORR"),
  // Tablespoon
  TBSP: Qudt.unitFromLocalnameRequired("TBSP"),
  // Cases per 1000 individuals per year
  CASES__PER__1000I__YR: Qudt.unitFromLocalnameRequired("CASES-PER-1000I-YR"),
  // Coulomb Per Cubic Centimetre
  C__PER__CentiM3: Qudt.unitFromLocalnameRequired("C-PER-CentiM3"),
  // Number per litre
  NUM__PER__L: Qudt.unitFromLocalnameRequired("NUM-PER-L"),
  // Som
  Som: Qudt.unitFromLocalnameRequired("Som"),
  // Kilogram Metre Per Second
  KiloGM__M__PER__SEC: Qudt.unitFromLocalnameRequired("KiloGM-M-PER-SEC"),
  // centimeter per second
  CentiM__PER__SEC: Qudt.unitFromLocalnameRequired("CentiM-PER-SEC"),
  // Kelvin per Second
  K__PER__SEC: Qudt.unitFromLocalnameRequired("K-PER-SEC"),
  // Reciprocal Nanometre
  PER__NanoM: Qudt.unitFromLocalnameRequired("PER-NanoM"),
  // Cubic Coulomb Metre per Square Joule
  C3__M__PER__J2: Qudt.unitFromLocalnameRequired("C3-M-PER-J2"),
  // BTU per Second Square Foot
  BTU_IT__PER__SEC__FT2: Qudt.unitFromLocalnameRequired("BTU_IT-PER-SEC-FT2"),
  // Poise
  POISE: Qudt.unitFromLocalnameRequired("POISE"),
  // KiloTonne
  KiloTONNE: Qudt.unitFromLocalnameRequired("KiloTONNE"),
  // Parts per million
  PPM: Qudt.unitFromLocalnameRequired("PPM"),
  // BTU per Square Foot
  BTU_IT__PER__FT2: Qudt.unitFromLocalnameRequired("BTU_IT-PER-FT2"),
  // Quart (UK Liquid) Per Second
  QT_UK__PER__SEC: Qudt.unitFromLocalnameRequired("QT_UK-PER-SEC"),
  // Cubic Centimeter Per Kelvin
  CentiM3__PER__K: Qudt.unitFromLocalnameRequired("CentiM3-PER-K"),
  // Square Coulomb Meter per Joule
  C2__M__PER__J: Qudt.unitFromLocalnameRequired("C2-M-PER-J"),
  // Quart (US Liquid) Per Minute
  QT_US__PER__MIN: Qudt.unitFromLocalnameRequired("QT_US-PER-MIN"),
  // Netherlands Antillian Guilder
  NetherlandsAntillianGuilder: Qudt.unitFromLocalnameRequired(
    "NetherlandsAntillianGuilder"
  ),
  // Algerian Dinar
  DZD: Qudt.unitFromLocalnameRequired("DZD"),
  // Kilogram per Mol
  KiloGM__PER__MOL: Qudt.unitFromLocalnameRequired("KiloGM-PER-MOL"),
  // Kilojoule Per Kilogram Kelvin
  KiloJ__PER__KiloGM__K: Qudt.unitFromLocalnameRequired("KiloJ-PER-KiloGM-K"),
  // Newton second per Cubic Meter
  N__SEC__PER__M3: Qudt.unitFromLocalnameRequired("N-SEC-PER-M3"),
  // Square Meter per Kelvin
  M2__PER__K: Qudt.unitFromLocalnameRequired("M2-PER-K"),
  // GM_F
  GM_F: Qudt.unitFromLocalnameRequired("GM_F"),
  // Kelvin metres
  K__M: Qudt.unitFromLocalnameRequired("K-M"),
  // US Dry Pint
  PINT_US_DRY: Qudt.unitFromLocalnameRequired("PINT_US_DRY"),
  // Yuan Renminbi
  YuanRenminbi: Qudt.unitFromLocalnameRequired("YuanRenminbi"),
  // Mega byte
  MegaBYTE: Qudt.unitFromLocalnameRequired("MegaBYTE"),
  // Hectogram
  HectoGM: Qudt.unitFromLocalnameRequired("HectoGM"),
  // Horsepower (metric)
  HP_Metric: Qudt.unitFromLocalnameRequired("HP_Metric"),
  // Iceland Krona
  IcelandKrona: Qudt.unitFromLocalnameRequired("IcelandKrona"),
  // PicoMOL
  PicoMOL: Qudt.unitFromLocalnameRequired("PicoMOL"),
  // Point
  PT: Qudt.unitFromLocalnameRequired("PT"),
  // grams per square meter per day
  GM__PER__M2__DAY: Qudt.unitFromLocalnameRequired("GM-PER-M2-DAY"),
  // Electron Volt per Tesla
  EV__PER__T: Qudt.unitFromLocalnameRequired("EV-PER-T"),
  // Picosecond
  PicoSEC: Qudt.unitFromLocalnameRequired("PicoSEC"),
  // Mega Electron Volt per Centimetre
  MegaEV__PER__CentiM: Qudt.unitFromLocalnameRequired("MegaEV-PER-CentiM"),
  // United States Dollar (same day) (funds code)
  USDollar__SameDay: Qudt.unitFromLocalnameRequired("USDollar-SameDay"),
  // Square Foot per BTU Inch
  FT2__PER__BTU_IT__IN: Qudt.unitFromLocalnameRequired("FT2-PER-BTU_IT-IN"),
  // British Thermal Unit (international Table) Per Pound Degree Fahrenheit
  BTU_IT__PER__LB_F__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-LB_F-DEG_F"
  ),
  // Electric Susceptibility Unit
  SUSCEPTIBILITY_ELEC: Qudt.unitFromLocalnameRequired("SUSCEPTIBILITY_ELEC"),
  // Square metres per Hertz per degree
  M2__PER__HZ__DEG: Qudt.unitFromLocalnameRequired("M2-PER-HZ-DEG"),
  // tonne per hectare
  TONNE__PER__HA: Qudt.unitFromLocalnameRequired("TONNE-PER-HA"),
  // Pound Degree Fahrenheit
  LB__DEG_F: Qudt.unitFromLocalnameRequired("LB-DEG_F"),
  // Degrees Celsius per metre
  DEG_C__PER__M: Qudt.unitFromLocalnameRequired("DEG_C-PER-M"),
  // Ton of Refrigeration
  TON_FG: Qudt.unitFromLocalnameRequired("TON_FG"),
  // picoampere
  PicoA: Qudt.unitFromLocalnameRequired("PicoA"),
  // Brunei Dollar
  BruneiDollar: Qudt.unitFromLocalnameRequired("BruneiDollar"),
  // Conventional Millimetre Of Water
  MilliM_H2O: Qudt.unitFromLocalnameRequired("MilliM_H2O"),
  // Grams per square centimetre per year
  GM__PER__CentiM2__YR: Qudt.unitFromLocalnameRequired("GM-PER-CentiM2-YR"),
  // Coulomb per Mole
  C__PER__MOL: Qudt.unitFromLocalnameRequired("C-PER-MOL"),
  // Picograms per millilitre
  PicoGM__PER__MilliL: Qudt.unitFromLocalnameRequired("PicoGM-PER-MilliL"),
  // Pound Force per Foot
  LB_F__PER__FT: Qudt.unitFromLocalnameRequired("LB_F-PER-FT"),
  // Decapascal
  DecaPA: Qudt.unitFromLocalnameRequired("DecaPA"),
  // Watt per Square Inch
  W__PER__IN2: Qudt.unitFromLocalnameRequired("W-PER-IN2"),
  // Quart (US Liquid) Per Hour
  QT_US__PER__HR: Qudt.unitFromLocalnameRequired("QT_US-PER-HR"),
  // Millimetre of Mercury
  MilliM_HG: Qudt.unitFromLocalnameRequired("MilliM_HG"),
  // Planck Pressure
  PlanckPressure: Qudt.unitFromLocalnameRequired("PlanckPressure"),
  // Newtons per cubic metre
  N__PER__M3: Qudt.unitFromLocalnameRequired("N-PER-M3"),
  // Pound Troy
  LB_T: Qudt.unitFromLocalnameRequired("LB_T"),
  // Meter per Farad
  M__PER__FARAD: Qudt.unitFromLocalnameRequired("M-PER-FARAD"),
  // Calorie (thermochemical) Per Centimetre Second Degree Celsius
  CAL_TH__PER__CentiM__SEC__DEG_C: Qudt.unitFromLocalnameRequired(
    "CAL_TH-PER-CentiM-SEC-DEG_C"
  ),
  // Libyan Dinar
  LibyanDinar: Qudt.unitFromLocalnameRequired("LibyanDinar"),
  // Reciprocal Metre
  PER__M: Qudt.unitFromLocalnameRequired("PER-M"),
  // Oersted Centimetre
  OERSTED__CentiM: Qudt.unitFromLocalnameRequired("OERSTED-CentiM"),
  // Milligrams per cubic metre per day
  MilliGM__PER__M3__DAY: Qudt.unitFromLocalnameRequired("MilliGM-PER-M3-DAY"),
  // Ounce Mass
  OZ: Qudt.unitFromLocalnameRequired("OZ"),
  // Kilovolt
  KiloV: Qudt.unitFromLocalnameRequired("KiloV"),
  // Long Hundred Weight
  CWT_LONG: Qudt.unitFromLocalnameRequired("CWT_LONG"),
  // Candlepower
  CP: Qudt.unitFromLocalnameRequired("CP"),
  // Moroccan Dirham
  MoroccanDirham: Qudt.unitFromLocalnameRequired("MoroccanDirham"),
  // Year
  YR: Qudt.unitFromLocalnameRequired("YR"),
  // Watt
  W: Qudt.unitFromLocalnameRequired("W"),
  // Gallon (UK) Per Second
  GAL_UK__PER__SEC: Qudt.unitFromLocalnameRequired("GAL_UK-PER-SEC"),
  // Microbecquerels per litre
  MicroBQ__PER__L: Qudt.unitFromLocalnameRequired("MicroBQ-PER-L"),
  // Mole Per Litre
  MOL__PER__L: Qudt.unitFromLocalnameRequired("MOL-PER-L"),
  // Newtonmetersekunden pro Radian
  N__M__SEC__PER__RAD: Qudt.unitFromLocalnameRequired("N-M-SEC-PER-RAD"),
  // Imperial Ounce Force Inch
  OZ_F__IN: Qudt.unitFromLocalnameRequired("OZ_F-IN"),
  // Pakistan Rupee
  PakistanRupee: Qudt.unitFromLocalnameRequired("PakistanRupee"),
  // CFA Franc BCEAO
  XOF: Qudt.unitFromLocalnameRequired("XOF"),
  // Nanotesla
  NanoT: Qudt.unitFromLocalnameRequired("NanoT"),
  // Metical
  Metical: Qudt.unitFromLocalnameRequired("Metical"),
  // Failures In Time
  failures__in__time: Qudt.unitFromLocalnameRequired("failures-in-time"),
  // Reciprocal Month
  PER__MO: Qudt.unitFromLocalnameRequired("PER-MO"),
  // GigaByte
  GigaBYTE: Qudt.unitFromLocalnameRequired("GigaBYTE"),
  // Millihenry Per Ohm
  MilliH__PER__OHM: Qudt.unitFromLocalnameRequired("MilliH-PER-OHM"),
  // Electron Volt
  EV: Qudt.unitFromLocalnameRequired("EV"),
  // Indian Rupee
  IndianRupee: Qudt.unitFromLocalnameRequired("IndianRupee"),
  // Abohm
  OHM_Ab: Qudt.unitFromLocalnameRequired("OHM_Ab"),
  // Kelvin
  K: Qudt.unitFromLocalnameRequired("K"),
  // Picograms
  PicoGM: Qudt.unitFromLocalnameRequired("PicoGM"),
  // Degree Fahrenheit per Hour
  DEG_F__PER__HR: Qudt.unitFromLocalnameRequired("DEG_F-PER-HR"),
  // Hectometre
  HectoM: Qudt.unitFromLocalnameRequired("HectoM"),
  // Ampere Per Square Millimetre
  A__PER__MilliM2: Qudt.unitFromLocalnameRequired("A-PER-MilliM2"),
  // Heart Beats per Minute
  BEAT__PER__MIN: Qudt.unitFromLocalnameRequired("BEAT-PER-MIN"),
  // Barrel (US) Per Minute
  BBL_US__PER__MIN: Qudt.unitFromLocalnameRequired("BBL_US-PER-MIN"),
  // Lithuanian Litas
  LithuanianLitas: Qudt.unitFromLocalnameRequired("LithuanianLitas"),
  // Pound Mass (avoirdupois) Inch
  LB__IN: Qudt.unitFromLocalnameRequired("LB-IN"),
  // Pascal metres per square second
  PA__M__PER__SEC2: Qudt.unitFromLocalnameRequired("PA-M-PER-SEC2"),
  // Millilitre Per Square Centimetre Second
  MilliL__PER__CentiM2__SEC: Qudt.unitFromLocalnameRequired(
    "MilliL-PER-CentiM2-SEC"
  ),
  // Serbian Dinar
  SerbianDinar: Qudt.unitFromLocalnameRequired("SerbianDinar"),
  // Lunar mass
  LunarMass: Qudt.unitFromLocalnameRequired("LunarMass"),
  // Kilosiemens Per Metre
  KiloS__PER__M: Qudt.unitFromLocalnameRequired("KiloS-PER-M"),
  // Millimoles per square metre
  MilliMOL__PER__M2: Qudt.unitFromLocalnameRequired("MilliMOL-PER-M2"),
  // Micro Joule
  MicroJ: Qudt.unitFromLocalnameRequired("MicroJ"),
  // Hectopascal Per Bar
  HectoPA__PER__BAR: Qudt.unitFromLocalnameRequired("HectoPA-PER-BAR"),
  // Gon
  GON: Qudt.unitFromLocalnameRequired("GON"),
  // Unitless
  UNITLESS: Qudt.unitFromLocalnameRequired("UNITLESS"),
  // Mole
  MOL: Qudt.unitFromLocalnameRequired("MOL"),
  // European Unit of Account 9 (E.U.A.-9) (Bonds market unit)
  EuropeanUnitOfAccount9: Qudt.unitFromLocalnameRequired(
    "EuropeanUnitOfAccount9"
  ),
  // Gold (one Troy ounce)
  Gold__OunceTroy: Qudt.unitFromLocalnameRequired("Gold-OunceTroy"),
  // Megaampere Per Square Metre
  MegaA__PER__M2: Qudt.unitFromLocalnameRequired("MegaA-PER-M2"),
  // Barrel
  BBL: Qudt.unitFromLocalnameRequired("BBL"),
  // Slug per Square Foot
  SLUG__PER__FT2: Qudt.unitFromLocalnameRequired("SLUG-PER-FT2"),
  // British Thermal Unit (thermochemical) Foot Per Hour Square Foot degree Fahrenheit
  BTU_TH__FT__PER__HR__FT2__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_TH-FT-PER-HR-FT2-DEG_F"
  ),
  // Mole Per Hour
  MOL__PER__HR: Qudt.unitFromLocalnameRequired("MOL-PER-HR"),
  // NanoS
  NanoS: Qudt.unitFromLocalnameRequired("NanoS"),
  // Liter Per Minute
  L__PER__MIN: Qudt.unitFromLocalnameRequired("L-PER-MIN"),
  // kilosecond
  KiloSEC: Qudt.unitFromLocalnameRequired("KiloSEC"),
  // Knot per Second
  KN__PER__SEC: Qudt.unitFromLocalnameRequired("KN-PER-SEC"),
  // Ton of Oil Equivalent
  TOE: Qudt.unitFromLocalnameRequired("TOE"),
  // Watt seconds per square metre
  W__SEC__PER__M2: Qudt.unitFromLocalnameRequired("W-SEC-PER-M2"),
  // Milligram
  MilliGM: Qudt.unitFromLocalnameRequired("MilliGM"),
  // Hectopascal
  HectoPA: Qudt.unitFromLocalnameRequired("HectoPA"),
  // Cyprus Pound
  CyprusPound: Qudt.unitFromLocalnameRequired("CyprusPound"),
  // Candela per Lumen
  CD__PER__LM: Qudt.unitFromLocalnameRequired("CD-PER-LM"),
  // Hectolitre
  HectoL: Qudt.unitFromLocalnameRequired("HectoL"),
  // Coulomb per Metre
  C__PER__M: Qudt.unitFromLocalnameRequired("C-PER-M"),
  // Kilocalorie (international Table) Per Hour Metre Degree Celsius
  KiloCAL_IT__PER__HR__M__DEG_C: Qudt.unitFromLocalnameRequired(
    "KiloCAL_IT-PER-HR-M-DEG_C"
  ),
  // New Israeli Shekel
  NewIsraeliShekel: Qudt.unitFromLocalnameRequired("NewIsraeliShekel"),
  // Gill (US) Per Day
  GI_US__PER__DAY: Qudt.unitFromLocalnameRequired("GI_US-PER-DAY"),
  // Short Ton (us) Per Day
  TON_US__PER__DAY: Qudt.unitFromLocalnameRequired("TON_US-PER-DAY"),
  // Gram Per Cubic Decimetre
  GM__PER__DeciM3: Qudt.unitFromLocalnameRequired("GM-PER-DeciM3"),
  // Kelvin per Watt
  K__PER__W: Qudt.unitFromLocalnameRequired("K-PER-W"),
  // Stathenry per Centimeter
  H_Stat__PER__CentiM: Qudt.unitFromLocalnameRequired("H_Stat-PER-CentiM"),
  // Reciprocal metre per second
  PER__M__SEC: Qudt.unitFromLocalnameRequired("PER-M-SEC"),
  // Atomic mass unit
  AMU: Qudt.unitFromLocalnameRequired("AMU"),
  // Cubic Inch per Minute
  IN3__PER__MIN: Qudt.unitFromLocalnameRequired("IN3-PER-MIN"),
  // Hertz per Kelvin
  HZ__PER__K: Qudt.unitFromLocalnameRequired("HZ-PER-K"),
  // Kilogram?force Metre Per Square Centimetre
  KiloGM_F__M__PER__CentiM2: Qudt.unitFromLocalnameRequired(
    "KiloGM_F-M-PER-CentiM2"
  ),
  // Meter Kelvin per Watt
  M__K__PER__W: Qudt.unitFromLocalnameRequired("M-K-PER-W"),
  // PicoS
  PicoS: Qudt.unitFromLocalnameRequired("PicoS"),
  // Microhenry Per Ohm
  MicroH__PER__OHM: Qudt.unitFromLocalnameRequired("MicroH-PER-OHM"),
  // Quartic Meter
  M4: Qudt.unitFromLocalnameRequired("M4"),
  // Kilogram Per Cubic Decimetre
  KiloGM__PER__DeciM3: Qudt.unitFromLocalnameRequired("KiloGM-PER-DeciM3"),
  // DeciN
  DeciN: Qudt.unitFromLocalnameRequired("DeciN"),
  // Parts per trillion
  PPTR: Qudt.unitFromLocalnameRequired("PPTR"),
  // Oersted
  OERSTED: Qudt.unitFromLocalnameRequired("OERSTED"),
  // Relative Permeability
  PERMEABILITY_REL: Qudt.unitFromLocalnameRequired("PERMEABILITY_REL"),
  // Australian Dollar
  AUD: Qudt.unitFromLocalnameRequired("AUD"),
  // Picofarad Per Metre
  PicoFARAD__PER__M: Qudt.unitFromLocalnameRequired("PicoFARAD-PER-M"),
  // Millilitres per square metre per day
  MilliL__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MilliL-PER-M2-DAY"),
  // Radian Square Meter per Kilogram
  RAD__M2__PER__KiloGM: Qudt.unitFromLocalnameRequired("RAD-M2-PER-KiloGM"),
  // Long Ton per Cubic Yard
  TON_LONG__PER__YD3: Qudt.unitFromLocalnameRequired("TON_LONG-PER-YD3"),
  // Guyana Dollar
  GuyanaDollar: Qudt.unitFromLocalnameRequired("GuyanaDollar"),
  // Foot Pound Force
  FT__LB_F: Qudt.unitFromLocalnameRequired("FT-LB_F"),
  // Namibian Dollar
  NamibianDollar: Qudt.unitFromLocalnameRequired("NamibianDollar"),
  // Megagram Per Cubic Meter
  MegaGM__PER__M3: Qudt.unitFromLocalnameRequired("MegaGM-PER-M3"),
  // Megavolt Ampere Hour
  MegaV__A__HR: Qudt.unitFromLocalnameRequired("MegaV-A-HR"),
  // Square Foot Second Degree Fahrenheit
  FT2__SEC__DEG_F: Qudt.unitFromLocalnameRequired("FT2-SEC-DEG_F"),
  // Volt
  V: Qudt.unitFromLocalnameRequired("V"),
  // Millicoulomb Per Square Metre
  MilliC__PER__M2: Qudt.unitFromLocalnameRequired("MilliC-PER-M2"),
  // Meganewton Meter
  MegaN__M: Qudt.unitFromLocalnameRequired("MegaN-M"),
  // British Thermal Unit (TH) Per Cubic Foot
  BTU_TH__PER__FT3: Qudt.unitFromLocalnameRequired("BTU_TH-PER-FT3"),
  // Parts Per Million per Kelvin
  PPM__PER__K: Qudt.unitFromLocalnameRequired("PPM-PER-K"),
  // Hectopascal Cubic Metre Per Second
  HectoPA__M3__PER__SEC: Qudt.unitFromLocalnameRequired("HectoPA-M3-PER-SEC"),
  // Coulomb Per Square Millimeter
  C__PER__MilliM2: Qudt.unitFromLocalnameRequired("C-PER-MilliM2"),
  // Hectobar
  HectoBAR: Qudt.unitFromLocalnameRequired("HectoBAR"),
  // Magnetic Susceptibility Unit
  SUSCEPTIBILITY_MAG: Qudt.unitFromLocalnameRequired("SUSCEPTIBILITY_MAG"),
  // Kilogram per Square Meter Square Second
  KiloGM__PER__M2__SEC2: Qudt.unitFromLocalnameRequired("KiloGM-PER-M2-SEC2"),
  // South African Rand
  SouthAfricanRand: Qudt.unitFromLocalnameRequired("SouthAfricanRand"),
  // NanoMOL
  NanoMOL: Qudt.unitFromLocalnameRequired("NanoMOL"),
  // Psi Cubic Yard Per Second
  PSI__YD3__PER__SEC: Qudt.unitFromLocalnameRequired("PSI-YD3-PER-SEC"),
  // Microgram Per Cubic Metre
  MicroGM__PER__M3: Qudt.unitFromLocalnameRequired("MicroGM-PER-M3"),
  // Special Drawing Rights
  SpecialDrawingRights: Qudt.unitFromLocalnameRequired("SpecialDrawingRights"),
  // European Monetary Unit (E.M.U.-6) (Bonds market unit)
  EuropeanMonetaryUnit: Qudt.unitFromLocalnameRequired("EuropeanMonetaryUnit"),
  // Cayman Islands Dollar
  CaymanIslandsDollar: Qudt.unitFromLocalnameRequired("CaymanIslandsDollar"),
  // Slug Per Minute
  SLUG__PER__MIN: Qudt.unitFromLocalnameRequired("SLUG-PER-MIN"),
  // Watt per Steradian
  W__PER__SR: Qudt.unitFromLocalnameRequired("W-PER-SR"),
  // Joules per square centimetre per day
  J__PER__CentiM2__DAY: Qudt.unitFromLocalnameRequired("J-PER-CentiM2-DAY"),
  // Moles per gram per hour
  MOL__PER__GM__HR: Qudt.unitFromLocalnameRequired("MOL-PER-GM-HR"),
  // Picowatt
  PicoW: Qudt.unitFromLocalnameRequired("PicoW"),
  // Kilogram Per Second Per Square Metre
  KiloGM__PER__SEC__M2: Qudt.unitFromLocalnameRequired("KiloGM-PER-SEC-M2"),
  // Ampere per Square Meter
  A__PER__M2: Qudt.unitFromLocalnameRequired("A-PER-M2"),
  // Number per square metre per day
  NUM__PER__M2__DAY: Qudt.unitFromLocalnameRequired("NUM-PER-M2-DAY"),
  // Joule per Tesla
  J__PER__T: Qudt.unitFromLocalnameRequired("J-PER-T"),
  // Centimetre of Water
  CM_H2O: Qudt.unitFromLocalnameRequired("CM_H2O"),
  // Nanomoles per litre per day
  NanoMOL__PER__L__DAY: Qudt.unitFromLocalnameRequired("NanoMOL-PER-L-DAY"),
  // MegaJoule per Kelvin
  MegaJ__PER__K: Qudt.unitFromLocalnameRequired("MegaJ-PER-K"),
  // US Peck
  PK_US_DRY: Qudt.unitFromLocalnameRequired("PK_US_DRY"),
  // Kilo Electron Volt
  KiloEV: Qudt.unitFromLocalnameRequired("KiloEV"),
  // Second
  SEC: Qudt.unitFromLocalnameRequired("SEC"),
  // NanoBQ
  NanoBQ: Qudt.unitFromLocalnameRequired("NanoBQ"),
  // Sudanese Pound
  SudanesePound: Qudt.unitFromLocalnameRequired("SudanesePound"),
  // Bushel (US Dry) Per Day
  BU_US_DRY__PER__DAY: Qudt.unitFromLocalnameRequired("BU_US_DRY-PER-DAY"),
  // Chilean Peso
  ChileanPeso: Qudt.unitFromLocalnameRequired("ChileanPeso"),
  // Joule per Cubic Meter Kelvin
  J__PER__M3__K: Qudt.unitFromLocalnameRequired("J-PER-M3-K"),
  // MegaBIT
  MegaBIT: Qudt.unitFromLocalnameRequired("MegaBIT"),
  // Dry Barrel (US)
  BBL_US_DRY: Qudt.unitFromLocalnameRequired("BBL_US_DRY"),
  // Watt per Square Metre Pascal
  W__PER__M2__PA: Qudt.unitFromLocalnameRequired("W-PER-M2-PA"),
  // Register Ton
  RT: Qudt.unitFromLocalnameRequired("RT"),
  // Kilocalorie per Square Centimetre Minute
  KiloCAL__PER__CentiM2__MIN: Qudt.unitFromLocalnameRequired(
    "KiloCAL-PER-CentiM2-MIN"
  ),
  // BTU per Pound Degree Fahrenheit
  BTU_IT__PER__LB__DEG_F: Qudt.unitFromLocalnameRequired("BTU_IT-PER-LB-DEG_F"),
  // Nanosiemens Per Centimetre
  NanoS__PER__CentiM: Qudt.unitFromLocalnameRequired("NanoS-PER-CentiM"),
  // Barn
  BARN: Qudt.unitFromLocalnameRequired("BARN"),
  // Abfarad
  FARAD_Ab: Qudt.unitFromLocalnameRequired("FARAD_Ab"),
  // Kilopascal Square Metre per Gram
  KiloPA__M2__PER__GM: Qudt.unitFromLocalnameRequired("KiloPA-M2-PER-GM"),
  // Peck (US Dry) Per Minute
  PK_US_DRY__PER__MIN: Qudt.unitFromLocalnameRequired("PK_US_DRY-PER-MIN"),
  // Lari
  Lari: Qudt.unitFromLocalnameRequired("Lari"),
  // Attojoule Second
  AttoJ__SEC: Qudt.unitFromLocalnameRequired("AttoJ-SEC"),
  // Mole Per Second
  MOL__PER__SEC: Qudt.unitFromLocalnameRequired("MOL-PER-SEC"),
  // MicroCurie
  MicroCi: Qudt.unitFromLocalnameRequired("MicroCi"),
  // Joule per Square Metre
  J__PER__M2: Qudt.unitFromLocalnameRequired("J-PER-M2"),
  // Metre per Hour
  M__PER__HR: Qudt.unitFromLocalnameRequired("M-PER-HR"),
  // BTU per Pound Degree Rankine
  BTU_IT__PER__LB__DEG_R: Qudt.unitFromLocalnameRequired("BTU_IT-PER-LB-DEG_R"),
  // Reciprocal Cubic Meter
  PER__M3: Qudt.unitFromLocalnameRequired("PER-M3"),
  // Cubic Centimetre Per Mole
  CentiM3__PER__MOL: Qudt.unitFromLocalnameRequired("CentiM3-PER-MOL"),
  // Calorie (thermochemical) Per Gram Degree Celsius
  CAL_TH__PER__GM__DEG_C: Qudt.unitFromLocalnameRequired("CAL_TH-PER-GM-DEG_C"),
  // Quart (UK Liquid) Per Hour
  QT_UK__PER__HR: Qudt.unitFromLocalnameRequired("QT_UK-PER-HR"),
  // Peck (UK) Per Day
  PK_UK__PER__DAY: Qudt.unitFromLocalnameRequired("PK_UK-PER-DAY"),
  // Vietnamese ??ng
  VietnameseDong: Qudt.unitFromLocalnameRequired("VietnameseDong"),
  // Square Foot Hour Degree Fahrenheit per BTU
  FT2__HR__DEG_F__PER__BTU_IT: Qudt.unitFromLocalnameRequired(
    "FT2-HR-DEG_F-PER-BTU_IT"
  ),
  // Angstrom^3
  ANGSTROM3: Qudt.unitFromLocalnameRequired("ANGSTROM3"),
  // Reciprocal Cubic Millimeter
  PER__MilliM3: Qudt.unitFromLocalnameRequired("PER-MilliM3"),
  // Nanomoles per micromole per day
  NanoMOL__PER__MicroMOL__DAY: Qudt.unitFromLocalnameRequired(
    "NanoMOL-PER-MicroMOL-DAY"
  ),
  // T-SEC
  T__SEC: Qudt.unitFromLocalnameRequired("T-SEC"),
  // Newton Meter Per Kilogram
  N__M__PER__KiloGM: Qudt.unitFromLocalnameRequired("N-M-PER-KiloGM"),
  // Kilobecquerel
  KiloBQ: Qudt.unitFromLocalnameRequired("KiloBQ"),
  // Percent per hour
  PERCENT__PER__HR: Qudt.unitFromLocalnameRequired("PERCENT-PER-HR"),
  // Hartree
  E_h: Qudt.unitFromLocalnameRequired("E_h"),
  // Psi Liter Per Second
  PSI__L__PER__SEC: Qudt.unitFromLocalnameRequired("PSI-L-PER-SEC"),
  // Millimetre of Mercury - Absolute
  MilliM_HGA: Qudt.unitFromLocalnameRequired("MilliM_HGA"),
  // Inch of Water
  IN_H2O: Qudt.unitFromLocalnameRequired("IN_H2O"),
  // Centimole per kilogram
  CentiMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("CentiMOL-PER-KiloGM"),
  // Picometre
  PicoM: Qudt.unitFromLocalnameRequired("PicoM"),
  // Pint (UK) Per Second
  PINT_UK__PER__SEC: Qudt.unitFromLocalnameRequired("PINT_UK-PER-SEC"),
  // Mole per Kilogram Pascal
  MOL__PER__KiloGM__PA: Qudt.unitFromLocalnameRequired("MOL-PER-KiloGM-PA"),
  // Watthour per Cubic meter
  W__HR__PER__M3: Qudt.unitFromLocalnameRequired("W-HR-PER-M3"),
  // Square Foot per Second
  FT2__PER__SEC: Qudt.unitFromLocalnameRequired("FT2-PER-SEC"),
  // Newton Metre
  N__M: Qudt.unitFromLocalnameRequired("N-M"),
  // Metre
  M: Qudt.unitFromLocalnameRequired("M"),
  // Petajoule
  PetaJ: Qudt.unitFromLocalnameRequired("PetaJ"),
  // Cubic Foot
  FT3: Qudt.unitFromLocalnameRequired("FT3"),
  // United States Dollar (next day) (funds code)
  USDollar__NextDay: Qudt.unitFromLocalnameRequired("USDollar-NextDay"),
  // Kilocalorie (thermochemical) Per Minute
  KiloCAL_TH__PER__MIN: Qudt.unitFromLocalnameRequired("KiloCAL_TH-PER-MIN"),
  // BU_US_DRY
  BU_US_DRY: Qudt.unitFromLocalnameRequired("BU_US_DRY"),
  // Electron Volt Second
  EV__SEC: Qudt.unitFromLocalnameRequired("EV-SEC"),
  // KibiByte
  KibiBYTE: Qudt.unitFromLocalnameRequired("KibiBYTE"),
  // Sample per second
  SAMPLE__PER__SEC: Qudt.unitFromLocalnameRequired("SAMPLE-PER-SEC"),
  // Kilograms per square kilometre
  KiloGM__PER__KiloM2: Qudt.unitFromLocalnameRequired("KiloGM-PER-KiloM2"),
  // Milligram Per Minute
  MilliGM__PER__MIN: Qudt.unitFromLocalnameRequired("MilliGM-PER-MIN"),
  // KiloYR
  KiloYR: Qudt.unitFromLocalnameRequired("KiloYR"),
  // Megavolt Ampere Reactive
  MegaV__A_Reactive: Qudt.unitFromLocalnameRequired("MegaV-A_Reactive"),
  // kiloampere
  KiloA: Qudt.unitFromLocalnameRequired("KiloA"),
  // Tonne Per Cubic Metre
  TON_Metric__PER__M3: Qudt.unitFromLocalnameRequired("TON_Metric-PER-M3"),
  // Milliwatts per square centimetre per micrometre per steradian
  MilliW__PER__CentiM2__MicroM__SR: Qudt.unitFromLocalnameRequired(
    "MilliW-PER-CentiM2-MicroM-SR"
  ),
  // Acidity
  PH: Qudt.unitFromLocalnameRequired("PH"),
  // Microbar
  MicroBAR: Qudt.unitFromLocalnameRequired("MicroBAR"),
  // Pound per Cubic Yard
  LB__PER__YD3: Qudt.unitFromLocalnameRequired("LB-PER-YD3"),
  // Euro
  Euro: Qudt.unitFromLocalnameRequired("Euro"),
  // Degree Plato
  DEGREE_PLATO: Qudt.unitFromLocalnameRequired("DEGREE_PLATO"),
  // Gigapascal
  GigaPA: Qudt.unitFromLocalnameRequired("GigaPA"),
  // Barrel (UK Petroleum) Per Day
  BBL_UK_PET__PER__DAY: Qudt.unitFromLocalnameRequired("BBL_UK_PET-PER-DAY"),
  // Grain Per Gallon (US)
  GRAIN__PER__GAL_US: Qudt.unitFromLocalnameRequired("GRAIN-PER-GAL_US"),
  // Kilohertz
  KiloHZ: Qudt.unitFromLocalnameRequired("KiloHZ"),
  // Pascal Litre Per Second
  PA__L__PER__SEC: Qudt.unitFromLocalnameRequired("PA-L-PER-SEC"),
  // Kilopond
  KiloPOND: Qudt.unitFromLocalnameRequired("KiloPOND"),
  // Cubic Metre per Coulomb
  M3__PER__C: Qudt.unitFromLocalnameRequired("M3-PER-C"),
  // tonne per hectare per year
  TONNE__PER__HA__YR: Qudt.unitFromLocalnameRequired("TONNE-PER-HA-YR"),
  // Denier
  Denier: Qudt.unitFromLocalnameRequired("Denier"),
  // Degree Fahrenheit per Square Second
  DEG_F__PER__SEC2: Qudt.unitFromLocalnameRequired("DEG_F-PER-SEC2"),
  // Calorie (15 Degrees C)
  CAL_15_DEG_C: Qudt.unitFromLocalnameRequired("CAL_15_DEG_C"),
  // Ounce (UK Fluid) Per Second
  OZ_VOL_UK__PER__SEC: Qudt.unitFromLocalnameRequired("OZ_VOL_UK-PER-SEC"),
  // Kilovolt Ampere
  KiloV__A: Qudt.unitFromLocalnameRequired("KiloV-A"),
  // millimetres per day
  MilliM__PER__DAY: Qudt.unitFromLocalnameRequired("MilliM-PER-DAY"),
  // Hectopascal Liter Per Second
  HectoPA__L__PER__SEC: Qudt.unitFromLocalnameRequired("HectoPA-L-PER-SEC"),
  // Cubic Meter per Square Second
  M3__PER__SEC2: Qudt.unitFromLocalnameRequired("M3-PER-SEC2"),
  // MicroGAL
  MicroGAL: Qudt.unitFromLocalnameRequired("MicroGAL"),
  // microfarad
  MicroFARAD: Qudt.unitFromLocalnameRequired("MicroFARAD"),
  // Centipoise
  CentiPOISE: Qudt.unitFromLocalnameRequired("CentiPOISE"),
  // Megahertz Metre
  MegaHZ__M: Qudt.unitFromLocalnameRequired("MegaHZ-M"),
  // Farad Per Kilometre
  FARAD__PER__KiloM: Qudt.unitFromLocalnameRequired("FARAD-PER-KiloM"),
  // Kina
  Kina: Qudt.unitFromLocalnameRequired("Kina"),
  // Cubic Yard Per Second
  YD3__PER__SEC: Qudt.unitFromLocalnameRequired("YD3-PER-SEC"),
  // Foot Pound Force per Hour
  FT__LB_F__PER__HR: Qudt.unitFromLocalnameRequired("FT-LB_F-PER-HR"),
  // Pound Force Per Foot
  KiloLB_F__PER__FT: Qudt.unitFromLocalnameRequired("KiloLB_F-PER-FT"),
  // Kilomole Per Second
  KiloMOL__PER__SEC: Qudt.unitFromLocalnameRequired("KiloMOL-PER-SEC"),
  // Millihenry Per Kiloohm
  MilliH__PER__KiloOHM: Qudt.unitFromLocalnameRequired("MilliH-PER-KiloOHM"),
  // Number per square centimetre per thousand years
  NUM__PER__CentiM__KiloYR: Qudt.unitFromLocalnameRequired(
    "NUM-PER-CentiM-KiloYR"
  ),
  // Month
  MO: Qudt.unitFromLocalnameRequired("MO"),
  // Calorie (mean)
  CAL_MEAN: Qudt.unitFromLocalnameRequired("CAL_MEAN"),
  // Parts per trillion by volume
  PPTR_VOL: Qudt.unitFromLocalnameRequired("PPTR_VOL"),
  // Femtograms per litre
  FemtoGM__PER__L: Qudt.unitFromLocalnameRequired("FemtoGM-PER-L"),
  // Gram Force Per Square Centimetre
  GM_F__PER__CentiM2: Qudt.unitFromLocalnameRequired("GM_F-PER-CentiM2"),
  // Ounce (avoirdupois) Per Cubic Yard
  OZ__PER__YD3: Qudt.unitFromLocalnameRequired("OZ-PER-YD3"),
  // Watt Per Kilogram
  W__PER__KiloGM: Qudt.unitFromLocalnameRequired("W-PER-KiloGM"),
  // Philippine Peso
  PhilippinePeso: Qudt.unitFromLocalnameRequired("PhilippinePeso"),
  // Milligram Per Millilitre
  MilliGM__PER__MilliL: Qudt.unitFromLocalnameRequired("MilliGM-PER-MilliL"),
  // Kilogram Per Day
  KiloGM__PER__DAY: Qudt.unitFromLocalnameRequired("KiloGM-PER-DAY"),
  // Cubic micrometres (microns)
  MicroM3: Qudt.unitFromLocalnameRequired("MicroM3"),
  // Newton Metre Per Square Metre
  N__M__PER__M2: Qudt.unitFromLocalnameRequired("N-M-PER-M2"),
  // Microbecquerels per kilogram
  MicroBQ__PER__KiloGM: Qudt.unitFromLocalnameRequired("MicroBQ-PER-KiloGM"),
  // British Thermal Unit (International Definition)
  BTU_IT: Qudt.unitFromLocalnameRequired("BTU_IT"),
  // Cubic Metre per Mole
  M3__PER__MOL: Qudt.unitFromLocalnameRequired("M3-PER-MOL"),
  // Degree Celsius per Second
  DEG_C__PER__SEC: Qudt.unitFromLocalnameRequired("DEG_C-PER-SEC"),
  // Tonne Per Day
  TON_Metric__PER__DAY: Qudt.unitFromLocalnameRequired("TON_Metric-PER-DAY"),
  // Degree Rankine per Second
  DEG_R__PER__SEC: Qudt.unitFromLocalnameRequired("DEG_R-PER-SEC"),
  // Planck Area
  PlanckArea: Qudt.unitFromLocalnameRequired("PlanckArea"),
  // Kilograms per metre per second
  KiloGM__PER__M__SEC: Qudt.unitFromLocalnameRequired("KiloGM-PER-M-SEC"),
  // Reciprocal Millimetre
  PER__MilliM: Qudt.unitFromLocalnameRequired("PER-MilliM"),
  // Foot per Square Second
  FT__PER__SEC2: Qudt.unitFromLocalnameRequired("FT-PER-SEC2"),
  // Bushel (UK) Per Minute
  BU_UK__PER__MIN: Qudt.unitFromLocalnameRequired("BU_UK-PER-MIN"),
  // United Arab Emirates dirham
  UAEDirham: Qudt.unitFromLocalnameRequired("UAEDirham"),
  // Erg per Gram
  ERG__PER__G: Qudt.unitFromLocalnameRequired("ERG-PER-G"),
  // Milliwatts per square metre per nanometre per steradian
  MilliW__PER__M2__NanoM__SR: Qudt.unitFromLocalnameRequired(
    "MilliW-PER-M2-NanoM-SR"
  ),
  // British Thermal Unit (international Table) Inch Per Second Square Foot degree Fahrenheit
  BTU_IT__IN__PER__SEC__FT2__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-IN-PER-SEC-FT2-DEG_F"
  ),
  // Newton
  N: Qudt.unitFromLocalnameRequired("N"),
  // Square degree
  DEG2: Qudt.unitFromLocalnameRequired("DEG2"),
  // Peck (UK) Per Second
  PK_UK__PER__SEC: Qudt.unitFromLocalnameRequired("PK_UK-PER-SEC"),
  // Newtons Per Square Metre
  N__PER__M2: Qudt.unitFromLocalnameRequired("N-PER-M2"),
  // Newtonmeter pro Radian
  N__M__PER__RAD: Qudt.unitFromLocalnameRequired("N-M-PER-RAD"),
  // Second per Radian Cubic Meter
  SEC__PER__RAD__M3: Qudt.unitFromLocalnameRequired("SEC-PER-RAD-M3"),
  // Naira
  Naira: Qudt.unitFromLocalnameRequired("Naira"),
  // Denar
  Denar: Qudt.unitFromLocalnameRequired("Denar"),
  // Reciprocal Joule Cubic Meter
  PER__J__M3: Qudt.unitFromLocalnameRequired("PER-J-M3"),
  // Litre Per Kelvin
  L__PER__K: Qudt.unitFromLocalnameRequired("L-PER-K"),
  // Gram Per Hour
  GM__PER__HR: Qudt.unitFromLocalnameRequired("GM-PER-HR"),
  // Microinch
  MicroIN: Qudt.unitFromLocalnameRequired("MicroIN"),
  // Millimetre
  MilliM: Qudt.unitFromLocalnameRequired("MilliM"),
  // Iraqi Dinar
  IraqiDinar: Qudt.unitFromLocalnameRequired("IraqiDinar"),
  // Megavolt Per Metre
  MegaV__PER__M: Qudt.unitFromLocalnameRequired("MegaV-PER-M"),
  // ZeptoCoulomb
  ZeptoC: Qudt.unitFromLocalnameRequired("ZeptoC"),
  // Becquerel per Cubic Metre
  BQ__PER__M3: Qudt.unitFromLocalnameRequired("BQ-PER-M3"),
  // Pataca
  Pataca: Qudt.unitFromLocalnameRequired("Pataca"),
  // Czech Koruna
  CzechKoruna: Qudt.unitFromLocalnameRequired("CzechKoruna"),
  // British Thermal Unit (thermochemical) Per Second
  BTU_TH__PER__SEC: Qudt.unitFromLocalnameRequired("BTU_TH-PER-SEC"),
  // Planck Volt
  PlanckVolt: Qudt.unitFromLocalnameRequired("PlanckVolt"),
  // Week
  WK: Qudt.unitFromLocalnameRequired("WK"),
  // Volt per Square Meter
  V__PER__M2: Qudt.unitFromLocalnameRequired("V-PER-M2"),
  // Picowatt Per Square Metre
  PicoW__PER__M2: Qudt.unitFromLocalnameRequired("PicoW-PER-M2"),
  // Cape Verde Escudo
  CapeVerdeEscudo: Qudt.unitFromLocalnameRequired("CapeVerdeEscudo"),
  // Kayser
  KY: Qudt.unitFromLocalnameRequired("KY"),
  // Burundian Franc
  BurundianFranc: Qudt.unitFromLocalnameRequired("BurundianFranc"),
  // Radian per Metre
  RAD__PER__M: Qudt.unitFromLocalnameRequired("RAD-PER-M"),
  // Percent per day
  PERCENT__PER__DAY: Qudt.unitFromLocalnameRequired("PERCENT-PER-DAY"),
  // Milli-inch
  MilliIN: Qudt.unitFromLocalnameRequired("MilliIN"),
  // Millinewton
  MilliN: Qudt.unitFromLocalnameRequired("MilliN"),
  // Bel
  B: Qudt.unitFromLocalnameRequired("B"),
  // BTU per Square Foot Hour Degree Fahrenheit
  BTU_IT__PER__FT2__HR__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-PER-FT2-HR-DEG_F"
  ),
  // Leone
  Leone: Qudt.unitFromLocalnameRequired("Leone"),
  // PebiByte
  PebiBYTE: Qudt.unitFromLocalnameRequired("PebiBYTE"),
  // Picomoles per litre per day
  PicoMOL__PER__L__DAY: Qudt.unitFromLocalnameRequired("PicoMOL-PER-L-DAY"),
  // Mach
  MACH: Qudt.unitFromLocalnameRequired("MACH"),
  // Nat
  NAT: Qudt.unitFromLocalnameRequired("NAT"),
  // Rufiyaa
  Rufiyaa: Qudt.unitFromLocalnameRequired("Rufiyaa"),
  // Picosiemens Per Metre
  PicoS__PER__M: Qudt.unitFromLocalnameRequired("PicoS-PER-M"),
  // Megacoulomb Per Square Metre
  MegaC__PER__M2: Qudt.unitFromLocalnameRequired("MegaC-PER-M2"),
  // Nanometer
  NanoM: Qudt.unitFromLocalnameRequired("NanoM"),
  // Mega Electron Volt
  MegaEV: Qudt.unitFromLocalnameRequired("MegaEV"),
  // Bit
  BIT: Qudt.unitFromLocalnameRequired("BIT"),
  // Siemens Square metre per mole
  S__M2__PER__MOL: Qudt.unitFromLocalnameRequired("S-M2-PER-MOL"),
  // US Gallon per Minute
  GAL_US__PER__MIN: Qudt.unitFromLocalnameRequired("GAL_US-PER-MIN"),
  // Debye
  Debye: Qudt.unitFromLocalnameRequired("Debye"),
  // Milligram Per Liter
  MilliGM__PER__L: Qudt.unitFromLocalnameRequired("MilliGM-PER-L"),
  // Degree Brix
  DEGREE_BRIX: Qudt.unitFromLocalnameRequired("DEGREE_BRIX"),
  // Cubic Centimeter per Mole Second
  CentiM3__PER__MOL__SEC: Qudt.unitFromLocalnameRequired("CentiM3-PER-MOL-SEC"),
  // Millibecquerels per gram
  MilliBQ__PER__GM: Qudt.unitFromLocalnameRequired("MilliBQ-PER-GM"),
  // Reciprocal Psi
  PER__PSI: Qudt.unitFromLocalnameRequired("PER-PSI"),
  // Megajoule Per Second
  MegaJ__PER__SEC: Qudt.unitFromLocalnameRequired("MegaJ-PER-SEC"),
  // Horsepower (electric)
  HP_Electric: Qudt.unitFromLocalnameRequired("HP_Electric"),
  // Decimetre
  DeciM: Qudt.unitFromLocalnameRequired("DeciM"),
  // Romanian New Leu
  RomanianNeLeu: Qudt.unitFromLocalnameRequired("RomanianNeLeu"),
  // Kiloampere Hour
  KiloA__HR: Qudt.unitFromLocalnameRequired("KiloA-HR"),
  // Rad
  RAD_R: Qudt.unitFromLocalnameRequired("RAD_R"),
  // Micromoles per square metre
  MicroMOL__PER__M2: Qudt.unitFromLocalnameRequired("MicroMOL-PER-M2"),
  // Joule Square Metre per Kilogram
  J__M2__PER__KiloGM: Qudt.unitFromLocalnameRequired("J-M2-PER-KiloGM"),
  // Kilocalorie per Mole Degree Celsius
  KiloCAL__PER__MOL__DEG_C: Qudt.unitFromLocalnameRequired(
    "KiloCAL-PER-MOL-DEG_C"
  ),
  // Gigaohm
  GigaOHM: Qudt.unitFromLocalnameRequired("GigaOHM"),
  // Pound Force per Inch
  LB_F__PER__IN: Qudt.unitFromLocalnameRequired("LB_F-PER-IN"),
  // Standard
  Standard: Qudt.unitFromLocalnameRequired("Standard"),
  // British Thermal Unit (thermochemical) Per Minute
  BTU_TH__PER__MIN: Qudt.unitFromLocalnameRequired("BTU_TH-PER-MIN"),
  // Millimetre Per Second
  MilliM__PER__SEC: Qudt.unitFromLocalnameRequired("MilliM-PER-SEC"),
  // Kilograms per square metre per Pascal per second
  KiloGM__PER__M2__PA__SEC: Qudt.unitFromLocalnameRequired(
    "KiloGM-PER-M2-PA-SEC"
  ),
  // Franc Congolais
  FrancCongolais: Qudt.unitFromLocalnameRequired("FrancCongolais"),
  // Cubic Yard Per Hour
  YD3__PER__HR: Qudt.unitFromLocalnameRequired("YD3-PER-HR"),
  // Reciprocal Cubic Yard
  PER__YD3: Qudt.unitFromLocalnameRequired("PER-YD3"),
  // Microsiemens
  MicroS: Qudt.unitFromLocalnameRequired("MicroS"),
  // Cubic Foot Per Day
  FT3__PER__DAY: Qudt.unitFromLocalnameRequired("FT3-PER-DAY"),
  // Centimeter Per Kelvin
  CentiM__PER__K: Qudt.unitFromLocalnameRequired("CentiM-PER-K"),
  // Haiti Gourde
  HaitiGourde: Qudt.unitFromLocalnameRequired("HaitiGourde"),
  // nanoampere
  NanoA: Qudt.unitFromLocalnameRequired("NanoA"),
  // Femtometre
  FemtoM: Qudt.unitFromLocalnameRequired("FemtoM"),
  // GM_Carbon
  GM_Carbon: Qudt.unitFromLocalnameRequired("GM_Carbon"),
  // Attofarad
  AttoFARAD: Qudt.unitFromLocalnameRequired("AttoFARAD"),
  // DeciS
  DeciS: Qudt.unitFromLocalnameRequired("DeciS"),
  // Cubic Inch Per Second
  IN3__PER__SEC: Qudt.unitFromLocalnameRequired("IN3-PER-SEC"),
  // Foot Pound per Square Foot
  FT__LB_F__PER__FT2: Qudt.unitFromLocalnameRequired("FT-LB_F-PER-FT2"),
  // Slug Per Hour
  SLUG__PER__HR: Qudt.unitFromLocalnameRequired("SLUG-PER-HR"),
  // Cubic Centimeter Per Hour
  CentiM3__PER__HR: Qudt.unitFromLocalnameRequired("CentiM3-PER-HR"),
  // Kilogram per Cubic Meter
  KiloGM__PER__M3: Qudt.unitFromLocalnameRequired("KiloGM-PER-M3"),
  // Centibar
  CentiBAR: Qudt.unitFromLocalnameRequired("CentiBAR"),
  // Kilogram per Square Second
  KiloGM__PER__SEC2: Qudt.unitFromLocalnameRequired("KiloGM-PER-SEC2"),
  // Kilometre per Second
  KiloM__PER__SEC: Qudt.unitFromLocalnameRequired("KiloM-PER-SEC"),
  // Gold franc (special settlement currency)
  GoldFranc: Qudt.unitFromLocalnameRequired("GoldFranc"),
  // Watt per Square Metre Steradian
  W__PER__M2__SR: Qudt.unitFromLocalnameRequired("W-PER-M2-SR"),
  // Millimetre Per Year
  MilliM__PER__YR: Qudt.unitFromLocalnameRequired("MilliM-PER-YR"),
  // Millimole
  MilliMOL: Qudt.unitFromLocalnameRequired("MilliMOL"),
  // Gram Per Litre
  GM__PER__L: Qudt.unitFromLocalnameRequired("GM-PER-L"),
  // Foot
  FT: Qudt.unitFromLocalnameRequired("FT"),
  // Pint (UK) Per Minute
  PINT_UK__PER__MIN: Qudt.unitFromLocalnameRequired("PINT_UK-PER-MIN"),
  // International Mile
  MI: Qudt.unitFromLocalnameRequired("MI"),
  // Gigahertz Metre
  GigaHZ__M: Qudt.unitFromLocalnameRequired("GigaHZ-M"),
  // Degree Baume (US Heavy)
  DEGREE_BAUME_US_HEAVY: Qudt.unitFromLocalnameRequired(
    "DEGREE_BAUME_US_HEAVY"
  ),
  // Balboa
  PAB: Qudt.unitFromLocalnameRequired("PAB"),
  // Newton seconds per radian
  N__SEC__PER__RAD: Qudt.unitFromLocalnameRequired("N-SEC-PER-RAD"),
  // Diopter
  DIOPTER: Qudt.unitFromLocalnameRequired("DIOPTER"),
  // South Korean Won
  SouthKoreanWon: Qudt.unitFromLocalnameRequired("SouthKoreanWon"),
  // Quartic Millimetre
  MilliM4: Qudt.unitFromLocalnameRequired("MilliM4"),
  // Becquerels second per cubic metre
  BQ__SEC__PER__M3: Qudt.unitFromLocalnameRequired("BQ-SEC-PER-M3"),
  // Yemeni Rial
  YemeniRial: Qudt.unitFromLocalnameRequired("YemeniRial"),
  // Long Ton
  TON_LONG: Qudt.unitFromLocalnameRequired("TON_LONG"),
  // Radian per Hour
  RAD__PER__HR: Qudt.unitFromLocalnameRequired("RAD-PER-HR"),
  // Electron Volt per Kelvin
  EV__PER__K: Qudt.unitFromLocalnameRequired("EV-PER-K"),
  // Newton Metre Squared per Ampere
  N__M2__PER__A: Qudt.unitFromLocalnameRequired("N-M2-PER-A"),
  // Micromoles per gram per hour
  MicroMOL__PER__GM__HR: Qudt.unitFromLocalnameRequired("MicroMOL-PER-GM-HR"),
  // Kilopascal
  KiloPA: Qudt.unitFromLocalnameRequired("KiloPA"),
  // Kelvin second
  K__SEC: Qudt.unitFromLocalnameRequired("K-SEC"),
  // Centistokes
  CentiST: Qudt.unitFromLocalnameRequired("CentiST"),
  // ZettaCoulomb
  ZettaC: Qudt.unitFromLocalnameRequired("ZettaC"),
  // Square Metre per Steradian
  M2__PER__SR: Qudt.unitFromLocalnameRequired("M2-PER-SR"),
  // Erg Per Gram Second
  ERG__PER__GM__SEC: Qudt.unitFromLocalnameRequired("ERG-PER-GM-SEC"),
  // ArcSecond
  ARCSEC: Qudt.unitFromLocalnameRequired("ARCSEC"),
  // Quarter (UK)
  Quarter_UK: Qudt.unitFromLocalnameRequired("Quarter_UK"),
  // Megavolt Ampere
  MegaV__A: Qudt.unitFromLocalnameRequired("MegaV-A"),
  // Micrometre
  MicroM: Qudt.unitFromLocalnameRequired("MicroM"),
  // Reciprocal Picometre
  PER__PicoM: Qudt.unitFromLocalnameRequired("PER-PicoM"),
  // Ampere Turn per Metre
  AT__PER__M: Qudt.unitFromLocalnameRequired("AT-PER-M"),
  // Calorie (international Table) Per Gram
  CAL_IT__PER__GM: Qudt.unitFromLocalnameRequired("CAL_IT-PER-GM"),
  // Moles per square metre per second per steradian
  MOL__PER__M2__SEC__SR: Qudt.unitFromLocalnameRequired("MOL-PER-M2-SEC-SR"),
  // Cubic Foot per Minute
  FT3__PER__MIN: Qudt.unitFromLocalnameRequired("FT3-PER-MIN"),
  // Pound Force Second per Square Foot
  LB_F__SEC__PER__FT2: Qudt.unitFromLocalnameRequired("LB_F-SEC-PER-FT2"),
  // chain
  CH: Qudt.unitFromLocalnameRequired("CH"),
  // NanoCoulomb
  NanoC: Qudt.unitFromLocalnameRequired("NanoC"),
  // Kilograms per square metre per second
  KiloGM__PER__M2__SEC: Qudt.unitFromLocalnameRequired("KiloGM-PER-M2-SEC"),
  // Ouguiya
  Ouguiya: Qudt.unitFromLocalnameRequired("Ouguiya"),
  // Gram Per Kilogram
  GM__PER__KiloGM: Qudt.unitFromLocalnameRequired("GM-PER-KiloGM"),
  // Kilograms per cubic metre per second
  KiloGM__PER__M3__SEC: Qudt.unitFromLocalnameRequired("KiloGM-PER-M3-SEC"),
  // Horsepower (brake)
  HP_Brake: Qudt.unitFromLocalnameRequired("HP_Brake"),
  // ArcMinute
  ARCMIN: Qudt.unitFromLocalnameRequired("ARCMIN"),
  // Square Metre per Second
  M2__PER__SEC: Qudt.unitFromLocalnameRequired("M2-PER-SEC"),
  // Pascal Cubic Metre Per Second
  PA__M3__PER__SEC: Qudt.unitFromLocalnameRequired("PA-M3-PER-SEC"),
  // Cubic Meter Per Cubic Meter
  M3__PER__M3: Qudt.unitFromLocalnameRequired("M3-PER-M3"),
  // Imperial Mass Ounce per Cubic Inch
  OZ__PER__IN3: Qudt.unitFromLocalnameRequired("OZ-PER-IN3"),
  // Mexican Peso
  MexicanPeso: Qudt.unitFromLocalnameRequired("MexicanPeso"),
  // Kyat
  Kyat: Qudt.unitFromLocalnameRequired("Kyat"),
  // Bermuda Dollar
  BermudaDollar: Qudt.unitFromLocalnameRequired("BermudaDollar"),
  // BREATH
  BREATH: Qudt.unitFromLocalnameRequired("BREATH"),
  // Second Square Foot
  SEC__FT2: Qudt.unitFromLocalnameRequired("SEC-FT2"),
  // Cubic Foot per Second
  FT3__PER__SEC: Qudt.unitFromLocalnameRequired("FT3-PER-SEC"),
  // Tonne Per Minute
  TONNE__PER__MIN: Qudt.unitFromLocalnameRequired("TONNE-PER-MIN"),
  // Erg per Cubic Centimetre
  ERG__PER__CentiM3: Qudt.unitFromLocalnameRequired("ERG-PER-CentiM3"),
  // Erlang
  ERLANG: Qudt.unitFromLocalnameRequired("ERLANG"),
  // Saint Helena Pound
  SaintHelenaPound: Qudt.unitFromLocalnameRequired("SaintHelenaPound"),
  // Moles per mole
  MOL__PER__MOL: Qudt.unitFromLocalnameRequired("MOL-PER-MOL"),
  // DEATHS
  DEATHS: Qudt.unitFromLocalnameRequired("DEATHS"),
  // Degree
  DEG: Qudt.unitFromLocalnameRequired("DEG"),
  // Kilogram per Square Metre
  KiloGM__PER__M2: Qudt.unitFromLocalnameRequired("KiloGM-PER-M2"),
  // Mega Electron Volt Femtometer
  MegaEV__FemtoM: Qudt.unitFromLocalnameRequired("MegaEV-FemtoM"),
  // Nanogram Per Cubic Metre
  NanoGM__PER__M3: Qudt.unitFromLocalnameRequired("NanoGM-PER-M3"),
  // British Thermal Unit (international Table) Per Pound of Force
  BTU_IT__PER__LB_F: Qudt.unitFromLocalnameRequired("BTU_IT-PER-LB_F"),
  // Boliviano
  Boliviano: Qudt.unitFromLocalnameRequired("Boliviano"),
  // UIC franc (special settlement currency)
  UICFranc: Qudt.unitFromLocalnameRequired("UICFranc"),
  // Elementary Charge
  ElementaryCharge: Qudt.unitFromLocalnameRequired("ElementaryCharge"),
  // TeraByte
  TeraBYTE: Qudt.unitFromLocalnameRequired("TeraBYTE"),
  // Femtomoles per litre
  FemtoMOL__PER__L: Qudt.unitFromLocalnameRequired("FemtoMOL-PER-L"),
  // Centimetre Second Degree Celsius
  CentiM__SEC__DEG_C: Qudt.unitFromLocalnameRequired("CentiM-SEC-DEG_C"),
  // Byte
  BYTE: Qudt.unitFromLocalnameRequired("BYTE"),
  // Statcoulomb per Mole
  C_Stat__PER__MOL: Qudt.unitFromLocalnameRequired("C_Stat-PER-MOL"),
  // Watt per Square Centimeter
  W__PER__CentiM2: Qudt.unitFromLocalnameRequired("W-PER-CentiM2"),
  // Million US Dollars per Flight
  MDOLLAR__PER__FLIGHT: Qudt.unitFromLocalnameRequired("MDOLLAR-PER-FLIGHT"),
  // Nanograms per litre
  NanoGM__PER__L: Qudt.unitFromLocalnameRequired("NanoGM-PER-L"),
  // Reciprocal Henry
  PER__H: Qudt.unitFromLocalnameRequired("PER-H"),
  // Metre per Minute
  M__PER__MIN: Qudt.unitFromLocalnameRequired("M-PER-MIN"),
  // CFA Franc BEAC
  XAF: Qudt.unitFromLocalnameRequired("XAF"),
  // Hertz
  HZ: Qudt.unitFromLocalnameRequired("HZ"),
  // Mho
  MHO: Qudt.unitFromLocalnameRequired("MHO"),
  // MicroSievert per hour
  MicroSV__PER__HR: Qudt.unitFromLocalnameRequired("MicroSV-PER-HR"),
  // Pint (US Liquid) Per Hour
  PINT_US__PER__HR: Qudt.unitFromLocalnameRequired("PINT_US-PER-HR"),
  // Newton per radian
  N__PER__RAD: Qudt.unitFromLocalnameRequired("N-PER-RAD"),
  // Sidereal Hour
  HR_Sidereal: Qudt.unitFromLocalnameRequired("HR_Sidereal"),
  // Guinea Franc
  GuineaFranc: Qudt.unitFromLocalnameRequired("GuineaFranc"),
  // Foot per Day
  FT__PER__DAY: Qudt.unitFromLocalnameRequired("FT-PER-DAY"),
  // Micrometre Per Kelvin
  MicroM__PER__K: Qudt.unitFromLocalnameRequired("MicroM-PER-K"),
  // Gram Per Second
  GM__PER__SEC: Qudt.unitFromLocalnameRequired("GM-PER-SEC"),
  // Mil Length
  MilLength: Qudt.unitFromLocalnameRequired("MilLength"),
  // GAL
  GAL: Qudt.unitFromLocalnameRequired("GAL"),
  // Millimole Per Kilogram
  MilliMOL__PER__KiloGM: Qudt.unitFromLocalnameRequired("MilliMOL-PER-KiloGM"),
  // Centimetre of Water
  CentiM_H2O: Qudt.unitFromLocalnameRequired("CentiM_H2O"),
  // Decinewton Metre
  DeciN__M: Qudt.unitFromLocalnameRequired("DeciN-M"),
  // BTU per Degree Rankine
  BTU_IT__PER__DEG_R: Qudt.unitFromLocalnameRequired("BTU_IT-PER-DEG_R"),
  // Degree Celsius week
  DEG_C__WK: Qudt.unitFromLocalnameRequired("DEG_C-WK"),
  // Millisiemens
  MilliS: Qudt.unitFromLocalnameRequired("MilliS"),
  // Iranian Rial
  IranianRial: Qudt.unitFromLocalnameRequired("IranianRial"),
  // Calorie (international Table) Per Gram Degree Celsius
  CAL_IT__PER__GM__DEG_C: Qudt.unitFromLocalnameRequired("CAL_IT-PER-GM-DEG_C"),
  // Nanogram Per Kilogram
  NanoGM__PER__KiloGM: Qudt.unitFromLocalnameRequired("NanoGM-PER-KiloGM"),
  // Volt Per Centimetre
  V__PER__CentiM: Qudt.unitFromLocalnameRequired("V-PER-CentiM"),
  // Megahertz
  MegaHZ: Qudt.unitFromLocalnameRequired("MegaHZ"),
  // Square Pascal Second
  PA2__SEC: Qudt.unitFromLocalnameRequired("PA2-SEC"),
  // Pound Mass
  LB: Qudt.unitFromLocalnameRequired("LB"),
  // Metric DeciTON
  DeciTON_Metric: Qudt.unitFromLocalnameRequired("DeciTON_Metric"),
  // Calorie (thermochemical) Per Second
  CAL_TH__PER__SEC: Qudt.unitFromLocalnameRequired("CAL_TH-PER-SEC"),
  // Cubic Metre Per Day
  M3__PER__DAY: Qudt.unitFromLocalnameRequired("M3-PER-DAY"),
  // Picofarad Per Metre
  PicoGM__PER__L: Qudt.unitFromLocalnameRequired("PicoGM-PER-L"),
  // US Dollar
  USDollar: Qudt.unitFromLocalnameRequired("USDollar"),
  // Volt Ampere Reactive Hour
  V__A_Reactive__HR: Qudt.unitFromLocalnameRequired("V-A_Reactive-HR"),
  // FemtoMOL
  FemtoMOL: Qudt.unitFromLocalnameRequired("FemtoMOL"),
  // Microcoulomb Per Square Meter
  MicroC__PER__M2: Qudt.unitFromLocalnameRequired("MicroC-PER-M2"),
  // Square Foot
  FT2: Qudt.unitFromLocalnameRequired("FT2"),
  // Milligrams per cubic metre per hour
  MilliGM__PER__M3__HR: Qudt.unitFromLocalnameRequired("MilliGM-PER-M3-HR"),
  // Watt per Kelvin
  W__PER__K: Qudt.unitFromLocalnameRequired("W-PER-K"),
  // Beaufort
  BFT: Qudt.unitFromLocalnameRequired("BFT"),
  // Percent per week
  PERCENT__PER__WK: Qudt.unitFromLocalnameRequired("PERCENT-PER-WK"),
  // Foot Lambert
  FT__LA: Qudt.unitFromLocalnameRequired("FT-LA"),
  // Moles per square metre per day
  MOL__PER__M2__DAY: Qudt.unitFromLocalnameRequired("MOL-PER-M2-DAY"),
  // Square Meter per Kilogram
  M2__PER__KiloGM: Qudt.unitFromLocalnameRequired("M2-PER-KiloGM"),
  // Pound per Cubic Foot
  LB__PER__FT3: Qudt.unitFromLocalnameRequired("LB-PER-FT3"),
  // BTU (TH) Inch per Square Foot Second Degree Fahrenheit
  BTU_TH__IN__PER__FT2__SEC__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_TH-IN-PER-FT2-SEC-DEG_F"
  ),
  // Ounce (avoirdupois) Per Hour
  OZ__PER__HR: Qudt.unitFromLocalnameRequired("OZ-PER-HR"),
  // Decibar
  DeciBAR: Qudt.unitFromLocalnameRequired("DeciBAR"),
  // Weber
  WB: Qudt.unitFromLocalnameRequired("WB"),
  // Peck (US Dry) Per Hour
  PK_US_DRY__PER__HR: Qudt.unitFromLocalnameRequired("PK_US_DRY-PER-HR"),
  // Ampere Square Metre Per Joule Second
  A__M2__PER__J__SEC: Qudt.unitFromLocalnameRequired("A-M2-PER-J-SEC"),
  // Ton (UK)
  TON_UK: Qudt.unitFromLocalnameRequired("TON_UK"),
  // Square Meter per Volt Second
  M2__PER__V__SEC: Qudt.unitFromLocalnameRequired("M2-PER-V-SEC"),
  // Atmosphere Cubic Meter per Mole
  ATM__M3__PER__MOL: Qudt.unitFromLocalnameRequired("ATM-M3-PER-MOL"),
  // Kilosiemens
  KiloS: Qudt.unitFromLocalnameRequired("KiloS"),
  // Dominican Peso
  DominicanPeso: Qudt.unitFromLocalnameRequired("DominicanPeso"),
  // Degree Fahrenheit per Second
  DEG_F__PER__SEC: Qudt.unitFromLocalnameRequired("DEG_F-PER-SEC"),
  // Square metres per gram of dry sediment
  M2__PER__GM_DRY: Qudt.unitFromLocalnameRequired("M2-PER-GM_DRY"),
  // Square metres per square second
  M2__PER__SEC2: Qudt.unitFromLocalnameRequired("M2-PER-SEC2"),
  // MicroCoulomb
  MicroC: Qudt.unitFromLocalnameRequired("MicroC"),
  // Slug per Cubic Foot
  SLUG__PER__FT3: Qudt.unitFromLocalnameRequired("SLUG-PER-FT3"),
  // Metre per Second
  M__PER__SEC: Qudt.unitFromLocalnameRequired("M-PER-SEC"),
  // Grain per Gallon
  GRAIN__PER__GAL: Qudt.unitFromLocalnameRequired("GRAIN-PER-GAL"),
  // Canadian Dollar
  CAD: Qudt.unitFromLocalnameRequired("CAD"),
  // Mole Degree Celsius
  MOL__DEG_C: Qudt.unitFromLocalnameRequired("MOL-DEG_C"),
  // Microbecquerel
  MicroBQ: Qudt.unitFromLocalnameRequired("MicroBQ"),
  // Radian
  RAD: Qudt.unitFromLocalnameRequired("RAD"),
  // Megabar
  MegaBAR: Qudt.unitFromLocalnameRequired("MegaBAR"),
  // Gigabase Pair
  GigaBasePair: Qudt.unitFromLocalnameRequired("GigaBasePair"),
  // Lempira
  Lempira: Qudt.unitFromLocalnameRequired("Lempira"),
  // Millicoulomb Per Cubic Meter
  MilliC__PER__M3: Qudt.unitFromLocalnameRequired("MilliC-PER-M3"),
  // Decilitre
  DeciL: Qudt.unitFromLocalnameRequired("DeciL"),
  // Kilogram Per Litre
  KiloGM__PER__L: Qudt.unitFromLocalnameRequired("KiloGM-PER-L"),
  // Nakfa
  Nakfa: Qudt.unitFromLocalnameRequired("Nakfa"),
  // Kilogram Force Per Square Millimetre
  KiloGM_F__PER__MilliM2: Qudt.unitFromLocalnameRequired(
    "KiloGM_F-PER-MilliM2"
  ),
  // Jamaican Dollar
  JamaicanDollar: Qudt.unitFromLocalnameRequired("JamaicanDollar"),
  // Cubic Decimetre Per Hour
  DeciM3__PER__HR: Qudt.unitFromLocalnameRequired("DeciM3-PER-HR"),
  // Synodic month
  MO_Synodic: Qudt.unitFromLocalnameRequired("MO_Synodic"),
  // Kilocalorie per Gram
  KiloCAL__PER__GM: Qudt.unitFromLocalnameRequired("KiloCAL-PER-GM"),
  // Kip
  KIP_F: Qudt.unitFromLocalnameRequired("KIP_F"),
  // Quartic Coulomb Metre per Cubic Energy
  C4__M4__PER__J3: Qudt.unitFromLocalnameRequired("C4-M4-PER-J3"),
  // Micromoles per gram
  MicroMOL__PER__GM: Qudt.unitFromLocalnameRequired("MicroMOL-PER-GM"),
  // Pascal Per Bar
  PA__PER__BAR: Qudt.unitFromLocalnameRequired("PA-PER-BAR"),
  // Number per nanolitre
  NUM__PER__NanoL: Qudt.unitFromLocalnameRequired("NUM-PER-NanoL"),
  // Kilocalorie (thermochemical) Per Hour
  KiloCAL_TH__PER__HR: Qudt.unitFromLocalnameRequired("KiloCAL_TH-PER-HR"),
  // Nanomoles per square metre per day
  NanoMOL__PER__M2__DAY: Qudt.unitFromLocalnameRequired("NanoMOL-PER-M2-DAY"),
  // Microgravity
  MicroG: Qudt.unitFromLocalnameRequired("MicroG"),
  // Pound Mass (avoirdupois) Square Foot
  LB__FT2: Qudt.unitFromLocalnameRequired("LB-FT2"),
  // Megaampere
  MegaA: Qudt.unitFromLocalnameRequired("MegaA"),
  // Foot Per Degree Fahrenheit
  FT__PER__DEG_F: Qudt.unitFromLocalnameRequired("FT-PER-DEG_F"),
  // Coulomb Per Cubic Millimeter
  C__PER__MilliM3: Qudt.unitFromLocalnameRequired("C-PER-MilliM3"),
  // Foot of Water
  FT_H2O: Qudt.unitFromLocalnameRequired("FT_H2O"),
  // Statampere per Square Centimetre
  A_Stat__PER__CentiM2: Qudt.unitFromLocalnameRequired("A_Stat-PER-CentiM2"),
  // Reciprocal Square Giga Electron Volt Unit
  PER__GigaEV2: Qudt.unitFromLocalnameRequired("PER-GigaEV2"),
  // Penny Weight
  DWT: Qudt.unitFromLocalnameRequired("DWT"),
  // Reciprocal metre per steradian
  PER__M__SR: Qudt.unitFromLocalnameRequired("PER-M-SR"),
  // Joule Per Square Centimeter
  J__PER__CentiM2: Qudt.unitFromLocalnameRequired("J-PER-CentiM2"),
  // Cubic Decameter
  DecaM3: Qudt.unitFromLocalnameRequired("DecaM3"),
  // Steradian
  SR: Qudt.unitFromLocalnameRequired("SR"),
  // Stilb
  STILB: Qudt.unitFromLocalnameRequired("STILB"),
  // British Thermal Unit (TH) Per Pound
  BTU_TH__PER__LB: Qudt.unitFromLocalnameRequired("BTU_TH-PER-LB"),
  // Ounce (US Fluid) Per Second
  OZ_VOL_US__PER__SEC: Qudt.unitFromLocalnameRequired("OZ_VOL_US-PER-SEC"),
  // Shannon
  SHANNON: Qudt.unitFromLocalnameRequired("SHANNON"),
  // Cubic Centimetre Per Cubic Metre
  CentiM3__PER__M3: Qudt.unitFromLocalnameRequired("CentiM3-PER-M3"),
  // Cubic Centimetre Per Cubic Centimetre
  CentiM3__PER__CentiM3: Qudt.unitFromLocalnameRequired("CentiM3-PER-CentiM3"),
  // Attojoule
  AttoJ: Qudt.unitFromLocalnameRequired("AttoJ"),
  // Ounce (avoirdupois) Per Day
  OZ__PER__DAY: Qudt.unitFromLocalnameRequired("OZ-PER-DAY"),
  // BTU (IT) Foot per Square Foot Hour Degree Fahrenheit
  BTU_IT__FT__PER__FT2__HR__DEG_F: Qudt.unitFromLocalnameRequired(
    "BTU_IT-FT-PER-FT2-HR-DEG_F"
  ),
  // Tunisian Dinar
  TunisianDinar: Qudt.unitFromLocalnameRequired("TunisianDinar"),
  // Ounce (avoirdupois) Foot
  OZ__FT: Qudt.unitFromLocalnameRequired("OZ-FT"),
  // Kilomole Per Hour
  KiloMOL__PER__HR: Qudt.unitFromLocalnameRequired("KiloMOL-PER-HR"),
  // Saudi Riyal
  SaudiRiyal: Qudt.unitFromLocalnameRequired("SaudiRiyal"),
  // Moles per square metre
  MOL__PER__M2: Qudt.unitFromLocalnameRequired("MOL-PER-M2"),
  // Centipoise Per Bar
  CentiPOISE__PER__BAR: Qudt.unitFromLocalnameRequired("CentiPOISE-PER-BAR"),
  // Calorie (thermochemical) Per Minute
  CAL_TH__PER__MIN: Qudt.unitFromLocalnameRequired("CAL_TH-PER-MIN"),
  // Pound Sterling
  PoundSterling: Qudt.unitFromLocalnameRequired("PoundSterling"),
  // Tex
  TEX: Qudt.unitFromLocalnameRequired("TEX"),
  // Microlitre
  MicroL: Qudt.unitFromLocalnameRequired("MicroL"),
  // Kilocoulomb Per Square Meter
  KiloC__PER__M2: Qudt.unitFromLocalnameRequired("KiloC-PER-M2"),
  // Femtojoule
  FemtoJ: Qudt.unitFromLocalnameRequired("FemtoJ"),
  // Microgram Per Liter
  MicroGM__PER__L: Qudt.unitFromLocalnameRequired("MicroGM-PER-L"),
  // Cubic Metre per Kilogram
  M3__PER__KiloGM: Qudt.unitFromLocalnameRequired("M3-PER-KiloGM"),
  // Square Centimetre Minute
  CentiM2__MIN: Qudt.unitFromLocalnameRequired("CentiM2-MIN"),
  // millisecond
  MilliSEC: Qudt.unitFromLocalnameRequired("MilliSEC"),
  // Gill (UK) Per Hour
  GI_UK__PER__HR: Qudt.unitFromLocalnameRequired("GI_UK-PER-HR"),
  // Gibraltar pound
  GibraltarPound: Qudt.unitFromLocalnameRequired("GibraltarPound"),
  // Kilo Electron Volt per Micrometre
  KiloEV__PER__MicroM: Qudt.unitFromLocalnameRequired("KiloEV-PER-MicroM"),
  // Ampere Per Millimetre
  A__PER__MilliM: Qudt.unitFromLocalnameRequired("A-PER-MilliM"),
  // Decibars per year
  DeciBAR__PER__YR: Qudt.unitFromLocalnameRequired("DeciBAR-PER-YR"),
  // Milliampere Hour
  MilliA__HR: Qudt.unitFromLocalnameRequired("MilliA-HR"),
  // Azerbaijanian Manat
  AZN: Qudt.unitFromLocalnameRequired("AZN"),
  // Newton per Meter
  N__PER__M: Qudt.unitFromLocalnameRequired("N-PER-M"),
  // Revolution per Square Second
  REV__PER__SEC2: Qudt.unitFromLocalnameRequired("REV-PER-SEC2"),
  // Hour
  HR: Qudt.unitFromLocalnameRequired("HR"),
  // BEAT
  BEAT: Qudt.unitFromLocalnameRequired("BEAT"),
  // Cubic Centimeter Per Day
  CentiM3__PER__DAY: Qudt.unitFromLocalnameRequired("CentiM3-PER-DAY"),
  // Swedish Krona
  SwedishKrona: Qudt.unitFromLocalnameRequired("SwedishKrona"),
  // Newtonmetersekunden pro Meter
  N__M__SEC__PER__M: Qudt.unitFromLocalnameRequired("N-M-SEC-PER-M"),
  // Micrograms per millilitre
  MicroGM__PER__MilliL: Qudt.unitFromLocalnameRequired("MicroGM-PER-MilliL"),
  // Gill (UK) Per Minute
  GI_UK__PER__MIN: Qudt.unitFromLocalnameRequired("GI_UK-PER-MIN"),
  // Mean Gregorian Month
  MO_MeanGREGORIAN: Qudt.unitFromLocalnameRequired("MO_MeanGREGORIAN"),
  // Long Ton (uk) Per Day
  TON_UK__PER__DAY: Qudt.unitFromLocalnameRequired("TON_UK-PER-DAY"),
  // Tugrik
  Tugrik: Qudt.unitFromLocalnameRequired("Tugrik"),
  // Kwanza
  Kwanza: Qudt.unitFromLocalnameRequired("Kwanza"),
  // Litre Per Hour
  L__PER__HR: Qudt.unitFromLocalnameRequired("L-PER-HR"),
  // Pound Degree Rankine
  LB__DEG_R: Qudt.unitFromLocalnameRequired("LB-DEG_R"),
  // Joule per Quartic Metre
  J__PER__M4: Qudt.unitFromLocalnameRequired("J-PER-M4"),
  // Statmho
  MHO_Stat: Qudt.unitFromLocalnameRequired("MHO_Stat"),
  // Watts per square metre per inverse metre per steradian
  W__M__PER__M2__SR: Qudt.unitFromLocalnameRequired("W-M-PER-M2-SR"),
  // Malawi Kwacha
  MalawiKwacha: Qudt.unitFromLocalnameRequired("MalawiKwacha"),
  // V-M
  V__M: Qudt.unitFromLocalnameRequired("V-M"),
  // Cubic Millimetre Per Cubic Metre
  MilliM3__PER__M3: Qudt.unitFromLocalnameRequired("MilliM3-PER-M3"),
};

// QuantityKinds
{
  let quantityKind: QuantityKind;
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AbsoluteActivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Absolute Activity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ-SEC-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseVolume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AbsoluteActivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AbsoluteHumidity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    "AH",
    undefined
  );
  quantityKind.addLabel(new LangString("Absolute Humidity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN-PER-GAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-GAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-IN3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHORT-PER-YD3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-YD3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_LONG-PER-YD3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-GAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-DeciL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-IN3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-GAL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckDensity");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-GAL_UK");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Density"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AbsoluteHumidity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AbsorbedDose",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "D",
    undefined
  );
  quantityKind.addLabel(new LangString("Absorbed Dose", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGRAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGRAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD_R");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AbsorbedDose",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AbsorbedDoseRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Absorbed Dose Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-GM-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAY-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AbsorbedDoseRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Absorptance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Absorptance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Absorptance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Acceleration",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Acceleration", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GALILEO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloPA-M2-PER-GM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/G");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Acceleration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AccelerationOfGravity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    "g",
    undefined
  );
  quantityKind.addLabel(new LangString("Acceleration Of Gravity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GALILEO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloPA-M2-PER-GM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/G");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Acceleration"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AccelerationOfGravity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AcceptorDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "n_a",
    undefined
  );
  quantityKind.addLabel(new LangString("Acceptor Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AcceptorDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AcceptorIonizationEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_a",
    undefined
  );
  quantityKind.addLabel(new LangString("Acceptor Ionization Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IonizationEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AcceptorIonizationEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Acidity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Acidity", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PH"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Acidity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AcousticImpedance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Acoustic Impediance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-SEC-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassPerAreaTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AcousticImpedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Action",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    "S",
    undefined
  );
  quantityKind.addLabel(new LangString("Action", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Action",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ActionTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Action Time", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ActionTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ActiveEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "W",
    undefined
  );
  quantityKind.addLabel(new LangString("Active Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ActiveEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ActivePower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "P",
    undefined
  );
  quantityKind.addLabel(new LangString("Active Power", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ComplexPower"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ActivePower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Activity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Activity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBQ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCi");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBQ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliCi");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBQ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaBQ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroCi");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Ci");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/StochasticProcess"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Activity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ActivityCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "f_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Activity Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ActivityCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    "c_A",
    undefined
  );
  quantityKind.addLabel(new LangString("Activity Concentration", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBQ-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBQ-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoBQ-PER-L");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ActivityConcentration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ActivityThresholds",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Activity Thresholds", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ActivityThresholds",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Adaptation",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Adaptation", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Adaptation",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Admittance",
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Admittance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Admittance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AlphaDisintegrationEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Alpha Disintegration Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AlphaDisintegrationEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Altitude",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Altitude", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Altitude",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmbientPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p_a",
    undefined
  );
  quantityKind.addLabel(new LangString("Ambient Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmbientPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Amount of Substance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliMOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroMOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloMOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstanceConcentrationOfB",
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    "C_B",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Amount of Substance of Concentration of B", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstanceConcentrationOfB",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstanceFractionOfB",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "X_B",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Amount of Substance of Fraction of B", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstanceFractionOfB",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Amount of Substance per Unit Mass", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/IU-PER-MilliGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-GM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMassPressure",
    "http://qudt.org/vocab/dimensionvector/A1E0L1I0M-2H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Molar Mass variation due to Pressure", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM-PA"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMassPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume",
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Amount of Substance per Unit Volume", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoMOL-PER-L"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-L"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MOL-PER-DeciM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoMOL-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoMOL-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoMOL-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-L"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M3"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Concentration"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Angle",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Angle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngleOfAttack",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angle Of Attack", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Angle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngleOfAttack",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngleOfOpticalRotation",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angle of Optical Rotation", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Angle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngleOfOpticalRotation",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularAcceleration",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Acceleration", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-SEC2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseSquareTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularAcceleration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularCrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Cross-section", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularCrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularDistance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Distance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Angle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularDistance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularFrequency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Frequency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency_Ang"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-MIN");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularVelocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularFrequency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularImpulse",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    "H",
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Impulse", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularImpulse",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularMomentum",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Momentum", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularMomentum",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularMomentumPerAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Momentum per Angle", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/N-M-SEC-PER-RAD"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularMomentumPerAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    "G",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Angular Reciprocal Lattice Vector", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency_Ang"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-MIN");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AngularWavenumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    "k",
    undefined
  );
  quantityKind.addLabel(new LangString("Angular Wavenumber", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AngularWavenumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ApogeeRadius",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "r_2",
    undefined
  );
  quantityKind.addLabel(new LangString("Apogee Radius", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Radius"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ApogeeRadius",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ApparentPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Apparent Power", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ComplexPower"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ApparentPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Area",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Area",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaPerTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area per Time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM2-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM2-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-HZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaPerTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-HA");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-DEG_F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaThermalExpansion",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area Thermal Expansion", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaThermalExpansion",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area Time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR-FT2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreaTimeTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H1T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Area Time Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-SEC-DEG_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-HR-DEG_F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreaTimeTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AreicHeatFlowRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "φ",
    undefined
  );
  quantityKind.addLabel(new LangString("Aeric Heat Flow Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AreicHeatFlowRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Asset",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Asset", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Asset",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtmosphericHydroxylationRate",
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Atmospheric Hydroxylation Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtmosphericHydroxylationRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtmosphericPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Atmospheric Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtmosphericPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtomScatteringFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "f",
    undefined
  );
  quantityKind.addLabel(new LangString("Atom Scattering Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtomScatteringFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtomicAttenuationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "μₐ",
    undefined
  );
  quantityKind.addLabel(new LangString("Atomic Attenuation Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtomicAttenuationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtomicCharge",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Atomic Charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YoctoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ZeptoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ElementaryCharge"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckCharge");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YottaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ZettaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCharge"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtomicCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtomicMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "m_a",
    undefined
  );
  quantityKind.addLabel(new LangString("Atomic Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtomicMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AtomicNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Atomic Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Z");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AtomicNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Attenuation Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AttenuationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AuditoryThresholds",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Auditory Thresholds", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/B");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundPowerLevel"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AuditoryThresholds",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AuxillaryMagneticField",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Auxillary Magnetic Field", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AT-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OERSTED");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-PER-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliA-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AT-PER-IN");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AuxillaryMagneticField",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AverageEnergyLossPerElementaryChargeProduced",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "W_i",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Average Energy Loss per Elementary Charge Produced", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AverageEnergyLossPerElementaryChargeProduced",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AverageHeadEndPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Average Head End Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/HeadEndPressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AverageHeadEndPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AverageLogarithmicEnergyDecrement",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Average Logarithmic Energy Decrement", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AverageLogarithmicEnergyDecrement",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AverageSpecificImpulse",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Average Specific Impulse", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificImpulse"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AverageSpecificImpulse",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/AverageVacuumThrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Average Vacuum Thrust", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VacuumThrust"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/AverageVacuumThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Basicity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Acidity", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PH"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Basicity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BendingMomentOfForce",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "M_b",
    undefined
  );
  quantityKind.addLabel(new LangString("Bending Moment of Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Torque"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BendingMomentOfForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BetaDisintegrationEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Qᵦ",
    undefined
  );
  quantityKind.addLabel(new LangString("Beta Disintegration Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BetaDisintegrationEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BevelGearPitchAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Bevel Gear Pitch Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Angle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BevelGearPitchAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BindingFraction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "b",
    undefined
  );
  quantityKind.addLabel(new LangString("Binding Fraction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BindingFraction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BioconcentrationFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Bioconcentration Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BioconcentrationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BiodegredationHalfLife",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Biodegredation Half Life", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Time"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BiodegredationHalfLife",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BloodGlucoseLevel",
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Blood Glucose Level", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-L"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BloodGlucoseLevel",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BloodGlucoseLevel_Mass",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Blood Glucose Level by Mass", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-DeciL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BloodGlucoseLevel_Mass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BodyMassIndex",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    "BMI",
    undefined
  );
  quantityKind.addLabel(new LangString("Body Mass Index", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BodyMassIndex",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BoilingPoint",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Boiling Point Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliDEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Temperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BoilingPoint",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BraggAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Bragg Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Angle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BraggAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Breadth",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "b",
    undefined
  );
  quantityKind.addLabel(new LangString("Breadth", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Breadth",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BucklingFactor",
    undefined,
    "B",
    undefined
  );
  quantityKind.addLabel(new LangString("Buckling Factor", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BucklingFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BulkModulus",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "K",
    undefined
  );
  quantityKind.addLabel(new LangString("Bulk Modulus", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BulkModulus",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BurgersVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "b",
    undefined
  );
  quantityKind.addLabel(new LangString("Burgers Vector", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BurgersVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BurnRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Burn Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Velocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BurnRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/BurnTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    "t",
    undefined
  );
  quantityKind.addLabel(new LangString("Burn Time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/POISE-PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiPOISE-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_TROPICAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-KiloOHM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaYR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_MeanJulian");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckTime");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Common");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-OHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MO_MeanGREGORIAN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_Synodic");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Time"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/BurnTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_X",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "cg",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Center of Gravity in the X axis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_X",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Y",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "cg",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Center of Gravity in the Y axis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Y",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Z",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "cg",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Center of Gravity in the Z axis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-GRAVITY_Z",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Center of Mass (CoM)", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PositionVector"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CENTER-OF-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CONTRACT-END-ITEM-SPECIFICATION-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Contract End Item (CEI) Specification Mass.", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CONTRACT-END-ITEM-SPECIFICATION-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CONTROL-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Control Mass.", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CONTROL-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Canonical Partition Function", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Capacitance",
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T4D0",
    "C",
    undefined
  );
  quantityKind.addLabel(new LangString("Capacitance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoFARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroFARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoFARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliFARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FARAD_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FARAD_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoFARAD");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Capacitance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Capacity",
    undefined,
    "TBD",
    undefined
  );
  quantityKind.addLabel(new LangString("Capacity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Capacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CarrierLifetime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Carrier LifetIme", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/POISE-PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiPOISE-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_TROPICAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-KiloOHM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaYR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_MeanJulian");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckTime");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Common");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-OHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MO_MeanGREGORIAN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_Synodic");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Time"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CarrierLifetime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CartesianArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Cartesian Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CartesianArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CartesianCoordinates",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "x, y, z",
    undefined
  );
  quantityKind.addLabel(new LangString("Cartesian Coordinates", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CartesianCoordinates",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CartesianVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    "V",
    undefined
  );
  quantityKind.addLabel(new LangString("Volume", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_VOL_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FBM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/STR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHIPPING_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Standard");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TSP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolume");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TBSP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_UK_PET");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Volume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CartesianVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CatalyticActivity",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Catalytic Activity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KAT");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CatalyticActivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CelsiusTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Celsius temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CelsiusTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CenterOfGravity_X",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "cg",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Center of Gravity in the X axis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CenterOfGravity_X",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CenterOfGravity_Y",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "cg",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Center of Gravity in the Y axis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CenterOfGravity_Y",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CenterOfGravity_Z",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "cg",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Center of Gravity in the Z axis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CenterOfGravity_Z",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CharacteristicAcousticImpedance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    "Z",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Characteristic Acoustic Impedance", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-SEC-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AcousticImpedance"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CharacteristicAcousticImpedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CharacteristicVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Characteristic Velocity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CharacteristicVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ChargeNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "z",
    undefined
  );
  quantityKind.addLabel(new LangString("Charge Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ChargeNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ChemicalAffinity",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Chemical Affinity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ChemicalAffinity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ChemicalPotential",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Chemical Potential", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MOL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ-PER-MOL");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MolarEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ChemicalPotential",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Chromaticity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Chromaticity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Chromaticity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Circulation",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Circulation", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM2-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM2-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-HZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SEC");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaPerTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Circulation",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ClosestApproachRadius",
    undefined,
    "r_o",
    undefined
  );
  quantityKind.addLabel(new LangString("Closest Approach Radius", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ClosestApproachRadius",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Coefficient of heat transfer", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM2-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2-SEC-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM2-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2-DEG_R"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2-HR-DEG_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2-K");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2-DEG_R"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Coercivity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    "H_{c,B}",
    undefined
  );
  quantityKind.addLabel(new LangString("Coercivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Coercivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CoherenceLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "ξ",
    undefined
  );
  quantityKind.addLabel(new LangString("Coherence Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CoherenceLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ColdReceptorThreshold",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Cold Receptor Threshold", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ColdReceptorThreshold",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CombinedNonEvaporativeHeatTransferCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    "h",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Combined Non Evaporative Heat Transfer Coefficient", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CombinedNonEvaporativeHeatTransferCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CombustionChamberTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    "T_c",
    undefined
  );
  quantityKind.addLabel(new LangString("Combustion Chamber Temperature", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CombustionChamberTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ComplexPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Complex Power", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricPower"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ComplexPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Compressibility",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Compressibility", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-N");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PER-MILLE-PER-PSI"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Compressibility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CompressibilityFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Compressibility Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CompressibilityFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Concentration",
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Concentration", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Concentration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Conductance",
    "http://qudt.org/vocab/dimensionvector/A0E2L-2I0M-1H0T3D0",
    "G",
    undefined
  );
  quantityKind.addLabel(new LangString("Conductance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Conductance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ConductionSpeed",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "c",
    undefined
  );
  quantityKind.addLabel(new LangString("Conduction Speed", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Speed"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ConductionSpeed",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ConductiveHeatTransferRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Conductive Heat Transfer Rate", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ConductiveHeatTransferRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Conductivity",
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Conductivity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoS-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaS-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciS-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroS-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoS-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroS-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S-PER-CentiM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliS-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoS-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloS-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliS-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Conductivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ConvectiveHeatTransfer",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Convective Heat Transfer", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ConvectiveHeatTransfer",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CorrelatedColorTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Correlated Color Temperature", "en-us")
  );
  quantityKind.addLabel(new LangString("Correlated Colour Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CorrelatedColorTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CouplingFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "k",
    undefined
  );
  quantityKind.addLabel(new LangString("Coupling Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CouplingFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "σ",
    undefined
  );
  quantityKind.addLabel(new LangString("Cross-section", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CrossSectionalArea",
    undefined,
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Cross-sectional Area", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CrossSectionalArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CubicElectricDipoleMomentPerSquareEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E3L-1I0M-2H0T7D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Cubic Electric Dipole Moment per Square Energy", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C3-M-PER-J2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CubicElectricDipoleMomentPerSquareEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CubicExpansionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Cubic Expansion Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM-PER-K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ExpansionRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CubicExpansionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CurieTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    "T_C",
    undefined
  );
  quantityKind.addLabel(new LangString("Curie Temperature", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CurieTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Currency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Currency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Ngultrum");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CyprusPound");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MalaysianRinggit"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UAEDirham");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DanishKrone");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KenyanShilling"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GuyanaDollar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/XPF");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Kyat");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/UnidadesDeFormento"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/USDollar-NextDay"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BDT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BulgarianLev");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pula");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AZN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SingaporeDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LibyanDinar");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/LithuanianLitas"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IraqiDinar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QatariRial");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BrazilianReal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Tenge");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FijiDollar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Lilangeni");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PhilippinePeso"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quetzal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MalteseLira");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SlovakKoruna");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Boliviano");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LatvianLats");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DZD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Leone");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PAB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Som");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EgyptianPound");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IndianRupee");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LaoKip");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BruneiDollar");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MoroccanDirham"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Platinum-OunceTroy"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KuwaitiDinar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Dobra");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Euro");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/EuropeanMonetaryUnit"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/JamaicanDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Vatu");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HaitiGourde");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RwandaFranc");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TanzanianShilling"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AUD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Kwanza");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/UnidadDeValorReal"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CordobaOro");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FalklandIslandsPound"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Manat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SwissFranc");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Somoni");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/XAF");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NewIsraeliShekel"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MexicanPeso");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ChileanPeso");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NetherlandsAntillianGuilder"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SerbianDinar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MoldovanLeu");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NuevoSol");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/JordanianDinar"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/LiberianDollar"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/USDollar-SameDay"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Paanga");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SaintHelenaPound"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ZimbabweDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BermudaDollar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CroatianKuna");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Metical");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BurundianFranc"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GoldFranc");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/VenezuelanBolvar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Lempira");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UICFranc");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/EuropeanCompositeUnit"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YemeniRial");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HeartBeat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Tugrik");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/JapaneseYen");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NewTurkishLira"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Forint");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UruguayPeso");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Ouguiya");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/USDollar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Rupiah");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AFN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SouthKoreanWon"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TrinidadAndTobagoDollar"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Silver-OunceTroy"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Guarani");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SudanesePound");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AWG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Nakfa");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SwedishKrona");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SeychellesRupee"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BHD");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Gold-OunceTroy"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Kina");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Naira");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OmaniRial");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GibraltarPound"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GuineaFranc");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BolivianMvdol");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pataca");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CostaRicanColon"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Dalasi");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DjiboutiFranc");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CapeVerdeEscudo"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Lek");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/VietnameseDong"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FrancCongolais"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YuanRenminbi");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ConvertibleMark"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BYR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Hryvnia");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CubanPeso");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/EuropeanUnitOfAccount9"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RomanianNeLeu");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Kroon");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Lari");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/EastCaribbeanDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MillionUSD");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NewTaiwanDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Cedi");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MauritiusRupee"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IranianRial");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MalagasyAriary"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ZambianKwacha");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WIRFranc");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NamibianDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RussianRuble");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ColombianPeso");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MalawiKwacha");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SolomonIslandsDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ComoroFranc");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Denar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BSD");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MexicanUnidadDeInversion"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NorwegianKrone"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PakistanRupee");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NorthKoreanWon"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/HongKongDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SriLankaRupee");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DominicanPeso");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EthiopianBirr");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Rufiyaa");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UzbekistanSom");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/EuropeanUnitOfAccount17"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SomaliShilling"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SpecialDrawingRights"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IcelandKrona");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SyrianPound");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NewZealandDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SamoanTala");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SurinamDollar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/XOF");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PoundSterling");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SaudiRiyal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Loti");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Riel");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/UgandaShilling"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Zloty");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CzechKoruna");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TunisianDinar");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LebanesePound");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CaymanIslandsDollar"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NepaleseRupee");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BelizeDollar");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Palladium-OunceTroy"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SouthAfricanRand"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WIREuro");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Asset"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Currency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CurrencyPerFlight",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Currency Per Flight", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MDOLLAR-PER-FLIGHT"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CurrencyPerFlight",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CurrentLinkage",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Current Linkage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CurrentLinkage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Curvature",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Curvature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DIOPTER");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Curvature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Curvature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CurvatureFromRadius",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/CyclotronAngularFrequency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Larmor Angular Frequency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency_Ang"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-MIN");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularFrequency"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/CyclotronAngularFrequency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DELTA-V",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Delta-V", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DELTA-V",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DRY-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dry Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DRY-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DataRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Data Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GigaBIT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloBIT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BIT-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaBIT-PER-SEC"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationFlowRate"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DataRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Debye-WallerFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "D, B",
    undefined
  );
  quantityKind.addLabel(new LangString("Debye-Waller Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Debye-WallerFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DebyeAngularFrequency",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Debye Angular Frequency", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DebyeAngularFrequency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DebyeAngularWavenumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    "q_D",
    undefined
  );
  quantityKind.addLabel(new LangString("Debye Angular Wavenumber", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DebyeAngularWavenumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DebyeTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Debye Temperature", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DebyeTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DecayConstant",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Decay Constant", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCi");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DecayConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DegreeOfDissociation",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Degree of Dissociation", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DegreeOfDissociation",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Density",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN-PER-GAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-GAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-IN3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHORT-PER-YD3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-YD3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_LONG-PER-YD3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-GAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-DeciL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-IN3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-GAL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckDensity");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-GAL_UK");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Density",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DensityInCombustionChamber",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Density In Combustion Chamber", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DensityInCombustionChamber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DensityOfStates",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T1D0",
    "g",
    undefined
  );
  quantityKind.addLabel(new LangString("Density of states", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SEC-PER-RAD-M3"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DensityOfStates",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DensityOfTheExhaustGases",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Density Of The Exhaust Gases", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DensityOfTheExhaustGases",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Depth",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Depth", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Depth",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DewPointTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    "T_d",
    undefined
  );
  quantityKind.addLabel(new LangString("Dew Point Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliDEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Temperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DewPointTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Diameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "d",
    undefined
  );
  quantityKind.addLabel(new LangString("Diameter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Diameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DiastolicBloodPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Diastolic Blood Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DiastolicBloodPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DiffusionArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "L^2",
    undefined
  );
  quantityKind.addLabel(new LangString("Diffusion Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DiffusionArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DiffusionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    "D",
    undefined
  );
  quantityKind.addLabel(new LangString("Diffusion Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DiffusionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DiffusionCoefficientForFluenceRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "Dᵩ",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Diffusion Coefficient for Fluence Rate", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DiffusionCoefficientForFluenceRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DiffusionLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Diffusion Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DiffusionLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Dimensionless",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "U",
    undefined
  );
  quantityKind.addLabel(new LangString("Dimensionless", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloBYTE-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DECADE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MebiBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RPK");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SUSCEPTIBILITY_MAG"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaBasePair");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GibiBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KibiBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExbiBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PebiBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OCT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TebiBYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Flight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaBYTE");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SUSCEPTIBILITY_ELEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Dimensionless",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dimensionless Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Displacement",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Displacement", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Displacement",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DisplacementCurrent",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    "I_D",
    undefined
  );
  quantityKind.addLabel(new LangString("Displacement Current", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DisplacementCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DisplacementCurrentDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Displacement Current Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DisplacementCurrentDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DisplacementVectorOfIon",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "u",
    undefined
  );
  quantityKind.addLabel(new LangString("Displacement Vector of Ion", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DisplacementVectorOfIon",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Dissipance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dissipance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Dissipance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Distance",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "d",
    undefined
  );
  quantityKind.addLabel(new LangString("Distance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Distance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DistanceTraveledDuringBurn",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "s",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Distance Traveled During a Burn", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DistanceTraveledDuringBurn",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DonorDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "n_d",
    undefined
  );
  quantityKind.addLabel(new LangString("Donor Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DonorDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DonorIonizationEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_d",
    undefined
  );
  quantityKind.addLabel(new LangString("Donor Ionization Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/IonizationEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DonorIonizationEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DoseEquivalent",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "H",
    undefined
  );
  quantityKind.addLabel(new LangString("Dose Equivalent", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliR_man");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliSV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroSV-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroSV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DoseEquivalent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DoseEquivalentQualityFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Dose Equivalent Quality Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DoseEquivalentQualityFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DragCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "C_D",
    undefined
  );
  quantityKind.addLabel(new LangString("Drag Coefficient", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DragCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DragForce",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    "D or F_D",
    undefined
  );
  quantityKind.addLabel(new LangString("Drag Force", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DragForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DryVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dry Volume", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_US_DRY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_US_DRY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAL_US_DRY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US_DRY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BU_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CORD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BU_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT_US_DRY");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Volume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DryVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Duv",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Delta u,v", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Duv",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DynamicFriction",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dynamic Friction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Friction"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DynamicFriction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DynamicFrictionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dynamic Friction Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FrictionCoefficient"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DynamicFrictionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DynamicPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "q",
    undefined
  );
  quantityKind.addLabel(new LangString("Dynamic Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DynamicPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Dynamic Viscosity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-FT-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/LB_F-SEC-PER-IN2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPOISE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/POISE");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/LB_F-SEC-PER-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiPOISE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-FT-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SLUG-PER-FT-SEC"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Viscosity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/DynamicViscosity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EarthClosestApproachVehicleVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "V_o",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Earth Closest Approach Vehicle Velocity", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VehicleVelocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EarthClosestApproachVehicleVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EccentricityOfOrbit",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Eccentricity Of Orbit", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EccentricityOfOrbit",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EffectiveExhaustVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "v_{e}",
    undefined
  );
  quantityKind.addLabel(new LangString("Effective Exhaustvelocity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EffectiveExhaustVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EffectiveMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "m^*",
    undefined
  );
  quantityKind.addLabel(new LangString("Effective Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EffectiveMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EffectiveMultiplicationFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "k_{eff}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Effective Multiplication Factor", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MultiplicationFactor"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EffectiveMultiplicationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Efficiency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Efficiency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Efficiency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EinsteinTransitionProbability",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "A_jkN_j",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Einstein Transition Probability", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EinsteinTransitionProbability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCharge",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YoctoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ZeptoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ElementaryCharge"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckCharge");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YottaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ZettaC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargeDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Charge Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargeDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargeLineDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Charge Line Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargeLineDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargeLinearDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Charge Linear Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargeLinearDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance",
    "http://qudt.org/vocab/dimensionvector/A-1E1L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electric charge per amount of substance", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MOL");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Stat-PER-MOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerAmountOfSubstance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric charge per area", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Ab-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Stat-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Charge Per Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliC-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-T-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ-PER-T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-PER-T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargeSurfaceDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electric Charge Surface Density", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargeSurfaceDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-3I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Charge Volume Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-CentiM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MilliM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricChargeVolumeDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity",
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Conductivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MHO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroMHO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A_Ab-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MHO_Stat");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricConductivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrent",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Current", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckCurrent");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BIOT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    "J",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Current Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/A_Stat-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckCurrentDensity"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaA-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/A_Ab-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerAngle",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Current per Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-RAD");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electric Current per Unit Energy", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitLength",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electric Current per Unit Length", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electric Current per Unit Temperature", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-DEG_C");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPhasor",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Current Phasor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPhasor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricDipoleMoment",
    "http://qudt.org/vocab/dimensionvector/A0E1L1I0M0H0T1D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Dipole Moment", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Debye");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricDipoleMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricDisplacement",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    "D",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Displacement", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Ab-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Stat-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC-PER-M2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricDisplacement",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricDisplacementField",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    "D",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Displacement Field", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Ab-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Stat-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC-PER-M2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricDisplacementField",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricField",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Field", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Stat-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Ab-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricField",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Field Strength", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-IN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Stat-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Ab-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricFlux",
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Flux", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Stat-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricFluxDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Flux Density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Ab-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Stat-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC-PER-M2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricPolarizability",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Polarizability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricPolarizability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricPolarization",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    "P",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Polarization", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricPolarization",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricPotential",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    "V",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Potential", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolt");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricPotential",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricPotentialDifference",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    "V_{ab}",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Potential Difference", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolt");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricPotentialDifference",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "P_E",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-YD3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Electric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-M3-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Brake");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckPower");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Boiler");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_FG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-IN3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Metric");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Power"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricPropulsionPropellantMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "M_P",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electric Propulsion Propellant Mass", "en")
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropellantMass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricPropulsionPropellantMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricQuadrupoleMoment",
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T1D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Quadrupole Moment", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricQuadrupoleMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricSusceptibility",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electric Susceptibility", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricSusceptibility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectricalPowerToMassRatio",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Electrical Power To Mass Ratio", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectricalPowerToMassRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectrolyticConductivity",
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    "x",
    undefined
  );
  quantityKind.addLabel(new LangString("Electrolytic Conductivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectrolyticConductivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectromagneticEnergyDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "w",
    undefined
  );
  quantityKind.addLabel(new LangString("Electromagnetic Energy Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectromagneticEnergyDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeability",
    "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Permeability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/H_Stat-PER-CentiM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeabilityRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electromagnetic Permeability Ratio", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMEABILITY_EM_REL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectromagneticPermeabilityRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectromagneticWavePhaseSpeed",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "c",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Electromagnetic Wave Phase Speed", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectromagneticWavePhaseSpeed",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectromotiveForce",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Electromotive Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolt");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectromotiveForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectronAffinity",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "χ",
    undefined
  );
  quantityKind.addLabel(new LangString("Electron Affinity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectronAffinity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectronDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Electron Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectronDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectronMeanFreePath",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "l_e",
    undefined
  );
  quantityKind.addLabel(new LangString("Electron Mean Free Path", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectronMeanFreePath",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElectronRadius",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "r_e",
    undefined
  );
  quantityKind.addLabel(new LangString("Electron Radius", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElectronRadius",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ElementaryCharge",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T1D0",
    "e",
    undefined
  );
  quantityKind.addLabel(new LangString("Elementary Charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ElementaryCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EllipticalOrbitApogeeVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "V_a",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Elliptical Orbit Apogee Velocity", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VehicleVelocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EllipticalOrbitApogeeVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EllipticalOrbitPerigeeVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "V_p",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Elliptical Orbit Perigee Velocity", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VehicleVelocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EllipticalOrbitPerigeeVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Emissivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Emissivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Emissivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Energy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Energy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-PER-FT3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyDensityOfStates",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    "n_E",
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Density of States", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-J-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyDensityOfStates",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyExpenditure",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Expenditure", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyExpenditure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyFluence",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Fluence", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyFluence",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyFluenceRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "Ψ",
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Fluence Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyFluenceRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyImparted",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "ε",
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Imparted", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyImparted",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyInternal",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "U",
    undefined
  );
  quantityKind.addLabel(new LangString("Internal Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyInternal",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyKinetic",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Kinetic Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyKinetic",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyLevel",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Energy Level", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyLevel",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyPerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Energy per Area", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoPA-PER-KiloM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloW-HR-PER-M2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyPerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyPerAreaElectricCharge",
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Energy Per Area Electric Charge", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyPerAreaElectricCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    "V",
    undefined
  );
  quantityKind.addLabel(new LangString("Energy per electric charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolt");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyPerMassAmountOfSubstance",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Energy and work per mass amount of substance", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB-MOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyPerMassAmountOfSubstance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyPerSquareMagneticFluxDensity",
    "http://qudt.org/vocab/dimensionvector/A0E2L2I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Energy Per Square Magnetic Flux Density", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-T2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyPerSquareMagneticFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EnergyPerTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Energy per temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EnergyPerTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Enthalpy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "H",
    undefined
  );
  quantityKind.addLabel(new LangString("Enthalpy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Enthalpy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Entropy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    "S",
    undefined
  );
  quantityKind.addLabel(new LangString("Entropy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Entropy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstant",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Equilibrium Constant", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstantOnConcentrationBasis",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Equilibrium Constant on Concentration Basis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstant"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstantOnConcentrationBasis",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstantOnPressureBasis",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Equilibrium Constant on Pressure Basis", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstant"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EquilibriumConstantOnPressureBasis",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EquilibriumPositionVectorOfIon",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "R_0",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Equilibrium Position Vector of Ion", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EquilibriumPositionVectorOfIon",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EquivalentAbsorptionArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Equivalent absorption area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EquivalentAbsorptionArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EvaporativeHeatTransfer",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Evaporative Heat Transfer", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EvaporativeHeatTransfer",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/EvaporativeHeatTransferCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "h_e",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Combined Non Evaporative Heat Transfer Coefficient", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2-PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/EvaporativeHeatTransferCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExchangeIntegral",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "K",
    undefined
  );
  quantityKind.addLabel(new LangString("Exchange Integral", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExchangeIntegral",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExhaustGasMeanMolecularWeight",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Exhaust Gas Mean Molecular Weight", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExhaustGasMeanMolecularWeight",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExhaustGasesSpecificHeat",
    undefined,
    "c_p",
    undefined
  );
  quantityKind.addLabel(new LangString("Exhaust Gases Specific Heat", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExhaustGasesSpecificHeat",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExhaustStreamPower",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Exhaust Stream Power", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExhaustStreamPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExitPlaneCrossSectionalArea",
    undefined,
    "A_{e}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Exit Plane Cross-sectional Area", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExitPlaneCrossSectionalArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExitPlanePressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p_{e}",
    undefined
  );
  quantityKind.addLabel(new LangString("Exit Plane Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExitPlanePressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExitPlaneTemperature",
    undefined,
    "T_e",
    undefined
  );
  quantityKind.addLabel(new LangString("Exit Plane Temperature", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExitPlaneTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExpansionRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Expansion Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExpansionRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Exposure",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T1D0",
    "X",
    undefined
  );
  quantityKind.addLabel(new LangString("Exposure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliC-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-T-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ-PER-T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-PER-T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerMass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Exposure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExposureRate",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Exposure Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C-PER-KiloGM-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExposureRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ExtentOfReaction",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Extent of Reaction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ExtentOfReaction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Flight Performance Reserve Propellant Mass", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FUEL-BIAS",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Fuel Bias", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FUEL-BIAS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FastFissionFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Fast Fission Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FastFissionFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FermiAngularWavenumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    "k_F",
    undefined
  );
  quantityKind.addLabel(new LangString("Fermi Angular Wavenumber", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FermiAngularWavenumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FermiEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_F",
    undefined
  );
  quantityKind.addLabel(new LangString("Fermi Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FermiEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FermiTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    "T_F",
    undefined
  );
  quantityKind.addLabel(new LangString("Fermi Temperature", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FermiTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FinalOrCurrentVehicleMass",
    undefined,
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Final Or Current Vehicle Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FinalOrCurrentVehicleMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FirstMomentOfArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("First Moment of Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_VOL_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FBM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/STR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHIPPING_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Standard");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TSP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolume");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TBSP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_UK_PET");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Volume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FirstMomentOfArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FirstStageMassRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R_1",
    undefined
  );
  quantityKind.addLabel(new LangString("First Stage Mass Ratio", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM-PER-GM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloGM"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FirstStageMassRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FishBiotransformationHalfLife",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Fish Biotransformation Half Life", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Time"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FishBiotransformationHalfLife",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FissionCoreRadiusToHeightRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R/H",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Fission Core Radius To Height Ratio", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FissionCoreRadiusToHeightRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FissionFuelUtilizationFactor",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Fission Fuel Utilization Factor", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FissionFuelUtilizationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FissionMultiplicationFactor",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Fission Multiplication Factor", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FissionMultiplicationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FlashPoint",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Flash Point Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliDEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Temperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FlashPoint",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FlightPathAngle",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Flight Path Angle", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FlightPathAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Flux",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Flux", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M2-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-M2-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Flux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Force",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    "F",
    undefined
  );
  quantityKind.addLabel(new LangString("Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Force",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ForceMagnitude",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "U",
    undefined
  );
  quantityKind.addLabel(new LangString("Force Magnitude", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ForceMagnitude",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ForcePerAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Force per Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-RAD");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ForcePerAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ForcePerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Force Per Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ForcePerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Force Per Area Time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciBAR-PER-YR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-PER-MIN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/HectoPA-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/LB_F-PER-IN2-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ForcePerAreaTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ForcePerElectricCharge",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Force per Electric Charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-C");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ForcePerElectricCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ForcePerLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Force per Length", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-M-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-FT"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoPA-PER-KiloM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ForcePerLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FractionalMass_Stage1",
    undefined,
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Fractional Mass (Stage 1)", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FractionalMass_Stage1",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FractionalMass_Stage2",
    undefined,
    "B",
    undefined
  );
  quantityKind.addLabel(new LangString("Fractional Mass (Stage 2)", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FractionalMass_Stage2",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FractionalMass_Stage3",
    undefined,
    "C",
    undefined
  );
  quantityKind.addLabel(new LangString("Fractional Mass (Stage 3)", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FractionalMass_Stage3",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FractionallMass_Stages1-3",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Fractional Mass (Stages 1 through 3)", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FractionallMass_Stages1-3",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Frequency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Frequency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-WK");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/failures-in-time"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-YR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SAMPLE-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-YR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-WK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Frequency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Friction",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Friction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Force"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Friction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FrictionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Friction Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FrictionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FrictionLoss",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Friction Loss", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FrictionLoss",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Fugacity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Fugacity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Fugacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FundamentalLatticeVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "a_1, a_2, a_3",
    undefined
  );
  quantityKind.addLabel(new LangString("Fundamental Lattice vector", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LatticeVector"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FundamentalLatticeVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/FundamentalReciprocalLatticeVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    "b_1, b_2, b_3",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Fundamental Reciprocal Lattice Vector", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularReciprocalLatticeVector"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/FundamentalReciprocalLatticeVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GFactorOfNucleus",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "g",
    undefined
  );
  quantityKind.addLabel(new LangString("g-Factor of Nucleus", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GFactorOfNucleus",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GROSS-LIFT-OFF-WEIGHT",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Gross Lift-Off Weight", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GROSS-LIFT-OFF-WEIGHT",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Gain",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Gain", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Gain",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GapEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_g",
    undefined
  );
  quantityKind.addLabel(new LangString("Gap Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GapEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GeneFamilyAbundance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Gene Family Abundance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RPK");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GeneFamilyAbundance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GeneralizedCoordinate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "q_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Generalized Coordinate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GeneralizedCoordinate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GeneralizedForce",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Q_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Generalized Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GeneralizedForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GeneralizedMomentum",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "p_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Generalized Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GeneralizedMomentum",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GeneralizedVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Generalized Velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GeneralizedVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GibbsEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "G",
    undefined
  );
  quantityKind.addLabel(new LangString("Gibbs Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GibbsEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GrandCanonicalPartitionFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Grand Canonical Partition Function", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GrandCanonicalPartitionFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GravitationalAttraction",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    "G",
    undefined
  );
  quantityKind.addLabel(new LangString("Gravitational Attraction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Force"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GravitationalAttraction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Gravity_API",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("API Gravity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEGREE_API");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Gravity_API",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GroupSpeedOfSound",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "c",
    undefined
  );
  quantityKind.addLabel(new LangString("Group Speed of Sound", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpeedOfSound"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GroupSpeedOfSound",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GrowingDegreeDay_Cereal",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Growing Degree Days (Cereals)", undefined)
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL-DAY"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TimeTemperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GrowingDegreeDay_Cereal",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GruneisenParameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Gruneisen Parameter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GruneisenParameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GustatoryThreshold",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Gustatory Threshold", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GustatoryThreshold",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/GyromagneticRatio",
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Gyromagnetic Ratio", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/A-M2-PER-J-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/GyromagneticRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Half-Life",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    "T_{1/2}",
    undefined
  );
  quantityKind.addLabel(new LangString("Half-life", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Half-Life",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Half-ValueThickness",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "d_{1/2}",
    undefined
  );
  quantityKind.addLabel(new LangString("Half-Value Thickness", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Half-ValueThickness",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HallCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E-1L3I0M0H0T-1D0",
    "R_H, A_H",
    undefined
  );
  quantityKind.addLabel(new LangString("Hall Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-C");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HallCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HamiltonFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "H",
    undefined
  );
  quantityKind.addLabel(new LangString("Hamilton Function", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HamiltonFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeadEndPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Head End Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeadEndPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeartRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Heart Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BEAT-PER-MIN");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeartRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Heat",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Heat", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_MEAN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL_Mean");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_MEAN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_15_DEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ThermalEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Heat",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeatCapacity",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    "C_P",
    undefined
  );
  quantityKind.addLabel(new LangString("Heat Capacity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-K");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-DEG_R"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV-PER-K");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-DEG_F"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerTemperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeatCapacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeatCapacityRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Heat Capacity Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeatCapacityRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeatFlowRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Heat Flow Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL_TH-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL_TH-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL_TH-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_FG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Power"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeatFlowRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeatFlowRatePerUnitArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Heat Flow Rate per Unit Area", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeatFlowRatePerUnitArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeatFluxDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Heat Flux Density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeatFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HeatingValue",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Heating Value", "en"));
  quantityKind.addLabel(new LangString("Calorific Value", "en"));
  quantityKind.addLabel(new LangString("Energy Value", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HeatingValue",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Height",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "h",
    undefined
  );
  quantityKind.addLabel(new LangString("Height", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Height",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HelmholtzEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Helmholtz Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HelmholtzEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HenrysLawVolatilityConstant",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Henry's Law Volatility Constant", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ATM-M3-PER-MOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HenrysLawVolatilityConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HoleDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Hole Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HoleDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HorizontalVelocity",
    undefined,
    "V_{X}",
    undefined
  );
  quantityKind.addLabel(new LangString("Horizontal Velocity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HorizontalVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/HyperfineStructureQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "F",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Hyperfine Structure Quantum Number", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/HyperfineStructureQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/INERT-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inert Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/INERT-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IgnitionIntervalTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Ignition interval time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/POISE-PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiPOISE-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_TROPICAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-KiloOHM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaYR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_MeanJulian");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckTime");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Common");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-OHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MO_MeanGREGORIAN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_Synodic");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Time"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IgnitionIntervalTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Illuminance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Illuminance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PHOT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LUX");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Illuminance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Impedance",
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Impedance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Impedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Incidence",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Incidence", undefined));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CASES-PER-1000I-YR"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Frequency"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Incidence",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IncidenceProportion",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Incidence Proportion", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CASES-PER-1000I-YR"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Incidence"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IncidenceProportion",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IncidenceRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Incidence Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CASES-PER-1000I-YR"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Incidence"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IncidenceRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Inductance",
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Inductance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoH");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Inductance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InfiniteMultiplicationFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Infinite Multiplication Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MultiplicationFactor"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InfiniteMultiplicationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InformationEntropy",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Information Entropy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NAT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HART");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERLANG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BIT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SHANNON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NAT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InformationEntropy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InformationFlowRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Information flow rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HART-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SHANNON-PER-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InformationFlowRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InitialExpansionRatio",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Initial Expansion Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM-PER-K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ExpansionRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InitialExpansionRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InitialNozzleThroatDiameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Initial Nozzle Throat Diameter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NozzleThroatDiameter"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InitialNozzleThroatDiameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InitialVehicleMass",
    undefined,
    "M_{o}",
    undefined
  );
  quantityKind.addLabel(new LangString("Initial Vehicle Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InitialVehicleMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InitialVelocity",
    undefined,
    "V_{i}",
    undefined
  );
  quantityKind.addLabel(new LangString("Initial Velocity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InitialVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InstantaneousPower",
    undefined,
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Instantaneous Power", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InstantaneousPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InternalConversionFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("InternalConversionFactor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InternalConversionFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InternalEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "U",
    undefined
  );
  quantityKind.addLabel(new LangString("Internal Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InternalEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IntinsicCarrierDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "n_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Intinsic Carrier Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IntinsicCarrierDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseAmountOfSubstance",
    "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse amount of substance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseAmountOfSubstance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Energy", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PER-KiloV-A-HR"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DPI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MESH");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseLengthTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Length Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseLengthTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseMagneticFlux",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Magnetic Flux", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-WB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-PER-V");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseMagneticFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InversePermittivity",
    "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Permittivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-FARAD");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InversePermittivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InversePressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PER-MILLE-PER-PSI"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PSI");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InversePressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseSquareEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L-4I0M-2H0T4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Square Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-GigaEV2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseSquareEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseSquareMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-2H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Square Mass", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PER-PlanckMass2"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseSquareMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseSquareTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Square Time", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseSquareTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Time", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseTimeTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Time Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseTimeTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/InverseVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Inverse Volume", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-IN3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-YD3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-CentiM3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/InverseVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonConcentration",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Ion Concentration", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonConcentration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonCurrent",
    undefined,
    "j",
    undefined
  );
  quantityKind.addLabel(new LangString("Ion Current", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "N, n^+, n^-",
    undefined
  );
  quantityKind.addLabel(new LangString("Ion Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonTransportNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "t_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Ion Transport Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonTransportNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonicCharge",
    undefined,
    "q",
    undefined
  );
  quantityKind.addLabel(new LangString("Ionic Charge", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonicCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonicStrength",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Ionic Strength", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-GM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonicStrength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IonizationEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Ionization Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IonizationEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Irradiance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Irradiance", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Irradiance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IsentropicCompressibility",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Isentropic Compressibility", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IsentropicCompressibility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IsentropicExponent",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Isentropic Exponent", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IsentropicExponent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IsothermalCompressibility",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Isothermal compressibility", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PER-MILLE-PER-PSI"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IsothermalCompressibility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/IsothermalMoistureCapacity",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Isothermal Moisture Capacity", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificVolume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/IsothermalMoistureCapacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Kerma",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "K",
    undefined
  );
  quantityKind.addLabel(new LangString("Kerma", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAY");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Kerma",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/KermaRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Kerma Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAY-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/KermaRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/KinematicViscosity",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Kinematic Viscosity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ST");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiST");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaPerTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/KinematicViscosity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/KineticEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "K",
    undefined
  );
  quantityKind.addLabel(new LangString("Kinetic Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/KineticEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LagrangeFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Lagrange Function", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LagrangeFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Landau-GinzburgNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Landau-Ginzburg Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Landau-GinzburgNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LandeGFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "g",
    undefined
  );
  quantityKind.addLabel(new LangString("Lande g-Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LandeGFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LarmorAngularFrequency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Larmor Angular Frequency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency_Ang"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-MIN");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularFrequency"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LarmorAngularFrequency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LatticePlaneSpacing",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "d",
    undefined
  );
  quantityKind.addLabel(new LangString("Lattice Plane Spacing", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LatticePlaneSpacing",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LatticeVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Lattice Vector", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LatticeVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LeakageFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Leakage Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LeakageFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Length",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "l",
    undefined
  );
  quantityKind.addLabel(new LangString("Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Length",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthByForce",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Force", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthByForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV-FemtoM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthMolarEnergy",
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Molar Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-M-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthMolarEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthPerUnitElectricCurrent",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Length per Unit Electric Current", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthPerUnitElectricCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthPercentage",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Percentage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthPercentage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LengthTemperatureTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H1T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Length Temperature Time", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-SEC-DEG_C"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LengthTemperatureTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Lethargy",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "u",
    undefined
  );
  quantityKind.addLabel(new LangString("Lethargy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Lethargy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LevelWidth",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Level Width", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LevelWidth",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LiftCoefficient",
    undefined,
    "C_{L}",
    undefined
  );
  quantityKind.addLabel(new LangString("Lift Coefficient", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LiftCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LiftForce",
    undefined,
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Lift Force", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LiftForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Absorption Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearAbsorptionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearAcceleration",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Acceleration", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearAcceleration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Attenuation Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearAttenuationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearCompressibility",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Compressibility", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM-PER-N");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearCompressibility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrent",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Electric Current", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-PER-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliA-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-CentiM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    "J_s",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Linear Electric Current Density", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-PER-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliA-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-CentiM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrentDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearEnergyTransfer",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Energy Transfer", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloEV-PER-MicroM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaEV-PER-CentiM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearEnergyTransfer",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearExpansionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Expansion Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM-PER-K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ExpansionRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearExpansionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearForce",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Force", "en"));
  quantityKind.addLabel(new LangString("Streckenlast", "de"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearIonization",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    "N_{il}",
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Ionization", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearIonization",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearMomentum",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Momentum", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-M-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckMomentum"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaEV-PER-SpeedOfLight"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-SEC-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearMomentum",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearStiffness",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Force", "en"));
  quantityKind.addLabel(new LangString("Streckenlast", "de"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearStiffness",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearStrain",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Strain", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Strain"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearStrain",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Thermal Expansion", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-DEG_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DEG_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD-PER-DEG_F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearThermalExpansion",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinearVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "v",
    undefined
  );
  quantityKind.addLabel(new LangString("Linear Velocity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinearVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LinkedFlux",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Linked Flux", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LinkedFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LiquidVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Liquid Volume", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_VOL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAL_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAL_IMP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CUP_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CUP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAL_US");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Volume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LiquidVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LogOctanolAirPartitionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Octanol Air Partition Coefficient", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LogOctanolAirPartitionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LogOctanolWaterPartitionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Logarithm of Octanol Water Partition Coefficient", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LogOctanolWaterPartitionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LogarithmicFrequencyInterval",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Logarithmic frequency interval", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LogarithmicFrequencyInterval",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LondonPenetrationDepth",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "λₗ",
    undefined
  );
  quantityKind.addLabel(new LangString("London Penetration Depth", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LondonPenetrationDepth",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Long-RangeOrderParameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R, s",
    undefined
  );
  quantityKind.addLabel(new LangString("Long-Range Order Parameter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Long-RangeOrderParameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LorenzCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E-2L4I0M2H-2T-6D0",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Lorenz Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V2-PER-K2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LorenzCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LossAngle",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Loss Angle", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LossAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LossFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "d",
    undefined
  );
  quantityKind.addLabel(new LangString("Loss Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LossFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LowerCriticalMagneticFluxDensity",
    undefined,
    "B_{c1}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Lower Critical Magnetic Flux Density", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LowerCriticalMagneticFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Luminance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    "L_v",
    undefined
  );
  quantityKind.addLabel(new LangString("Luminance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CD-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/STILB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CD-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Luminance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousEfficacy",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Efficacy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LM-PER-W");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousEfficacy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousEmmitance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    "M_v",
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Emmitance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PHOT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LUX");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousEmmitance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousEnergy",
    undefined,
    "Q_v",
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LM-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousExposure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T1D0",
    "H_v",
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Exposure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LUX-HR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousExposure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousFlux",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0",
    "F",
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Flux", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Flux per Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PHOT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LUX");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousFluxPerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousIntensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I1M0H0T0D0",
    "J",
    undefined
  );
  quantityKind.addLabel(new LangString("Luminous Intensity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CP");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousIntensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/LuminousIntensityDistribution",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Ion Concentration", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/LuminousIntensityDistribution",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MASS-DELIVERED",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Delivered", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MASS-DELIVERED",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MASS-GROWTH-ALLOWANCE",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Growth Allowance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MASS-GROWTH-ALLOWANCE",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MASS-MARGIN",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Margin", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MASS-MARGIN",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MASS-PROPERTY-UNCERTAINTY",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Property Uncertainty", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MASS-PROPERTY-UNCERTAINTY",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Y",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    "I_{y}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Moment of Inertia in the Y axis", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MomentOfInertia"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Y",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Z",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    "I_{z}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Moment of Inertia in the Z axis", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MomentOfInertia"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MOMENT-OF-INERTIA_Z",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MachNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Ma",
    undefined
  );
  quantityKind.addLabel(new LangString("Mach Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MACH");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MachNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MacroscopicCrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Macroscopic Cross-section", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CrossSection"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MacroscopicCrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MacroscopicTotalCrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Macroscopic Total Cross-section", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CrossSection"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MacroscopicTotalCrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MadelungConstant",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Madelung Constant", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MadelungConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticAreaMoment",
    undefined,
    "m",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Area Moment", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticAreaMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment",
    "http://qudt.org/vocab/dimensionvector/A0E1L2I0M0H0T0D0",
    "J_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Dipole Moment", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M2-PER-A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/A-M2-PER-J-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV-PER-T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WB-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-T");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticDipoleMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticField",
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    "B",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Field", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/T_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Gamma");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticField",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Field Strength", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AT-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OERSTED");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-PER-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliA-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AT-PER-IN");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticFieldStrength_H",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticFlux",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Flux", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliWB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UnitPole");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-FT-PER-A"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MX");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Ab-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WB");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity",
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-2D0",
    "B",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic flux density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/T_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Gs");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGAUSS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUSS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Gamma");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic flux per unit length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/T-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-SEC-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticFluxPerUnitLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticMoment",
    undefined,
    "m",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Moment", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticPolarization",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Polarization", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticPolarization",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "m",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Quantum Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticReluctivity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Reluctivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-T-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticReluctivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticSusceptability",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Susceptability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticSusceptability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticTension",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    "U_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Tension", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticTension",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagneticVectorPotential",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetic Vector Potential", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloWB-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WB-PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-SEC-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WB-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagneticVectorPotential",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Magnetization",
    "http://qudt.org/vocab/dimensionvector/A0E1L-1I0M0H0T0D0",
    "H_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetization", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliA-PER-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliA-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloA-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-CentiM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/LinearElectricCurrent"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Magnetization",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagnetizationField",
    undefined,
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetization Field", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricCurrentPerUnitLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagnetizationField",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MagnetomotiveForce",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Magnetomotive Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OERSTED-CentiM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MagnetomotiveForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Mass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "m",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Mass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassAbsorptionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Absorption Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassAbsorptionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassAmountOfSubstance",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Amount of Substance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassAmountOfSubstance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassAmountOfSubstanceTemperature",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Mass Amount of Substance Temperature", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-MOL-DEG_F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassAmountOfSubstanceTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Attenuation Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-GM_DRY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-GM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassAttenuationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassConcentration",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Concentration", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-MilliL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassConcentration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassConcentrationOfWater",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    "w",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Concentration of Water", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassConcentrationOfWater",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassConcentrationOfWaterVapour",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    "v",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Mass Concentration of Water Vapour", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassConcentrationOfWaterVapour",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassDefect",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "B",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Defect", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassDefect",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_UK-PER-YD3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEGREE_BAUME");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoGM-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEGREE_BALLING"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-YD3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEGREE_BAUME_US_HEAVY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEGREE_PLATO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GRAIN-PER-GAL_US"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-DeciM3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEGREE_BAUME_US_LIGHT"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEGREE_OECHSLE"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_US-PER-YD3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-M3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEGREE_BRIX");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_Metric-PER-M3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-GAL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-DeciM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoGM-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-MilliL");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEGREE_TWADDELL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-GAL_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-L");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassEnergyTransferCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Mass Energy Transfer Coefficient", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassEnergyTransferCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassExcess",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Excess", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassExcess",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassFlowRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    "q_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Flow Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_US-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_Metric-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_Metric-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_Metric-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_Metric-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_UK-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHORT-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE-PER-MIN");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassFlowRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassFraction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "w_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Fraction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassFraction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassFractionOfDryMatter",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "w_d",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Fraction of Dry Matter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassFractionOfDryMatter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassFractionOfWater",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "w_{H_2o}",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Fraction of Water", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassFractionOfWater",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassOfElectricalPowerSupply",
    undefined,
    "M_{E}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Mass Of Electrical Power Supply", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassOfElectricalPowerSupply",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassOfSolidBooster",
    undefined,
    "M_{SB}",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Of Solid Booster", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassOfSolidBooster",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassOfTheEarth",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Of The Earth", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassOfTheEarth",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassPerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass per Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-HA");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-FT2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE-PER-HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-IN2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ-PER-YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-FT2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-HA"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroG-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_Metric-PER-HA"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassPerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassPerAreaTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass per Area Time", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-M2-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TONNE-PER-HA-YR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_Carbon-PER-M2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_Nitrogen-PER-M2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-M2-HR"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassPerAreaTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassPerElectricCharge",
    "http://qudt.org/vocab/dimensionvector/A0E-1L0I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass per Electric Charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/T-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassPerElectricCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassPerLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass per Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Denier");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-MilliM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TEX");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassPerLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassPerTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass per Time", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-MIN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHORT-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-SEC-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-HR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassPerTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R or M_{R}",
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Ratio", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM-PER-GM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloGM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassRatioOfWaterToDryMatter",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "u",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Mass Concentration of Water To Dry Matter", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassRatioOfWaterToDryMatter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassRatioOfWaterVapourToDryGas",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "x",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Mass Ratio of Water Vapour to Dry Gas", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassRatioOfWaterVapourToDryGas",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mass Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-DEG_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-DEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-DEG_R");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassicActivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("Massic Activity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassicActivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MassieuFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    "J",
    undefined
  );
  quantityKind.addLabel(new LangString("Massieu Function", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MassieuFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MaxExpectedOperatingThrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Maximum Expected Operating Thrust", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MaxOperatingThrust"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MaxExpectedOperatingThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MaxOperatingThrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Max Operating Thrust", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Thrust"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MaxOperatingThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MaxSeaLevelThrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Max Sea Level Thrust", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Thrust"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MaxSeaLevelThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MaximumBeta-ParticleEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Eᵦ",
    undefined
  );
  quantityKind.addLabel(new LangString("Maximum Beta-Particle Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MaximumBeta-ParticleEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MaximumExpectedOperatingPressure",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Maximum Expected Operating Pressure", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MaximumExpectedOperatingPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MaximumOperatingPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Maximum Operating Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MaximumOperatingPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MeanEnergyImparted",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "ε̅",
    undefined
  );
  quantityKind.addLabel(new LangString("Mean Energy Imparted", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MeanEnergyImparted",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MeanFreePath",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "λ",
    undefined
  );
  quantityKind.addLabel(new LangString("Mean Free Path", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MeanFreePath",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MeanLifetime",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mean Lifetime", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MeanLifetime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MeanLinearRange",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Mean Linear Range", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MeanLinearRange",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MeanMassRange",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mean Mass Range", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MeanMassRange",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MechanicalEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Mechanical Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MechanicalEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MechanicalImpedance",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mechanical Impedance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MechanicalImpedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MechanicalMobility",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mechanical Mobility", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOHM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MechanicalMobility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MechanicalSurfaceImpedance",
    undefined,
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Mechanical surface impedance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MechanicalSurfaceImpedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MeltingPoint",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Melting Point Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliDEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Temperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MeltingPoint",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MicroCanonicalPartitionFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Micro Canonical Partition Function", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CanonicalPartitionFunction"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MicroCanonicalPartitionFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MicrobialFormation",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Microbial Formation", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CFU");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MicrobialFormation",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MigrationArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "M^2",
    undefined
  );
  quantityKind.addLabel(new LangString("Migration Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MigrationArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MigrationLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Migration Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MigrationLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Mobility",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H0T4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mobility", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-V-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Mobility",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MobilityRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "b",
    undefined
  );
  quantityKind.addLabel(new LangString("Mobility Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MobilityRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ModulusOfAdmittance",
    undefined,
    "Y",
    undefined
  );
  quantityKind.addLabel(new LangString("Modulus Of Admittance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ModulusOfAdmittance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ModulusOfElasticity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Modulus of Elasticity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ModulusOfElasticity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ModulusOfImpedance",
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Modulus Of Impedance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ModulusOfImpedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ModulusOfLinearSubgradeReaction",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Modulus of Linear Subgrade Reaction", "en")
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ModulusOfLinearSubgradeReaction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ModulusOfRotationalSubgradeReaction",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Modulus of Rotational Subgrade Reaction", "en")
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerAngle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ModulusOfRotationalSubgradeReaction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ModulusOfSubgradeReaction",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Modulus of Subgrade Reaction", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ModulusOfSubgradeReaction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MoistureDiffusivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    "q_V",
    undefined
  );
  quantityKind.addLabel(new LangString("Moisture Diffusivity", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/VolumeFlowRate"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MoistureDiffusivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolalityOfSolute",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M-1H0T0D0",
    "b_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Molality of Solute", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-GM"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitMass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolalityOfSolute",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarAbsorptionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    "x",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Absorption Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarAbsorptionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarAngularMomentum",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Angular Momentum", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-SEC-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarAngularMomentum",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarAttenuationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Attenuation Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarAttenuationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarConductivity",
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Conductivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/S-M2-PER-MOL");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Conductivity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarConductivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarEnergy",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    "U_M",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Energy", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MOL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ-PER-MOL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarEntropy",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0",
    "S_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Entropy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarEntropy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarFlowRate",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    "q_V",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Flow Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-MIN"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarFlowRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarHeatCapacity",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H-1T-2D0",
    "C_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Heat Capacity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MOL-DEG_C"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL-K");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-MOL-DEG_F"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarHeatCapacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarMass",
    "http://qudt.org/vocab/dimensionvector/A-1E0L0I0M1H0T0D0",
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Mass", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-MOL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-MOL");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloMOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarOpticalRotatoryPower",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Optical Rotatory Power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/RAD-M2-PER-MOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarOpticalRotatoryPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity",
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Refractivity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/L-PER-MicroMOL"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-MOL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-MOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-MOL");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciM3-PER-MOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarRefractivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolarVolume",
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T0D0",
    "V_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Molar Volume", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/L-PER-MicroMOL"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-MOL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-MOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-MOL");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciM3-PER-MOL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolarVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MoleFraction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mole Fraction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MoleFraction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolecularConcentration",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "C_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Molecular Concentration", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolecularConcentration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolecularMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Molecular Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Da");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolecularMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MolecularViscosity",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Molecular Viscosity", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Viscosity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MolecularViscosity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MomentOfForce",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Moment of Force", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MomentOfForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MomentOfInertia",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Moment of Inertia", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-FT2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MomentOfInertia",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Momentum",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Momentum", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Momentum",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MomentumPerAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Momentum per Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-SEC-PER-RAD");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MomentumPerAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MorbidityRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Morbidity Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CASES-PER-1000I-YR"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Incidence"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MorbidityRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MortalityRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Mortality Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEATHS-PER-1000000I-YR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEATHS-PER-1000I-YR"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Incidence"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MortalityRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MultiplicationFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "k",
    undefined
  );
  quantityKind.addLabel(new LangString("Multiplication Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MultiplicationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/MutualInductance",
    undefined,
    "L_{mn}",
    undefined
  );
  quantityKind.addLabel(new LangString("Mutual Inductance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/MutualInductance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NOMINAL-ASCENT-PROPELLANT-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Nominal Ascent Propellant Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NOMINAL-ASCENT-PROPELLANT-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NapierianAbsorbance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "A_e, B",
    undefined
  );
  quantityKind.addLabel(new LangString("Napierian Absorbance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NapierianAbsorbance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NeelTemperature",
    undefined,
    "T_C",
    undefined
  );
  quantityKind.addLabel(new LangString("Neel Temperature", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NeelTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NeutronDiffusionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    "D",
    undefined
  );
  quantityKind.addLabel(new LangString("Diffusion Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NeutronDiffusionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NeutronDiffusionLength",
    undefined,
    "L_{r}",
    undefined
  );
  quantityKind.addLabel(new LangString("Neutron Diffusion Length", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NeutronDiffusionLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NeutronNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "N",
    undefined
  );
  quantityKind.addLabel(new LangString("Neutron Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NeutronNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NeutronYieldPerAbsorption",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Neutron Yield per Absorption", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NeutronYieldPerAbsorption",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NeutronYieldPerFission",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Neutron Yield per Fission", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NeutronYieldPerFission",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Non-LeakageProbability",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Non-Leakage Probability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Non-LeakageProbability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NonActivePower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "Q'",
    undefined
  );
  quantityKind.addLabel(new LangString("Non-active Power", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NonActivePower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NormalStress",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Normal Stress", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Stress"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NormalStress",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NozzleThroatCrossSectionalArea",
    undefined,
    "A^*",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Nozzle Throat Cross-sectional Area", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NozzleThroatCrossSectionalArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NozzleThroatDiameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Nozzle Throat Diameter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NozzleThroatDiameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NozzleThroatPressure",
    undefined,
    "p^*",
    undefined
  );
  quantityKind.addLabel(new LangString("Nozzle Throat Pressure", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NozzleThroatPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NozzleWallsThrustReaction",
    undefined,
    "F_R",
    undefined
  );
  quantityKind.addLabel(new LangString("Nozzle Walls Thrust Reaction", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NozzleWallsThrustReaction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Nuclear Quadrupole Moment", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NuclearQuadrupoleMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NuclearRadius",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Nuclear Radius", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NuclearRadius",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NuclearSpinQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Spin Quantum Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpinQuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NuclearSpinQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NucleonNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Nucleon number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NucleonNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NumberDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Number Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseVolume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NumberDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/NumberOfParticles",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "N_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Number of Particles", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/NumberOfParticles",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OlfactoryThreshold",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Olfactory Threshold", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OlfactoryThreshold",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumPerUnitMass",
    undefined,
    "h",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Orbital Angular Momentum per Unit Mass", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumPerUnitMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "l",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Orbital Angular Momentum Quantum Number", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OrbitalAngularMomentumQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OrbitalRadialDistance",
    undefined,
    "r",
    undefined
  );
  quantityKind.addLabel(new LangString("Orbital Radial Distance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OrbitalRadialDistance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OrderOfReflection",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Order of Reflection", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OrderOfReflection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OsmoticCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Osmotic Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OsmoticCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OsmoticPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "Π",
    undefined
  );
  quantityKind.addLabel(new LangString("Osmotic Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OsmoticPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/OverRangeDistance",
    undefined,
    "s_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Over-range distance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/OverRangeDistance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PH",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("PH", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PH",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PREDICTED-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Predicted Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PREDICTED-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Product of Inertia", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_X",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Product of Inertia in the X axis", "en")
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_X",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Y",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Product of Inertia in the Y axis", "en")
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Y",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Z",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Product of Inertia in the Z axis", "en")
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PRODUCT-OF-INERTIA_Z",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PackingFraction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "f",
    undefined
  );
  quantityKind.addLabel(new LangString("Packing Fraction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PackingFraction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PartialPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p_B",
    undefined
  );
  quantityKind.addLabel(new LangString("Partial Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PartialPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ParticleCurrent",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    "J",
    undefined
  );
  quantityKind.addLabel(new LangString("Particle Current", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-WK");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/failures-in-time"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-YR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SAMPLE-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-YR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-WK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Frequency"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ParticleCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ParticleFluence",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Particle Fluence", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-KiloM2"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ParticleFluence",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ParticleFluenceRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Particle Fluence Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M2-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ParticleFluenceRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ParticleNumberDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T0D0",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Particle Number Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NUM-PER-MicroL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/NumberDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ParticleNumberDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ParticlePositionVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "r, R",
    undefined
  );
  quantityKind.addLabel(new LangString("Particle Position Vector", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ParticlePositionVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ParticleSourceDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    "S",
    undefined
  );
  quantityKind.addLabel(new LangString("Particle Source Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ParticleSourceDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PathLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "s",
    undefined
  );
  quantityKind.addLabel(new LangString("Path Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PathLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PayloadMass",
    undefined,
    "M_P",
    undefined
  );
  quantityKind.addLabel(new LangString("Payload Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PayloadMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PayloadRatio",
    undefined,
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Payload Ratio", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PayloadRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PeltierCoefficient",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Peltier Coefficient", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PeltierCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Period",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Period", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Period",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Permeability",
    "http://qudt.org/vocab/dimensionvector/A0E-2L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Permeability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/H_Stat-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroH-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoH-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Permeability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PermeabilityRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Permeability Ratio", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMEABILITY_REL"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PermeabilityRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Permeance",
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Permeance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoH");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Permeance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Permittivity",
    "http://qudt.org/vocab/dimensionvector/A0E2L-3I0M-1H0T4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Permittivity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroFARAD-PER-M"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FARAD_Ab-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroFARAD-PER-KiloM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FARAD-PER-KiloM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoFARAD-PER-M"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FARAD-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoFARAD-PER-M"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Permittivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PermittivityRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Permittivity Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PermittivityRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Phase coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhaseCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhaseDifference",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Phase Difference", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhaseDifference",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "c",
    undefined
  );
  quantityKind.addLabel(new LangString("Phase speed of sound", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpeedOfSound"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhaseSpeedOfSound",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhononMeanFreePath",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "l_{ph}",
    undefined
  );
  quantityKind.addLabel(new LangString("Phonon Mean Free Path", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhononMeanFreePath",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhotoThresholdOfAwarenessFunction",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Photo Threshold of Awareness Function", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhotoThresholdOfAwarenessFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhotonIntensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Photon Intensity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhotonIntensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhotonRadiance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Photon Radiance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC-M2-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhotonRadiance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFlux",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Photosynthetic Photon Flux", undefined)
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFluxDensity",
    "http://qudt.org/vocab/dimensionvector/A1E0L-2I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Photosynthetic Photon Flux Density", undefined)
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-M2-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PhotosyntheticPhotonFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PlanarForce",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Flächenlast", "de"));
  quantityKind.addLabel(new LangString("Planar Force", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PlanarForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PlanckFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Planck Function", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PlanckFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PlaneAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Plane Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARCMIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliARCSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Angle");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Angle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PlaneAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PoissonRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Poisson Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PoissonRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PolarMomentOfInertia",
    undefined,
    "J_{zz}",
    undefined
  );
  quantityKind.addLabel(new LangString("Polar moment of inertia", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PolarMomentOfInertia",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Polarizability",
    "http://qudt.org/vocab/dimensionvector/A0E2L0I0M-1H0T4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Polarizability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C2-M-PER-J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-M2-PER-V");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Polarizability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PolarizationField",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T1D0",
    "P",
    undefined
  );
  quantityKind.addLabel(new LangString("Polarization Field", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Ab-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/C_Stat-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloC-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaC-PER-M2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricChargePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PolarizationField",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Population",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Population", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Population",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PositionVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "r",
    undefined
  );
  quantityKind.addLabel(new LangString("Position Vector", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PositionVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PotentialEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "PE",
    undefined
  );
  quantityKind.addLabel(new LangString("Potential Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PotentialEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Power",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "P",
    undefined
  );
  quantityKind.addLabel(new LangString("Power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-YD3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Electric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-M3-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Brake");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckPower");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Boiler");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_FG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-IN3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Metric");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Power",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Power Area", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/HectoPA-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/HectoPA-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Power Area per Solid Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-M2-PER-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerAreaPerSolidAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Power Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerPerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Power Per Area", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerPerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerPerAreaAngle",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Power per Area Angle", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerPerAreaAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerPerAreaQuarticTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-4T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Power per area quartic temperature", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2-K4");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerPerAreaQuarticTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PowerPerElectricCharge",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Power Per Electric Charge", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliV-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-PER-MicroSEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PowerPerElectricCharge",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PoyntingVector",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Poynting Vector", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PoyntingVector",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Pressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Pressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PressureBurningRateConstant",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Pressure Burning Rate Constant", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PressureBurningRateConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PressureBurningRateIndex",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Pressure Burning Rate Index", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PressureBurningRateIndex",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Pressure Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PressureCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PressurePercentage",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Pressure Percentage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PressurePercentage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PressureRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Pressure Ratio", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/HectoPA-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloPA-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-PER-PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-PER-BAR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PressureRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Prevalence",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Prevalence", undefined));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Prevalence",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PrincipalQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Principal Quantum Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PrincipalQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Propagation coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PropagationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PropellantBurnRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Propellant Burn Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/BurnRate"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PropellantBurnRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PropellantMass",
    undefined,
    "M_f",
    undefined
  );
  quantityKind.addLabel(new LangString("Propellant Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PropellantMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PropellantMeanBulkTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Propellant Mean Bulk Temperature", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_F-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-SEC");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PropellantTemperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PropellantMeanBulkTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/PropellantTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Propellant Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_F-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-SEC");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/PropellantTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/QualityFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Quality Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/QualityFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/QuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Quantum Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/QuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/QuarticElectricDipoleMomentPerCubicEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E4L-2I0M-3H0T10D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Quartic Electric Dipole Moment per Cubic Energy", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/C4-M4-PER-J3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/QuarticElectricDipoleMomentPerCubicEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RESERVE-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "M_{E}",
    undefined
  );
  quantityKind.addLabel(new LangString("Reserve Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RESERVE-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RF-Power",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("RF-Power Level", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-IN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Stat-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Ab-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SignalStrength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RF-Power",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadialDistance",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radial Distance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadialDistance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Radiance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Radiance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2-SR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerAreaAngle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Radiance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadianceFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radiance Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadianceFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantEmmitance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Emmitance", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantEmmitance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Q_e",
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantEnergyDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Energy Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantEnergyDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantExposure",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    "H_e",
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Exposure", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoPA-PER-KiloM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloW-HR-PER-M2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantExposure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantFluence",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    "H_e,0",
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Fluence", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantFluence",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantFluenceRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "E_e,0",
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Fluence Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantFluenceRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantFlux",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Flux", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-YD3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Electric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-M3-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Brake");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckPower");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Boiler");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_FG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-IN3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Metric");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Power"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiantIntensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Radiant Intensity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiantIntensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiativeHeatTransfer",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radiative Heat Transfer", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiativeHeatTransfer",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Radiosity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radiosity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Radiosity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Radius",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "r",
    undefined
  );
  quantityKind.addLabel(new LangString("Radius", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Radius",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RadiusOfCurvature",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Radius of Curvature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RadiusOfCurvature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RatioOfSpecificHeatCapacities",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Ratio of Specific Heat Capacities", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RatioOfSpecificHeatCapacities",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Reactance",
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    "X",
    undefined
  );
  quantityKind.addLabel(new LangString("Reactance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Reactance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ReactionEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Reaction Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ReactionEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ReactivePower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Reactive Power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A_Reactive");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ComplexPower"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ReactivePower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Reactivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Reactivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Reactivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ReactorTimeConstant",
    undefined,
    "T",
    undefined
  );
  quantityKind.addLabel(new LangString("Reactor Time Constant", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ReactorTimeConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RecombinationCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("Recombination Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RecombinationCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Refectance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Refectance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Refectance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Reflectance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "r",
    undefined
  );
  quantityKind.addLabel(new LangString("Reflectance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Reflectance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ReflectanceFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Reflectance Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ReflectanceFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RefractiveIndex",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "n",
    undefined
  );
  quantityKind.addLabel(new LangString("Refractive index", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RefractiveIndex",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeAtomicMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "A_r",
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Atomic Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeAtomicMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeHumidity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Humidity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT_RH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/RelativePartialPressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeHumidity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeLuminousFlux",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Luminous Flux", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeLuminousFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeMassConcentrationOfVapour",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Relative Mass Concentration of Vapour", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeMassConcentrationOfVapour",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeMassDefect",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "B_r",
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Mass Defect", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeMassDefect",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeMassDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "d",
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Mass Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeMassDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeMassExcess",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Mass Excess", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeMassExcess",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeMassRatioOfVapour",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Mass Ratio of Vapour", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeMassRatioOfVapour",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativeMolecularMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "M_r",
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Molecular Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativeMolecularMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativePartialPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Partial Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PressureRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativePartialPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelativePressureCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relative Pressure Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelativePressureCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RelaxationTIme",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Relaxation TIme", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RelaxationTIme",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Reluctance",
    undefined,
    "R_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Reluctance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Reluctance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ResidualResistivity",
    "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Residual Resistivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ResidualResistivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Resistance",
    "http://qudt.org/vocab/dimensionvector/A0E-2L2I0M1H0T-3D0",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Resistance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroOHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaOHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloOHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaOHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraOHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM_Ab");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckImpedance"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliOHM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Resistance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ResistancePercentage",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Resistance Percentage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ResistancePercentage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Resistivity",
    "http://qudt.org/vocab/dimensionvector/A0E-2L3I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Resistivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OHM-M2-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Resistivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ResonanceEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_r, E_{res}",
    undefined
  );
  quantityKind.addLabel(new LangString("Resonance Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ResonanceEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ResonanceEscapeProbability",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Resonance Escape Probability", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ResonanceEscapeProbability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ResonanceEscapeProbabilityForFission",
    undefined,
    "p",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Resonance Escape Probability For Fission", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ResonanceEscapeProbabilityForFission",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RespiratoryRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    "Vf, Rf or RR",
    undefined
  );
  quantityKind.addLabel(new LangString("Respiratory Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BREATH-PER-MIN"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RespiratoryRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RestEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "E_0",
    undefined
  );
  quantityKind.addLabel(new LangString("Rest Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RestEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RestMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    "m_X",
    undefined
  );
  quantityKind.addLabel(new LangString("Rest Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RestMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ReverberationTime",
    undefined,
    "T",
    undefined
  );
  quantityKind.addLabel(new LangString("Reverberation Time", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ReverberationTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ReynoldsNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "Re",
    undefined
  );
  quantityKind.addLabel(new LangString("Reynolds Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ReynoldsNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RichardsonConstant",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H-2T0D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Richardson Constant", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M2-K2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RichardsonConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RocketAtmosphericTransverseForce",
    undefined,
    "T",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Rocket Atmospheric Transverse Force", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RocketAtmosphericTransverseForce",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RotationalMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Rotational Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RotationalMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/RotationalStiffness",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Rotational Stiffness", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-RAD");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TorquePerAngle"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/RotationalStiffness",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ScalarMagneticPotential",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-2D0",
    "V_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Scalar Magnetic Potential", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-SEC-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ScalarMagneticPotential",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Second Axial Moment of Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM4");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN4");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M4");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SecondAxialMomentOfArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SecondMomentOfArea",
    undefined,
    "J",
    undefined
  );
  quantityKind.addLabel(new LangString("Second Moment of Area", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SecondMomentOfArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant",
    "http://qudt.org/vocab/dimensionvector/A-1E0L3I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Reaction Rate Constant", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SecondOrderReactionRateConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T0D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Second Polar Moment of Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM4");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M4");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SecondPolarMomentOfArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SecondStageMassRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R_2",
    undefined
  );
  quantityKind.addLabel(new LangString("Second Stage Mass Ratio", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM-PER-GM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloGM"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SecondStageMassRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SectionAreaIntegral",
    "http://qudt.org/vocab/dimensionvector/A0E0L5I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Section Area Integral", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SectionAreaIntegral",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SectionModulus",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    "Z",
    undefined
  );
  quantityKind.addLabel(new LangString("Section Modulus", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SectionModulus",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SeebeckCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H-1T-3D0",
    "S_{ab}",
    undefined
  );
  quantityKind.addLabel(new LangString("Seebeck Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SeebeckCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SerumOrPlasmaLevel",
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Serum or Plasma Level", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IU-PER-L");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SerumOrPlasmaLevel",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ShannonDiversityIndex",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Shannon Diversity Index", undefined));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NAT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HART");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BYTE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERLANG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BIT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SHANNON");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NAT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationEntropy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ShannonDiversityIndex",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ShearModulus",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "G",
    undefined
  );
  quantityKind.addLabel(new LangString("Shear Modulus", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ShearModulus",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ShearStrain",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Shear Strain", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Strain"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ShearStrain",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ShearStress",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Shear Stress", undefined));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Stress"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ShearStress",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Short-RangeOrderParameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Short-Range Order Parameter", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Short-RangeOrderParameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SignalDetectionThreshold",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Signal Detection Threshold", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_C");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SignalDetectionThreshold",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SignalStrength",
    "http://qudt.org/vocab/dimensionvector/A0E-1L1I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Signal Strength", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-IN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Stat-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V_Ab-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricField"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ElectricFieldStrength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SignalStrength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SingleStageLauncherMassRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R_o",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Single Stage Launcher Mass Ratio", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-GM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoGM-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM-PER-GM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloGM"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/MassRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SingleStageLauncherMassRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Slowing-DownArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "L_s^2",
    undefined
  );
  quantityKind.addLabel(new LangString("Slowing-Down Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Area"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Slowing-DownArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Slowing-DownDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-3I0M0H0T-1D0",
    "q",
    undefined
  );
  quantityKind.addLabel(new LangString("Slowing-Down Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M3-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Slowing-DownDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Slowing-DownLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "L_s",
    undefined
  );
  quantityKind.addLabel(new LangString("Slowing-Down Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Slowing-DownLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoilAdsorptionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Soil Adsorption Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-KiloGM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificVolume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoilAdsorptionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SolidAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Solid Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FA");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SolidAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SolidStateDiffusionLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "L, L_n, L_p",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Diffusion Length (Solid State Physics)", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SolidStateDiffusionLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Solubility_Water",
    "http://qudt.org/vocab/dimensionvector/A1E0L-3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Water Solubility", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FemtoMOL-PER-L"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-L"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MOL-PER-DeciM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoMOL-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoMOL-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloMOL-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroMOL-PER-L"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliMOL-PER-M3"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AmountOfSubstancePerUnitVolume"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Solubility_Water",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundEnergyDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound energy density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-PER-FT3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundEnergyDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundExposure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M2H0T-3D0",
    "E",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound exposure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA2-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundExposure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundExposureLevel",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound exposure level", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/B");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundExposureLevel",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundIntensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound intensity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/PowerPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundIntensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundParticleAcceleration",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound particle acceleration", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GALILEO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloPA-M2-PER-GM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/G");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Acceleration"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundParticleAcceleration",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundParticleDisplacement",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "ξ",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound Particle Displacement", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundParticleDisplacement",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundParticleVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "v",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound particle velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ-M");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Velocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundParticleVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    "P",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-YD3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Electric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-M3-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Brake");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckPower");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Boiler");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_FG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-IN3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Metric");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Power"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundPowerLevel",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound power level", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/B");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundPowerLevel",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundPressureLevel",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "L",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound pressure level", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/B");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundPressureLevel",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundReductionIndex",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound reduction index", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/B");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundReductionIndex",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SoundVolumeVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    "q",
    undefined
  );
  quantityKind.addLabel(new LangString("Sound volume velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SoundVolumeVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SourceVoltage",
    undefined,
    "U_s",
    undefined
  );
  quantityKind.addLabel(new LangString("Source Voltage", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SourceVoltage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SourceVoltageBetweenSubstances",
    undefined,
    "E_{ab}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Source Voltage Between Substances", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SourceVoltageBetweenSubstances",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpatialSummationFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Spatial Summation Function", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpatialSummationFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Acoustic Impedance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-SEC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAYL");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificAcousticImpedance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificActivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T-1D0",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Activity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroBQ-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBQ-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBQ-PER-GM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificActivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "e",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-G");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH-PER-G");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaJ-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH-PER-LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloJ-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-GM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/N-M-PER-KiloGM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificEnergyImparted",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "z",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Energy Imparted", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-G");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH-PER-G");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaJ-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH-PER-LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloJ-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-GM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-GM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/N-M-PER-KiloGM"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificEnergyImparted",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificEnthalpy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "h",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Enthalpy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificEnthalpy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificEntropy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    "s",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Entropy", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloJ-PER-KiloGM-K"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificEntropy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificGibbsEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "g",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Gibbs Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificGibbsEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    "c",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Heat Capacity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-PER-LB-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_R"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_IT-PER-GM-DEG_C"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-GM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-GM-DEG_C"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_IT-PER-GM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-GM-DEG_C"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_R"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    "c_p",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Specific heat capacity at constant pressure", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    "c_v",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Specific heat capacity at constant volume", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtConstantVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtSaturation",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    "c_{sat}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Specific Heat Capacity at Saturation", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatCapacityAtSaturation",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Heat Pressure", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H-1T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Heat Volume", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHeatsRatio",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Heats Ratio", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHeatsRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificHelmholtzEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Helmholtz Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificHelmholtzEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificImpulse",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Impulse", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificImpulse",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificImpulseByMass",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Impulse by Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Velocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificImpulseByMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificImpulseByWeight",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Impulse by Weight", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/POISE-PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiPOISE-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_TROPICAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-KiloOHM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaYR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_MeanJulian");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckTime");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Common");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-OHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MO_MeanGREGORIAN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_Synodic");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Time"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SpecificImpulse"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificImpulseByWeight",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificInternalEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-2D0",
    "u",
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Internal Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificInternalEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificOpticalRotatoryPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Specific Optical Rotatory Power", "en")
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/RAD-M2-PER-KiloGM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificOpticalRotatoryPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificThrust",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific thrust", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpecificVolume",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M-1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Specific Volume", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-KiloGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliL-PER-KiloGM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciL-PER-GM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-KiloGM");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpecificVolume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpectralAngularCrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Spectral Angular Cross-section", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SR-J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpectralAngularCrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpectralCrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Spectral Cross-section", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-J");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpectralCrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpectralLuminousEfficiency",
    undefined,
    "V",
    undefined
  );
  quantityKind.addLabel(new LangString("Spectral Luminous Efficiency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LM-PER-W");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpectralLuminousEfficiency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Spectral Radiant Energy Density", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M4");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloPA-PER-MilliM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpectralRadiantEnergyDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Speed",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Speed", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BFT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT3-PER-MIN-FT2"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Speed",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpeedOfLight",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Speed of Light", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BFT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT3-PER-MIN-FT2"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Speed"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpeedOfLight",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpeedOfSound",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "c",
    undefined
  );
  quantityKind.addLabel(new LangString("Speed of sound", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaC-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BFT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT3-PER-MIN-FT2"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Speed"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpeedOfSound",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SphericalIlluminance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I1M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Illuminance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PHOT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LUX");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Illuminance"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SphericalIlluminance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Spin",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    "s",
    undefined
  );
  quantityKind.addLabel(new LangString("Spin", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularMomentum"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Spin",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SpinQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "s",
    undefined
  );
  quantityKind.addLabel(new LangString("Spin Quantum Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SpinQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SquareEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M2H0T-4D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Square Energy", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SquareEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StagePropellantMass",
    undefined,
    "M_F",
    undefined
  );
  quantityKind.addLabel(new LangString("Stage Propellant Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StagePropellantMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StageStructuralMass",
    undefined,
    "M_S",
    undefined
  );
  quantityKind.addLabel(new LangString("Stage Structure Mass", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StageStructuralMass",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StandardAbsoluteActivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Standard Absolute Activity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StandardAbsoluteActivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StandardChemicalPotential",
    "http://qudt.org/vocab/dimensionvector/A-1E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Standard Chemical Potential", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MOL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-MOL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ-PER-MOL");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ChemicalPotential"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StandardChemicalPotential",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StandardGravitationalParameter",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Standard Gravitational Parameter", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-SEC2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloM3-PER-SEC2"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StandardGravitationalParameter",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StaticFriction",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Static Friction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Friction"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StaticFriction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StaticFrictionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Static Friction Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/FrictionCoefficient"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StaticFrictionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StaticPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "p",
    undefined
  );
  quantityKind.addLabel(new LangString("Static pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StaticPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StatisticalWeight",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "g",
    undefined
  );
  quantityKind.addLabel(new LangString("Statistical Weight", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StatisticalWeight",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StochasticProcess",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    "X",
    undefined
  );
  quantityKind.addLabel(new LangString("Stochastic Process", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-WK");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/failures-in-time"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-YR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/SAMPLE-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-YR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERCENT-PER-WK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MO");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloHZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaHZ");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Frequency"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StochasticProcess",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StoichiometricNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Stoichiometric Number", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Dimensionless"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StoichiometricNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Strain",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Strain", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Strain",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StrainEnergyDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "u",
    undefined
  );
  quantityKind.addLabel(new LangString("Strain Energy Density", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-PER-FT3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyDensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StrainEnergyDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Stress",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Stress", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForcePerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Stress",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StressOpticCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M-1H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Stress-Optic Coefficient", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoM-PER-MilliM-MegaPA"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PA");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/NanoM-PER-CentiM-PSI"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PSI");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StressOpticCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StructuralEfficiency",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Structural Efficiency", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StructuralEfficiency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/StructureFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "F(h, k, l)",
    undefined
  );
  quantityKind.addLabel(new LangString("Structure Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/StructureFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SuperconductionTransitionTemperature",
    undefined,
    "T_c",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Superconduction Transition Temperature", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SuperconductionTransitionTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SuperconductorEnergyGap",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Δ",
    undefined
  );
  quantityKind.addLabel(new LangString("Superconductor Energy Gap", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/GapEnergy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SuperconductorEnergyGap",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SurfaceActivityDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M0H0T-1D0",
    "a_s",
    undefined
  );
  quantityKind.addLabel(new LangString("Surface Activity Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BQ-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SurfaceActivityDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SurfaceCoefficientOfHeatTransfer",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Surface Coefficient of Heat Transfer", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SurfaceCoefficientOfHeatTransfer",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SurfaceDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Surface Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-KiloM2"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SurfaceDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SurfaceTension",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-2D0",
    "γ",
    undefined
  );
  quantityKind.addLabel(new LangString("Surface Tension", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PicoPA-PER-KiloM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloW-HR-PER-M2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerArea"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SurfaceTension",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Susceptance",
    undefined,
    "B",
    undefined
  );
  quantityKind.addLabel(new LangString("Susceptance", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Susceptance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/SystolicBloodPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Systolic Blood Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/SystolicBloodPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TARGET-BOGIE-MASS",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Target Bogie Mass", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_T");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Assay");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_Metric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/U");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DRAM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckMass");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_SHORT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciTON_Metric"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LunarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciTONNE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SLUG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GRAIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Quarter_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EarthMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AMU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_SHORT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaGM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Stone_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Pennyweight");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaGM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_UK"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CARAT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/Hundredweight_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SolarMass");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DWT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_TROY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CWT_LONG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Mass"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TARGET-BOGIE-MASS",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Temperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliDEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Temperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance",
    "http://qudt.org/vocab/dimensionvector/A1E0L0I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Temperature Amount of Substance", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-DEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MOL-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemperatureAmountOfSubstance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemperatureGradient",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Temperature Gradient", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemperatureGradient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemperaturePerMagneticFluxDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M-1H1T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Temperature per Magnetic Flux Density", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-T");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemperaturePerMagneticFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Temperature per Time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_F-PER-SEC2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemperatureRateOfChange",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Temperature Rate of Change", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/TemperaturePerTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemperatureRateOfChange",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemperatureRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Temperature Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemperatureRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TemporalSummationFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Temporal Summation Function", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-SEC-SR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TemporalSummationFunction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Tension",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Tension", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ForceMagnitude"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Tension",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalAdmittance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Admittance", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalAdmittance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalConductance",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-3D0",
    "G",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Conductance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalConductance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Conductivity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-SEC-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-CentiM-SEC-DEG_C"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-HR-DEG_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M-K");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL_IT-PER-HR-M-DEG_C"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-HR-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-FT-PER-FT2-HR-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM-K"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-FT-PER-FT2-HR-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM-SEC-DEG_C"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-HR-FT2-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_TH-FT-PER-HR-FT2-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-SEC-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT-DEG_R"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-IN-PER-SEC-FT2-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM-K"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalConductivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Diffusion Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "k_T",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Diffusion Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionRatioCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    "D_T",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Diffusion Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SEC");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusionRatioCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T-1D0",
    "a",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Diffusivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM2-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM2-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-HZ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-PER-SEC");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AreaPerTime"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalDiffusivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalEfficiency",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Efficiency", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalEfficiency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_MEAN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL_Mean");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_MEAN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_15_DEG_C");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalEnergyLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Energy Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-FT");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalEnergyLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalExpansionCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Expansion Coefficient", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/ExpansionRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalExpansionCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M-1H1T3D0",
    "M",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Insulance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CLO");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_IT"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/M2-HR-DEG_C-PER-KiloCAL_IT"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_TH"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2-K-PER-W");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT2-HR-DEG_F-PER-BTU_IT"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalInsulance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalResistance",
    "http://qudt.org/vocab/dimensionvector/A0E0L-2I0M-1H1T3D0",
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Resistance", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DEG_F-HR-PER-BTU_IT"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-PER-W");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalResistance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalResistivity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M-1H1T3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Resistivity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_F-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT2-PER-BTU_IT-IN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-K-PER-W");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-M-PER-W");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalResistivity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalTransmittance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Transmittance", "en"));
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CoefficientOfHeatTransfer"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalTransmittance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalUtilizationFactor",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "f",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermal Utilization Factor", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalUtilizationFactor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermalUtilizationFactorForFission",
    undefined,
    "f",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Thermal Utilization Factor For Fission", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermalUtilizationFactorForFission",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermodynamicCriticalMagneticFluxDensity",
    undefined,
    "B_c",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Thermodynamic Critical Magnetic Flux Density", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermodynamicCriticalMagneticFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermodynamicEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "U",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermodynamic Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermodynamicEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermodynamicEntropy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H-1T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thermodynamic Entropy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ-PER-K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerTemperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermodynamicEntropy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T0D0",
    "T",
    undefined
  );
  quantityKind.addLabel(new LangString("Thermodynamic Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_R");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckTemperature"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Temperature"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThermodynamicTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Thickness",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "d",
    undefined
  );
  quantityKind.addLabel(new LangString("Thickness", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Thickness",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThomsonCoefficient",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H-1T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thomson Coefficient", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThomsonCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Thrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thrust", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Force"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Thrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThrustCoefficient",
    undefined,
    "C_{F}",
    undefined
  );
  quantityKind.addLabel(new LangString("Thrust Coefficient", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThrustCoefficient",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThrustToMassRatio",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thrust To Mass Ratio", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-LB");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-KiloGM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Acceleration"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThrustToMassRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThrustToWeightRatio",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Thrust To Weight Ratio", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThrustToWeightRatio",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/ThrusterPowerToThrustEfficiency",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Thruster Power To Thrust Efficiency", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/ThrusterPowerToThrustEfficiency",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Time",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T1D0",
    "t",
    undefined
  );
  quantityKind.addLabel(new LangString("Time", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/POISE-PER-BAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiPOISE-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_TROPICAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-KiloOHM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaYR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_MeanJulian");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckTime");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/WK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Common");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-KiloOHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HR_Sidereal");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YR_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroH-PER-OHM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/H-PER-OHM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DAY_Sidereal");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MO_MeanGREGORIAN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MO_Synodic");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Time",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TimeAveragedSoundIntensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M1H0T-3D0",
    "I",
    undefined
  );
  quantityKind.addLabel(new LangString("Time averaged sound intensity", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-CentiM2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW-PER-M2");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-PER-CentiM2-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-PER-FT2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/SoundIntensity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TimeAveragedSoundIntensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TimePercentage",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Time Percentage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TimePercentage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TimeSquared",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Time Squared", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/SEC2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TimeSquared",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TimeTemperature",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H1T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Time Temperature", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG_C-WK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/K-DAY");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TimeTemperature",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Torque",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Torque", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiN-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Torque",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TorquePerAngle",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Torque per Angle", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-RAD");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TorquePerAngle",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TorquePerLength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Torque per Length", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TorquePerLength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalAngularMomentum",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-1D0",
    "J",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Angular Momentum", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-M-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularMomentum"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalAngularMomentum",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalAngularMomentumQuantumNumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "j",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Total Angular Momentum Quantum Number", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/QuantumNumber"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalAngularMomentumQuantumNumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalAtomicStoppingPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M1H0T-2D0",
    "S_a",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Atomic Stopping Power", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalAtomicStoppingPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalCrossSection",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M0H0T0D0",
    "σₜ",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Cross-section", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MIL_Circ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckArea");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaARE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM2");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/CrossSection"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalCrossSection",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalCurrent",
    "http://qudt.org/vocab/dimensionvector/A0E1L0I0M0H0T0D0",
    "I_t",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Current", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalCurrent",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalCurrentDensity",
    "http://qudt.org/vocab/dimensionvector/A0E1L-2I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Total Current Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/A-PER-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalCurrentDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalIonization",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "N_i",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Ionization", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalIonization",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    "S",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Linear Stopping Power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/ERG-PER-CentiM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/EV-PER-ANGSTROM"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV-PER-M");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalLinearStoppingPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalMassStoppingPower",
    "http://qudt.org/vocab/dimensionvector/A0E0L4I0M0H0T-2D0",
    "S_m",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Mass Stopping Power", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/J-M2-PER-KiloGM"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalMassStoppingPower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TotalPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    "P_0",
    undefined
  );
  quantityKind.addLabel(new LangString("Total Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TotalPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TouchThresholds",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Touch Thresholds", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TouchThresholds",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Transmittance",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Transmittance", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Transmittance",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TransmittanceDensity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "A_10, D",
    undefined
  );
  quantityKind.addLabel(new LangString("Transmittance Density", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TransmittanceDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/TrueExhaustVelocity",
    undefined,
    "u_{e}",
    undefined
  );
  quantityKind.addLabel(new LangString("True Exhaust Velocity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/TrueExhaustVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Turbidity",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Turbidity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NTU");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Turbidity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Turns",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    "N",
    undefined
  );
  quantityKind.addLabel(new LangString("Turns", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Turns",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/UniversalGasConstant",
    undefined,
    "R",
    undefined
  );
  quantityKind.addLabel(new LangString("Universal Gas Constant", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/UniversalGasConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/UpperCriticalMagneticFluxDensity",
    undefined,
    "B_{c2}",
    undefined
  );
  quantityKind.addLabel(
    new LangString("Upper Critical Magnetic Flux Density", "en")
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/UpperCriticalMagneticFluxDensity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VacuumThrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Vacuum Thrust", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Thrust"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VacuumThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VaporPermeability",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Vapor Permeability", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VaporPermeability",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VaporPressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Vapor Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VaporPressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VehicleVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "V",
    undefined
  );
  quantityKind.addLabel(new LangString("Vehicle Velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Velocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VehicleVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Velocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "v",
    undefined
  );
  quantityKind.addLabel(new LangString("Velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Velocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VentilationRatePerFloorArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(
    new LangString("Ventilation Rate per Floor Area", "en")
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-SEC-M2");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VentilationRatePerFloorArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VerticalVelocity",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    "V_{Z}",
    undefined
  );
  quantityKind.addLabel(new LangString("Vertical Velocity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-YR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaHZ-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM-PER-KiloYR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM-PER-MIN"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Velocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VerticalVelocity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VideoFrameRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Video Frame Rate", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRAME-PER-SEC");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InformationFlowRate"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VideoFrameRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Viscosity",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Viscosity", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Viscosity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VisibleRadiantEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "Q",
    undefined
  );
  quantityKind.addLabel(new LangString("Visible Radiant Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VisibleRadiantEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VisionThreshods",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Vision Threshods", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VisionThreshods",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Voltage",
    "http://qudt.org/vocab/dimensionvector/A0E-1L2I0M1H0T-3D0",
    "U",
    undefined
  );
  quantityKind.addLabel(new LangString("Voltage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Stat");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolt");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V_Ab");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliV");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/EnergyPerElectricCharge"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Voltage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VoltagePercentage",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Voltage Percentage", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VoltagePercentage",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VoltagePhasor",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Voltage Phasor", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VoltagePhasor",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Volume",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volume", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_VOL_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AC-FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FBM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/STR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RT");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/TON_SHIPPING_US"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/Standard");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TSP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PINT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckVolume");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TBSP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BBL_UK_PET");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Volume",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumeFlowRate",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    "q_V",
    undefined
  );
  quantityKind.addLabel(new LangString("Volume Flow Rate", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3-PER-MIN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_US_PET-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_US_PET-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_UK-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_UK-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BU_UK-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BU_UK-PER-MIN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciM3-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_US-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_UK-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloL-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAL_US-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US-PER-MIN");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_US-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GAL_UK-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BU_US_DRY-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliL-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM3-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GAL_UK-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_US-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_US-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-HR"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAL_UK-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GAL_US-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PK_UK-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BU_UK-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_UK-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BU_UK-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GI_UK-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-DAY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_UK-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciM3-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliL-PER-DAY"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DeciM3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GAL_UK-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PK_US_DRY-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_UK_PET-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_US-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US-PER-DAY");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PINT_US-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_US-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/OZ_VOL_US-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BBL_US-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QT_UK-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-HR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumeFlowRate",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumeFraction",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volume Fraction", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroL-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroM3-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-M3"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliM3-PER-M3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-L");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/CentiM3-PER-CentiM3"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM3-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-M3");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL-PER-M3");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MicroM3-PER-MilliL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL-PER-L");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/DimensionlessRatio"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumeFraction",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumePerArea",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volume per Unit Area", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-HA");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumePerArea",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volume per Unit Time", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GAL_US-PER-DAY"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GAL_US-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN3-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-HR");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumePerUnitTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumeStrain",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T0D1",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volume Strain", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NUM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FRACTION");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PERCENT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PERMITTIVITY_REL"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/UNITLESS");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciB_M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPTM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PPB");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Strain"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumeStrain",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion",
    "http://qudt.org/vocab/dimensionvector/A0E0L3I0M0H-1T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volume Thermal Expansion", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M3-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD3-PER-DEG_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT3-PER-DEG_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/L-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM3-PER-K");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliL-PER-K");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumeThermalExpansion",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumetricFlux",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volumetric Flux", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliL-PER-CentiM2-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliL-PER-CentiM2-MIN"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumetricFlux",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H-1T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volumetric Heat Capacity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3-K");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/LB_F-PER-IN2-DEG_F"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-PER-K"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumetricHeatCapacity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/VolumicElectromagneticEnergy",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Volumic Electromagnetic Energy", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-M3");
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/VolumicElectromagneticEnergy",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Vorticity",
    "http://qudt.org/vocab/dimensionvector/A0E0L0I0M0H0T-1D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Vorticity", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckFrequency_Ang"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/REV-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-SEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DEG-PER-MIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/RAD-PER-MIN");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/AngularVelocity"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Vorticity",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WarmReceptorThreshold",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Warm Receptor Threshold", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WarmReceptorThreshold",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WarpingConstant",
    "http://qudt.org/vocab/dimensionvector/A0E0L6I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Warping Constant", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WarpingConstant",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WarpingMoment",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Warping Moment", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WarpingMoment",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WaterHorsepower",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-3D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Water Horsepower", "en"));
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-HR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-YD3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Electric");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR-L-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA-M3-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloCAL-PER-MIN"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Brake");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckPower");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Boiler");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-SEC"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaPA-L-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_FG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG-PER-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/FT-LB_F-PER-MIN"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PSI-IN3-PER-SEC"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliW");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HP_Metric");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Power"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WaterHorsepower",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Wavelength",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    "λ",
    undefined
  );
  quantityKind.addLabel(new LangString("Wavelength", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Wavelength",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Wavenumber",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Wavenumber", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DPI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PER-MilliM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MESH");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/InverseLength"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Wavenumber",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WebTime",
    undefined,
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Web Time", "en"));
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WebTime",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WebTimeAveragePressure",
    "http://qudt.org/vocab/dimensionvector/A0E0L-1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Web Time Average Pressure", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-M2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-MilliM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiBAR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloLB_F-PER-IN2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM_T");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N-PER-CentiM2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL-PER-FT2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BARYE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_HG");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/GM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPA_A");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-M2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/DYN-PER-CentiM2"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliTORR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ATM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM_HGA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliBAR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PSI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM_H2O");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroPA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroTORR");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2"
  );
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/PlanckPressure"
  );
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Pressure"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WebTimeAveragePressure",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WebTimeAverageThrust",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Web Time Average Thrust", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Thrust"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WebTimeAverageThrust",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Weight",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M1H0T-2D0",
    "bold letter W",
    undefined
  );
  quantityKind.addLabel(new LangString("Weight", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TON_F_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloPOND");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloP");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DYN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaLB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/OZ_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckForce");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KIP_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloGM_F");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Force"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Weight",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Width",
    "http://qudt.org/vocab/dimensionvector/A0E0L1I0M0H0T0D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Width", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ANGSTROM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AU");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GAUGE_FR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR_Long");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DeciM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FATH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/YD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroIN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/DecaM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckLength");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_N");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ROD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/LY");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PARSEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/NanoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PCA");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/M");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliM");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/BTU_IT-PER-LB_F"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CentiM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MI_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PicoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/IN");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/HectoM");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FUR");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Length"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Width",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/Work",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    "A",
    undefined
  );
  quantityKind.addLabel(new LangString("Work", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/Work",
    quantityKind
  );
  quantityKind = new QuantityKind(
    "http://qudt.org/vocab/quantitykind/WorkFunction",
    "http://qudt.org/vocab/dimensionvector/A0E0L2I0M1H0T-2D0",
    undefined,
    undefined
  );
  quantityKind.addLabel(new LangString("Work Function", "en"));
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/EV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaTOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-PDL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/AttoJ");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/MegaV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloV-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_EEC");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_IT");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-SEC");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/V-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ERG");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PetaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/PlanckEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TeraW-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/V-A-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloCAL");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MicroJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TOE");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/E_h");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/GigaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/ExaJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/THM_US");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FemtoJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/BTU_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MegaEV");
  quantityKind.addApplicableUnitIri(
    "http://qudt.org/vocab/unit/KiloV-A_Reactive-HR"
  );
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/MilliJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/TonEnergy");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/FT-LB_F");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_TH");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/W-HR");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/J");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/QUAD");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloJ");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/KiloEV");
  quantityKind.addApplicableUnitIri("http://qudt.org/vocab/unit/CAL_IT");
  quantityKind.addBroaderQuantityKindIri(
    "http://qudt.org/vocab/quantitykind/Energy"
  );
  config.quantityKinds.set(
    "http://qudt.org/vocab/quantitykind/WorkFunction",
    quantityKind
  );
}

export const QuantityKinds = {
  // Energy Imparted
  EnergyImparted: Qudt.quantityKindFromLocalnameRequired("EnergyImparted"),
  // Energy Density
  EnergyDensity: Qudt.quantityKindFromLocalnameRequired("EnergyDensity"),
  // Radius of Curvature
  RadiusOfCurvature:
    Qudt.quantityKindFromLocalnameRequired("RadiusOfCurvature"),
  // Current Linkage
  CurrentLinkage: Qudt.quantityKindFromLocalnameRequired("CurrentLinkage"),
  // Mean Mass Range
  MeanMassRange: Qudt.quantityKindFromLocalnameRequired("MeanMassRange"),
  // Mass Excess
  MassExcess: Qudt.quantityKindFromLocalnameRequired("MassExcess"),
  // Mechanical surface impedance
  MechanicalSurfaceImpedance: Qudt.quantityKindFromLocalnameRequired(
    "MechanicalSurfaceImpedance"
  ),
  // Refractive index
  RefractiveIndex: Qudt.quantityKindFromLocalnameRequired("RefractiveIndex"),
  // Curvature
  CurvatureFromRadius: Qudt.quantityKindFromLocalnameRequired(
    "CurvatureFromRadius"
  ),
  // Number Density
  NumberDensity: Qudt.quantityKindFromLocalnameRequired("NumberDensity"),
  // Temporal Summation Function
  TemporalSummationFunction: Qudt.quantityKindFromLocalnameRequired(
    "TemporalSummationFunction"
  ),
  // Volume Strain
  VolumeStrain: Qudt.quantityKindFromLocalnameRequired("VolumeStrain"),
  // Mass Margin
  MASS__MARGIN: Qudt.quantityKindFromLocalnameRequired("MASS-MARGIN"),
  // Sound power
  SoundPower: Qudt.quantityKindFromLocalnameRequired("SoundPower"),
  // Effective Mass
  EffectiveMass: Qudt.quantityKindFromLocalnameRequired("EffectiveMass"),
  // Micro Canonical Partition Function
  MicroCanonicalPartitionFunction: Qudt.quantityKindFromLocalnameRequired(
    "MicroCanonicalPartitionFunction"
  ),
  // Second Stage Mass Ratio
  SecondStageMassRatio: Qudt.quantityKindFromLocalnameRequired(
    "SecondStageMassRatio"
  ),
  // Magnetization
  Magnetization: Qudt.quantityKindFromLocalnameRequired("Magnetization"),
  // Generalized Force
  GeneralizedForce: Qudt.quantityKindFromLocalnameRequired("GeneralizedForce"),
  // Section Area Integral
  SectionAreaIntegral: Qudt.quantityKindFromLocalnameRequired(
    "SectionAreaIntegral"
  ),
  // Power Per Electric Charge
  PowerPerElectricCharge: Qudt.quantityKindFromLocalnameRequired(
    "PowerPerElectricCharge"
  ),
  // Luminous Emmitance
  LuminousEmmitance:
    Qudt.quantityKindFromLocalnameRequired("LuminousEmmitance"),
  // Total Angular Momentum Quantum Number
  TotalAngularMomentumQuantumNumber: Qudt.quantityKindFromLocalnameRequired(
    "TotalAngularMomentumQuantumNumber"
  ),
  // Linear Acceleration
  LinearAcceleration:
    Qudt.quantityKindFromLocalnameRequired("LinearAcceleration"),
  // Flux
  Flux: Qudt.quantityKindFromLocalnameRequired("Flux"),
  // Bending Moment of Force
  BendingMomentOfForce: Qudt.quantityKindFromLocalnameRequired(
    "BendingMomentOfForce"
  ),
  // Fermi Angular Wavenumber
  FermiAngularWavenumber: Qudt.quantityKindFromLocalnameRequired(
    "FermiAngularWavenumber"
  ),
  // Warm Receptor Threshold
  WarmReceptorThreshold: Qudt.quantityKindFromLocalnameRequired(
    "WarmReceptorThreshold"
  ),
  // Average Specific Impulse
  AverageSpecificImpulse: Qudt.quantityKindFromLocalnameRequired(
    "AverageSpecificImpulse"
  ),
  // Expansion Ratio
  ExpansionRatio: Qudt.quantityKindFromLocalnameRequired("ExpansionRatio"),
  // Coupling Factor
  CouplingFactor: Qudt.quantityKindFromLocalnameRequired("CouplingFactor"),
  // Attenuation Coefficient
  AttenuationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "AttenuationCoefficient"
  ),
  // Magnetic flux density
  MagneticFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "MagneticFluxDensity"
  ),
  // Electric Charge Linear Density
  ElectricChargeLinearDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargeLinearDensity"
  ),
  // Cubic Electric Dipole Moment per Square Energy
  CubicElectricDipoleMomentPerSquareEnergy:
    Qudt.quantityKindFromLocalnameRequired(
      "CubicElectricDipoleMomentPerSquareEnergy"
    ),
  // Volume Fraction
  VolumeFraction: Qudt.quantityKindFromLocalnameRequired("VolumeFraction"),
  // Morbidity Rate
  MorbidityRate: Qudt.quantityKindFromLocalnameRequired("MorbidityRate"),
  // Spectral Angular Cross-section
  SpectralAngularCrossSection: Qudt.quantityKindFromLocalnameRequired(
    "SpectralAngularCrossSection"
  ),
  // Lift Force
  LiftForce: Qudt.quantityKindFromLocalnameRequired("LiftForce"),
  // Lower Critical Magnetic Flux Density
  LowerCriticalMagneticFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "LowerCriticalMagneticFluxDensity"
  ),
  // Water Solubility
  Solubility_Water: Qudt.quantityKindFromLocalnameRequired("Solubility_Water"),
  // Scalar Magnetic Potential
  ScalarMagneticPotential: Qudt.quantityKindFromLocalnameRequired(
    "ScalarMagneticPotential"
  ),
  // Area Time Temperature
  AreaTimeTemperature: Qudt.quantityKindFromLocalnameRequired(
    "AreaTimeTemperature"
  ),
  // Single Stage Launcher Mass Ratio
  SingleStageLauncherMassRatio: Qudt.quantityKindFromLocalnameRequired(
    "SingleStageLauncherMassRatio"
  ),
  // Temperature per Time
  TemperaturePerTime:
    Qudt.quantityKindFromLocalnameRequired("TemperaturePerTime"),
  // Spectral Luminous Efficiency
  SpectralLuminousEfficiency: Qudt.quantityKindFromLocalnameRequired(
    "SpectralLuminousEfficiency"
  ),
  // Stage Propellant Mass
  StagePropellantMass: Qudt.quantityKindFromLocalnameRequired(
    "StagePropellantMass"
  ),
  // Atom Scattering Factor
  AtomScatteringFactor: Qudt.quantityKindFromLocalnameRequired(
    "AtomScatteringFactor"
  ),
  // Dose Equivalent
  DoseEquivalent: Qudt.quantityKindFromLocalnameRequired("DoseEquivalent"),
  // Standard Gravitational Parameter
  StandardGravitationalParameter: Qudt.quantityKindFromLocalnameRequired(
    "StandardGravitationalParameter"
  ),
  // Effective Multiplication Factor
  EffectiveMultiplicationFactor: Qudt.quantityKindFromLocalnameRequired(
    "EffectiveMultiplicationFactor"
  ),
  // Electric Current per Unit Length
  ElectricCurrentPerUnitLength: Qudt.quantityKindFromLocalnameRequired(
    "ElectricCurrentPerUnitLength"
  ),
  // Thermal Diffusion Ratio
  ThermalDiffusionRatio: Qudt.quantityKindFromLocalnameRequired(
    "ThermalDiffusionRatio"
  ),
  // Total Linear Stopping Power
  TotalLinearStoppingPower: Qudt.quantityKindFromLocalnameRequired(
    "TotalLinearStoppingPower"
  ),
  // Standard Absolute Activity
  StandardAbsoluteActivity: Qudt.quantityKindFromLocalnameRequired(
    "StandardAbsoluteActivity"
  ),
  // Infinite Multiplication Factor
  InfiniteMultiplicationFactor: Qudt.quantityKindFromLocalnameRequired(
    "InfiniteMultiplicationFactor"
  ),
  // Mass Property Uncertainty
  MASS__PROPERTY__UNCERTAINTY: Qudt.quantityKindFromLocalnameRequired(
    "MASS-PROPERTY-UNCERTAINTY"
  ),
  // Vehicle Velocity
  VehicleVelocity: Qudt.quantityKindFromLocalnameRequired("VehicleVelocity"),
  // Hall Coefficient
  HallCoefficient: Qudt.quantityKindFromLocalnameRequired("HallCoefficient"),
  // Osmotic Coefficient
  OsmoticCoefficient:
    Qudt.quantityKindFromLocalnameRequired("OsmoticCoefficient"),
  // Polarizability
  Polarizability: Qudt.quantityKindFromLocalnameRequired("Polarizability"),
  // Momentum per Angle
  MomentumPerAngle: Qudt.quantityKindFromLocalnameRequired("MomentumPerAngle"),
  // Specific Impulse by Mass
  SpecificImpulseByMass: Qudt.quantityKindFromLocalnameRequired(
    "SpecificImpulseByMass"
  ),
  // Nucleon number
  NucleonNumber: Qudt.quantityKindFromLocalnameRequired("NucleonNumber"),
  // Einstein Transition Probability
  EinsteinTransitionProbability: Qudt.quantityKindFromLocalnameRequired(
    "EinsteinTransitionProbability"
  ),
  // Energy Density of States
  EnergyDensityOfStates: Qudt.quantityKindFromLocalnameRequired(
    "EnergyDensityOfStates"
  ),
  // Flash Point Temperature
  FlashPoint: Qudt.quantityKindFromLocalnameRequired("FlashPoint"),
  // Molality of Solute
  MolalityOfSolute: Qudt.quantityKindFromLocalnameRequired("MolalityOfSolute"),
  // Cross-section
  CrossSection: Qudt.quantityKindFromLocalnameRequired("CrossSection"),
  // Product of Inertia
  PRODUCT__OF__INERTIA:
    Qudt.quantityKindFromLocalnameRequired("PRODUCT-OF-INERTIA"),
  // Burn Rate
  BurnRate: Qudt.quantityKindFromLocalnameRequired("BurnRate"),
  // Macroscopic Total Cross-section
  MacroscopicTotalCrossSection: Qudt.quantityKindFromLocalnameRequired(
    "MacroscopicTotalCrossSection"
  ),
  // Diameter
  Diameter: Qudt.quantityKindFromLocalnameRequired("Diameter"),
  // Electric Displacement Field
  ElectricDisplacementField: Qudt.quantityKindFromLocalnameRequired(
    "ElectricDisplacementField"
  ),
  // Mass Concentration of Water To Dry Matter
  MassRatioOfWaterToDryMatter: Qudt.quantityKindFromLocalnameRequired(
    "MassRatioOfWaterToDryMatter"
  ),
  // Atomic Number
  AtomicNumber: Qudt.quantityKindFromLocalnameRequired("AtomicNumber"),
  // Thermodynamic Entropy
  ThermodynamicEntropy: Qudt.quantityKindFromLocalnameRequired(
    "ThermodynamicEntropy"
  ),
  // Aeric Heat Flow Rate
  AreicHeatFlowRate:
    Qudt.quantityKindFromLocalnameRequired("AreicHeatFlowRate"),
  // Exit Plane Temperature
  ExitPlaneTemperature: Qudt.quantityKindFromLocalnameRequired(
    "ExitPlaneTemperature"
  ),
  // Luminance
  Luminance: Qudt.quantityKindFromLocalnameRequired("Luminance"),
  // Frequency
  Frequency: Qudt.quantityKindFromLocalnameRequired("Frequency"),
  // Irradiance
  Irradiance: Qudt.quantityKindFromLocalnameRequired("Irradiance"),
  // Half-life
  Half__Life: Qudt.quantityKindFromLocalnameRequired("Half-Life"),
  // Henry's Law Volatility Constant
  HenrysLawVolatilityConstant: Qudt.quantityKindFromLocalnameRequired(
    "HenrysLawVolatilityConstant"
  ),
  // Exchange Integral
  ExchangeIntegral: Qudt.quantityKindFromLocalnameRequired("ExchangeIntegral"),
  // Inverse Temperature
  InverseTemperature:
    Qudt.quantityKindFromLocalnameRequired("InverseTemperature"),
  // Coherence Length
  CoherenceLength: Qudt.quantityKindFromLocalnameRequired("CoherenceLength"),
  // Reynolds Number
  ReynoldsNumber: Qudt.quantityKindFromLocalnameRequired("ReynoldsNumber"),
  // Mass per Time
  MassPerTime: Qudt.quantityKindFromLocalnameRequired("MassPerTime"),
  // Specific Acoustic Impedance
  SpecificAcousticImpedance: Qudt.quantityKindFromLocalnameRequired(
    "SpecificAcousticImpedance"
  ),
  // Debye Angular Wavenumber
  DebyeAngularWavenumber: Qudt.quantityKindFromLocalnameRequired(
    "DebyeAngularWavenumber"
  ),
  // Linear Thermal Expansion
  LinearThermalExpansion: Qudt.quantityKindFromLocalnameRequired(
    "LinearThermalExpansion"
  ),
  // Slowing-Down Area
  Slowing__DownArea: Qudt.quantityKindFromLocalnameRequired("Slowing-DownArea"),
  // Thermodynamic Temperature
  ThermodynamicTemperature: Qudt.quantityKindFromLocalnameRequired(
    "ThermodynamicTemperature"
  ),
  // Poynting Vector
  PoyntingVector: Qudt.quantityKindFromLocalnameRequired("PoyntingVector"),
  // Energy Level
  EnergyLevel: Qudt.quantityKindFromLocalnameRequired("EnergyLevel"),
  // Moment of Force
  MomentOfForce: Qudt.quantityKindFromLocalnameRequired("MomentOfForce"),
  // Center of Gravity in the X axis
  CenterOfGravity_X:
    Qudt.quantityKindFromLocalnameRequired("CenterOfGravity_X"),
  // Specific Heat Pressure
  SpecificHeatPressure: Qudt.quantityKindFromLocalnameRequired(
    "SpecificHeatPressure"
  ),
  // Photo Threshold of Awareness Function
  PhotoThresholdOfAwarenessFunction: Qudt.quantityKindFromLocalnameRequired(
    "PhotoThresholdOfAwarenessFunction"
  ),
  // True Exhaust Velocity
  TrueExhaustVelocity: Qudt.quantityKindFromLocalnameRequired(
    "TrueExhaustVelocity"
  ),
  // Auditory Thresholds
  AuditoryThresholds:
    Qudt.quantityKindFromLocalnameRequired("AuditoryThresholds"),
  // Gain
  Gain: Qudt.quantityKindFromLocalnameRequired("Gain"),
  // Mass per Area
  MassPerArea: Qudt.quantityKindFromLocalnameRequired("MassPerArea"),
  // Volume per Unit Time
  VolumePerUnitTime:
    Qudt.quantityKindFromLocalnameRequired("VolumePerUnitTime"),
  // Intinsic Carrier Density
  IntinsicCarrierDensity: Qudt.quantityKindFromLocalnameRequired(
    "IntinsicCarrierDensity"
  ),
  // Propagation coefficient
  PropagationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "PropagationCoefficient"
  ),
  // Level Width
  LevelWidth: Qudt.quantityKindFromLocalnameRequired("LevelWidth"),
  // Strain
  Strain: Qudt.quantityKindFromLocalnameRequired("Strain"),
  // Product of Inertia in the Z axis
  PRODUCT__OF__INERTIA_Z: Qudt.quantityKindFromLocalnameRequired(
    "PRODUCT-OF-INERTIA_Z"
  ),
  // Vapor Pressure
  VaporPressure: Qudt.quantityKindFromLocalnameRequired("VaporPressure"),
  // Electromagnetic Wave Phase Speed
  ElectromagneticWavePhaseSpeed: Qudt.quantityKindFromLocalnameRequired(
    "ElectromagneticWavePhaseSpeed"
  ),
  // Melting Point Temperature
  MeltingPoint: Qudt.quantityKindFromLocalnameRequired("MeltingPoint"),
  // Linear Electric Current Density
  LinearElectricCurrentDensity: Qudt.quantityKindFromLocalnameRequired(
    "LinearElectricCurrentDensity"
  ),
  // Depth
  Depth: Qudt.quantityKindFromLocalnameRequired("Depth"),
  // Heat
  Heat: Qudt.quantityKindFromLocalnameRequired("Heat"),
  // Angular Momentum per Angle
  AngularMomentumPerAngle: Qudt.quantityKindFromLocalnameRequired(
    "AngularMomentumPerAngle"
  ),
  // Potential Energy
  PotentialEnergy: Qudt.quantityKindFromLocalnameRequired("PotentialEnergy"),
  // Activity Thresholds
  ActivityThresholds:
    Qudt.quantityKindFromLocalnameRequired("ActivityThresholds"),
  // Web Time Average Pressure
  WebTimeAveragePressure: Qudt.quantityKindFromLocalnameRequired(
    "WebTimeAveragePressure"
  ),
  // Radial Distance
  RadialDistance: Qudt.quantityKindFromLocalnameRequired("RadialDistance"),
  // Reserve Mass
  RESERVE__MASS: Qudt.quantityKindFromLocalnameRequired("RESERVE-MASS"),
  // Maximum Expected Operating Pressure
  MaximumExpectedOperatingPressure: Qudt.quantityKindFromLocalnameRequired(
    "MaximumExpectedOperatingPressure"
  ),
  // Total Atomic Stopping Power
  TotalAtomicStoppingPower: Qudt.quantityKindFromLocalnameRequired(
    "TotalAtomicStoppingPower"
  ),
  // Combined Non Evaporative Heat Transfer Coefficient
  CombinedNonEvaporativeHeatTransferCoefficient:
    Qudt.quantityKindFromLocalnameRequired(
      "CombinedNonEvaporativeHeatTransferCoefficient"
    ),
  // Ratio of Specific Heat Capacities
  RatioOfSpecificHeatCapacities: Qudt.quantityKindFromLocalnameRequired(
    "RatioOfSpecificHeatCapacities"
  ),
  // Burn Time
  BurnTime: Qudt.quantityKindFromLocalnameRequired("BurnTime"),
  // Luminous Efficacy
  LuminousEfficacy: Qudt.quantityKindFromLocalnameRequired("LuminousEfficacy"),
  // Vacuum Thrust
  VacuumThrust: Qudt.quantityKindFromLocalnameRequired("VacuumThrust"),
  // Wavenumber
  Wavenumber: Qudt.quantityKindFromLocalnameRequired("Wavenumber"),
  // Mechanical Impedance
  MechanicalImpedance: Qudt.quantityKindFromLocalnameRequired(
    "MechanicalImpedance"
  ),
  // Cold Receptor Threshold
  ColdReceptorThreshold: Qudt.quantityKindFromLocalnameRequired(
    "ColdReceptorThreshold"
  ),
  // Strain Energy Density
  StrainEnergyDensity: Qudt.quantityKindFromLocalnameRequired(
    "StrainEnergyDensity"
  ),
  // Absolute Activity
  AbsoluteActivity: Qudt.quantityKindFromLocalnameRequired("AbsoluteActivity"),
  // Conductance
  Conductance: Qudt.quantityKindFromLocalnameRequired("Conductance"),
  // Diffusion Length (Solid State Physics)
  SolidStateDiffusionLength: Qudt.quantityKindFromLocalnameRequired(
    "SolidStateDiffusionLength"
  ),
  // Linear Force
  LinearStiffness: Qudt.quantityKindFromLocalnameRequired("LinearStiffness"),
  // Radiative Heat Transfer
  RadiativeHeatTransfer: Qudt.quantityKindFromLocalnameRequired(
    "RadiativeHeatTransfer"
  ),
  // Inverse Square Energy
  InverseSquareEnergy: Qudt.quantityKindFromLocalnameRequired(
    "InverseSquareEnergy"
  ),
  // Angular Velocity
  AngularVelocity: Qudt.quantityKindFromLocalnameRequired("AngularVelocity"),
  // Leakage Factor
  LeakageFactor: Qudt.quantityKindFromLocalnameRequired("LeakageFactor"),
  // Relative Mass Concentration of Vapour
  RelativeMassConcentrationOfVapour: Qudt.quantityKindFromLocalnameRequired(
    "RelativeMassConcentrationOfVapour"
  ),
  // Magnetic Vector Potential
  MagneticVectorPotential: Qudt.quantityKindFromLocalnameRequired(
    "MagneticVectorPotential"
  ),
  // Convective Heat Transfer
  ConvectiveHeatTransfer: Qudt.quantityKindFromLocalnameRequired(
    "ConvectiveHeatTransfer"
  ),
  // Work
  Work: Qudt.quantityKindFromLocalnameRequired("Work"),
  // Temperature
  Temperature: Qudt.quantityKindFromLocalnameRequired("Temperature"),
  // Surface Coefficient of Heat Transfer
  SurfaceCoefficientOfHeatTransfer: Qudt.quantityKindFromLocalnameRequired(
    "SurfaceCoefficientOfHeatTransfer"
  ),
  // Time
  Time: Qudt.quantityKindFromLocalnameRequired("Time"),
  // Body Mass Index
  BodyMassIndex: Qudt.quantityKindFromLocalnameRequired("BodyMassIndex"),
  // Phase coefficient
  PhaseCoefficient: Qudt.quantityKindFromLocalnameRequired("PhaseCoefficient"),
  // Reflectance
  Reflectance: Qudt.quantityKindFromLocalnameRequired("Reflectance"),
  // Evaporative Heat Transfer
  EvaporativeHeatTransfer: Qudt.quantityKindFromLocalnameRequired(
    "EvaporativeHeatTransfer"
  ),
  // Phonon Mean Free Path
  PhononMeanFreePath:
    Qudt.quantityKindFromLocalnameRequired("PhononMeanFreePath"),
  // Rotational Mass
  RotationalMass: Qudt.quantityKindFromLocalnameRequired("RotationalMass"),
  // Mobility Ratio
  MobilityRatio: Qudt.quantityKindFromLocalnameRequired("MobilityRatio"),
  // Molecular Mass
  MolecularMass: Qudt.quantityKindFromLocalnameRequired("MolecularMass"),
  // Magnetic Field
  MagneticField: Qudt.quantityKindFromLocalnameRequired("MagneticField"),
  // Relative Pressure Coefficient
  RelativePressureCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "RelativePressureCoefficient"
  ),
  // Inverse Energy
  InverseEnergy: Qudt.quantityKindFromLocalnameRequired("InverseEnergy"),
  // Asset
  Asset: Qudt.quantityKindFromLocalnameRequired("Asset"),
  // Impedance
  Impedance: Qudt.quantityKindFromLocalnameRequired("Impedance"),
  // Mean Lifetime
  MeanLifetime: Qudt.quantityKindFromLocalnameRequired("MeanLifetime"),
  // Specific Gibbs Energy
  SpecificGibbsEnergy: Qudt.quantityKindFromLocalnameRequired(
    "SpecificGibbsEnergy"
  ),
  // Mechanical Mobility
  MechanicalMobility:
    Qudt.quantityKindFromLocalnameRequired("MechanicalMobility"),
  // Kerma Rate
  KermaRate: Qudt.quantityKindFromLocalnameRequired("KermaRate"),
  // Packing Fraction
  PackingFraction: Qudt.quantityKindFromLocalnameRequired("PackingFraction"),
  // Permittivity Ratio
  PermittivityRatio:
    Qudt.quantityKindFromLocalnameRequired("PermittivityRatio"),
  // Electric Potential
  ElectricPotential:
    Qudt.quantityKindFromLocalnameRequired("ElectricPotential"),
  // Tension
  Tension: Qudt.quantityKindFromLocalnameRequired("Tension"),
  // Incidence
  Incidence: Qudt.quantityKindFromLocalnameRequired("Incidence"),
  // Nuclear Radius
  NuclearRadius: Qudt.quantityKindFromLocalnameRequired("NuclearRadius"),
  // Diffusion Area
  DiffusionArea: Qudt.quantityKindFromLocalnameRequired("DiffusionArea"),
  // Power
  Power: Qudt.quantityKindFromLocalnameRequired("Power"),
  // Sound power level
  SoundPowerLevel: Qudt.quantityKindFromLocalnameRequired("SoundPowerLevel"),
  // Curie Temperature
  CurieTemperature: Qudt.quantityKindFromLocalnameRequired("CurieTemperature"),
  // Delta-V
  DELTA__V: Qudt.quantityKindFromLocalnameRequired("DELTA-V"),
  // Target Bogie Mass
  TARGET__BOGIE__MASS:
    Qudt.quantityKindFromLocalnameRequired("TARGET-BOGIE-MASS"),
  // Debye Angular Frequency
  DebyeAngularFrequency: Qudt.quantityKindFromLocalnameRequired(
    "DebyeAngularFrequency"
  ),
  // Susceptance
  Susceptance: Qudt.quantityKindFromLocalnameRequired("Susceptance"),
  // Information Entropy
  InformationEntropy:
    Qudt.quantityKindFromLocalnameRequired("InformationEntropy"),
  // Angular Acceleration
  AngularAcceleration: Qudt.quantityKindFromLocalnameRequired(
    "AngularAcceleration"
  ),
  // Friction Loss
  FrictionLoss: Qudt.quantityKindFromLocalnameRequired("FrictionLoss"),
  // Richardson Constant
  RichardsonConstant:
    Qudt.quantityKindFromLocalnameRequired("RichardsonConstant"),
  // Reaction Rate Constant
  SecondOrderReactionRateConstant: Qudt.quantityKindFromLocalnameRequired(
    "SecondOrderReactionRateConstant"
  ),
  // Activity Coefficient
  ActivityCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "ActivityCoefficient"
  ),
  // Power per area quartic temperature
  PowerPerAreaQuarticTemperature: Qudt.quantityKindFromLocalnameRequired(
    "PowerPerAreaQuarticTemperature"
  ),
  // Superconduction Transition Temperature
  SuperconductionTransitionTemperature: Qudt.quantityKindFromLocalnameRequired(
    "SuperconductionTransitionTemperature"
  ),
  // Transmittance Density
  TransmittanceDensity: Qudt.quantityKindFromLocalnameRequired(
    "TransmittanceDensity"
  ),
  // Non-active Power
  NonActivePower: Qudt.quantityKindFromLocalnameRequired("NonActivePower"),
  // Diffusion Length
  DiffusionLength: Qudt.quantityKindFromLocalnameRequired("DiffusionLength"),
  // Combustion Chamber Temperature
  CombustionChamberTemperature: Qudt.quantityKindFromLocalnameRequired(
    "CombustionChamberTemperature"
  ),
  // Magnetic Flux
  MagneticFlux: Qudt.quantityKindFromLocalnameRequired("MagneticFlux"),
  // Power Per Area
  PowerPerArea: Qudt.quantityKindFromLocalnameRequired("PowerPerArea"),
  // Photosynthetic Photon Flux Density
  PhotosyntheticPhotonFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "PhotosyntheticPhotonFluxDensity"
  ),
  // Drag Coefficient
  DragCoefficient: Qudt.quantityKindFromLocalnameRequired("DragCoefficient"),
  // Inverse Volume
  InverseVolume: Qudt.quantityKindFromLocalnameRequired("InverseVolume"),
  // Dew Point Temperature
  DewPointTemperature: Qudt.quantityKindFromLocalnameRequired(
    "DewPointTemperature"
  ),
  // Internal Energy
  InternalEnergy: Qudt.quantityKindFromLocalnameRequired("InternalEnergy"),
  // Area Ratio
  AreaRatio: Qudt.quantityKindFromLocalnameRequired("AreaRatio"),
  // Voltage Phasor
  VoltagePhasor: Qudt.quantityKindFromLocalnameRequired("VoltagePhasor"),
  // Thermal Transmittance
  ThermalTransmittance: Qudt.quantityKindFromLocalnameRequired(
    "ThermalTransmittance"
  ),
  // Lande g-Factor
  LandeGFactor: Qudt.quantityKindFromLocalnameRequired("LandeGFactor"),
  // Currency Per Flight
  CurrencyPerFlight:
    Qudt.quantityKindFromLocalnameRequired("CurrencyPerFlight"),
  // Permeability
  Permeability: Qudt.quantityKindFromLocalnameRequired("Permeability"),
  // Ion Density
  IonDensity: Qudt.quantityKindFromLocalnameRequired("IonDensity"),
  // Volume Thermal Expansion
  VolumeThermalExpansion: Qudt.quantityKindFromLocalnameRequired(
    "VolumeThermalExpansion"
  ),
  // Electric Charge Per Mass
  ElectricChargePerMass: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargePerMass"
  ),
  // Molar Entropy
  MolarEntropy: Qudt.quantityKindFromLocalnameRequired("MolarEntropy"),
  // Force
  Force: Qudt.quantityKindFromLocalnameRequired("Force"),
  // Quality Factor
  QualityFactor: Qudt.quantityKindFromLocalnameRequired("QualityFactor"),
  // Atomic Charge
  AtomicCharge: Qudt.quantityKindFromLocalnameRequired("AtomicCharge"),
  // Fast Fission Factor
  FastFissionFactor:
    Qudt.quantityKindFromLocalnameRequired("FastFissionFactor"),
  // Nuclear Quadrupole Moment
  NuclearQuadrupoleMoment: Qudt.quantityKindFromLocalnameRequired(
    "NuclearQuadrupoleMoment"
  ),
  // Center of Gravity in the Z axis
  CENTER__OF__GRAVITY_Z: Qudt.quantityKindFromLocalnameRequired(
    "CENTER-OF-GRAVITY_Z"
  ),
  // Horizontal Velocity
  HorizontalVelocity:
    Qudt.quantityKindFromLocalnameRequired("HorizontalVelocity"),
  // Napierian Absorbance
  NapierianAbsorbance: Qudt.quantityKindFromLocalnameRequired(
    "NapierianAbsorbance"
  ),
  // Mass per Area Time
  MassPerAreaTime: Qudt.quantityKindFromLocalnameRequired("MassPerAreaTime"),
  // Earth Closest Approach Vehicle Velocity
  EarthClosestApproachVehicleVelocity: Qudt.quantityKindFromLocalnameRequired(
    "EarthClosestApproachVehicleVelocity"
  ),
  // Speed of Light
  SpeedOfLight: Qudt.quantityKindFromLocalnameRequired("SpeedOfLight"),
  // Data Rate
  DataRate: Qudt.quantityKindFromLocalnameRequired("DataRate"),
  // Mass per Length
  MassPerLength: Qudt.quantityKindFromLocalnameRequired("MassPerLength"),
  // Inverse Time Temperature
  InverseTimeTemperature: Qudt.quantityKindFromLocalnameRequired(
    "InverseTimeTemperature"
  ),
  // Surface Density
  SurfaceDensity: Qudt.quantityKindFromLocalnameRequired("SurfaceDensity"),
  // Equivalent absorption area
  EquivalentAbsorptionArea: Qudt.quantityKindFromLocalnameRequired(
    "EquivalentAbsorptionArea"
  ),
  // Heat Capacity Ratio
  HeatCapacityRatio:
    Qudt.quantityKindFromLocalnameRequired("HeatCapacityRatio"),
  // Coercivity
  Coercivity: Qudt.quantityKindFromLocalnameRequired("Coercivity"),
  // Position Vector
  PositionVector: Qudt.quantityKindFromLocalnameRequired("PositionVector"),
  // Electric Power
  ElectricPower: Qudt.quantityKindFromLocalnameRequired("ElectricPower"),
  // Acoustic Impediance
  AcousticImpedance:
    Qudt.quantityKindFromLocalnameRequired("AcousticImpedance"),
  // Sound pressure level
  SoundPressureLevel:
    Qudt.quantityKindFromLocalnameRequired("SoundPressureLevel"),
  // Electric Dipole Moment
  ElectricDipoleMoment: Qudt.quantityKindFromLocalnameRequired(
    "ElectricDipoleMoment"
  ),
  // Volumetric Flux
  VolumetricFlux: Qudt.quantityKindFromLocalnameRequired("VolumetricFlux"),
  // Reluctance
  Reluctance: Qudt.quantityKindFromLocalnameRequired("Reluctance"),
  // Activity
  Activity: Qudt.quantityKindFromLocalnameRequired("Activity"),
  // Structure Factor
  StructureFactor: Qudt.quantityKindFromLocalnameRequired("StructureFactor"),
  // Temperature Ratio
  TemperatureRatio: Qudt.quantityKindFromLocalnameRequired("TemperatureRatio"),
  // Donor Density
  DonorDensity: Qudt.quantityKindFromLocalnameRequired("DonorDensity"),
  // Displacement Current Density
  DisplacementCurrentDensity: Qudt.quantityKindFromLocalnameRequired(
    "DisplacementCurrentDensity"
  ),
  // Neel Temperature
  NeelTemperature: Qudt.quantityKindFromLocalnameRequired("NeelTemperature"),
  // Activity Concentration
  ActivityConcentration: Qudt.quantityKindFromLocalnameRequired(
    "ActivityConcentration"
  ),
  // Moisture Diffusivity
  MoistureDiffusivity: Qudt.quantityKindFromLocalnameRequired(
    "MoistureDiffusivity"
  ),
  // Mass Defect
  MassDefect: Qudt.quantityKindFromLocalnameRequired("MassDefect"),
  // Exposure Rate
  ExposureRate: Qudt.quantityKindFromLocalnameRequired("ExposureRate"),
  // Power Area
  PowerArea: Qudt.quantityKindFromLocalnameRequired("PowerArea"),
  // Peltier Coefficient
  PeltierCoefficient:
    Qudt.quantityKindFromLocalnameRequired("PeltierCoefficient"),
  // Radiant Emmitance
  RadiantEmmitance: Qudt.quantityKindFromLocalnameRequired("RadiantEmmitance"),
  // Molar Volume
  MolarVolume: Qudt.quantityKindFromLocalnameRequired("MolarVolume"),
  // Conductivity
  Conductivity: Qudt.quantityKindFromLocalnameRequired("Conductivity"),
  // Thruster Power To Thrust Efficiency
  ThrusterPowerToThrustEfficiency: Qudt.quantityKindFromLocalnameRequired(
    "ThrusterPowerToThrustEfficiency"
  ),
  // Thomson Coefficient
  ThomsonCoefficient:
    Qudt.quantityKindFromLocalnameRequired("ThomsonCoefficient"),
  // Cubic Expansion Coefficient
  CubicExpansionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "CubicExpansionCoefficient"
  ),
  // Acceptor Ionization Energy
  AcceptorIonizationEnergy: Qudt.quantityKindFromLocalnameRequired(
    "AcceptorIonizationEnergy"
  ),
  // Thermal Utilization Factor For Fission
  ThermalUtilizationFactorForFission: Qudt.quantityKindFromLocalnameRequired(
    "ThermalUtilizationFactorForFission"
  ),
  // Ignition interval time
  IgnitionIntervalTime: Qudt.quantityKindFromLocalnameRequired(
    "IgnitionIntervalTime"
  ),
  // Transmittance
  Transmittance: Qudt.quantityKindFromLocalnameRequired("Transmittance"),
  // Resonance Escape Probability For Fission
  ResonanceEscapeProbabilityForFission: Qudt.quantityKindFromLocalnameRequired(
    "ResonanceEscapeProbabilityForFission"
  ),
  // Heat Flux Density
  HeatFluxDensity: Qudt.quantityKindFromLocalnameRequired("HeatFluxDensity"),
  // Thrust To Weight Ratio
  ThrustToWeightRatio: Qudt.quantityKindFromLocalnameRequired(
    "ThrustToWeightRatio"
  ),
  // Propellant Temperature
  PropellantTemperature: Qudt.quantityKindFromLocalnameRequired(
    "PropellantTemperature"
  ),
  // Electron Mean Free Path
  ElectronMeanFreePath: Qudt.quantityKindFromLocalnameRequired(
    "ElectronMeanFreePath"
  ),
  // Torque per Length
  TorquePerLength: Qudt.quantityKindFromLocalnameRequired("TorquePerLength"),
  // Product of Inertia in the Y axis
  PRODUCT__OF__INERTIA_Y: Qudt.quantityKindFromLocalnameRequired(
    "PRODUCT-OF-INERTIA_Y"
  ),
  // Binding Fraction
  BindingFraction: Qudt.quantityKindFromLocalnameRequired("BindingFraction"),
  // Soil Adsorption Coefficient
  SoilAdsorptionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "SoilAdsorptionCoefficient"
  ),
  // Force per Length
  ForcePerLength: Qudt.quantityKindFromLocalnameRequired("ForcePerLength"),
  // Correlated Color Temperature
  CorrelatedColorTemperature: Qudt.quantityKindFromLocalnameRequired(
    "CorrelatedColorTemperature"
  ),
  // Mass Of Electrical Power Supply
  MassOfElectricalPowerSupply: Qudt.quantityKindFromLocalnameRequired(
    "MassOfElectricalPowerSupply"
  ),
  // Propellant Mean Bulk Temperature
  PropellantMeanBulkTemperature: Qudt.quantityKindFromLocalnameRequired(
    "PropellantMeanBulkTemperature"
  ),
  // Diffusion Coefficient
  NeutronDiffusionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "NeutronDiffusionCoefficient"
  ),
  // Magnetic Dipole Moment
  MagneticDipoleMoment: Qudt.quantityKindFromLocalnameRequired(
    "MagneticDipoleMoment"
  ),
  // Modulus of Rotational Subgrade Reaction
  ModulusOfRotationalSubgradeReaction: Qudt.quantityKindFromLocalnameRequired(
    "ModulusOfRotationalSubgradeReaction"
  ),
  // Energy and work per mass amount of substance
  EnergyPerMassAmountOfSubstance: Qudt.quantityKindFromLocalnameRequired(
    "EnergyPerMassAmountOfSubstance"
  ),
  // Isothermal Moisture Capacity
  IsothermalMoistureCapacity: Qudt.quantityKindFromLocalnameRequired(
    "IsothermalMoistureCapacity"
  ),
  // Electric Polarizability
  ElectricPolarizability: Qudt.quantityKindFromLocalnameRequired(
    "ElectricPolarizability"
  ),
  // Radius
  Radius: Qudt.quantityKindFromLocalnameRequired("Radius"),
  // Fundamental Reciprocal Lattice Vector
  FundamentalReciprocalLatticeVector: Qudt.quantityKindFromLocalnameRequired(
    "FundamentalReciprocalLatticeVector"
  ),
  // Linear Expansion Coefficient
  LinearExpansionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "LinearExpansionCoefficient"
  ),
  // Distance Traveled During a Burn
  DistanceTraveledDuringBurn: Qudt.quantityKindFromLocalnameRequired(
    "DistanceTraveledDuringBurn"
  ),
  // Force per Electric Charge
  ForcePerElectricCharge: Qudt.quantityKindFromLocalnameRequired(
    "ForcePerElectricCharge"
  ),
  // Specific Heat Volume
  SpecificHeatVolume:
    Qudt.quantityKindFromLocalnameRequired("SpecificHeatVolume"),
  // Magnetic Polarization
  MagneticPolarization: Qudt.quantityKindFromLocalnameRequired(
    "MagneticPolarization"
  ),
  // Closest Approach Radius
  ClosestApproachRadius: Qudt.quantityKindFromLocalnameRequired(
    "ClosestApproachRadius"
  ),
  // Photosynthetic Photon Flux
  PhotosyntheticPhotonFlux: Qudt.quantityKindFromLocalnameRequired(
    "PhotosyntheticPhotonFlux"
  ),
  // Mass Concentration of Water
  MassConcentrationOfWater: Qudt.quantityKindFromLocalnameRequired(
    "MassConcentrationOfWater"
  ),
  // Electric Current Density
  ElectricCurrentDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricCurrentDensity"
  ),
  // Center of Gravity in the Y axis
  CenterOfGravity_Y:
    Qudt.quantityKindFromLocalnameRequired("CenterOfGravity_Y"),
  // Elliptical Orbit Perigee Velocity
  EllipticalOrbitPerigeeVelocity: Qudt.quantityKindFromLocalnameRequired(
    "EllipticalOrbitPerigeeVelocity"
  ),
  // Initial Velocity
  InitialVelocity: Qudt.quantityKindFromLocalnameRequired("InitialVelocity"),
  // Amount of Substance of Fraction of B
  AmountOfSubstanceFractionOfB: Qudt.quantityKindFromLocalnameRequired(
    "AmountOfSubstanceFractionOfB"
  ),
  // Friction
  Friction: Qudt.quantityKindFromLocalnameRequired("Friction"),
  // Larmor Angular Frequency
  CyclotronAngularFrequency: Qudt.quantityKindFromLocalnameRequired(
    "CyclotronAngularFrequency"
  ),
  // Quartic Electric Dipole Moment per Cubic Energy
  QuarticElectricDipoleMomentPerCubicEnergy:
    Qudt.quantityKindFromLocalnameRequired(
      "QuarticElectricDipoleMomentPerCubicEnergy"
    ),
  // Isentropic Exponent
  IsentropicExponent:
    Qudt.quantityKindFromLocalnameRequired("IsentropicExponent"),
  // Isentropic Compressibility
  IsentropicCompressibility: Qudt.quantityKindFromLocalnameRequired(
    "IsentropicCompressibility"
  ),
  // Eccentricity Of Orbit
  EccentricityOfOrbit: Qudt.quantityKindFromLocalnameRequired(
    "EccentricityOfOrbit"
  ),
  // Linear Force
  LinearForce: Qudt.quantityKindFromLocalnameRequired("LinearForce"),
  // Molar Flow Rate
  MolarFlowRate: Qudt.quantityKindFromLocalnameRequired("MolarFlowRate"),
  // Moment of Inertia in the Y axis
  MOMENT__OF__INERTIA_Y: Qudt.quantityKindFromLocalnameRequired(
    "MOMENT-OF-INERTIA_Y"
  ),
  // Total Current Density
  TotalCurrentDensity: Qudt.quantityKindFromLocalnameRequired(
    "TotalCurrentDensity"
  ),
  // Compressibility
  Compressibility: Qudt.quantityKindFromLocalnameRequired("Compressibility"),
  // Spectral Cross-section
  SpectralCrossSection: Qudt.quantityKindFromLocalnameRequired(
    "SpectralCrossSection"
  ),
  // Specific Internal Energy
  SpecificInternalEnergy: Qudt.quantityKindFromLocalnameRequired(
    "SpecificInternalEnergy"
  ),
  // Relative Luminous Flux
  RelativeLuminousFlux: Qudt.quantityKindFromLocalnameRequired(
    "RelativeLuminousFlux"
  ),
  // Logarithm of Octanol Water Partition Coefficient
  LogOctanolWaterPartitionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "LogOctanolWaterPartitionCoefficient"
  ),
  // Area Angle
  AreaAngle: Qudt.quantityKindFromLocalnameRequired("AreaAngle"),
  // Specific Heat Capacity
  SpecificHeatCapacity: Qudt.quantityKindFromLocalnameRequired(
    "SpecificHeatCapacity"
  ),
  // Resonance Escape Probability
  ResonanceEscapeProbability: Qudt.quantityKindFromLocalnameRequired(
    "ResonanceEscapeProbability"
  ),
  // Particle Number Density
  ParticleNumberDensity: Qudt.quantityKindFromLocalnameRequired(
    "ParticleNumberDensity"
  ),
  // Electron Affinity
  ElectronAffinity: Qudt.quantityKindFromLocalnameRequired("ElectronAffinity"),
  // Specific Volume
  SpecificVolume: Qudt.quantityKindFromLocalnameRequired("SpecificVolume"),
  // Catalytic Activity
  CatalyticActivity:
    Qudt.quantityKindFromLocalnameRequired("CatalyticActivity"),
  // Loss Factor
  LossFactor: Qudt.quantityKindFromLocalnameRequired("LossFactor"),
  // Atomic Mass
  AtomicMass: Qudt.quantityKindFromLocalnameRequired("AtomicMass"),
  // Web Time Average Thrust
  WebTimeAverageThrust: Qudt.quantityKindFromLocalnameRequired(
    "WebTimeAverageThrust"
  ),
  // Nozzle Throat Pressure
  NozzleThroatPressure: Qudt.quantityKindFromLocalnameRequired(
    "NozzleThroatPressure"
  ),
  // Exit Plane Pressure
  ExitPlanePressure:
    Qudt.quantityKindFromLocalnameRequired("ExitPlanePressure"),
  // Migration Length
  MigrationLength: Qudt.quantityKindFromLocalnameRequired("MigrationLength"),
  // Quantum Number
  QuantumNumber: Qudt.quantityKindFromLocalnameRequired("QuantumNumber"),
  // Specific thrust
  SpecificThrust: Qudt.quantityKindFromLocalnameRequired("SpecificThrust"),
  // Reverberation Time
  ReverberationTime:
    Qudt.quantityKindFromLocalnameRequired("ReverberationTime"),
  // Bioconcentration Factor
  BioconcentrationFactor: Qudt.quantityKindFromLocalnameRequired(
    "BioconcentrationFactor"
  ),
  // Bevel Gear Pitch Angle
  BevelGearPitchAngle: Qudt.quantityKindFromLocalnameRequired(
    "BevelGearPitchAngle"
  ),
  // Wavelength
  Wavelength: Qudt.quantityKindFromLocalnameRequired("Wavelength"),
  // Inverse Permittivity
  InversePermittivity: Qudt.quantityKindFromLocalnameRequired(
    "InversePermittivity"
  ),
  // Density of states
  DensityOfStates: Qudt.quantityKindFromLocalnameRequired("DensityOfStates"),
  // Complex Power
  ComplexPower: Qudt.quantityKindFromLocalnameRequired("ComplexPower"),
  // Dry Volume
  DryVolume: Qudt.quantityKindFromLocalnameRequired("DryVolume"),
  // Mass Fraction of Water
  MassFractionOfWater: Qudt.quantityKindFromLocalnameRequired(
    "MassFractionOfWater"
  ),
  // Statistical Weight
  StatisticalWeight:
    Qudt.quantityKindFromLocalnameRequired("StatisticalWeight"),
  // Energy Fluence
  EnergyFluence: Qudt.quantityKindFromLocalnameRequired("EnergyFluence"),
  // Moment of Inertia in the Z axis
  MOMENT__OF__INERTIA_Z: Qudt.quantityKindFromLocalnameRequired(
    "MOMENT-OF-INERTIA_Z"
  ),
  // Hyperfine Structure Quantum Number
  HyperfineStructureQuantumNumber: Qudt.quantityKindFromLocalnameRequired(
    "HyperfineStructureQuantumNumber"
  ),
  // Kinetic Energy
  KineticEnergy: Qudt.quantityKindFromLocalnameRequired("KineticEnergy"),
  // Electric Current Phasor
  ElectricCurrentPhasor: Qudt.quantityKindFromLocalnameRequired(
    "ElectricCurrentPhasor"
  ),
  // Resistivity
  Resistivity: Qudt.quantityKindFromLocalnameRequired("Resistivity"),
  // Effective Exhaustvelocity
  EffectiveExhaustVelocity: Qudt.quantityKindFromLocalnameRequired(
    "EffectiveExhaustVelocity"
  ),
  // Coefficient of heat transfer
  CoefficientOfHeatTransfer: Qudt.quantityKindFromLocalnameRequired(
    "CoefficientOfHeatTransfer"
  ),
  // Molar Optical Rotatory Power
  MolarOpticalRotatoryPower: Qudt.quantityKindFromLocalnameRequired(
    "MolarOpticalRotatoryPower"
  ),
  // Fractional Mass (Stage 1)
  FractionalMass_Stage1: Qudt.quantityKindFromLocalnameRequired(
    "FractionalMass_Stage1"
  ),
  // Action Time
  ActionTime: Qudt.quantityKindFromLocalnameRequired("ActionTime"),
  // Inverse Square Time
  InverseSquareTime:
    Qudt.quantityKindFromLocalnameRequired("InverseSquareTime"),
  // Luminous Intensity
  LuminousIntensity:
    Qudt.quantityKindFromLocalnameRequired("LuminousIntensity"),
  // Particle Fluence Rate
  ParticleFluenceRate: Qudt.quantityKindFromLocalnameRequired(
    "ParticleFluenceRate"
  ),
  // Friction Coefficient
  FrictionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "FrictionCoefficient"
  ),
  // Mean Linear Range
  MeanLinearRange: Qudt.quantityKindFromLocalnameRequired("MeanLinearRange"),
  // Height
  Height: Qudt.quantityKindFromLocalnameRequired("Height"),
  // Donor Ionization Energy
  DonorIonizationEnergy: Qudt.quantityKindFromLocalnameRequired(
    "DonorIonizationEnergy"
  ),
  // Sound particle acceleration
  SoundParticleAcceleration: Qudt.quantityKindFromLocalnameRequired(
    "SoundParticleAcceleration"
  ),
  // Electric Current per Unit Energy
  ElectricCurrentPerUnitEnergy: Qudt.quantityKindFromLocalnameRequired(
    "ElectricCurrentPerUnitEnergy"
  ),
  // Energy Expenditure
  EnergyExpenditure:
    Qudt.quantityKindFromLocalnameRequired("EnergyExpenditure"),
  // Kinetic Energy
  EnergyKinetic: Qudt.quantityKindFromLocalnameRequired("EnergyKinetic"),
  // Static Friction
  StaticFriction: Qudt.quantityKindFromLocalnameRequired("StaticFriction"),
  // Flight Performance Reserve Propellant Mass
  FLIGHT__PERFORMANCE__RESERVE__PROPELLANT__MASS:
    Qudt.quantityKindFromLocalnameRequired(
      "FLIGHT-PERFORMANCE-RESERVE-PROPELLANT-MASS"
    ),
  // Relative Mass Density
  RelativeMassDensity: Qudt.quantityKindFromLocalnameRequired(
    "RelativeMassDensity"
  ),
  // Electromagnetic Permeability Ratio
  ElectromagneticPermeabilityRatio: Qudt.quantityKindFromLocalnameRequired(
    "ElectromagneticPermeabilityRatio"
  ),
  // Modulus Of Impedance
  ModulusOfImpedance:
    Qudt.quantityKindFromLocalnameRequired("ModulusOfImpedance"),
  // Pressure Percentage
  PressurePercentage:
    Qudt.quantityKindFromLocalnameRequired("PressurePercentage"),
  // Area per Time
  AreaPerTime: Qudt.quantityKindFromLocalnameRequired("AreaPerTime"),
  // Energy
  Energy: Qudt.quantityKindFromLocalnameRequired("Energy"),
  // Massieu Function
  MassieuFunction: Qudt.quantityKindFromLocalnameRequired("MassieuFunction"),
  // Electric Propulsion Propellant Mass
  ElectricPropulsionPropellantMass: Qudt.quantityKindFromLocalnameRequired(
    "ElectricPropulsionPropellantMass"
  ),
  // Ion Concentration
  LuminousIntensityDistribution: Qudt.quantityKindFromLocalnameRequired(
    "LuminousIntensityDistribution"
  ),
  // Fuel Bias
  FUEL__BIAS: Qudt.quantityKindFromLocalnameRequired("FUEL-BIAS"),
  // Molar Energy
  MolarEnergy: Qudt.quantityKindFromLocalnameRequired("MolarEnergy"),
  // Mass Density
  MassDensity: Qudt.quantityKindFromLocalnameRequired("MassDensity"),
  // Square Energy
  SquareEnergy: Qudt.quantityKindFromLocalnameRequired("SquareEnergy"),
  // Particle Current
  ParticleCurrent: Qudt.quantityKindFromLocalnameRequired("ParticleCurrent"),
  // Seebeck Coefficient
  SeebeckCoefficient:
    Qudt.quantityKindFromLocalnameRequired("SeebeckCoefficient"),
  // Universal Gas Constant
  UniversalGasConstant: Qudt.quantityKindFromLocalnameRequired(
    "UniversalGasConstant"
  ),
  // Slowing-Down Length
  Slowing__DownLength:
    Qudt.quantityKindFromLocalnameRequired("Slowing-DownLength"),
  // Radiant Flux
  RadiantFlux: Qudt.quantityKindFromLocalnameRequired("RadiantFlux"),
  // Linear Ionization
  LinearIonization: Qudt.quantityKindFromLocalnameRequired("LinearIonization"),
  // Magnetic Quantum Number
  MagneticQuantumNumber: Qudt.quantityKindFromLocalnameRequired(
    "MagneticQuantumNumber"
  ),
  // Thermal Resistivity
  ThermalResistivity:
    Qudt.quantityKindFromLocalnameRequired("ThermalResistivity"),
  // Mass Of The Earth
  MassOfTheEarth: Qudt.quantityKindFromLocalnameRequired("MassOfTheEarth"),
  // Rest Energy
  RestEnergy: Qudt.quantityKindFromLocalnameRequired("RestEnergy"),
  // Orbital Angular Momentum per Unit Mass
  OrbitalAngularMomentumPerUnitMass: Qudt.quantityKindFromLocalnameRequired(
    "OrbitalAngularMomentumPerUnitMass"
  ),
  // Specific Energy
  SpecificEnergy: Qudt.quantityKindFromLocalnameRequired("SpecificEnergy"),
  // Electric Charge Volume Density
  ElectricChargeVolumeDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargeVolumeDensity"
  ),
  // Period
  Period: Qudt.quantityKindFromLocalnameRequired("Period"),
  // Acceleration Of Gravity
  AccelerationOfGravity: Qudt.quantityKindFromLocalnameRequired(
    "AccelerationOfGravity"
  ),
  // Polarization Field
  PolarizationField:
    Qudt.quantityKindFromLocalnameRequired("PolarizationField"),
  // Mobility
  Mobility: Qudt.quantityKindFromLocalnameRequired("Mobility"),
  // Extent of Reaction
  ExtentOfReaction: Qudt.quantityKindFromLocalnameRequired("ExtentOfReaction"),
  // Efficiency
  Efficiency: Qudt.quantityKindFromLocalnameRequired("Efficiency"),
  // Photon Intensity
  PhotonIntensity: Qudt.quantityKindFromLocalnameRequired("PhotonIntensity"),
  // Number of Particles
  NumberOfParticles:
    Qudt.quantityKindFromLocalnameRequired("NumberOfParticles"),
  // Thermal Efficiency
  ThermalEfficiency:
    Qudt.quantityKindFromLocalnameRequired("ThermalEfficiency"),
  // Massic Activity
  MassicActivity: Qudt.quantityKindFromLocalnameRequired("MassicActivity"),
  // Mass Ratio
  MassRatio: Qudt.quantityKindFromLocalnameRequired("MassRatio"),
  // Stoichiometric Number
  StoichiometricNumber: Qudt.quantityKindFromLocalnameRequired(
    "StoichiometricNumber"
  ),
  // Stress
  Stress: Qudt.quantityKindFromLocalnameRequired("Stress"),
  // Gross Lift-Off Weight
  GROSS__LIFT__OFF__WEIGHT: Qudt.quantityKindFromLocalnameRequired(
    "GROSS-LIFT-OFF-WEIGHT"
  ),
  // Conduction Speed
  ConductionSpeed: Qudt.quantityKindFromLocalnameRequired("ConductionSpeed"),
  // Energy Per Square Magnetic Flux Density
  EnergyPerSquareMagneticFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "EnergyPerSquareMagneticFluxDensity"
  ),
  // Planck Function
  PlanckFunction: Qudt.quantityKindFromLocalnameRequired("PlanckFunction"),
  // Average Logarithmic Energy Decrement
  AverageLogarithmicEnergyDecrement: Qudt.quantityKindFromLocalnameRequired(
    "AverageLogarithmicEnergyDecrement"
  ),
  // Logarithmic frequency interval
  LogarithmicFrequencyInterval: Qudt.quantityKindFromLocalnameRequired(
    "LogarithmicFrequencyInterval"
  ),
  // Mass Concentration
  MassConcentration:
    Qudt.quantityKindFromLocalnameRequired("MassConcentration"),
  // Water Horsepower
  WaterHorsepower: Qudt.quantityKindFromLocalnameRequired("WaterHorsepower"),
  // Resonance Energy
  ResonanceEnergy: Qudt.quantityKindFromLocalnameRequired("ResonanceEnergy"),
  // Illuminance
  Illuminance: Qudt.quantityKindFromLocalnameRequired("Illuminance"),
  // Kinematic Viscosity
  KinematicViscosity:
    Qudt.quantityKindFromLocalnameRequired("KinematicViscosity"),
  // Density In Combustion Chamber
  DensityInCombustionChamber: Qudt.quantityKindFromLocalnameRequired(
    "DensityInCombustionChamber"
  ),
  // Particle Fluence
  ParticleFluence: Qudt.quantityKindFromLocalnameRequired("ParticleFluence"),
  // Acceptor Density
  AcceptorDensity: Qudt.quantityKindFromLocalnameRequired("AcceptorDensity"),
  // Particle Position Vector
  ParticlePositionVector: Qudt.quantityKindFromLocalnameRequired(
    "ParticlePositionVector"
  ),
  // Mean Energy Imparted
  MeanEnergyImparted:
    Qudt.quantityKindFromLocalnameRequired("MeanEnergyImparted"),
  // Neutron Yield per Absorption
  NeutronYieldPerAbsorption: Qudt.quantityKindFromLocalnameRequired(
    "NeutronYieldPerAbsorption"
  ),
  // Mass Flow Rate
  MassFlowRate: Qudt.quantityKindFromLocalnameRequired("MassFlowRate"),
  // Mechanical Energy
  MechanicalEnergy: Qudt.quantityKindFromLocalnameRequired("MechanicalEnergy"),
  // Viscosity
  Viscosity: Qudt.quantityKindFromLocalnameRequired("Viscosity"),
  // Radiant Intensity
  RadiantIntensity: Qudt.quantityKindFromLocalnameRequired("RadiantIntensity"),
  // Angular Cross-section
  AngularCrossSection: Qudt.quantityKindFromLocalnameRequired(
    "AngularCrossSection"
  ),
  // Beta Disintegration Energy
  BetaDisintegrationEnergy: Qudt.quantityKindFromLocalnameRequired(
    "BetaDisintegrationEnergy"
  ),
  // Radiant Exposure
  RadiantExposure: Qudt.quantityKindFromLocalnameRequired("RadiantExposure"),
  // Inert Mass
  INERT__MASS: Qudt.quantityKindFromLocalnameRequired("INERT-MASS"),
  // Exhaust Gas Mean Molecular Weight
  ExhaustGasMeanMolecularWeight: Qudt.quantityKindFromLocalnameRequired(
    "ExhaustGasMeanMolecularWeight"
  ),
  // Molar Absorption Coefficient
  MolarAbsorptionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "MolarAbsorptionCoefficient"
  ),
  // Mass Amount of Substance Temperature
  MassAmountOfSubstanceTemperature: Qudt.quantityKindFromLocalnameRequired(
    "MassAmountOfSubstanceTemperature"
  ),
  // Gibbs Energy
  GibbsEnergy: Qudt.quantityKindFromLocalnameRequired("GibbsEnergy"),
  // Cartesian Coordinates
  CartesianCoordinates: Qudt.quantityKindFromLocalnameRequired(
    "CartesianCoordinates"
  ),
  // Moment of Inertia
  MomentOfInertia: Qudt.quantityKindFromLocalnameRequired("MomentOfInertia"),
  // Mass per Electric Charge
  MassPerElectricCharge: Qudt.quantityKindFromLocalnameRequired(
    "MassPerElectricCharge"
  ),
  // Resistance Percentage
  ResistancePercentage: Qudt.quantityKindFromLocalnameRequired(
    "ResistancePercentage"
  ),
  // Propellant Burn Rate
  PropellantBurnRate:
    Qudt.quantityKindFromLocalnameRequired("PropellantBurnRate"),
  // Order of Reflection
  OrderOfReflection:
    Qudt.quantityKindFromLocalnameRequired("OrderOfReflection"),
  // Absorbed Dose
  AbsorbedDose: Qudt.quantityKindFromLocalnameRequired("AbsorbedDose"),
  // Inductance
  Inductance: Qudt.quantityKindFromLocalnameRequired("Inductance"),
  // Radiant Energy Density
  RadiantEnergyDensity: Qudt.quantityKindFromLocalnameRequired(
    "RadiantEnergyDensity"
  ),
  // Length Energy
  LengthEnergy: Qudt.quantityKindFromLocalnameRequired("LengthEnergy"),
  // Capacity
  Capacity: Qudt.quantityKindFromLocalnameRequired("Capacity"),
  // Ion Transport Number
  IonTransportNumber:
    Qudt.quantityKindFromLocalnameRequired("IonTransportNumber"),
  // Kerma
  Kerma: Qudt.quantityKindFromLocalnameRequired("Kerma"),
  // Migration Area
  MigrationArea: Qudt.quantityKindFromLocalnameRequired("MigrationArea"),
  // Liquid Volume
  LiquidVolume: Qudt.quantityKindFromLocalnameRequired("LiquidVolume"),
  // Initial Vehicle Mass
  InitialVehicleMass:
    Qudt.quantityKindFromLocalnameRequired("InitialVehicleMass"),
  // Atmospheric Hydroxylation Rate
  AtmosphericHydroxylationRate: Qudt.quantityKindFromLocalnameRequired(
    "AtmosphericHydroxylationRate"
  ),
  // Web Time
  WebTime: Qudt.quantityKindFromLocalnameRequired("WebTime"),
  // Generalized Coordinate
  GeneralizedCoordinate: Qudt.quantityKindFromLocalnameRequired(
    "GeneralizedCoordinate"
  ),
  // Heat Flow Rate per Unit Area
  HeatFlowRatePerUnitArea: Qudt.quantityKindFromLocalnameRequired(
    "HeatFlowRatePerUnitArea"
  ),
  // Fermi Temperature
  FermiTemperature: Qudt.quantityKindFromLocalnameRequired("FermiTemperature"),
  // Thermal Expansion Coefficient
  ThermalExpansionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "ThermalExpansionCoefficient"
  ),
  // Entropy
  Entropy: Qudt.quantityKindFromLocalnameRequired("Entropy"),
  // Energy Per Area Electric Charge
  EnergyPerAreaElectricCharge: Qudt.quantityKindFromLocalnameRequired(
    "EnergyPerAreaElectricCharge"
  ),
  // Hamilton Function
  HamiltonFunction: Qudt.quantityKindFromLocalnameRequired("HamiltonFunction"),
  // Atmospheric Pressure
  AtmosphericPressure: Qudt.quantityKindFromLocalnameRequired(
    "AtmosphericPressure"
  ),
  // Temperature Gradient
  TemperatureGradient: Qudt.quantityKindFromLocalnameRequired(
    "TemperatureGradient"
  ),
  // Concentration
  Concentration: Qudt.quantityKindFromLocalnameRequired("Concentration"),
  // Time Temperature
  TimeTemperature: Qudt.quantityKindFromLocalnameRequired("TimeTemperature"),
  // Signal Detection Threshold
  SignalDetectionThreshold: Qudt.quantityKindFromLocalnameRequired(
    "SignalDetectionThreshold"
  ),
  // Flächenlast
  PlanarForce: Qudt.quantityKindFromLocalnameRequired("PlanarForce"),
  // Linear Strain
  LinearStrain: Qudt.quantityKindFromLocalnameRequired("LinearStrain"),
  // Inverse Length
  InverseLength: Qudt.quantityKindFromLocalnameRequired("InverseLength"),
  // Linear Compressibility
  LinearCompressibility: Qudt.quantityKindFromLocalnameRequired(
    "LinearCompressibility"
  ),
  // Pressure Ratio
  PressureRatio: Qudt.quantityKindFromLocalnameRequired("PressureRatio"),
  // Elliptical Orbit Apogee Velocity
  EllipticalOrbitApogeeVelocity: Qudt.quantityKindFromLocalnameRequired(
    "EllipticalOrbitApogeeVelocity"
  ),
  // Mass Fraction of Dry Matter
  MassFractionOfDryMatter: Qudt.quantityKindFromLocalnameRequired(
    "MassFractionOfDryMatter"
  ),
  // Curvature
  Curvature: Qudt.quantityKindFromLocalnameRequired("Curvature"),
  // Modulus of Linear Subgrade Reaction
  ModulusOfLinearSubgradeReaction: Qudt.quantityKindFromLocalnameRequired(
    "ModulusOfLinearSubgradeReaction"
  ),
  // Over-range distance
  OverRangeDistance:
    Qudt.quantityKindFromLocalnameRequired("OverRangeDistance"),
  // Landau-Ginzburg Number
  Landau__GinzburgNumber: Qudt.quantityKindFromLocalnameRequired(
    "Landau-GinzburgNumber"
  ),
  // Short-Range Order Parameter
  Short__RangeOrderParameter: Qudt.quantityKindFromLocalnameRequired(
    "Short-RangeOrderParameter"
  ),
  // Displacement Vector of Ion
  DisplacementVectorOfIon: Qudt.quantityKindFromLocalnameRequired(
    "DisplacementVectorOfIon"
  ),
  // Upper Critical Magnetic Flux Density
  UpperCriticalMagneticFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "UpperCriticalMagneticFluxDensity"
  ),
  // Energy per temperature
  EnergyPerTemperature: Qudt.quantityKindFromLocalnameRequired(
    "EnergyPerTemperature"
  ),
  // Length Percentage
  LengthPercentage: Qudt.quantityKindFromLocalnameRequired("LengthPercentage"),
  // Fundamental Lattice vector
  FundamentalLatticeVector: Qudt.quantityKindFromLocalnameRequired(
    "FundamentalLatticeVector"
  ),
  // Contract End Item (CEI) Specification Mass.
  CONTRACT__END__ITEM__SPECIFICATION__MASS:
    Qudt.quantityKindFromLocalnameRequired(
      "CONTRACT-END-ITEM-SPECIFICATION-MASS"
    ),
  // Reaction Energy
  ReactionEnergy: Qudt.quantityKindFromLocalnameRequired("ReactionEnergy"),
  // Neutron Diffusion Length
  NeutronDiffusionLength: Qudt.quantityKindFromLocalnameRequired(
    "NeutronDiffusionLength"
  ),
  // Vertical Velocity
  VerticalVelocity: Qudt.quantityKindFromLocalnameRequired("VerticalVelocity"),
  // Enthalpy
  Enthalpy: Qudt.quantityKindFromLocalnameRequired("Enthalpy"),
  // Area Time
  AreaTime: Qudt.quantityKindFromLocalnameRequired("AreaTime"),
  // Diffusion Coefficient
  DiffusionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "DiffusionCoefficient"
  ),
  // Conductive Heat Transfer Rate
  ConductiveHeatTransferRate: Qudt.quantityKindFromLocalnameRequired(
    "ConductiveHeatTransferRate"
  ),
  // Characteristic Velocity
  CharacteristicVelocity: Qudt.quantityKindFromLocalnameRequired(
    "CharacteristicVelocity"
  ),
  // Molar Attenuation Coefficient
  MolarAttenuationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "MolarAttenuationCoefficient"
  ),
  // Nominal Ascent Propellant Mass
  NOMINAL__ASCENT__PROPELLANT__MASS: Qudt.quantityKindFromLocalnameRequired(
    "NOMINAL-ASCENT-PROPELLANT-MASS"
  ),
  // Atomic Attenuation Coefficient
  AtomicAttenuationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "AtomicAttenuationCoefficient"
  ),
  // Recombination Coefficient
  RecombinationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "RecombinationCoefficient"
  ),
  // First Stage Mass Ratio
  FirstStageMassRatio: Qudt.quantityKindFromLocalnameRequired(
    "FirstStageMassRatio"
  ),
  // Molar Refractivity
  MolarRefractivity:
    Qudt.quantityKindFromLocalnameRequired("MolarRefractivity"),
  // Area
  Area: Qudt.quantityKindFromLocalnameRequired("Area"),
  // Magnetic Area Moment
  MagneticAreaMoment:
    Qudt.quantityKindFromLocalnameRequired("MagneticAreaMoment"),
  // Buckling Factor
  BucklingFactor: Qudt.quantityKindFromLocalnameRequired("BucklingFactor"),
  // Mass Ratio of Water Vapour to Dry Gas
  MassRatioOfWaterVapourToDryGas: Qudt.quantityKindFromLocalnameRequired(
    "MassRatioOfWaterVapourToDryGas"
  ),
  // Mass Of Solid Booster
  MassOfSolidBooster:
    Qudt.quantityKindFromLocalnameRequired("MassOfSolidBooster"),
  // Luminous Flux
  LuminousFlux: Qudt.quantityKindFromLocalnameRequired("LuminousFlux"),
  // Shear Stress
  ShearStress: Qudt.quantityKindFromLocalnameRequired("ShearStress"),
  // Lift Coefficient
  LiftCoefficient: Qudt.quantityKindFromLocalnameRequired("LiftCoefficient"),
  // Gene Family Abundance
  GeneFamilyAbundance: Qudt.quantityKindFromLocalnameRequired(
    "GeneFamilyAbundance"
  ),
  // Relative Humidity
  RelativeHumidity: Qudt.quantityKindFromLocalnameRequired("RelativeHumidity"),
  // Final Or Current Vehicle Mass
  FinalOrCurrentVehicleMass: Qudt.quantityKindFromLocalnameRequired(
    "FinalOrCurrentVehicleMass"
  ),
  // Payload Ratio
  PayloadRatio: Qudt.quantityKindFromLocalnameRequired("PayloadRatio"),
  // Force Magnitude
  ForceMagnitude: Qudt.quantityKindFromLocalnameRequired("ForceMagnitude"),
  // Electric Charge
  ElectricCharge: Qudt.quantityKindFromLocalnameRequired("ElectricCharge"),
  // Exposure
  Exposure: Qudt.quantityKindFromLocalnameRequired("Exposure"),
  // Chromaticity
  Chromaticity: Qudt.quantityKindFromLocalnameRequired("Chromaticity"),
  // Angular Momentum
  AngularMomentum: Qudt.quantityKindFromLocalnameRequired("AngularMomentum"),
  // Reactor Time Constant
  ReactorTimeConstant: Qudt.quantityKindFromLocalnameRequired(
    "ReactorTimeConstant"
  ),
  // Lethargy
  Lethargy: Qudt.quantityKindFromLocalnameRequired("Lethargy"),
  // Total Angular Momentum
  TotalAngularMomentum: Qudt.quantityKindFromLocalnameRequired(
    "TotalAngularMomentum"
  ),
  // Total Ionization
  TotalIonization: Qudt.quantityKindFromLocalnameRequired("TotalIonization"),
  // Luminous Exposure
  LuminousExposure: Qudt.quantityKindFromLocalnameRequired("LuminousExposure"),
  // Molar Heat Capacity
  MolarHeatCapacity:
    Qudt.quantityKindFromLocalnameRequired("MolarHeatCapacity"),
  // Mass Growth Allowance
  MASS__GROWTH__ALLOWANCE: Qudt.quantityKindFromLocalnameRequired(
    "MASS-GROWTH-ALLOWANCE"
  ),
  // Average Head End Pressure
  AverageHeadEndPressure: Qudt.quantityKindFromLocalnameRequired(
    "AverageHeadEndPressure"
  ),
  // Altitude
  Altitude: Qudt.quantityKindFromLocalnameRequired("Altitude"),
  // Displacement
  Displacement: Qudt.quantityKindFromLocalnameRequired("Displacement"),
  // Thermodynamic Critical Magnetic Flux Density
  ThermodynamicCriticalMagneticFluxDensity:
    Qudt.quantityKindFromLocalnameRequired(
      "ThermodynamicCriticalMagneticFluxDensity"
    ),
  // Dry Mass
  DRY__MASS: Qudt.quantityKindFromLocalnameRequired("DRY-MASS"),
  // Sound pressure
  SoundPressure: Qudt.quantityKindFromLocalnameRequired("SoundPressure"),
  // Compressibility Factor
  CompressibilityFactor: Qudt.quantityKindFromLocalnameRequired(
    "CompressibilityFactor"
  ),
  // Power per Area Angle
  PowerPerAreaAngle:
    Qudt.quantityKindFromLocalnameRequired("PowerPerAreaAngle"),
  // Heart Rate
  HeartRate: Qudt.quantityKindFromLocalnameRequired("HeartRate"),
  // Turbidity
  Turbidity: Qudt.quantityKindFromLocalnameRequired("Turbidity"),
  // Heat Flow Rate
  HeatFlowRate: Qudt.quantityKindFromLocalnameRequired("HeatFlowRate"),
  // Amount of Substance per Unit Mass
  AmountOfSubstancePerUnitMass: Qudt.quantityKindFromLocalnameRequired(
    "AmountOfSubstancePerUnitMass"
  ),
  // Shear Modulus
  ShearModulus: Qudt.quantityKindFromLocalnameRequired("ShearModulus"),
  // Acceleration
  Acceleration: Qudt.quantityKindFromLocalnameRequired("Acceleration"),
  // Density
  Density: Qudt.quantityKindFromLocalnameRequired("Density"),
  // Dissipance
  Dissipance: Qudt.quantityKindFromLocalnameRequired("Dissipance"),
  // Particle Source Density
  ParticleSourceDensity: Qudt.quantityKindFromLocalnameRequired(
    "ParticleSourceDensity"
  ),
  // Dynamic Pressure
  DynamicPressure: Qudt.quantityKindFromLocalnameRequired("DynamicPressure"),
  // Resistance
  Resistance: Qudt.quantityKindFromLocalnameRequired("Resistance"),
  // Mass Energy Transfer Coefficient
  MassEnergyTransferCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "MassEnergyTransferCoefficient"
  ),
  // Biodegredation Half Life
  BiodegredationHalfLife: Qudt.quantityKindFromLocalnameRequired(
    "BiodegredationHalfLife"
  ),
  // Volume Flow Rate
  VolumeFlowRate: Qudt.quantityKindFromLocalnameRequired("VolumeFlowRate"),
  // Linear Velocity
  LinearVelocity: Qudt.quantityKindFromLocalnameRequired("LinearVelocity"),
  // Center of Gravity in the Z axis
  CenterOfGravity_Z:
    Qudt.quantityKindFromLocalnameRequired("CenterOfGravity_Z"),
  // Degree of Dissociation
  DegreeOfDissociation: Qudt.quantityKindFromLocalnameRequired(
    "DegreeOfDissociation"
  ),
  // Length Temperature
  LengthTemperature:
    Qudt.quantityKindFromLocalnameRequired("LengthTemperature"),
  // Length Force
  LengthByForce: Qudt.quantityKindFromLocalnameRequired("LengthByForce"),
  // Distance
  Distance: Qudt.quantityKindFromLocalnameRequired("Distance"),
  // Thermodynamic Energy
  ThermodynamicEnergy: Qudt.quantityKindFromLocalnameRequired(
    "ThermodynamicEnergy"
  ),
  // Signal Strength
  SignalStrength: Qudt.quantityKindFromLocalnameRequired("SignalStrength"),
  // Internal Energy
  EnergyInternal: Qudt.quantityKindFromLocalnameRequired("EnergyInternal"),
  // Cross-sectional Area
  CrossSectionalArea:
    Qudt.quantityKindFromLocalnameRequired("CrossSectionalArea"),
  // Nozzle Walls Thrust Reaction
  NozzleWallsThrustReaction: Qudt.quantityKindFromLocalnameRequired(
    "NozzleWallsThrustReaction"
  ),
  // Fission Core Radius To Height Ratio
  FissionCoreRadiusToHeightRatio: Qudt.quantityKindFromLocalnameRequired(
    "FissionCoreRadiusToHeightRatio"
  ),
  // Magnetic Reluctivity
  MagneticReluctivity: Qudt.quantityKindFromLocalnameRequired(
    "MagneticReluctivity"
  ),
  // Max Sea Level Thrust
  MaxSeaLevelThrust:
    Qudt.quantityKindFromLocalnameRequired("MaxSeaLevelThrust"),
  // Surface Tension
  SurfaceTension: Qudt.quantityKindFromLocalnameRequired("SurfaceTension"),
  // Electric Potential Difference
  ElectricPotentialDifference: Qudt.quantityKindFromLocalnameRequired(
    "ElectricPotentialDifference"
  ),
  // Relaxation TIme
  RelaxationTIme: Qudt.quantityKindFromLocalnameRequired("RelaxationTIme"),
  // Electric Current per Angle
  ElectricCurrentPerAngle: Qudt.quantityKindFromLocalnameRequired(
    "ElectricCurrentPerAngle"
  ),
  // Voltage Percentage
  VoltagePercentage:
    Qudt.quantityKindFromLocalnameRequired("VoltagePercentage"),
  // Systolic Blood Pressure
  SystolicBloodPressure: Qudt.quantityKindFromLocalnameRequired(
    "SystolicBloodPressure"
  ),
  // Angular Distance
  AngularDistance: Qudt.quantityKindFromLocalnameRequired("AngularDistance"),
  // Canonical Partition Function
  CanonicalPartitionFunction: Qudt.quantityKindFromLocalnameRequired(
    "CanonicalPartitionFunction"
  ),
  // Magnetic Field Strength
  MagneticFieldStrength_H: Qudt.quantityKindFromLocalnameRequired(
    "MagneticFieldStrength_H"
  ),
  // Sound reduction index
  SoundReductionIndex: Qudt.quantityKindFromLocalnameRequired(
    "SoundReductionIndex"
  ),
  // Mass Delivered
  MASS__DELIVERED: Qudt.quantityKindFromLocalnameRequired("MASS-DELIVERED"),
  // Ambient Pressure
  AmbientPressure: Qudt.quantityKindFromLocalnameRequired("AmbientPressure"),
  // Spectral Radiant Energy Density
  SpectralRadiantEnergyDensity: Qudt.quantityKindFromLocalnameRequired(
    "SpectralRadiantEnergyDensity"
  ),
  // API Gravity
  Gravity_API: Qudt.quantityKindFromLocalnameRequired("Gravity_API"),
  // Thickness
  Thickness: Qudt.quantityKindFromLocalnameRequired("Thickness"),
  // Average Vacuum Thrust
  AverageVacuumThrust: Qudt.quantityKindFromLocalnameRequired(
    "AverageVacuumThrust"
  ),
  // Blood Glucose Level
  BloodGlucoseLevel:
    Qudt.quantityKindFromLocalnameRequired("BloodGlucoseLevel"),
  // Specific Heat Capacity at Saturation
  SpecificHeatCapacityAtSaturation: Qudt.quantityKindFromLocalnameRequired(
    "SpecificHeatCapacityAtSaturation"
  ),
  // Gruneisen Parameter
  GruneisenParameter:
    Qudt.quantityKindFromLocalnameRequired("GruneisenParameter"),
  // Linked Flux
  LinkedFlux: Qudt.quantityKindFromLocalnameRequired("LinkedFlux"),
  // Energy per Area
  EnergyPerArea: Qudt.quantityKindFromLocalnameRequired("EnergyPerArea"),
  // Orbital Radial Distance
  OrbitalRadialDistance: Qudt.quantityKindFromLocalnameRequired(
    "OrbitalRadialDistance"
  ),
  // Electric Current
  ElectricCurrent: Qudt.quantityKindFromLocalnameRequired("ElectricCurrent"),
  // Photon Radiance
  PhotonRadiance: Qudt.quantityKindFromLocalnameRequired("PhotonRadiance"),
  // Hole Density
  HoleDensity: Qudt.quantityKindFromLocalnameRequired("HoleDensity"),
  // Voltage
  Voltage: Qudt.quantityKindFromLocalnameRequired("Voltage"),
  // Characteristic Acoustic Impedance
  CharacteristicAcousticImpedance: Qudt.quantityKindFromLocalnameRequired(
    "CharacteristicAcousticImpedance"
  ),
  // Thermal Diffusivity
  ThermalDiffusivity:
    Qudt.quantityKindFromLocalnameRequired("ThermalDiffusivity"),
  // Sound exposure
  SoundExposure: Qudt.quantityKindFromLocalnameRequired("SoundExposure"),
  // Magnetization Field
  MagnetizationField:
    Qudt.quantityKindFromLocalnameRequired("MagnetizationField"),
  // Radiant Fluence Rate
  RadiantFluenceRate:
    Qudt.quantityKindFromLocalnameRequired("RadiantFluenceRate"),
  // Mole Fraction
  MoleFraction: Qudt.quantityKindFromLocalnameRequired("MoleFraction"),
  // Torque per Angle
  TorquePerAngle: Qudt.quantityKindFromLocalnameRequired("TorquePerAngle"),
  // Ionic Charge
  IonicCharge: Qudt.quantityKindFromLocalnameRequired("IonicCharge"),
  // Thrust Coefficient
  ThrustCoefficient:
    Qudt.quantityKindFromLocalnameRequired("ThrustCoefficient"),
  // Half-Value Thickness
  Half__ValueThickness: Qudt.quantityKindFromLocalnameRequired(
    "Half-ValueThickness"
  ),
  // Work Function
  WorkFunction: Qudt.quantityKindFromLocalnameRequired("WorkFunction"),
  // Slowing-Down Density
  Slowing__DownDensity: Qudt.quantityKindFromLocalnameRequired(
    "Slowing-DownDensity"
  ),
  // First Moment of Area
  FirstMomentOfArea:
    Qudt.quantityKindFromLocalnameRequired("FirstMomentOfArea"),
  // Reactive Power
  ReactivePower: Qudt.quantityKindFromLocalnameRequired("ReactivePower"),
  // Dynamic Friction
  DynamicFriction: Qudt.quantityKindFromLocalnameRequired("DynamicFriction"),
  // Length Mass
  LengthMass: Qudt.quantityKindFromLocalnameRequired("LengthMass"),
  // Exhaust Stream Power
  ExhaustStreamPower:
    Qudt.quantityKindFromLocalnameRequired("ExhaustStreamPower"),
  // Absorbed Dose Rate
  AbsorbedDoseRate: Qudt.quantityKindFromLocalnameRequired("AbsorbedDoseRate"),
  // Radiance Factor
  RadianceFactor: Qudt.quantityKindFromLocalnameRequired("RadianceFactor"),
  // Boiling Point Temperature
  BoilingPoint: Qudt.quantityKindFromLocalnameRequired("BoilingPoint"),
  // Total Mass Stopping Power
  TotalMassStoppingPower: Qudt.quantityKindFromLocalnameRequired(
    "TotalMassStoppingPower"
  ),
  // Angle of Optical Rotation
  AngleOfOpticalRotation: Qudt.quantityKindFromLocalnameRequired(
    "AngleOfOpticalRotation"
  ),
  // Mass Fraction
  MassFraction: Qudt.quantityKindFromLocalnameRequired("MassFraction"),
  // Inverse Magnetic Flux
  InverseMagneticFlux: Qudt.quantityKindFromLocalnameRequired(
    "InverseMagneticFlux"
  ),
  // Mass Concentration of Water Vapour
  MassConcentrationOfWaterVapour: Qudt.quantityKindFromLocalnameRequired(
    "MassConcentrationOfWaterVapour"
  ),
  // Neutron Number
  NeutronNumber: Qudt.quantityKindFromLocalnameRequired("NeutronNumber"),
  // Width
  Width: Qudt.quantityKindFromLocalnameRequired("Width"),
  // Linear Absorption Coefficient
  LinearAbsorptionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "LinearAbsorptionCoefficient"
  ),
  // Sound exposure level
  SoundExposureLevel:
    Qudt.quantityKindFromLocalnameRequired("SoundExposureLevel"),
  // Long-Range Order Parameter
  Long__RangeOrderParameter: Qudt.quantityKindFromLocalnameRequired(
    "Long-RangeOrderParameter"
  ),
  // Force per Angle
  ForcePerAngle: Qudt.quantityKindFromLocalnameRequired("ForcePerAngle"),
  // Gyromagnetic Ratio
  GyromagneticRatio:
    Qudt.quantityKindFromLocalnameRequired("GyromagneticRatio"),
  // Fission Multiplication Factor
  FissionMultiplicationFactor: Qudt.quantityKindFromLocalnameRequired(
    "FissionMultiplicationFactor"
  ),
  // Debye Temperature
  DebyeTemperature: Qudt.quantityKindFromLocalnameRequired("DebyeTemperature"),
  // Alpha Disintegration Energy
  AlphaDisintegrationEnergy: Qudt.quantityKindFromLocalnameRequired(
    "AlphaDisintegrationEnergy"
  ),
  // Payload Mass
  PayloadMass: Qudt.quantityKindFromLocalnameRequired("PayloadMass"),
  // Mass Temperature
  MassTemperature: Qudt.quantityKindFromLocalnameRequired("MassTemperature"),
  // Time averaged sound intensity
  TimeAveragedSoundIntensity: Qudt.quantityKindFromLocalnameRequired(
    "TimeAveragedSoundIntensity"
  ),
  // Polar moment of inertia
  PolarMomentOfInertia: Qudt.quantityKindFromLocalnameRequired(
    "PolarMomentOfInertia"
  ),
  // Currency
  Currency: Qudt.quantityKindFromLocalnameRequired("Currency"),
  // Reflectance Factor
  ReflectanceFactor:
    Qudt.quantityKindFromLocalnameRequired("ReflectanceFactor"),
  // Specific Activity
  SpecificActivity: Qudt.quantityKindFromLocalnameRequired("SpecificActivity"),
  // Active Energy
  ActiveEnergy: Qudt.quantityKindFromLocalnameRequired("ActiveEnergy"),
  // Gravitational Attraction
  GravitationalAttraction: Qudt.quantityKindFromLocalnameRequired(
    "GravitationalAttraction"
  ),
  // Angular Impulse
  AngularImpulse: Qudt.quantityKindFromLocalnameRequired("AngularImpulse"),
  // Spatial Summation Function
  SpatialSummationFunction: Qudt.quantityKindFromLocalnameRequired(
    "SpatialSummationFunction"
  ),
  // Vapor Permeability
  VaporPermeability:
    Qudt.quantityKindFromLocalnameRequired("VaporPermeability"),
  // Bragg Angle
  BraggAngle: Qudt.quantityKindFromLocalnameRequired("BraggAngle"),
  // Speed of sound
  SpeedOfSound: Qudt.quantityKindFromLocalnameRequired("SpeedOfSound"),
  // Time Squared
  TimeSquared: Qudt.quantityKindFromLocalnameRequired("TimeSquared"),
  // Lorenz Coefficient
  LorenzCoefficient:
    Qudt.quantityKindFromLocalnameRequired("LorenzCoefficient"),
  // Power Area per Solid Angle
  PowerAreaPerSolidAngle: Qudt.quantityKindFromLocalnameRequired(
    "PowerAreaPerSolidAngle"
  ),
  // Electric Field Strength
  ElectricFieldStrength: Qudt.quantityKindFromLocalnameRequired(
    "ElectricFieldStrength"
  ),
  // Angle Of Attack
  AngleOfAttack: Qudt.quantityKindFromLocalnameRequired("AngleOfAttack"),
  // Product of Inertia in the X axis
  PRODUCT__OF__INERTIA_X: Qudt.quantityKindFromLocalnameRequired(
    "PRODUCT-OF-INERTIA_X"
  ),
  // Pressure
  Pressure: Qudt.quantityKindFromLocalnameRequired("Pressure"),
  // Madelung Constant
  MadelungConstant: Qudt.quantityKindFromLocalnameRequired("MadelungConstant"),
  // Thermal Conductance
  ThermalConductance:
    Qudt.quantityKindFromLocalnameRequired("ThermalConductance"),
  // Visible Radiant Energy
  VisibleRadiantEnergy: Qudt.quantityKindFromLocalnameRequired(
    "VisibleRadiantEnergy"
  ),
  // Standard Chemical Potential
  StandardChemicalPotential: Qudt.quantityKindFromLocalnameRequired(
    "StandardChemicalPotential"
  ),
  // Orbital Angular Momentum Quantum Number
  OrbitalAngularMomentumQuantumNumber: Qudt.quantityKindFromLocalnameRequired(
    "OrbitalAngularMomentumQuantumNumber"
  ),
  // Heat Capacity
  HeatCapacity: Qudt.quantityKindFromLocalnameRequired("HeatCapacity"),
  // Mass
  Mass: Qudt.quantityKindFromLocalnameRequired("Mass"),
  // Second Axial Moment of Area
  SecondAxialMomentOfArea: Qudt.quantityKindFromLocalnameRequired(
    "SecondAxialMomentOfArea"
  ),
  // Temperature Rate of Change
  TemperatureRateOfChange: Qudt.quantityKindFromLocalnameRequired(
    "TemperatureRateOfChange"
  ),
  // Inverse amount of substance
  InverseAmountOfSubstance: Qudt.quantityKindFromLocalnameRequired(
    "InverseAmountOfSubstance"
  ),
  // Thermal Utilization Factor
  ThermalUtilizationFactor: Qudt.quantityKindFromLocalnameRequired(
    "ThermalUtilizationFactor"
  ),
  // Electron Radius
  ElectronRadius: Qudt.quantityKindFromLocalnameRequired("ElectronRadius"),
  // Absorptance
  Absorptance: Qudt.quantityKindFromLocalnameRequired("Absorptance"),
  // Acidity
  Basicity: Qudt.quantityKindFromLocalnameRequired("Basicity"),
  // Solid Angle
  SolidAngle: Qudt.quantityKindFromLocalnameRequired("SolidAngle"),
  // Thermal Energy Length
  ThermalEnergyLength: Qudt.quantityKindFromLocalnameRequired(
    "ThermalEnergyLength"
  ),
  // Specific Helmholtz Energy
  SpecificHelmholtzEnergy: Qudt.quantityKindFromLocalnameRequired(
    "SpecificHelmholtzEnergy"
  ),
  // Active Power
  ActivePower: Qudt.quantityKindFromLocalnameRequired("ActivePower"),
  // Thermal Energy
  ThermalEnergy: Qudt.quantityKindFromLocalnameRequired("ThermalEnergy"),
  // Mutual Inductance
  MutualInductance: Qudt.quantityKindFromLocalnameRequired("MutualInductance"),
  // Displacement Current
  DisplacementCurrent: Qudt.quantityKindFromLocalnameRequired(
    "DisplacementCurrent"
  ),
  // Rest Mass
  RestMass: Qudt.quantityKindFromLocalnameRequired("RestMass"),
  // Circulation
  Circulation: Qudt.quantityKindFromLocalnameRequired("Circulation"),
  // Relative Atomic Mass
  RelativeAtomicMass:
    Qudt.quantityKindFromLocalnameRequired("RelativeAtomicMass"),
  // Mass Number
  MassNumber: Qudt.quantityKindFromLocalnameRequired("MassNumber"),
  // Relative Mass Excess
  RelativeMassExcess:
    Qudt.quantityKindFromLocalnameRequired("RelativeMassExcess"),
  // Fractional Mass (Stages 1 through 3)
  FractionallMass_Stages1__3: Qudt.quantityKindFromLocalnameRequired(
    "FractionallMass_Stages1-3"
  ),
  // Gap Energy
  GapEnergy: Qudt.quantityKindFromLocalnameRequired("GapEnergy"),
  // Head End Pressure
  HeadEndPressure: Qudt.quantityKindFromLocalnameRequired("HeadEndPressure"),
  // London Penetration Depth
  LondonPenetrationDepth: Qudt.quantityKindFromLocalnameRequired(
    "LondonPenetrationDepth"
  ),
  // Linear Attenuation Coefficient
  LinearAttenuationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "LinearAttenuationCoefficient"
  ),
  // Incidence Rate
  IncidenceRate: Qudt.quantityKindFromLocalnameRequired("IncidenceRate"),
  // Center of Gravity in the X axis
  CENTER__OF__GRAVITY_X: Qudt.quantityKindFromLocalnameRequired(
    "CENTER-OF-GRAVITY_X"
  ),
  // Amount of Substance
  AmountOfSubstance:
    Qudt.quantityKindFromLocalnameRequired("AmountOfSubstance"),
  // Helmholtz Energy
  HelmholtzEnergy: Qudt.quantityKindFromLocalnameRequired("HelmholtzEnergy"),
  // Equilibrium Position Vector of Ion
  EquilibriumPositionVectorOfIon: Qudt.quantityKindFromLocalnameRequired(
    "EquilibriumPositionVectorOfIon"
  ),
  // Inverse Time
  InverseTime: Qudt.quantityKindFromLocalnameRequired("InverseTime"),
  // Total Current
  TotalCurrent: Qudt.quantityKindFromLocalnameRequired("TotalCurrent"),
  // Equilibrium Constant
  EquilibriumConstant: Qudt.quantityKindFromLocalnameRequired(
    "EquilibriumConstant"
  ),
  // Bulk Modulus
  BulkModulus: Qudt.quantityKindFromLocalnameRequired("BulkModulus"),
  // Rotational Stiffness
  RotationalStiffness: Qudt.quantityKindFromLocalnameRequired(
    "RotationalStiffness"
  ),
  // Sound energy density
  SoundEnergyDensity:
    Qudt.quantityKindFromLocalnameRequired("SoundEnergyDensity"),
  // Linear Momentum
  LinearMomentum: Qudt.quantityKindFromLocalnameRequired("LinearMomentum"),
  // Multiplication Factor
  MultiplicationFactor: Qudt.quantityKindFromLocalnameRequired(
    "MultiplicationFactor"
  ),
  // Electric Charge Density
  ElectricChargeDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargeDensity"
  ),
  // Radiant Energy
  RadiantEnergy: Qudt.quantityKindFromLocalnameRequired("RadiantEnergy"),
  // Diffusion Coefficient for Fluence Rate
  DiffusionCoefficientForFluenceRate: Qudt.quantityKindFromLocalnameRequired(
    "DiffusionCoefficientForFluenceRate"
  ),
  // Electromotive Force
  ElectromotiveForce:
    Qudt.quantityKindFromLocalnameRequired("ElectromotiveForce"),
  // Dynamic Friction Coefficient
  DynamicFrictionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "DynamicFrictionCoefficient"
  ),
  // Length Molar Energy
  LengthMolarEnergy:
    Qudt.quantityKindFromLocalnameRequired("LengthMolarEnergy"),
  // Section Modulus
  SectionModulus: Qudt.quantityKindFromLocalnameRequired("SectionModulus"),
  // Warping Constant
  WarpingConstant: Qudt.quantityKindFromLocalnameRequired("WarpingConstant"),
  // Linear Energy Transfer
  LinearEnergyTransfer: Qudt.quantityKindFromLocalnameRequired(
    "LinearEnergyTransfer"
  ),
  // Stage Structure Mass
  StageStructuralMass: Qudt.quantityKindFromLocalnameRequired(
    "StageStructuralMass"
  ),
  // Volume
  CartesianVolume: Qudt.quantityKindFromLocalnameRequired("CartesianVolume"),
  // Phase Difference
  PhaseDifference: Qudt.quantityKindFromLocalnameRequired("PhaseDifference"),
  // Thermal Diffusion Factor
  ThermalDiffusionFactor: Qudt.quantityKindFromLocalnameRequired(
    "ThermalDiffusionFactor"
  ),
  // Dimensionless Ratio
  DimensionlessRatio:
    Qudt.quantityKindFromLocalnameRequired("DimensionlessRatio"),
  // Lattice Vector
  LatticeVector: Qudt.quantityKindFromLocalnameRequired("LatticeVector"),
  // PH
  PH: Qudt.quantityKindFromLocalnameRequired("PH"),
  // Specific Energy Imparted
  SpecificEnergyImparted: Qudt.quantityKindFromLocalnameRequired(
    "SpecificEnergyImparted"
  ),
  // Apparent Power
  ApparentPower: Qudt.quantityKindFromLocalnameRequired("ApparentPower"),
  // Partial Pressure
  PartialPressure: Qudt.quantityKindFromLocalnameRequired("PartialPressure"),
  // Heating Value
  HeatingValue: Qudt.quantityKindFromLocalnameRequired("HeatingValue"),
  // Molecular Concentration
  MolecularConcentration: Qudt.quantityKindFromLocalnameRequired(
    "MolecularConcentration"
  ),
  // Pressure Burning Rate Constant
  PressureBurningRateConstant: Qudt.quantityKindFromLocalnameRequired(
    "PressureBurningRateConstant"
  ),
  // Specific Entropy
  SpecificEntropy: Qudt.quantityKindFromLocalnameRequired("SpecificEntropy"),
  // Electrolytic Conductivity
  ElectrolyticConductivity: Qudt.quantityKindFromLocalnameRequired(
    "ElectrolyticConductivity"
  ),
  // Combined Non Evaporative Heat Transfer Coefficient
  EvaporativeHeatTransferCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "EvaporativeHeatTransferCoefficient"
  ),
  // Principal Quantum Number
  PrincipalQuantumNumber: Qudt.quantityKindFromLocalnameRequired(
    "PrincipalQuantumNumber"
  ),
  // Initial Nozzle Throat Diameter
  InitialNozzleThroatDiameter: Qudt.quantityKindFromLocalnameRequired(
    "InitialNozzleThroatDiameter"
  ),
  // Illuminance
  SphericalIlluminance: Qudt.quantityKindFromLocalnameRequired(
    "SphericalIlluminance"
  ),
  // Reactivity
  Reactivity: Qudt.quantityKindFromLocalnameRequired("Reactivity"),
  // Source Voltage Between Substances
  SourceVoltageBetweenSubstances: Qudt.quantityKindFromLocalnameRequired(
    "SourceVoltageBetweenSubstances"
  ),
  // Generalized Force
  GeneralizedMomentum: Qudt.quantityKindFromLocalnameRequired(
    "GeneralizedMomentum"
  ),
  // Generalized Velocity
  GeneralizedVelocity: Qudt.quantityKindFromLocalnameRequired(
    "GeneralizedVelocity"
  ),
  // Radiosity
  Radiosity: Qudt.quantityKindFromLocalnameRequired("Radiosity"),
  // Electron Density
  ElectronDensity: Qudt.quantityKindFromLocalnameRequired("ElectronDensity"),
  // Lagrange Function
  LagrangeFunction: Qudt.quantityKindFromLocalnameRequired("LagrangeFunction"),
  // Reactance
  Reactance: Qudt.quantityKindFromLocalnameRequired("Reactance"),
  // Incidence Proportion
  IncidenceProportion: Qudt.quantityKindFromLocalnameRequired(
    "IncidenceProportion"
  ),
  // Initial Expansion Ratio
  InitialExpansionRatio: Qudt.quantityKindFromLocalnameRequired(
    "InitialExpansionRatio"
  ),
  // Molar Conductivity
  MolarConductivity:
    Qudt.quantityKindFromLocalnameRequired("MolarConductivity"),
  // Sound intensity
  SoundIntensity: Qudt.quantityKindFromLocalnameRequired("SoundIntensity"),
  // Rocket Atmospheric Transverse Force
  RocketAtmosphericTransverseForce: Qudt.quantityKindFromLocalnameRequired(
    "RocketAtmosphericTransverseForce"
  ),
  // Dynamic Viscosity
  DynamicViscosity: Qudt.quantityKindFromLocalnameRequired("DynamicViscosity"),
  // Breadth
  Breadth: Qudt.quantityKindFromLocalnameRequired("Breadth"),
  // Carrier LifetIme
  CarrierLifetime: Qudt.quantityKindFromLocalnameRequired("CarrierLifetime"),
  // Length per Unit Electric Current
  LengthPerUnitElectricCurrent: Qudt.quantityKindFromLocalnameRequired(
    "LengthPerUnitElectricCurrent"
  ),
  // Delta u,v
  Duv: Qudt.quantityKindFromLocalnameRequired("Duv"),
  // Path Length
  PathLength: Qudt.quantityKindFromLocalnameRequired("PathLength"),
  // Equilibrium Constant on Concentration Basis
  EquilibriumConstantOnConcentrationBasis:
    Qudt.quantityKindFromLocalnameRequired(
      "EquilibriumConstantOnConcentrationBasis"
    ),
  // Temperature Amount of Substance
  TemperatureAmountOfSubstance: Qudt.quantityKindFromLocalnameRequired(
    "TemperatureAmountOfSubstance"
  ),
  // Area Thermal Expansion
  AreaThermalExpansion: Qudt.quantityKindFromLocalnameRequired(
    "AreaThermalExpansion"
  ),
  // Growing Degree Days (Cereals)
  GrowingDegreeDay_Cereal: Qudt.quantityKindFromLocalnameRequired(
    "GrowingDegreeDay_Cereal"
  ),
  // Static Friction Coefficient
  StaticFrictionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "StaticFrictionCoefficient"
  ),
  // Inverse Square Mass
  InverseSquareMass:
    Qudt.quantityKindFromLocalnameRequired("InverseSquareMass"),
  // Shannon Diversity Index
  ShannonDiversityIndex: Qudt.quantityKindFromLocalnameRequired(
    "ShannonDiversityIndex"
  ),
  // Relative Mass Defect
  RelativeMassDefect:
    Qudt.quantityKindFromLocalnameRequired("RelativeMassDefect"),
  // Burgers Vector
  BurgersVector: Qudt.quantityKindFromLocalnameRequired("BurgersVector"),
  // Maximum Operating Pressure
  MaximumOperatingPressure: Qudt.quantityKindFromLocalnameRequired(
    "MaximumOperatingPressure"
  ),
  // Volume
  Volume: Qudt.quantityKindFromLocalnameRequired("Volume"),
  // Octanol Air Partition Coefficient
  LogOctanolAirPartitionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "LogOctanolAirPartitionCoefficient"
  ),
  // Ionic Strength
  IonicStrength: Qudt.quantityKindFromLocalnameRequired("IonicStrength"),
  // Angle
  Angle: Qudt.quantityKindFromLocalnameRequired("Angle"),
  // Mass Amount of Substance
  MassAmountOfSubstance: Qudt.quantityKindFromLocalnameRequired(
    "MassAmountOfSubstance"
  ),
  // Radiant Fluence
  RadiantFluence: Qudt.quantityKindFromLocalnameRequired("RadiantFluence"),
  // Electric Field
  ElectricField: Qudt.quantityKindFromLocalnameRequired("ElectricField"),
  // Control Mass.
  CONTROL__MASS: Qudt.quantityKindFromLocalnameRequired("CONTROL-MASS"),
  // Angular Frequency
  AngularFrequency: Qudt.quantityKindFromLocalnameRequired("AngularFrequency"),
  // Pressure Burning Rate Index
  PressureBurningRateIndex: Qudt.quantityKindFromLocalnameRequired(
    "PressureBurningRateIndex"
  ),
  // Serum or Plasma Level
  SerumOrPlasmaLevel:
    Qudt.quantityKindFromLocalnameRequired("SerumOrPlasmaLevel"),
  // Fish Biotransformation Half Life
  FishBiotransformationHalfLife: Qudt.quantityKindFromLocalnameRequired(
    "FishBiotransformationHalfLife"
  ),
  // Total Pressure
  TotalPressure: Qudt.quantityKindFromLocalnameRequired("TotalPressure"),
  // Blood Glucose Level by Mass
  BloodGlucoseLevel_Mass: Qudt.quantityKindFromLocalnameRequired(
    "BloodGlucoseLevel_Mass"
  ),
  // Permeability
  ElectromagneticPermeability: Qudt.quantityKindFromLocalnameRequired(
    "ElectromagneticPermeability"
  ),
  // Fractional Mass (Stage 2)
  FractionalMass_Stage2: Qudt.quantityKindFromLocalnameRequired(
    "FractionalMass_Stage2"
  ),
  // Auxillary Magnetic Field
  AuxillaryMagneticField: Qudt.quantityKindFromLocalnameRequired(
    "AuxillaryMagneticField"
  ),
  // Acidity
  Acidity: Qudt.quantityKindFromLocalnameRequired("Acidity"),
  // Stress-Optic Coefficient
  StressOpticCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "StressOpticCoefficient"
  ),
  // Thermal Admittance
  ThermalAdmittance:
    Qudt.quantityKindFromLocalnameRequired("ThermalAdmittance"),
  // Modulus of Subgrade Reaction
  ModulusOfSubgradeReaction: Qudt.quantityKindFromLocalnameRequired(
    "ModulusOfSubgradeReaction"
  ),
  // Ionization Energy
  IonizationEnergy: Qudt.quantityKindFromLocalnameRequired("IonizationEnergy"),
  // Equilibrium Constant on Pressure Basis
  EquilibriumConstantOnPressureBasis: Qudt.quantityKindFromLocalnameRequired(
    "EquilibriumConstantOnPressureBasis"
  ),
  // Static pressure
  StaticPressure: Qudt.quantityKindFromLocalnameRequired("StaticPressure"),
  // Capacitance
  Capacitance: Qudt.quantityKindFromLocalnameRequired("Capacitance"),
  // Relative Mass Ratio of Vapour
  RelativeMassRatioOfVapour: Qudt.quantityKindFromLocalnameRequired(
    "RelativeMassRatioOfVapour"
  ),
  // Shear Strain
  ShearStrain: Qudt.quantityKindFromLocalnameRequired("ShearStrain"),
  // Molar Angular Momentum
  MolarAngularMomentum: Qudt.quantityKindFromLocalnameRequired(
    "MolarAngularMomentum"
  ),
  // Olfactory Threshold
  OlfactoryThreshold:
    Qudt.quantityKindFromLocalnameRequired("OlfactoryThreshold"),
  // Electric Charge Line Density
  ElectricChargeLineDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargeLineDensity"
  ),
  // Angular Reciprocal Lattice Vector
  AngularReciprocalLatticeVector: Qudt.quantityKindFromLocalnameRequired(
    "AngularReciprocalLatticeVector"
  ),
  // Exit Plane Cross-sectional Area
  ExitPlaneCrossSectionalArea: Qudt.quantityKindFromLocalnameRequired(
    "ExitPlaneCrossSectionalArea"
  ),
  // Surface Activity Density
  SurfaceActivityDensity: Qudt.quantityKindFromLocalnameRequired(
    "SurfaceActivityDensity"
  ),
  // Mortality Rate
  MortalityRate: Qudt.quantityKindFromLocalnameRequired("MortalityRate"),
  // Power Factor
  PowerFactor: Qudt.quantityKindFromLocalnameRequired("PowerFactor"),
  // Permeance
  Permeance: Qudt.quantityKindFromLocalnameRequired("Permeance"),
  // Linear Electric Current
  LinearElectricCurrent: Qudt.quantityKindFromLocalnameRequired(
    "LinearElectricCurrent"
  ),
  // Thermal Resistance
  ThermalResistance:
    Qudt.quantityKindFromLocalnameRequired("ThermalResistance"),
  // Max Operating Thrust
  MaxOperatingThrust:
    Qudt.quantityKindFromLocalnameRequired("MaxOperatingThrust"),
  // Decay Constant
  DecayConstant: Qudt.quantityKindFromLocalnameRequired("DecayConstant"),
  // Ventilation Rate per Floor Area
  VentilationRatePerFloorArea: Qudt.quantityKindFromLocalnameRequired(
    "VentilationRatePerFloorArea"
  ),
  // Fermi Energy
  FermiEnergy: Qudt.quantityKindFromLocalnameRequired("FermiEnergy"),
  // Specific Heats Ratio
  SpecificHeatsRatio:
    Qudt.quantityKindFromLocalnameRequired("SpecificHeatsRatio"),
  // Superconductor Energy Gap
  SuperconductorEnergyGap: Qudt.quantityKindFromLocalnameRequired(
    "SuperconductorEnergyGap"
  ),
  // Luminous Energy
  LuminousEnergy: Qudt.quantityKindFromLocalnameRequired("LuminousEnergy"),
  // Maximum Expected Operating Thrust
  MaxExpectedOperatingThrust: Qudt.quantityKindFromLocalnameRequired(
    "MaxExpectedOperatingThrust"
  ),
  // Flight Path Angle
  FlightPathAngle: Qudt.quantityKindFromLocalnameRequired("FlightPathAngle"),
  // Thermal Conductivity
  ThermalConductivity: Qudt.quantityKindFromLocalnameRequired(
    "ThermalConductivity"
  ),
  // Length Temperature Time
  LengthTemperatureTime: Qudt.quantityKindFromLocalnameRequired(
    "LengthTemperatureTime"
  ),
  // Osmotic Pressure
  OsmoticPressure: Qudt.quantityKindFromLocalnameRequired("OsmoticPressure"),
  // Spin Quantum Number
  SpinQuantumNumber:
    Qudt.quantityKindFromLocalnameRequired("SpinQuantumNumber"),
  // Larmor Angular Frequency
  LarmorAngularFrequency: Qudt.quantityKindFromLocalnameRequired(
    "LarmorAngularFrequency"
  ),
  // Magnetic flux per unit length
  MagneticFluxPerUnitLength: Qudt.quantityKindFromLocalnameRequired(
    "MagneticFluxPerUnitLength"
  ),
  // Specific heat capacity at constant volume
  SpecificHeatCapacityAtConstantVolume: Qudt.quantityKindFromLocalnameRequired(
    "SpecificHeatCapacityAtConstantVolume"
  ),
  // Modulus Of Admittance
  ModulusOfAdmittance: Qudt.quantityKindFromLocalnameRequired(
    "ModulusOfAdmittance"
  ),
  // Thrust
  Thrust: Qudt.quantityKindFromLocalnameRequired("Thrust"),
  // Electromagnetic Energy Density
  ElectromagneticEnergyDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectromagneticEnergyDensity"
  ),
  // RF-Power Level
  RF__Power: Qudt.quantityKindFromLocalnameRequired("RF-Power"),
  // Prevalence
  Prevalence: Qudt.quantityKindFromLocalnameRequired("Prevalence"),
  // Specific Enthalpy
  SpecificEnthalpy: Qudt.quantityKindFromLocalnameRequired("SpecificEnthalpy"),
  // Touch Thresholds
  TouchThresholds: Qudt.quantityKindFromLocalnameRequired("TouchThresholds"),
  // Macroscopic Cross-section
  MacroscopicCrossSection: Qudt.quantityKindFromLocalnameRequired(
    "MacroscopicCrossSection"
  ),
  // Specific Impulse
  SpecificImpulse: Qudt.quantityKindFromLocalnameRequired("SpecificImpulse"),
  // Debye-Waller Factor
  Debye__WallerFactor:
    Qudt.quantityKindFromLocalnameRequired("Debye-WallerFactor"),
  // Spin
  Spin: Qudt.quantityKindFromLocalnameRequired("Spin"),
  // Respiratory Rate
  RespiratoryRate: Qudt.quantityKindFromLocalnameRequired("RespiratoryRate"),
  // Electric charge per amount of substance
  ElectricChargePerAmountOfSubstance: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargePerAmountOfSubstance"
  ),
  // Ion Concentration
  IonConcentration: Qudt.quantityKindFromLocalnameRequired("IonConcentration"),
  // Group Speed of Sound
  GroupSpeedOfSound:
    Qudt.quantityKindFromLocalnameRequired("GroupSpeedOfSound"),
  // Molar Mass variation due to Pressure
  AmountOfSubstancePerUnitMassPressure: Qudt.quantityKindFromLocalnameRequired(
    "AmountOfSubstancePerUnitMassPressure"
  ),
  // Permeability Ratio
  PermeabilityRatio:
    Qudt.quantityKindFromLocalnameRequired("PermeabilityRatio"),
  // Action
  Action: Qudt.quantityKindFromLocalnameRequired("Action"),
  // Celsius temperature
  CelsiusTemperature:
    Qudt.quantityKindFromLocalnameRequired("CelsiusTemperature"),
  // Sound Particle Displacement
  SoundParticleDisplacement: Qudt.quantityKindFromLocalnameRequired(
    "SoundParticleDisplacement"
  ),
  // Electric Current per Unit Temperature
  ElectricCurrentPerUnitTemperature: Qudt.quantityKindFromLocalnameRequired(
    "ElectricCurrentPerUnitTemperature"
  ),
  // Specific Optical Rotatory Power
  SpecificOpticalRotatoryPower: Qudt.quantityKindFromLocalnameRequired(
    "SpecificOpticalRotatoryPower"
  ),
  // Electric Conductivity
  ElectricConductivity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricConductivity"
  ),
  // Maximum Beta-Particle Energy
  MaximumBeta__ParticleEnergy: Qudt.quantityKindFromLocalnameRequired(
    "MaximumBeta-ParticleEnergy"
  ),
  // Momentum
  Momentum: Qudt.quantityKindFromLocalnameRequired("Momentum"),
  // Video Frame Rate
  VideoFrameRate: Qudt.quantityKindFromLocalnameRequired("VideoFrameRate"),
  // Amount of Substance of Concentration of B
  AmountOfSubstanceConcentrationOfB: Qudt.quantityKindFromLocalnameRequired(
    "AmountOfSubstanceConcentrationOfB"
  ),
  // Luminous Flux per Area
  LuminousFluxPerArea: Qudt.quantityKindFromLocalnameRequired(
    "LuminousFluxPerArea"
  ),
  // Torque
  Torque: Qudt.quantityKindFromLocalnameRequired("Torque"),
  // Thrust To Mass Ratio
  ThrustToMassRatio:
    Qudt.quantityKindFromLocalnameRequired("ThrustToMassRatio"),
  // Radiance
  Radiance: Qudt.quantityKindFromLocalnameRequired("Radiance"),
  // Apogee Radius
  ApogeeRadius: Qudt.quantityKindFromLocalnameRequired("ApogeeRadius"),
  // Volumic Electromagnetic Energy
  VolumicElectromagneticEnergy: Qudt.quantityKindFromLocalnameRequired(
    "VolumicElectromagneticEnergy"
  ),
  // Instantaneous Power
  InstantaneousPower:
    Qudt.quantityKindFromLocalnameRequired("InstantaneousPower"),
  // Second Moment of Area
  SecondMomentOfArea:
    Qudt.quantityKindFromLocalnameRequired("SecondMomentOfArea"),
  // Dimensionless
  Dimensionless: Qudt.quantityKindFromLocalnameRequired("Dimensionless"),
  // Electric Displacement
  ElectricDisplacement: Qudt.quantityKindFromLocalnameRequired(
    "ElectricDisplacement"
  ),
  // Amount of Substance per Unit Volume
  AmountOfSubstancePerUnitVolume: Qudt.quantityKindFromLocalnameRequired(
    "AmountOfSubstancePerUnitVolume"
  ),
  // Electrical Power To Mass Ratio
  ElectricalPowerToMassRatio: Qudt.quantityKindFromLocalnameRequired(
    "ElectricalPowerToMassRatio"
  ),
  // Modulus of Elasticity
  ModulusOfElasticity: Qudt.quantityKindFromLocalnameRequired(
    "ModulusOfElasticity"
  ),
  // Chemical Potential
  ChemicalPotential:
    Qudt.quantityKindFromLocalnameRequired("ChemicalPotential"),
  // Mach Number
  MachNumber: Qudt.quantityKindFromLocalnameRequired("MachNumber"),
  // Permittivity
  Permittivity: Qudt.quantityKindFromLocalnameRequired("Permittivity"),
  // Refectance
  Refectance: Qudt.quantityKindFromLocalnameRequired("Refectance"),
  // Stochastic Process
  StochasticProcess:
    Qudt.quantityKindFromLocalnameRequired("StochasticProcess"),
  // Average Energy Loss per Elementary Charge Produced
  AverageEnergyLossPerElementaryChargeProduced:
    Qudt.quantityKindFromLocalnameRequired(
      "AverageEnergyLossPerElementaryChargeProduced"
    ),
  // Mean Free Path
  MeanFreePath: Qudt.quantityKindFromLocalnameRequired("MeanFreePath"),
  // Velocity
  Velocity: Qudt.quantityKindFromLocalnameRequired("Velocity"),
  // Magnetic Tension
  MagneticTension: Qudt.quantityKindFromLocalnameRequired("MagneticTension"),
  // Magnetic Susceptability
  MagneticSusceptability: Qudt.quantityKindFromLocalnameRequired(
    "MagneticSusceptability"
  ),
  // Inverse Pressure
  InversePressure: Qudt.quantityKindFromLocalnameRequired("InversePressure"),
  // Temperature per Magnetic Flux Density
  TemperaturePerMagneticFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "TemperaturePerMagneticFluxDensity"
  ),
  // Sound particle velocity
  SoundParticleVelocity: Qudt.quantityKindFromLocalnameRequired(
    "SoundParticleVelocity"
  ),
  // Fugacity
  Fugacity: Qudt.quantityKindFromLocalnameRequired("Fugacity"),
  // Elementary Charge
  ElementaryCharge: Qudt.quantityKindFromLocalnameRequired("ElementaryCharge"),
  // Non-Leakage Probability
  Non__LeakageProbability: Qudt.quantityKindFromLocalnameRequired(
    "Non-LeakageProbability"
  ),
  // Fission Fuel Utilization Factor
  FissionFuelUtilizationFactor: Qudt.quantityKindFromLocalnameRequired(
    "FissionFuelUtilizationFactor"
  ),
  // Magnetic Moment
  MagneticMoment: Qudt.quantityKindFromLocalnameRequired("MagneticMoment"),
  // Mass Attenuation Coefficient
  MassAttenuationCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "MassAttenuationCoefficient"
  ),
  // Electric Charge Surface Density
  ElectricChargeSurfaceDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargeSurfaceDensity"
  ),
  // Electric Susceptibility
  ElectricSusceptibility: Qudt.quantityKindFromLocalnameRequired(
    "ElectricSusceptibility"
  ),
  // Electric Flux
  ElectricFlux: Qudt.quantityKindFromLocalnameRequired("ElectricFlux"),
  // Adaptation
  Adaptation: Qudt.quantityKindFromLocalnameRequired("Adaptation"),
  // Gustatory Threshold
  GustatoryThreshold:
    Qudt.quantityKindFromLocalnameRequired("GustatoryThreshold"),
  // Ion Current
  IonCurrent: Qudt.quantityKindFromLocalnameRequired("IonCurrent"),
  // Inverse Length Temperature
  InverseLengthTemperature: Qudt.quantityKindFromLocalnameRequired(
    "InverseLengthTemperature"
  ),
  // Normal Stress
  NormalStress: Qudt.quantityKindFromLocalnameRequired("NormalStress"),
  // Volumetric Heat Capacity
  VolumetricHeatCapacity: Qudt.quantityKindFromLocalnameRequired(
    "VolumetricHeatCapacity"
  ),
  // Electric Quadrupole Moment
  ElectricQuadrupoleMoment: Qudt.quantityKindFromLocalnameRequired(
    "ElectricQuadrupoleMoment"
  ),
  // Chemical Affinity
  ChemicalAffinity: Qudt.quantityKindFromLocalnameRequired("ChemicalAffinity"),
  // Time Percentage
  TimePercentage: Qudt.quantityKindFromLocalnameRequired("TimePercentage"),
  // Drag Force
  DragForce: Qudt.quantityKindFromLocalnameRequired("DragForce"),
  // Fractional Mass (Stage 3)
  FractionalMass_Stage3: Qudt.quantityKindFromLocalnameRequired(
    "FractionalMass_Stage3"
  ),
  // Electric Flux Density
  ElectricFluxDensity: Qudt.quantityKindFromLocalnameRequired(
    "ElectricFluxDensity"
  ),
  // Force Per Area
  ForcePerArea: Qudt.quantityKindFromLocalnameRequired("ForcePerArea"),
  // Microbial Formation
  MicrobialFormation:
    Qudt.quantityKindFromLocalnameRequired("MicrobialFormation"),
  // Second Polar Moment of Area
  SecondPolarMomentOfArea: Qudt.quantityKindFromLocalnameRequired(
    "SecondPolarMomentOfArea"
  ),
  // Turns
  Turns: Qudt.quantityKindFromLocalnameRequired("Turns"),
  // Grand Canonical Partition Function
  GrandCanonicalPartitionFunction: Qudt.quantityKindFromLocalnameRequired(
    "GrandCanonicalPartitionFunction"
  ),
  // Linear Density
  LinearDensity: Qudt.quantityKindFromLocalnameRequired("LinearDensity"),
  // Length
  Length: Qudt.quantityKindFromLocalnameRequired("Length"),
  // Emissivity
  Emissivity: Qudt.quantityKindFromLocalnameRequired("Emissivity"),
  // Phase speed of sound
  PhaseSpeedOfSound:
    Qudt.quantityKindFromLocalnameRequired("PhaseSpeedOfSound"),
  // Exhaust Gases Specific Heat
  ExhaustGasesSpecificHeat: Qudt.quantityKindFromLocalnameRequired(
    "ExhaustGasesSpecificHeat"
  ),
  // Relative Partial Pressure
  RelativePartialPressure: Qudt.quantityKindFromLocalnameRequired(
    "RelativePartialPressure"
  ),
  // Vision Threshods
  VisionThreshods: Qudt.quantityKindFromLocalnameRequired("VisionThreshods"),
  // Relative Molecular Mass
  RelativeMolecularMass: Qudt.quantityKindFromLocalnameRequired(
    "RelativeMolecularMass"
  ),
  // Center of Mass (CoM)
  CENTER__OF__MASS: Qudt.quantityKindFromLocalnameRequired("CENTER-OF-MASS"),
  // Specific Impulse by Weight
  SpecificImpulseByWeight: Qudt.quantityKindFromLocalnameRequired(
    "SpecificImpulseByWeight"
  ),
  // Lattice Plane Spacing
  LatticePlaneSpacing: Qudt.quantityKindFromLocalnameRequired(
    "LatticePlaneSpacing"
  ),
  // Nozzle Throat Cross-sectional Area
  NozzleThroatCrossSectionalArea: Qudt.quantityKindFromLocalnameRequired(
    "NozzleThroatCrossSectionalArea"
  ),
  // Cartesian Area
  CartesianArea: Qudt.quantityKindFromLocalnameRequired("CartesianArea"),
  // Predicted Mass
  PREDICTED__MASS: Qudt.quantityKindFromLocalnameRequired("PREDICTED-MASS"),
  // Speed
  Speed: Qudt.quantityKindFromLocalnameRequired("Speed"),
  // Total Cross-section
  TotalCrossSection:
    Qudt.quantityKindFromLocalnameRequired("TotalCrossSection"),
  // Magnetomotive Force
  MagnetomotiveForce:
    Qudt.quantityKindFromLocalnameRequired("MagnetomotiveForce"),
  // Molecular Viscosity
  MolecularViscosity:
    Qudt.quantityKindFromLocalnameRequired("MolecularViscosity"),
  // Specific heat capacity at constant pressure
  SpecificHeatCapacityAtConstantPressure:
    Qudt.quantityKindFromLocalnameRequired(
      "SpecificHeatCapacityAtConstantPressure"
    ),
  // Diastolic Blood Pressure
  DiastolicBloodPressure: Qudt.quantityKindFromLocalnameRequired(
    "DiastolicBloodPressure"
  ),
  // Energy Fluence Rate
  EnergyFluenceRate:
    Qudt.quantityKindFromLocalnameRequired("EnergyFluenceRate"),
  // Area Temperature
  AreaTemperature: Qudt.quantityKindFromLocalnameRequired("AreaTemperature"),
  // Sound volume velocity
  SoundVolumeVelocity: Qudt.quantityKindFromLocalnameRequired(
    "SoundVolumeVelocity"
  ),
  // Force Per Area Time
  ForcePerAreaTime: Qudt.quantityKindFromLocalnameRequired("ForcePerAreaTime"),
  // Nozzle Throat Diameter
  NozzleThroatDiameter: Qudt.quantityKindFromLocalnameRequired(
    "NozzleThroatDiameter"
  ),
  // Population
  Population: Qudt.quantityKindFromLocalnameRequired("Population"),
  // Energy per electric charge
  EnergyPerElectricCharge: Qudt.quantityKindFromLocalnameRequired(
    "EnergyPerElectricCharge"
  ),
  // Angular Wavenumber
  AngularWavenumber:
    Qudt.quantityKindFromLocalnameRequired("AngularWavenumber"),
  // Center of Gravity in the Y axis
  CENTER__OF__GRAVITY_Y: Qudt.quantityKindFromLocalnameRequired(
    "CENTER-OF-GRAVITY_Y"
  ),
  // Neutron Yield per Fission
  NeutronYieldPerFission: Qudt.quantityKindFromLocalnameRequired(
    "NeutronYieldPerFission"
  ),
  // g-Factor of Nucleus
  GFactorOfNucleus: Qudt.quantityKindFromLocalnameRequired("GFactorOfNucleus"),
  // Loss Angle
  LossAngle: Qudt.quantityKindFromLocalnameRequired("LossAngle"),
  // Source Voltage
  SourceVoltage: Qudt.quantityKindFromLocalnameRequired("SourceVoltage"),
  // Absolute Humidity
  AbsoluteHumidity: Qudt.quantityKindFromLocalnameRequired("AbsoluteHumidity"),
  // Volume per Unit Area
  VolumePerArea: Qudt.quantityKindFromLocalnameRequired("VolumePerArea"),
  // Admittance
  Admittance: Qudt.quantityKindFromLocalnameRequired("Admittance"),
  // Pressure Coefficient
  PressureCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "PressureCoefficient"
  ),
  // Molar Mass
  MolarMass: Qudt.quantityKindFromLocalnameRequired("MolarMass"),
  // Information flow rate
  InformationFlowRate: Qudt.quantityKindFromLocalnameRequired(
    "InformationFlowRate"
  ),
  // Residual Resistivity
  ResidualResistivity: Qudt.quantityKindFromLocalnameRequired(
    "ResidualResistivity"
  ),
  // Structural Efficiency
  StructuralEfficiency: Qudt.quantityKindFromLocalnameRequired(
    "StructuralEfficiency"
  ),
  // Electric Polarization
  ElectricPolarization: Qudt.quantityKindFromLocalnameRequired(
    "ElectricPolarization"
  ),
  // Propellant Mass
  PropellantMass: Qudt.quantityKindFromLocalnameRequired("PropellantMass"),
  // Dose Equivalent Quality Factor
  DoseEquivalentQualityFactor: Qudt.quantityKindFromLocalnameRequired(
    "DoseEquivalentQualityFactor"
  ),
  // Density Of The Exhaust Gases
  DensityOfTheExhaustGases: Qudt.quantityKindFromLocalnameRequired(
    "DensityOfTheExhaustGases"
  ),
  // Mass Absorption Coefficient
  MassAbsorptionCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "MassAbsorptionCoefficient"
  ),
  // Electric charge per area
  ElectricChargePerArea: Qudt.quantityKindFromLocalnameRequired(
    "ElectricChargePerArea"
  ),
  // Charge Number
  ChargeNumber: Qudt.quantityKindFromLocalnameRequired("ChargeNumber"),
  // Thermal Insulance
  ThermalInsulance: Qudt.quantityKindFromLocalnameRequired("ThermalInsulance"),
  // Poisson Ratio
  PoissonRatio: Qudt.quantityKindFromLocalnameRequired("PoissonRatio"),
  // Weight
  Weight: Qudt.quantityKindFromLocalnameRequired("Weight"),
  // Warping Moment
  WarpingMoment: Qudt.quantityKindFromLocalnameRequired("WarpingMoment"),
  // Vorticity
  Vorticity: Qudt.quantityKindFromLocalnameRequired("Vorticity"),
  // InternalConversionFactor
  InternalConversionFactor: Qudt.quantityKindFromLocalnameRequired(
    "InternalConversionFactor"
  ),
  // Isothermal compressibility
  IsothermalCompressibility: Qudt.quantityKindFromLocalnameRequired(
    "IsothermalCompressibility"
  ),
  // Thermal Diffusion Coefficient
  ThermalDiffusionRatioCoefficient: Qudt.quantityKindFromLocalnameRequired(
    "ThermalDiffusionRatioCoefficient"
  ),
  // Plane Angle
  PlaneAngle: Qudt.quantityKindFromLocalnameRequired("PlaneAngle"),
  // Spin Quantum Number
  NuclearSpinQuantumNumber: Qudt.quantityKindFromLocalnameRequired(
    "NuclearSpinQuantumNumber"
  ),
};

// Prefixes
{
  let prefix: Prefix;
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Atto",
    new Decimal("1.0E-18"),
    "a",
    "Optional[a]",
    undefined
  );
  prefix.addLabel(new LangString("Atto", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Atto", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Centi",
    new Decimal("0.010"),
    "c",
    "Optional[c]",
    undefined
  );
  prefix.addLabel(new LangString("Centi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Centi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Deca",
    new Decimal("10"),
    "da",
    "Optional[da]",
    undefined
  );
  prefix.addLabel(new LangString("Deca", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Deca", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Deci",
    new Decimal("0.10"),
    "d",
    "Optional[d]",
    undefined
  );
  prefix.addLabel(new LangString("Deci", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Deci", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Deka",
    new Decimal("10"),
    "da",
    "Optional[da]",
    undefined
  );
  prefix.addLabel(new LangString("Deka", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Deka", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Exa",
    new Decimal("1.0E+18"),
    "E",
    "Optional[E]",
    undefined
  );
  prefix.addLabel(new LangString("Exa", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Exa", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Exbi",
    new Decimal("152921504606846976"),
    "Ei",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Exbi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Exbi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Femto",
    new Decimal("1.0E-15"),
    "f",
    "Optional[f]",
    undefined
  );
  prefix.addLabel(new LangString("Femto", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Femto", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Gibi",
    new Decimal("1073741824"),
    "Gi",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Gibi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Gibi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Giga",
    new Decimal("1.0E+9"),
    "G",
    "Optional[G]",
    undefined
  );
  prefix.addLabel(new LangString("Giga", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Giga", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Hecto",
    new Decimal("1.0E+2"),
    "h",
    "Optional[h]",
    undefined
  );
  prefix.addLabel(new LangString("Hecto", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Hecto", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Kibi",
    new Decimal("1024"),
    "Ki",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Kibi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Kibi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Kilo",
    new Decimal("1.0E+3"),
    "k",
    "Optional[k]",
    undefined
  );
  prefix.addLabel(new LangString("Kilo", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Kilo", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Mebi",
    new Decimal("1048576"),
    "Mi",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Mebi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Mebi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Mega",
    new Decimal("1.0E+6"),
    "M",
    "Optional[M]",
    undefined
  );
  prefix.addLabel(new LangString("Mega", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Mega", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Micro",
    new Decimal("0.0000010"),
    "μ",
    "Optional[u]",
    undefined
  );
  prefix.addLabel(new LangString("Micro", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Micro", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Milli",
    new Decimal("0.0010"),
    "m",
    "Optional[m]",
    undefined
  );
  prefix.addLabel(new LangString("Milli", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Milli", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Nano",
    new Decimal("1.0E-9"),
    "n",
    "Optional[n]",
    undefined
  );
  prefix.addLabel(new LangString("Nano", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Nano", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Pebi",
    new Decimal("125899906842624"),
    "Pi",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Pebi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Pebi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Peta",
    new Decimal("1.0E+15"),
    "P",
    "Optional[P]",
    undefined
  );
  prefix.addLabel(new LangString("Peta", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Peta", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Pico",
    new Decimal("1.0E-12"),
    "p",
    "Optional[p]",
    undefined
  );
  prefix.addLabel(new LangString("Pico", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Pico", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Tebi",
    new Decimal("1099511627776"),
    "Ti",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Tebi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Tebi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Tera",
    new Decimal("1.0E+12"),
    "T",
    "Optional[T]",
    undefined
  );
  prefix.addLabel(new LangString("Tera", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Tera", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Yobi",
    new Decimal("1208925819614629174706176"),
    "Yi",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Yobi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Yobi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Yocto",
    new Decimal("1.0E-24"),
    "y",
    "Optional[y]",
    undefined
  );
  prefix.addLabel(new LangString("Yocto", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Yocto", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Yotta",
    new Decimal("1.0E+24"),
    "Y",
    "Optional[Y]",
    undefined
  );
  prefix.addLabel(new LangString("Yotta", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Yotta", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Zebi",
    new Decimal("1180591620717411303424"),
    "Zi",
    "Optional.empty",
    undefined
  );
  prefix.addLabel(new LangString("Zebi", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Zebi", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Zepto",
    new Decimal("1.0E-21"),
    "z",
    "Optional[z]",
    undefined
  );
  prefix.addLabel(new LangString("Zepto", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Zepto", prefix);
  prefix = new Prefix(
    "http://qudt.org/vocab/prefix/Zetta",
    new Decimal("1.0E+21"),
    "Z",
    "Optional[Z]",
    undefined
  );
  prefix.addLabel(new LangString("Zetta", "en"));
  config.prefixes.set("http://qudt.org/vocab/prefix/Zetta", prefix);
}

export const Prefixes = {
  // Exbi
  Exbi: Qudt.prefixFromLocalnameRequired("Exbi"),
  // Yobi
  Yobi: Qudt.prefixFromLocalnameRequired("Yobi"),
  // Deca
  Deca: Qudt.prefixFromLocalnameRequired("Deca"),
  // Zepto
  Zepto: Qudt.prefixFromLocalnameRequired("Zepto"),
  // Tebi
  Tebi: Qudt.prefixFromLocalnameRequired("Tebi"),
  // Yocto
  Yocto: Qudt.prefixFromLocalnameRequired("Yocto"),
  // Gibi
  Gibi: Qudt.prefixFromLocalnameRequired("Gibi"),
  // Kilo
  Kilo: Qudt.prefixFromLocalnameRequired("Kilo"),
  // Atto
  Atto: Qudt.prefixFromLocalnameRequired("Atto"),
  // Zetta
  Zetta: Qudt.prefixFromLocalnameRequired("Zetta"),
  // Milli
  Milli: Qudt.prefixFromLocalnameRequired("Milli"),
  // Mega
  Mega: Qudt.prefixFromLocalnameRequired("Mega"),
  // Yotta
  Yotta: Qudt.prefixFromLocalnameRequired("Yotta"),
  // Giga
  Giga: Qudt.prefixFromLocalnameRequired("Giga"),
  // Pico
  Pico: Qudt.prefixFromLocalnameRequired("Pico"),
  // Deka
  Deka: Qudt.prefixFromLocalnameRequired("Deka"),
  // Nano
  Nano: Qudt.prefixFromLocalnameRequired("Nano"),
  // Deci
  Deci: Qudt.prefixFromLocalnameRequired("Deci"),
  // Pebi
  Pebi: Qudt.prefixFromLocalnameRequired("Pebi"),
  // Micro
  Micro: Qudt.prefixFromLocalnameRequired("Micro"),
  // Peta
  Peta: Qudt.prefixFromLocalnameRequired("Peta"),
  // Femto
  Femto: Qudt.prefixFromLocalnameRequired("Femto"),
  // Mebi
  Mebi: Qudt.prefixFromLocalnameRequired("Mebi"),
  // Kibi
  Kibi: Qudt.prefixFromLocalnameRequired("Kibi"),
  // Centi
  Centi: Qudt.prefixFromLocalnameRequired("Centi"),
  // Tera
  Tera: Qudt.prefixFromLocalnameRequired("Tera"),
  // Hecto
  Hecto: Qudt.prefixFromLocalnameRequired("Hecto"),
  // Zebi
  Zebi: Qudt.prefixFromLocalnameRequired("Zebi"),
  // Exa
  Exa: Qudt.prefixFromLocalnameRequired("Exa"),
};

function getPrefix(iri: string): Prefix {
  const prefix: Prefix | undefined = config.prefixes.get(iri);
  if (!prefix) {
    throw `prefix ${iri} referenced but not loaded`;
  }
  return prefix;
}

function getUnit(iri: string): Unit {
  const unit: Unit | undefined = config.units.get(iri);
  if (!unit) {
    throw `unit ${iri} referenced but not loaded`;
  }
  return unit;
}

function getQuantityKind(iri: string): QuantityKind {
  const quantityKind: QuantityKind | undefined = config.quantityKinds.get(iri);
  if (!quantityKind) {
    throw `quantityKind ${iri} referenced but not loaded`;
  }
  return quantityKind;
}

// Connect objects
for (const unit of config.units.values()) {
  !!unit.prefixIri && unit.setPrefix(getPrefix(unit.prefixIri));
  !!unit.scalingOfIri && unit.setScalingOf(getUnit(unit.scalingOfIri));
  for (const qkIri of unit.quantityKindIris) {
    unit.addQuantityKind(getQuantityKind(qkIri));
  }
}

// Set factor units

{
  let unit: Unit;
  unit = getUnit("http://qudt.org/vocab/unit/A-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-M2-PER-J-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-J");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-M2-K2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-MilliM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-PER-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/AC-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/AC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ANGSTROM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ANGSTROM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/AT-PER-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/AT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/AT-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/AT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ATM-M3-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ATM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A_Ab-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Ab"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A_Ab-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Ab"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/A_Stat-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Stat"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/AttoJ-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/AttoJ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BAR-L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BAR-M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BAR-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BAR-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_UK_PET"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_UK_PET"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_UK_PET"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_UK_PET-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_UK_PET"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_US-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_US_PET-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_US_PET"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BBL_US_PET-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BBL_US_PET"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BEAT-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BEAT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BIT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BIT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BQ");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BQ-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BQ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BQ-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BQ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BQ-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BQ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BQ-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BQ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BQ-SEC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BQ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BREATH-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BREATH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-FT-PER-FT2-HR-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-HR-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-FT2-SEC-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-HR-FT2-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-IN-PER-SEC-FT2-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-HR-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-FT2-SEC-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-FT3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-HR-FT2-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-LB_F-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-MOL-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_IT-PER-SEC-FT2-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-FT-PER-FT2-HR-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-FT-PER-HR-FT2-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-HR-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-IN-PER-FT2-SEC-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-PER-FT3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-PER-LB");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-PER-LB-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BTU_TH-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_US_DRY-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_US_DRY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_US_DRY-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_US_DRY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_US_DRY-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_US_DRY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/BU_US_DRY-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BU_US_DRY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-M2-PER-V");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-KiloGM-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-MilliM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C-PER-MilliM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C2-M-PER-J");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C3-M-PER-J2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C4-M4-PER-J3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 4)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 4)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_IT-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_IT-PER-GM-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_IT-PER-GM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_IT-PER-SEC-CentiM2-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-CentiM-SEC-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-G");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/G"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-GM-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-GM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CAL_TH-PER-SEC-CentiM2-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CASES-PER-1000I-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/1000I"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CASES"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CD-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CD-PER-LM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CD-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C_Ab-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C_Ab"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C_Stat-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C_Stat"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/C_Stat-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C_Stat"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM-PER-KiloYR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloYR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM-SEC-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM2-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM2-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-MOL-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiM3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiN-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/CentiPOISE-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiPOISE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEATHS-PER-1000000I-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/1000000I"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEATHS"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEATHS-PER-1000I-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/1000I"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEATHS"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-KiloGM-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C-WK");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(
      getUnit("http://qudt.org/vocab/unit/DEG_C_GROWING_CEREAL"),
      1
    )
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_IT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-HR-FT2-PER-BTU_TH");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_TH"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-HR-PER-BTU_IT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_F-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_R-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_R-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DEG_R-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DYN-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DYN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DYN-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DYN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DYN-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DYN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DYN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DYN-SEC-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DYN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DecaM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DecaM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciBAR-PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciBAR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciL-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciM3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciN-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/DeciS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciS"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-CentiM2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-G");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/G"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-GM-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/ERG-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ERG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/EV-PER-ANGSTROM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ANGSTROM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/EV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/EV-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/EV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/EV-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/EV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/EV-PER-T");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/EV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/EV-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/EV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FARAD-PER-KiloM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FARAD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FARAD-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FARAD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FARAD_Ab-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FARAD_Ab"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FRAME-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FRAME"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-PER-FT2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-LB_F-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PDL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PDL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PER-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-HR-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-HR-DEG_F-PER-BTU_IT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-PER-BTU_IT-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BTU_IT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT2-SEC-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3-PER-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3-PER-MIN-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FT3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FemtoGM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FemtoGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FemtoGM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FemtoGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FemtoMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FemtoMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/FemtoMOL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FemtoMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_US-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_US-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GAL_US-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_US-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_US-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GI_US-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GI_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-CentiM2-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-DeciM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-KiloM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM_Carbon-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM_Carbon"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM_F-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GM_Nitrogen-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM_Nitrogen"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GRAIN-PER-GAL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GRAIN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GRAIN-PER-GAL_US");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GRAIN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GRAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GRAY-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GRAY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GigaBIT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GigaBIT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GigaC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GigaC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GigaHZ-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GigaHZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/GigaW-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GigaW"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/H");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/H-PER-KiloOHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/H"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloOHM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/H-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/H"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/H-PER-OHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/H"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OHM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HART-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HART"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HR-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HZ");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HZ-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HZ-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HZ-PER-T");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HZ-PER-V");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/H_Stat-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/H_Stat"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HectoPA-L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HectoPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HectoPA-M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HectoPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HectoPA-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HectoPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HectoPA-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HectoPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/HectoPA-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HectoPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN-PER-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN3-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN3-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IN4");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 4)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IU-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IU"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/IU-PER-MilliGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IU"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-M-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-M2-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-CentiM2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-KiloGM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-KiloGM-K-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-KiloGM-K-PA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-M3-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-M4");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -4)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-MOL-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-T");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-PER-T2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/J-SEC-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-M-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-M-PER-W");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-M2-PER-KiloGM-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PA-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-T");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-PER-W");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/K2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KAT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KIP_F-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KIP_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KN-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloA-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloA-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloA-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloBIT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloBIT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloBYTE-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloBYTE"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloC-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM-SEC-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-CentiM2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-GM-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-MOL-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL_IT-PER-HR-M-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL_IT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL_TH-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL_TH"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL_TH-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloCAL_TH-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL_TH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloEV-PER-MicroM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloEV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-M-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-M2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-MilliM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-DeciM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-KiloM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-KiloMOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloMOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M2-PA-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M2-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-M3-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-SEC-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM2-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM_F-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM_F-M-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM_F-M-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM_F-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM_F-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloGM_F-PER-MilliM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloHZ-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloHZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloJ-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloJ-PER-KiloGM-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloJ-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloJ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloL-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloLB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloLB_F-FT-PER-LB");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloLB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloLB_F-PER-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloLB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloLB_F-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloLB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloM-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloM3-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloMOL-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloMOL-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloMOL-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloMOL-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloN-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloN-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloPA-M2-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloPA-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloPA-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloPA-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloS"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloV-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloV-A-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloV-A_Reactive");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Reactive"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloV-A_Reactive-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Reactive"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloV-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloW-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloW-HR-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloW"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/KiloWB-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloWB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-MicroMOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/L-PER-SEC-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-DEG_R");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_R"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-MOL-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-FT-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-FT-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-FT3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-GAL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-GAL_UK");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_UK"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-GAL_US");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-IN3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB-PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-IN2-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-IN2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-PER-LB");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-SEC-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LB_F-SEC-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LB_F"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LM-PER-W");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LM-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LUX");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/LUX-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/LUX"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-K-PER-W");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-FARAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FARAD"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M-PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-HR-DEG_C-PER-KiloCAL_IT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloCAL_IT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-HZ");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-HZ2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-HZ3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-HZ4");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), 4)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-K-PER-W");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-GM_DRY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM_DRY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-HZ");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-HZ-DEG");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-HZ2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HZ"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-J");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-N");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-SR-J");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-PER-V-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-SEC-PER-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M2-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-KiloGM-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M3-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M4");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 4)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M4-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 4)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M5");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 5)
  );
  unit = getUnit("http://qudt.org/vocab/unit/M6");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 6)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MDOLLAR-PER-FLIGHT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FLIGHT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MDOLLAR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MI-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MI"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MI-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MI"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MI2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MI"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MI3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MI"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MI_N-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MI_N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MI_N-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MI_N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-DEG_C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_C"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-DeciM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-GM-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-KiloGM-PA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-M-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M2-SEC-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-M3-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MOL-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaA-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaBIT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaBIT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaC-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaEV-FemtoM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FemtoM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaEV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaEV-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaEV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaEV-PER-SpeedOfLight");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaEV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SpeedOfLight"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaGM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaHZ-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaHZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaHZ-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaHZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaHZ-PER-T");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaHZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaJ-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaJ-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaJ-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaJ-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaJ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaJ-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaJ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaN-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaPA-L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaPA-M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaPA-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaPA-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaV-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaV-A-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaV-A_Reactive");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Reactive"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaV-A_Reactive-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Reactive"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaV-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MegaW-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroBQ-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroBQ-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroC-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroFARAD-PER-KiloM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroFARAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroFARAD-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroFARAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroG-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGAL-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGAL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-L-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-M3-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroGM-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroH-PER-KiloOHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloOHM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroH"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroH-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroH"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroH-PER-OHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OHM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM-PER-L-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM-PER-N");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM3-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroM3-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-GM-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-GM-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-L-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-M2-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-M2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-MicroMOL-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroMOL-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroN-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroS-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroSV-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroSV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroV-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MicroW-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliA-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliA-PER-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliA-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBAR-L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBAR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBAR-M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBAR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBAR-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBAR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBAR-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBAR"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBQ-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBQ-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBQ-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliBQ-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliC-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliC-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGAL-PER-MO");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MO"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGAL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-DeciL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DeciL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M2-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M3-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M3-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-M3-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliGM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliH-PER-KiloOHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloOHM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliH"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliH-PER-OHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliH"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OHM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-CentiM2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliL-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM-PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM2-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM3-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliM4");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), 4)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-M2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-M3-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliMOL-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliN-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliN-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliN"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliPA-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliPA-SEC-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliPA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliRAD_R-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliRAD_R"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliS-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliV-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliV-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliW-PER-CentiM2-MicroM-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliW"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliW-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliW"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MilliW-PER-M2-NanoM-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliW"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/MillionUSD-PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MillionUSD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-PER-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-PER-M-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-PER-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-SEC-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M-SEC-PER-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M2-PER-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-M2-PER-KiloGM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-C");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/C"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-MilliM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-PER-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-SEC-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-SEC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/N-SEC-PER-RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NAT-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NAT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-CentiM-KiloYR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloYR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-HectoGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HectoGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-KiloM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-MicroL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-MilliGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-NanoL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NUM-PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NUM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoBQ-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoBQ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoFARAD-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoFARAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-M2-PA-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-MicroL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoGM-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoH-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoH"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoM-PER-CentiM-PSI");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoM-PER-MilliM-MegaPA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MegaPA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-CentiM3-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-GM-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-L-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-L-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-MicroGM-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoMOL-PER-MicroMOL-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoS-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/NanoS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OERSTED-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OERSTED"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OHM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OHM-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OHM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OHM-M2-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OHM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-GAL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-GAL_UK");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_UK"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-GAL_US");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GAL_US"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-IN3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-YD2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ-PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_F-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_F"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/OZ_VOL_US-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/OZ_VOL_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/N"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-M-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-M-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-SEC-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-SEC-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA-SEC-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA2-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PA2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PDL-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PDL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-ANGSTROM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/ANGSTROM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-CentiM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-FT3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-GigaEV2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GigaEV"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-H");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/H"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-IN3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-J-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-KiloM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-KiloV-A-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloV"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M-NanoM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M-NanoM-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M2-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-M3-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MILLE-PER-PSI");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MILLE"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MILLE"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MO");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MO"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MicroM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MicroMOL-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MilliM3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-MilliSEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliSEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-NanoM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-PA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-PA-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-PSI");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-PicoM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-PlanckMass2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PlanckMass"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-SEC-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-SEC-M2-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-SEC-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-T-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-T-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-WB");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WB"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-WK");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WK"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PER-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PERCENT-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PERCENT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PERCENT-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PERCENT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PERCENT-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PERCENT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PERCENT-PER-WK");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PERCENT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WK"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_US-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_US-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PINT_US-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PINT_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_US_DRY-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_US_DRY"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_US_DRY-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_US_DRY"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_US_DRY-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_US_DRY"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PK_US_DRY-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PK_US_DRY"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/POISE-PER-BAR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/BAR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/POISE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PPM-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PPM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PPTH-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PPTH"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PPTM-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PPTM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PSI-IN3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PSI-L-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PSI-M3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PSI-PER-PSI");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PSI-YD3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PSI"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoA-PER-MicroMOL-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroMOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoFARAD-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoFARAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoGM-PER-GM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/GM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoGM-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoGM-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoGM-PER-MilliL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoGM"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-L-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-L-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-M-W-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-M2-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoMOL-PER-M3-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoMOL"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoPA-PER-KiloM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoPA"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoS-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoS"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoW-PER-CentiM2-L");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/L"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/PicoW-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PicoW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_UK-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_UK-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_UK-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_US-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_US-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/QT_US-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/QT_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-M2-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-M2-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/RAD-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/REV-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/REV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/REV-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/REV"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/REV-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/REV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/REV-PER-SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/REV"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/S");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/S-M2-PER-MOL");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MOL"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/S"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/S-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/S"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/S-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/S"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SAMPLE-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SAMPLE"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SEC-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SEC-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SEC-PER-RAD-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/RAD"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SEC2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SHANNON-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SHANNON"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-FT");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-FT-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-FT3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SLUG-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SLUG"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/SV");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/T");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WB"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/T-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/T-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/T"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-HA-YR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YR"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TONNE-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TONNE"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_LONG-PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_LONG"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_Metric-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_Metric"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_Metric-PER-HA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_Metric"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_Metric-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_Metric"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_Metric-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_Metric"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_Metric-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_Metric"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_Metric-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_Metric"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_SHORT-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_SHORT"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_SHORT-PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_SHORT"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_UK-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_UK"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_UK-PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_UK"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_US-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_US-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_US"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TON_US-PER-YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TON_US"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), -3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/TeraW-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/TeraW"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/USDollar-SameDay");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SameDay"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/USDollar"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-A");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-A-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-A_Reactive");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Reactive"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-A_Reactive-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A_Reactive"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-IN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-MicroSEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MicroSEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V-SEC-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V2-PER-K2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V_Ab-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V_Ab"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V_Ab-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V_Ab"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V_Stat-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V_Stat"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/V_Stat-PER-CentiM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/V_Stat"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-HR-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-M-PER-M2-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-M2-PER-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-CentiM2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/CentiM"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-FT2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/FT"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-IN2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/IN"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-KiloGM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/KiloGM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-K");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-K4");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/K"), -4)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-M-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-NanoM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-NanoM-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/NanoM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-PA");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/PA"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M2-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-M3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -3)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-PER-SR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/W-SEC-PER-M2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -2)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/W"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/WB");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/J"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/A"), -1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/WB-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), 1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/WB-PER-M");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/M"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/WB-PER-MilliM");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MilliM"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/WB"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD-PER-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 1)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD2");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 2)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD3");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD3-PER-DAY");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DAY"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD3-PER-DEG_F");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/DEG_F"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD3-PER-HR");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/HR"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD3-PER-MIN");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/MIN"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
  unit = getUnit("http://qudt.org/vocab/unit/YD3-PER-SEC");
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/SEC"), -1)
  );
  unit.addFactorUnit(
    new FactorUnit(getUnit("http://qudt.org/vocab/unit/YD"), 3)
  );
}
