# releases the project with specified version bump
# deploys it to the central npm repository
name: Release and deploy to npm repository
on:
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type (one of): patch, minor, major, prepatch, preminor, premajor, prerelease'
        required: true
    secrets:
      QUDTLIB_BOT_GITHUB_TOKEN:
        required: true
      NPMJS_ACCESS_TOKEN:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      # Set up java with maven cache
      - name: Checkout
        uses: actions/checkout@v3
          # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          registry-url: https://registry.npmjs.org/
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Build and run tests
        run: npm run build-complete

      # configure git
      - name: setup git config
        run: |
          git config user.name ${{ github.actor }}
          git config user.email "<>"

      # Bump package version
      # Use tag latest
      - name: Bump release version
        if: startsWith(github.event.inputs.release-type, 'pre') != true
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=latest" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      # Bump package pre-release version
      # Use tag beta for pre-release versions
      - name: Bump pre-release version
        if: startsWith(github.event.inputs.release-type, 'pre')
        run: |
          echo "NEW_VERSION=$(npm --no-git-tag-version --preid=beta version $RELEASE_TYPE)" >> $GITHUB_ENV
          echo "RELEASE_TAG=beta" >> $GITHUB_ENV
        env:
          RELEASE_TYPE: ${{ github.event.inputs.release-type }}

      - name: Stash changes so we create a clean branch
        run: git stash

      # because we protect the main branch, the action cannot push to the repository
      # Therefore, we create a branch for the release, and if the release succeeds, we will
      # submit a pull request
      # Note: outputs the name of the new branch as ${{ steps.create_release_branch.outputs.branch_name }}
      - name: create branch for this release
        id: create_release_branch
        run: |
          BRANCH_NAME=release-$NEW_VERSION-$(date +%s)
          git checkout --track -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
      

      # Push to the remote so we create the remote branch without any changes
      # because the create-pull-request action (see below) will only include unpushed
      # changes in the PR
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.QUDTLIB_BOT_GITHUB_TOKEN }}
        run: |
          git push origin

      - name: Apply changes again
        run: git stash pop

      # Update changelog unreleased section with new version
      - name: Update changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: release

      # Apply formatting (changelog was touched)
      - name: Apply format using spotless:apply
        run: mvn spotless:apply -DspotlessFiles='.*CHANGELOG.md'

      # Commit changes
      - name: Commit CHANGELOG.md
        run: |
          git add "CHANGELOG.md"
          git commit -m "Update CHANGELOG.md for release ${{ env.NEW_VERSION }}"

      # Publish version to public repository
      - name: Publish
        run: npx run publish --verbose --access public --tag ${{ env.RELEASE_TAG }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPMJS_ACCESS_TOKEN }}

      # Push repository changes
      - name: Push changes to repository
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin && git push --tags          

      # Read version changelog
      - id: get-changelog
        name: Get version changelog
        uses: superfaceai/release-changelog-action@v1
        with:
          path-to-changelog: CHANGELOG.md
          version: ${{ env.NEW_VERSION }}
          operation: read

      # create the pull request
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          token: ${{ secrets.QUDTLIB_BOT_GITHUB_TOKEN }}
          title: Release ${{ inputs.release_version }}
          base: main
          branch: ${{ steps.create_release_branch.outputs.branch_name }}
          delete-branch: true
          body: |
            # Changes
            
            ${{ steps.get-changelog.outputs.changelog }}
            
            # Release info
            
            Automated release through workflow: '${{ github.workflow }}'
            Triggered by: ${{ github.triggering_actor }}
            New version: ${{ env.NEW_VERSION }}
            
            # Next Steps
            
            Please rebase this PR on top of `main` after checking the [@qudtlib repositories](https://www.npmjs.com/org/qudtlib)  

      # Update GitHub release with changelog
      - name: Update GitHub release documentation
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          body: ${{ steps.get-changelog.outputs.changelog }}
          prerelease: ${{ startsWith(github.event.inputs.release-type, 'pre') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # print the summary
      - name: Print summary
        run: echo "Release ${{ inputs.release_version }} deployed to sonatype staging repo. Please go there, close the repo and publish it." >> $GITHUB_STEP_SUMMARY
